{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a28b5c45-16df-45fd-a0ef-29de78ea275e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "512da5d7-9ee7-4687-9191-32a267940cc7",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b7976d4a-f28a-420b-9d4f-a7a33f23bc02",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e16ba8a7-da96-4151-ad34-5d3796cb24d0"
                }
              }
            ]
          },
          {
            "id": "ee0c409c-6bad-4ad2-8877-982770147dd8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4203c1a7-b8ac-4389-92a4-fbb5e526a3dd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8fac6286-c212-4fba-a028-7c70fdfca708"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d0a0b8bb-ff25-42a3-aa00-41c089c469ef",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "eb9920d9-3ffc-458e-bbd7-ea121dd0a937",
            "name": "Positive Testing",
            "item": [
              {
                "id": "104dca64-957d-4dfc-8e0c-b0f306d33b00",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40b66684-e393-4501-b6be-b4e53f83776a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6173bfa1-a0f0-4f7e-90fb-baca7252e81b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "84ba5ffc-47ae-4dd8-bda3-acced3c4e9a5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a1cac60-1e99-4d26-ae9d-78b4b00a712f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ca3304f7-2b63-40e2-a385-11a836bd0a12",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ac6ea7f2-2e2f-4928-8887-1c3ea9727af4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ea5c3ed-267a-4cfc-b27d-22f8b6f5e898",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c8dbf98b-a620-4aff-93e4-9b6ecbb6371a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b4879cb-50b3-472a-8c33-4537d21e2ee5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bf129bde-d488-4e41-b33a-b6aa0fd257f1"
            }
          }
        ]
      },
      {
        "id": "3201452a-4348-42f2-a440-8f4953ecc23b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b4be3ea0-48d1-410f-9988-a355edefae85",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3e774c3d-0f1f-4fad-92fc-616c9f333933",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d8c9e37b-671e-48c6-9242-b82bf242113f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e94d92f-1959-412f-bf0b-24a2a7b4d4e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09ef7ab7-5b52-4f14-8ea5-cdefe660cd09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d35a25c-9e6a-4a14-9d6b-82d3e61d1997",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3108b8-8207-4d27-b7f2-6b207fd49343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "059a57fc-94b0-4218-9104-440f993d90ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922dbb72-0d37-4abe-9d5c-350f6db30ebe",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c369a4-844b-45f6-b0ed-3dea25ecec05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "025148f0-aab6-4a75-9aef-f51b027cfe9b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1e07c936-8212-4da5-93f2-1885b9a16c3b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "15b66242-35de-482e-8fea-d7fe9b81f0bd",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb853f1-013c-49c1-95c7-5de8e9bd6c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5cfd679b-6d89-4165-a98f-307cc9e0f368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d954d32b-6430-4e69-827e-4b765f08c547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6def871e-33fc-46a8-aaf6-e49cf6345282"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "21940ffa-c047-4fba-b41d-7a813a67d5a9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a687402b-0c1a-407b-a26e-6c0a1d1f90c8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8198798-5639-48a4-8ce2-37327aad636c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "af452462-28e4-4b64-a058-509480f223ab"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b86e643c-649b-47f2-ab2a-828eafc13b55",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "9433c1d6-10ee-4bab-b0cf-687b1a4eb626"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "36be0fad-8b50-46b1-867f-3f30222861ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "07158311-78af-4f93-b407-f0d7d1612fd5"
            }
          }
        ]
      },
      {
        "id": "f57c8cd2-96da-49c7-98d4-5600b5836037",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bb6b3848-b78f-4a8e-be9e-2366a5847214",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ca5a061b-e325-4d6d-86c9-5fac0078ed9c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ae5a95a4-a970-45cc-80ae-66fde7667939",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a663959-30ec-491c-a25b-039c70f55880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0646fa83-82ac-4f9d-b884-3870f5c713f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec38958-5d78-474a-a576-c71e206915b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "04854019-a974-43a7-b365-0806c5daee29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5483c25-c10e-4af5-a112-4a7b0d3826cb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58334cef-2420-4b32-bd61-b2ae1b8353bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc47b711-573c-4666-b9c1-6cc8603cfa3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f66978-d1fd-425c-a6b3-ec482d33d735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "039ca677-8299-44be-9a72-da77f2bb00bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea46aa7-e19c-4fda-aa42-e7cae0a1006c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc46ff6-7c8f-4092-9849-7ed143a8ab1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab35dba8-cf2a-4023-94e5-f72f6d5d29c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4943b077-d025-4379-9556-80424e598acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f452275e-6540-42a1-b692-5fc4f72bfe52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a50e57-ddd5-49f8-b0e6-316660204c15",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b9b370-f97a-4919-a0ea-968bc30e0b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5cad60b-f880-44f9-bc35-cdcef0ac2e72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f1394b-5f9c-4183-b7cd-08c1dda97690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79f01221-2560-47c1-b878-e9e9eb9d83e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55dffe0-172a-4364-8a27-1feef7d590e0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5572fb3-63f5-45ef-a584-d56f914ea3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7151c6ab-d089-4061-b1d1-ca375056e44c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a46cf4-44aa-4348-bcd3-191f0a01e68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17bd493a-c629-4fe7-bae6-78c1e642df6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5af7fd-d7c5-4927-a151-d6a7866c6af4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba34acf4-fc9c-43e5-9515-7ba70310f8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccffc7f6-0c07-4b8d-a070-de9ad168952d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438f9627-5ff6-478c-839f-1cfae5e9211d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "684cdb9b-770a-4b11-ab63-f2ab2128d4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7919e1f-d00a-4f01-85de-1d22f8c86d29",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17281aae-f689-4167-88e0-b3475955fe80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee5b41c-df53-4d05-a3e1-cbcddda23add"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516d9752-ae65-46bf-ac61-357b738ef9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bafc45da-4670-4097-b1ee-b5b7bac6ec3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65962da-5707-468e-acbd-2c171f09d26d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91a98f7-0ab5-4ef2-9579-5e0e8b6ddd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a285225b-b7c6-473a-b6b5-6a046e7cf301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56fa1619-8df2-4107-a384-0ebaed7c8854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "255b446c-863b-4d2c-bf49-900f4e758117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072c49a8-1202-4426-a768-4278b9fda886",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "378fdd7b-afe8-4a6e-8685-82f4056e6416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e553e39-a135-4dc3-b360-6ad897785c1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9a9611-4505-44dd-be0d-529ee4e32165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7046eb20-a485-49f8-a836-5ba58888a40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f14e81-7659-4281-abef-5d067533edfe",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a227d94-8303-4dfa-832b-3d1ddf488777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb24b04-f64f-476c-9d54-71666e257152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c625e92-c0ec-4f80-8ab3-01a2cc165eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9fa3d54d-d21b-4d10-be6b-611b2f49bff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09681f04-3d5e-43e9-86fa-d9caf7ae8bc6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1911277-b56f-4c09-b55b-8f9fac092c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59acad7f-73dd-4d3c-8f2e-c2cc7b0aa633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b05e22d-4193-42fd-bf7e-b5b4c183c18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78f1d423-df67-4116-84ca-790913565ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2b040b-ea38-4ec6-b8a1-07ada7520426",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c64b39d-244f-4bba-9f24-730dfc439470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "889795da-8866-4a2a-a753-8da600ad9913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61fe6c0-492c-4dae-8d7f-b079095560df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee5f8f52-a977-400f-818a-11baa4b1ac12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20365dd7-f8cd-486c-942d-17284c2d440e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "782ce429-0c90-4709-872b-7b6fd2b91743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "283bf51e-c4b3-4c02-8b00-352d4978d0ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69aa686d-076b-434d-8954-1f22c3a2a184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7425c8be-dd94-4701-ac99-6374df4fa769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ea2724-5b1c-42d0-9d46-a9a2832d5498",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db5fba0-1a16-4946-b15e-a451ee656846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "867d6733-7a68-42b1-bc23-392cf9068d72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84cf1d6c-7820-4a86-a76e-5123b4277d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2346218a-4c79-4fa7-ab8f-df403917e77a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd98c8f-4488-4804-b68d-fc91cfaedb61",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d49ba53-0900-40d7-9abf-6ddd79dddd2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1461a8ca-b70f-4be6-bbfa-91832e58f772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d91cd32-da93-47a7-9e33-8df50edc747b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c2dec82-8978-4a23-ab0c-0d2e95395cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b912923-5684-4b28-b09c-0ddb03060837",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac27b1cf-9ff6-4248-b772-5734e6c6eff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b7fbff3-cb4f-4710-8303-9c0840c6ba99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce322768-697e-4716-ac11-41edd0ac5798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d97e94f9-c92c-4c7b-a7f6-dece9d587b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11706b8e-1add-4ef1-bdc9-a18cffa8ca07",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbca94a6-4d00-4d49-bd02-1250bd5d4369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "418877f7-c19d-4ef2-8146-14d0eb2af398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b1744a-7cdb-4e5a-98d4-b67a1d5af9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ccfd973-e884-4b03-bb88-34e0f721f8f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61331c1-2be0-4e75-ad6e-2ca69e8897d0",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9e845b-d0ec-4909-b67e-7f6df18fd0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd041a58-95ce-4d54-96e9-6f2c06037a2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33fbec05-4864-4b3e-8f95-d6ae627ee2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f9b2f71-f1e6-414c-b77c-4f86f88d3d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e22b809-8449-46ae-a07b-a4adb4e383d9",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef259a83-420e-4058-af50-a3680db906d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f7048ed-f7c5-4b3a-958d-04ce3d6f8d8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d23ef02-cce6-44d8-816f-ac3550dfef1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b53f3ce-d317-4b55-aa30-29898a523423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81dda8de-ddd8-46ae-ab8a-84284b0b423e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79fa43e8-3477-412b-8db8-679a047df14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcead668-da39-44c8-9539-9f987ebbc7a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86429e79-8665-495c-9ea9-109fff06df2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f4f8f21-65be-48b5-a660-69c8c242736a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab420fe5-7d2b-4dbf-b0d0-03813e7e53fa",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae95c2c-452a-4e34-9973-5f01fdb88f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53206347-3f43-487e-a099-c33d69bbf5ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb218813-d509-4609-94d9-f24ba76c5372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6c5b05d-e3e4-4186-bdbc-b28bb81ffe2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102c76b9-6ab2-40ad-be5d-4ec3fe8d7dde",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a39fc8-769e-4352-90fc-51b07159fd0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b382cbb-e809-471d-a479-68be70f45ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa58523e-aa13-40dc-936f-fd974066d529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc0a3cda-7376-4672-874f-7bb53887af50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2038036-c3f9-460d-ac3c-4169ece8a8b3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f275c3-2cac-4f33-b59d-217594b0ccab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ef01ff0-168c-4856-b862-4a2b16ff0b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45df083b-89f3-4b46-89db-11c8d01168d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a692ff6d-5779-46af-b425-e90310adfddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73b9db7-1b8b-40f2-81b2-5c70edfc32a3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68889eed-e3e7-482f-ac13-e520d20c9c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e384ceb0-40da-446f-8ca6-0f44dc759603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287a4416-d5df-4289-9e6d-caed9e997307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a41ffa5-519e-4f5b-b8cc-a4746a470c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84405f80-efea-4e9e-a6fc-222c30212b7e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d1a2df-c7fe-4513-bcd3-ca0a58f7759d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b7d42aa-0a76-4810-815a-5bd4d2244f71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f57ec8a-9fce-43d3-b349-e025da9d8cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c018de1d-4504-4672-8f47-d07a5f4e67d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57cc2bc2-3fe7-42d0-aa74-cec0bd0c542b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "083795ba-85d4-400e-8c59-769000ccfb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff88a16-aebf-4ca3-b50e-52fc349a6ba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a522e0-03d4-45c9-a0b8-838be4353001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a5bc361-d179-4fdd-b598-375ec62ef2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851ccb81-2d01-4c1f-bda7-a9d5f268e184",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3db8af3-56a8-4ac0-8622-0a8a90ac1f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "973a0f83-a787-4e35-a723-ae1238e93396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39e9229-ca25-4c20-9ccf-fe1c441d9427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d50082ed-c8f5-47f2-bbfe-1c2d3e491c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212d9343-f6ab-4b3c-a8f9-050785e4da98",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9246dccf-54d2-47f0-b36e-f01ab1f90498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "930f7d37-7d91-4537-b87e-16403f02870f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f8dcb9-23cd-4727-8a8b-22db32854a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b02e7e2-75aa-4246-9468-94e0d5a68b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93046569-ef1e-4a2b-90f1-bd77f0844bfa",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2292c7e3-76bd-4d2f-af7f-126567ef9d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68dbe3f8-cba4-46f8-b55f-ceac46526830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b4465f-c391-4fe8-93a3-58908e38402f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a232b60-c5c9-45a8-be4b-e668214ed203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "164fbb23-a0c9-4016-9654-0199eea5464f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5d7fbd-5dc6-4761-966e-8f2ef2c51fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57d0fcf-459b-46f1-8de5-b053d0864a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a937e53a-1345-4e35-be67-063eb02ddcf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "39f28b98-96a8-4a08-a819-054e185cfc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f793ef81-a79a-4116-8963-935c8dea2b48",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b00bf21-d891-462a-8374-6a3a5f91f029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e56c025-3332-4f50-9386-9c1419619e72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b978266b-06df-491d-a712-31d548f1b2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a3d5d6a-2c7f-4720-94d1-1e9cf7cc4458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001c0dd4-20c3-4162-a7e0-2ca3a7344d34",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e2dad3-75a3-406d-9014-bdc3975f4e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76bf0736-d0ce-419f-b4d2-ccb4fe8a2c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2092959-7f6f-4404-adc2-b8cc49de94c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a67275d7-0e30-458e-b7f4-cae6d771be90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7735ee94-f132-48c3-b839-f4f4ec0d7c83",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36267c9a-7950-4090-b342-47dcb485eb64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de2b86c8-9e0d-48ac-9d9d-e6144f438781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030046b7-c902-4317-942e-1fe85b874aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5caabb15-f529-4285-b37b-3c3653743df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d40ed08-7f0d-4340-88d8-572af0b23211",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0ad2ba-b21c-4a11-bb90-165b6090cdba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69eb0424-cf55-4d65-bbcf-f5df4e930ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b7a7f5-d554-4c85-894a-b0b3c0e38274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d3ec2b9-67db-48b0-b6de-c43545b3e661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "773cdd8c-d874-4f92-888b-9983062b7f83",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe3cc15-dfce-4706-917a-fe5cf79659ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c5d5e81-7475-4f7d-9d11-55b3a4ee2b88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c075fc24-0346-49b5-959f-f91e2b31f3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "08ea8276-b999-4371-8544-25c77df8aafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b0e351-a8a7-4d77-974a-5c22ebf4f4ed",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b65ee81-ec16-492e-ad00-f6e0b5ca196f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf4638bb-f935-40fc-9288-57e02d9677f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa58b52f-cdce-4956-8064-70cc8c75f7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e62bbc72-7f2a-4256-bb88-713c27098676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9619123-0f49-4385-85ed-d29374cdf21c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "947b9803-cc61-492d-b6f4-4d1cb8304613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68589333-8cc7-429a-aaa0-049a7147587e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6968f9ef-248c-42f8-84b9-4b3e149f746e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0de5160b-4f62-47a7-ae13-763f541ebf67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1e182b-0852-4855-9228-f92dfb3580ec",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d404e172-7eca-41da-8912-6e715b5d78a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c70d822-7bb4-4cdd-b5d0-c180b15c293b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8532c7ef-a361-43bc-8828-852559eaffd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "24d55ae9-bfd1-4b2d-a860-42c55641dded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d3e7f2-99a1-46d6-bfa1-d03ca985700d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a29f48b-2693-4e49-be7d-9459ba63a9e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4779432e-b2e2-4520-8ae1-dc8c588f2231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb401d6-51e6-49d2-8a1f-ab0bfe3a3536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "57e3b2cb-dc58-40f0-9ad4-618683da0119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8334b37-efc9-426f-8f9c-bc94cd956990",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d46133-a295-435f-bcf4-f9c74caf8574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83653477-043e-4434-b697-1d7f4857a512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f434a9bf-a9f6-43a1-ac63-8c9712521f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fca5f10-a442-4d32-ba8d-26c4048bb360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7800260c-fb28-4b0a-b27c-04f64b509c2d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f474c5f-8953-4ee1-8805-59f17fd34c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e63ac6d0-795c-4701-bc9f-d954014e1682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38755066-ab4a-4aec-b259-be9b6407d84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "59281ae5-0ad9-450d-aefe-c6e6b1d7908a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767ebddc-35e4-4d25-9d12-ce338fd4e3dc",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba17ab95-58bc-4ad6-a770-9133d51fa781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91b5978c-ae80-46bf-9a94-57e41d5f48fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71238129-d871-4e00-b6e2-a837246e879e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f9ae2896-d874-4fe3-a447-fb2bf2937c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b3953f-c852-4f61-93cb-8d783fd2b722",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60acf4a-fa73-498f-a0e0-79905f280b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9bcb93b-f633-4e50-a403-ca669050d86f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5f131e-ddae-4152-b7a5-24d723e0b5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ea1a11b-ca0c-4abb-8d82-fc05a56403f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e480ddb7-5aba-4087-8dce-8f9350c25f02",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc503af-fce1-4912-9070-10035ef9626c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad0429f-954a-4df7-ba01-0ffd67a66504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4283843b-a685-446e-b27b-b192faf61281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0be5a77-9a67-4ab9-8a5d-0dc497017848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d1ca68-8aeb-462a-8f78-3522ad14551d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fba8e7c-82c8-47a2-b40c-265e64ed931b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "200a7920-398a-4853-80e4-94088770bc08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374c9822-cb28-46b0-9c7f-57a737c86812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d1b4736-aa89-40d2-bbbf-da434e064bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55545f29-3557-4098-bd5e-a5f65625963d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3f9777-e03a-45fb-994c-dd5dc5b7c694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55bdb590-3824-4911-87be-f67fbcf08c68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d2d1d8-9b25-439c-8fd5-f211e58c25cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c24687f-e51e-4d88-9dc9-fbbfbbcf06a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b740afce-68ec-4b9d-9a38-37bedaf24265",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d70aa4-7904-4bad-b69a-cb37b68351db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b2c852-06ad-40c1-b813-d336e4561db3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f903d03-9353-417b-9cb9-3dbcaa7768b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b298e0ad-41e3-4010-b696-8f0060469e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d027ca6c-222e-4afa-a6db-015b897503ad",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b858e35-e37c-408b-a090-26b7c5c9aab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1fd3613-2e7d-4ead-877d-9e67606ef676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ce0e78-1834-4355-830d-0bc0c6d4327f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "84adf9b2-d185-42c1-b99a-d0f3ce5d0220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba84f07-cec0-4963-8be9-102ec1850568",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19655ad8-33cf-460d-9825-18885491f91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb4aca6-6b90-460a-8afd-72a6069c414b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45dcb639-c9eb-4de4-8d26-0781a4d4b43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2bdf147-a630-4eca-a9e9-99f3ca192d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c619f02b-e3ae-4cbd-971d-c7d49e8bb66d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04ece79-67fc-4bd5-87af-a92d8af2b1c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc89a1d-b9a2-4e04-a970-acf3fa484841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a14491-75e4-4d14-92ac-1c8c9a5c15d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8dd4225f-6b87-4356-a6e5-0dd4befc1f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c54f9a95-91d2-4aca-9f6b-06e3eda70db7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d452a5a-45af-49aa-932d-eadbb44c4a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0b85935-e4bb-4506-8803-1e0b1bb75aaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319ee206-e7dc-4d2a-8cde-f1a4723d8a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "da2b7a59-6395-41a6-b28d-acb678c8142b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14f50fd-6842-4553-b553-9565891a50be",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613810f5-d6e4-456c-a772-98832fe089d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3de0fa8-1ea3-41e5-a152-08b52e9616ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d423cd-5cb2-4869-9658-5bc288e8d0b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "94c2438f-d088-4647-8652-02ac05105bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf8643bc-9e06-4691-a9cf-a0028eb75405",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb8b465-6c1b-4559-b664-2b6920b3e236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b04bb8-7356-459f-b2c8-e4d93580af0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd29a181-1fbc-40e1-99b7-9581cf9e846d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "031310f8-7996-4fc7-a741-37ece9c2e04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef9c29e-b11b-4f40-9d3f-c9c27a3cff0f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a7b988-b31a-411d-ae0c-bd33d8637ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492ada4b-ba51-47fb-a0db-7d4264c71d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1310448a-f85f-4016-8efb-f0e114e76bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "575db2b6-0fef-460e-8794-2bfd4276deb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec3f14d-696f-4869-9eca-fd58d1ed812a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3b2f76-b175-4a04-95ad-0daeaeec153e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63bc04a0-5138-4487-bd40-acb696a09930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3083db-ef6d-47e3-9432-489f75eccf35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a49ac7a-282c-4a26-a15e-d4e28757ea95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021eaa72-18b1-49d6-a982-35336264f3e4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e5cc120-9bc2-41b2-af27-421d1d199cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7a72280-be22-40f4-9cb9-91dcdf3a5676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c88dac-8648-40bb-b7b2-89abd0c7ca9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "de8f0eae-4e11-4a6e-b3d8-b7aa452933a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443353aa-1f34-4b22-8062-6842adae2862",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2075aa1-a916-4e88-aebb-d47b52118919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30bc7ba6-4a77-4c14-a3c5-1c56f7eba01c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d24722-3757-4541-a780-b397d24faeec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a3d456b-b74d-4be2-b6f1-04c279caf5d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87c468e-9745-44ba-a4bc-6b762e91cd5e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2578e5-07ac-443c-9bda-3d6e07dff2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9021d384-d96a-4273-9499-114b730ea51c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf1efba-6ad0-421c-bd1c-22674b057f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c23453f8-6ef3-4f07-b498-1d97e246b828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead10c67-0d8b-44f9-88a5-734cb21e7f97",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbc7723-ba1d-4914-8641-ad1d40bb3fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9a6180d-c60b-42f4-a0e2-274b0f47b2b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa682af3-26ff-46e9-a732-d83211695a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe2bdc9-3eac-4c70-a21d-b618f0553235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ad6f12-a2b0-4186-82f1-e328224168d2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc5430e-9405-4311-b082-387792819277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a623a27-aab7-4422-bd5f-82bd19a51522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7751c841-69d1-46a6-92a6-566ad411702d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ae41b66-7e58-4fd3-bccb-f1207606373e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968398e2-c90d-4d38-a3c1-f1dc8b0a0508",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2770f4e2-3829-48dd-afd3-1c68d6a8dbe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff9bc9a-e297-4726-a029-f96422015895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74488d4-ecb4-4360-b051-2bd6fc97fae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d63b56d-4efb-4fde-b4e2-b5022fc99ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30ad1ee-903f-4c07-ab78-a96111658173",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06926241-8757-474d-a4d9-8964d533314f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea99dbe0-07c5-4c27-9288-abd22d6c5d9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63da6a9-f71e-4d91-9096-32fac0ebe1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f5601f3-c0ff-453a-8b0c-f757102b70a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27ed7e4-216c-43c3-8895-626b14ce400e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c77caf6-82df-4289-9880-61f19eb46421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd63a4d-b6cf-4382-abbb-05e32fada34c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af8cb96-476e-4c21-b85c-9a54de7e691c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1a369cc-9977-46c1-b958-8357dd06cc97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b11781-0827-4207-b16c-e02f3783c38d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912123f2-fe21-41b7-81e0-7c56ea6a2ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea9f10a-9b46-4d4f-81fe-39bd5ce0bc2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073fd507-073b-4ce4-b7cd-4c72240997a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ba5434b-8c33-41d9-b2b1-611af31bca66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0291c4e2-ecbb-4761-8bfb-18485317560c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee3fe2e-9593-4c24-9873-c93a345b1386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd62c5f3-007a-498b-a304-8fe3cf28bda3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5623a0f3-cb05-4c95-a077-4edc7fa5270a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbf8550b-1d7e-4f91-95d3-4734c1048639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57518fdb-3673-4429-a82c-9bc10eebe8e6",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67bfa5f7-0480-4217-8ebb-7cf2a79b30c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6025290-e7f4-48b7-af76-2f9fe35c53a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643791cd-1ebf-4741-a7d9-f62d432b69a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61503fe0-18b6-4fc2-95b4-2a09344e5ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d54cbe3-4717-4d1a-8d7b-39520471ca12",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7856a5-2e37-42e8-8042-a84179f29458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ae5343-5c0e-4deb-8ee0-a486277fecdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdca617-c9ff-4181-aa7c-393cf4cfcc17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d20c6145-991b-4629-81de-6d243e229df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80aa8a4-e885-4f58-b725-55190d4c57fb",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "948cc1d8-b1a2-414c-806b-0c0eb1728630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b15fcfc3-3436-4400-a606-48a0cfa6c706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe93e37-bcd5-4b60-93d1-2f22c2dd0443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d0c6236-9346-4e88-b2cd-28d5392c5bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afac382-55ae-4fa2-a4ad-e5bfcb5dd259",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df10b8cb-4bc2-4c36-8bb3-895c7c56aff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae4925d2-2d3c-4c24-9e39-9f1d9206155f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38f49fb-5994-4276-8600-0031dba2e1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e7a2aa2-1f0c-4c4d-82e8-bee941bb7c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a9fa10-6855-4afd-9425-995c1b5dedd2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cec230f-8763-4ebc-b234-4700b9c03f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec59819-d59f-4332-b279-bfc54e6cbb8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b22964-0886-4207-9fb9-5f21e5148515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "438f2032-279e-4e8b-b4fe-f4183d0c43cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b60a71-b09f-4497-96c4-3ae2a1ec91cb",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d537bad-adb7-4fbe-806f-dc2069b54ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7e7bcc4-d455-48b5-8131-2496a431362c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ce350f-d072-44b8-873b-d277beddf608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "acc05494-d7ad-419c-8485-e458fba2a5f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a1ebee-5f16-4585-b72c-d92853de73e1",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a2b075-4c2d-41d0-ba19-ba96fa376f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8aa0ed8-44d6-499b-99b2-ee4cf38380ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e95b1ae-96fe-46ab-ac56-16b5acc09fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "12f1c8da-fa08-4cab-a7fe-15455b9ee8e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee9239c-f6f0-4121-b83d-c7418f227f9a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "747c2c68-d904-4217-87e6-2585a14ac39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "febbdb60-132e-4a52-9dcf-366ea2278ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1897bc-1ea1-40df-8dcd-fb7131bcb3ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5adee90-661e-480d-9409-373d1ea76ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729e82e3-89da-4a2f-bfc2-2aef61fc2484",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c2f8fd-5d3f-42d4-b22c-9106414abbd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b024c134-f0fa-4cd4-b978-931a111b7370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03caa4ad-69bc-4f13-b016-171060d566c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e031c1f4-406c-4854-a838-b853a78331b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c06251-4fc7-4d08-97ec-50ccf02b4865",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbe50b2-52a5-436f-be97-544929d64ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b0d5500-ce80-44ba-badc-0a7cbb8d148f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "406ec1a7-f4b0-4c50-a6c6-7674508b067d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a52922ae-3359-4684-b1b0-924e3058bc6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab254f19-9341-428e-a755-b820268094e5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bdf728-93ac-469d-a821-f7aa6f6652e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58190faa-8fb1-49ee-a71c-42b383ce6427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d437ef2-ee98-486c-a447-be675eab87a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c878edc1-4083-45da-b8fd-bfdbb06c75ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "727f793a-35cb-4460-bf57-887a00ae0b18",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "709558e2-b4e6-4e85-a074-df8d8c7e4d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbc1a496-1b05-40e6-aa41-441bdc1442aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94e2957-5d05-47af-8e0f-c8e436009127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24300c07-ea8e-48e0-b377-6264ded9ca23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d0fcdd-ee04-4b9d-8804-bb303ea9da01",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b462ae2c-6abc-44c9-a9c7-61bbe13eef83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f9ffab6-7595-4ba9-860b-3e2f3ebfc3be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8021c13-4990-4947-ab30-c52328d4464b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03d9690d-98db-49b7-a6f5-38d5fb832fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db016686-0014-4d2a-8070-b9ccdca84313",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ed7a17-80f3-4560-8a29-e72fb97ce8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91a047d8-810d-4f90-a608-5f87f1fa526d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184f2d4d-cbe9-4c86-89e9-ae2f6954fecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbde9868-8c05-48a1-81d0-3868d211740b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b3e1f1-82cc-4681-b599-3087de84d040",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03fb7cdc-0cfb-454e-9511-34565d7db4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "236b14e6-ffc4-45c3-a989-fc4464b4219e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "104d9885-05fd-4632-971a-969dcf8dc450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f5e06ab9-6cac-4edc-842a-4bff74cb2a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060e3f68-4439-4edd-a42d-9b783a9c2981",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7f1167-5ec5-4042-9aa2-e44e530f1fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f45b23-7f02-4f5b-bb93-ba919876d6c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd8c9bf-80a5-4b8f-bda2-2beddcbab04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "35405ce9-21c1-4529-8861-405eca60ef3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a11c406-25bc-4cb0-bfce-3587cc8105cd",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75c3917-90cf-458d-8cff-4185acb740b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72114097-573b-43f5-bccd-861c4f1ee7eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f766ed-d4b3-4b24-ae38-e9b9e11ba17e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b1be565-610d-453d-99b2-0731e688f590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b702f56f-516c-41ab-bb10-7948079484ab",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8777c851-3013-41cd-bc15-b8ec6455c6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aa3d38d-9ceb-4daf-be02-eb9b1e41c7fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f076ac-615d-48a1-b946-305c5d305506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39a41d2b-8c62-4a6f-8217-8f44fea6e8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee436e0f-12ea-4551-8c82-2d29dc3a7201",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fee458-0778-4fc6-8ebe-30dc7911df6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b79bf08c-b20b-4aab-978f-7e5bdb685ff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feafb73e-e0f0-44c5-b171-53882e3175cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1256eab3-57d5-4361-a83a-1869db83a73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321c954a-8d75-4c2d-bf92-4d508b496d95",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7166a204-32f3-4c0f-92b9-72091d3e63e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b861cd-12a9-4370-8296-e574479c593a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2ac4d1-da87-4161-84b1-0c9ee2f5807d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe22911-d63e-429a-b81c-85954eb92d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef098033-f0c7-4f6b-87f4-3b8256f8f4e7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509d445d-4567-4c8a-8510-3baf40f8d4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22732b9e-3495-4949-9a12-b5799b41ceb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3146d53c-be24-4139-b54d-57822ae3e5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "62339d77-abe7-4052-9489-1f9945c1da30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5161b57-dfc6-473f-a4cb-b4fc2299e0c0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d02c97a-ecb5-4ee7-a0db-0b0aff341720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db803f73-303b-4317-bc78-e730b78ee34f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff388dfc-89be-4df1-9cea-7fcefd2ed568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb6a9705-79c6-49f9-9b03-ac58fc191a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586f9c5f-fe36-40bc-8f91-1daccdab01cd",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cedb7dd-0bf4-4e43-b639-f5a04888b55a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f34fd248-819d-4a6f-9592-9ec1b014af91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f650bc2a-41b1-426c-aa6c-2ba42764e0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "231c9d5c-44ad-4917-b3de-2fa75d5e7707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb767e5-7ef4-41b5-9df9-c8b2adeebc72",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75dce0b9-9cc7-4d08-8ab6-5deebd6958c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19985cee-cab7-45d6-94ef-128263d04d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e505205-984e-4d64-b3c3-e1a8c91a19ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "da640555-8777-4264-bb18-cc1075f35704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a4bf00-be1f-4175-bcd3-28651cc988ee",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82b5b48-0003-4843-8bea-66895b654d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51400f3b-eae2-4a3e-9748-8490e638b968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d7b695-1864-4d7d-93b9-58c29abae8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "386d285f-abe9-40d4-b8fe-ef3e18cbefa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1170ae4-9743-42cf-8c42-6e543e8b727e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6918eb71-82ab-45dd-92c1-fe2f140cd6c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "282ccbe2-2a46-4f90-a931-4234d69fa297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97623d0a-d084-498c-bce0-c93a8502f17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "31f333e4-c612-4751-9180-559e6b45ac89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3188836-a0b2-49a5-8258-2d0e81fd8476",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b6cd022-4a24-4616-a723-430b6a3da22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "378fb5af-3c00-4fcc-9b68-b73f4153d75f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e819cbe-b464-4e93-94ff-f710640125cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "51f80363-aba2-4010-9e1f-49b66ea1f658"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1db1bedb-4f2f-483e-bef2-db2322408463",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "293246ac-6528-4a97-9d0b-7eac959a5376",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b633de7-72ff-4af9-b7c2-79dff8ffb48f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e864130-d5f0-424e-989a-f340fa9a92aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2cf7b00-babb-4f31-a2f0-43bea4daf28b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df8476c2-c0a4-4109-bc6a-a8b8b291b631"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b4b61e6-8d7d-41c0-928a-c1abd83d966f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4df2f92-0e31-40c6-8281-16c923375631"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "27b4e143-3234-4ea9-a9dd-c355d257a36f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06c64a5e-af11-4699-9e7b-c76e8e3953da"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "41d36faa-dc3a-41a1-aedf-8af8a8bb1fbc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0f548fd4-cbf9-46b8-b1f1-06ec5aa1e813"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b207e42e-706a-4f62-b200-d6286ccfe7f3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0c5fd2fd-423f-4b69-9270-bd02abccf34f"
                }
              }
            ]
          },
          {
            "id": "6ac19dbc-943f-4910-b57d-bf546a1dcd03",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0ef997ca-6676-4426-8867-85b512c5a882",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b2b56f9-2bd2-48cb-a7a5-b8bec54865c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "afb48491-a8f1-40e9-9b3d-24b753c3eceb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1080500-e390-4e9d-8c66-8ba63ca80083",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b7db0a04-e3f5-411a-92ab-88cce10c9e57"
                    }
                  }
                ]
              },
              {
                "id": "6531243c-6943-4fd1-88d3-2984eab9071e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99810893-83f2-4aac-be43-4937e16520cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "51a6eb79-56a0-4d46-bcab-eda1608e0d95"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0899328-c0b6-4dad-b821-ca0fba0987bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2da0f20b-e6bb-4df9-99fb-3a93864fae65"
                    }
                  }
                ]
              },
              {
                "id": "e5011dc1-aae9-46af-9aa2-35e52aaba351",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "228ff352-805c-43fc-8162-b01a587fd002",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bab2bcf1-122e-4aac-b9dc-31006871b2bd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5fa267e3-169e-4764-8374-6256141edab7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c96bf2e8-9963-49c3-a737-e358f7cb0ccb"
                    }
                  }
                ]
              },
              {
                "id": "991e94bd-b3ed-43ed-a0b5-1aa877800072",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac64030f-40fa-4e7e-a09b-653dbba4ceae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "07fabad0-6a5a-462a-8d61-f6e5dcaeee75"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c27ca1c-f50b-4c37-87d8-0d7d7daa3a02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7ac2ba5a-6f87-4bbe-89da-b401f19fbca5"
                    }
                  }
                ]
              },
              {
                "id": "e7b9bce3-caef-474b-b463-30546624c755",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fd30e0e-67e8-4c41-bca8-08f962ce26e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bdcab73d-8cd8-4140-b115-c6fd37da7f86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8ac47b7-14a6-41aa-a88b-c8f93eca30e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d1f2d5c6-3ac1-4235-8e1f-d0ab5b095435"
                    }
                  }
                ]
              },
              {
                "id": "17f818a1-ebf9-4fa4-9394-4efde741fbd4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b811ce3-7db5-45b6-b3eb-18f31dde7d30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c317e18-8755-4c9c-9f1c-6aae0f02f184"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e4e9256-bb76-4318-bd50-3cc4e72b73c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4c498d68-4083-4f60-8f38-c42d7b8ae40b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e5edfdc7-989a-4caa-9739-5dcdab9401eb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "20d8488f-b60f-4206-8034-92635472185a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1234f716-0936-409f-9f56-efa5973a3e98",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "178d349c-55f0-4619-9c89-976de25edfe4"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4bd7e167-d9b0-44c2-801c-9299c2fa022c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0907718a-6238-4623-ad6a-ec6bc266665a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e08d8178-bd1c-450f-8615-4c4761a4db0a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e8e836a-adbc-4f8c-a509-3dcb98a5bdf2"
            }
          }
        ]
      },
      {
        "id": "37c765ec-8bb8-4abe-91dc-6d0aff40de8b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bb9abc81-5bd3-46a4-9486-a3fe75974b7a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1dffb080-0d39-49e4-8d94-63f348dd317c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a9f6ecdf-0da2-4cfe-8341-34f089d57440",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4969e81-8f2f-4970-8b76-041f9e0c5672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1d0242-98b0-422c-bbf0-85388b2ac884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7305a0-b368-4351-a1ed-e8d802585699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "43fd5190-4993-453c-ace0-7f1171a514bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8320a669-563e-43b5-9886-179ef23fffc0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83de9494-6a6c-4b77-9fc6-666e5382ced7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fee4792-1d08-4052-b85a-a7e37ff3b087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "badbf200-c6d8-4f3c-9b51-50580817aac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff5c6c12-f722-46fb-ae54-b398a25bdac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bcec72a-2899-4339-93a8-933ebfe43ac0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "182a72a7-1cdd-4284-b7f1-6f363513e800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34cf11f2-b9a5-435b-9b6d-0c6d79ed21e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbc6ae3-46c9-450d-b3ef-93ec31fd409c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be54ef44-29c9-4663-bdc0-ed4c0ce54297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57035118-3ade-4fbf-a329-5917a48279b0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0b8f08-384f-41c8-9931-89f5fffd064d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f05faa-25ac-4d98-98b2-88a93c503109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75a16cee-aef0-46b5-9daa-06932157a4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "17eaae07-618d-44ff-9746-a4466d94eb93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a03cec-5b85-4c9e-8990-7abd3da2ceb7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b2fbc4-4e46-4790-a165-a09ce0162aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a70a30-db81-4f40-8840-47188901df23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f1ec95-06e3-4a32-81dc-08521c85d283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce9b2780-7c93-4aae-86e8-c2334b37c947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024a8040-4226-4ce1-a2c4-cd5694599bf6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4574e692-d77f-4850-b5f3-66d703358335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab4a7133-1bd5-4b2e-a961-69669a8964b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb3ab9b2-3603-4d87-81d6-127104e51749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b1d48cc-7e2d-4fbb-94a5-ef621e7f1668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713f64dc-073a-4cf3-861b-0952387fffbd",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23c284c-4c1b-4cd9-8314-22d0696955e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64dbe081-f1b6-4850-a24b-edc4e57fbcb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9edccf5b-945e-4309-ba03-d8f73c813c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "08109405-e941-49e0-bb15-2bc895219eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a61f7bf-5667-4865-9e41-4cc1c2ab89b9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "121e6728-e2c2-4bab-8ade-892d6834286e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d20edbc7-0861-46f0-bcfe-6dbb00a0c704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69213b52-8bce-437e-b437-0e8d82f0b1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6171639a-1f6d-4b3e-ba53-6987ca887517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cefbbdbb-d1f2-45a6-b637-169d56b43492",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a57a427-c479-412f-9795-9eb8b83b8f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80228fd0-9cbf-4171-9392-726e92458cd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e39094f-c5d2-46de-b772-eb7058e8cf67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "35c0c973-fbcd-40dc-8003-29c28e3f025e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6102d51c-5962-451d-9156-92ab369f3ded",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b835f017-ca27-4d19-881d-1fdffeb502ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80a9629-abdc-4e71-bdd2-ba9aa8c65d25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5140280a-a89c-4c7f-a54e-2896bcbbe206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5cf4cac-cdbc-4f92-9c40-ae2b2c3bc1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4896962d-0d77-4e78-808a-78da4cff1f99",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8640f3-9f94-4d4c-863b-fcb217192f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "633c4e8f-8267-47d5-b03d-45e5fd676eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99111c7-3398-4c13-a057-14a3058d41c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "de47d2ab-9c04-40f4-9d53-f5090ffc3247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d4481b-7454-43a8-bf8a-5d6d939416b8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11658ee0-0c0e-49da-b395-d5294c640b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19fa5e08-45aa-454f-a628-665bf470ebcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4416e55f-8ac2-4987-9da2-de68b8fecd6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c994ce5-dae8-4592-b199-c2db586c60d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1faa6eb-bf82-4a5a-bd18-c98e6622c689",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1380dc4d-e9bb-452a-937a-de2cb738ca89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c42969ff-47d5-47f4-8343-b7aa2d6cddc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57efad71-4eee-436c-8ddd-db17adde26be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "43fa42d0-8ea4-4019-b188-b45fffc9866c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1abba750-0a63-4a12-b17d-1d517e71c23f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6239028b-19f3-48ef-ac0f-2ae91df86ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e72768ad-0b04-4e92-8698-39bcf1d4a2d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc65103-321b-4df5-b211-f71c42f234e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b634694-2203-4b45-aeef-2db6eff362a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0058379a-19dc-4736-804c-593e9a5eeae9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3723c4d3-1586-4de0-852f-7defe528e759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22c92ede-b850-4d72-8a5d-b79ae5560385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899ad93d-8604-4de1-9eef-db70c61dab67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d3dc644-5a39-476f-aa6e-ccd8e00150b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3b8caf-a3f7-4af8-8cb2-054716ece571",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee86f855-b606-4654-8375-340e06497d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "848b2e54-6c51-49cf-addd-2befb34eacf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e784b2a-bfed-473b-afd7-f3d6fef0fb48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "459a48ef-5f23-4479-8aca-972d3b1ad9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c83c6e-c75b-4bfa-a902-bf1d775ab977",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6b0e9b-f18b-426e-a6d0-617ad52fe5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d94d7736-538a-46fa-8237-20c9d2cbfa58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5c0b13-ea28-44ab-a0f4-0e58aeea9f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "64fcdb74-3930-4bf3-96cd-b41ecedaabc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef6b96c5-aac8-4323-b5b1-94b72ef046cb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "268b8af4-459c-48d0-83d6-44520b0654a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8d8538-305c-4dba-b22c-a84b6f02d84a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc0756c-7ad7-45d8-acfd-6417261f4a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "07f3d550-3ab2-469c-a2a2-1afcdb73f0bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d774765b-67b9-4fc5-8bcb-5b268e6b74a7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd52b74-e922-4e5b-8296-4495ae553b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f7a7bc3-8435-4830-a6c1-c358e7161fe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467e6636-d446-4bb6-ab3e-ea5e3a72b6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c37e927-b933-43e8-97cb-284f1bba656f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f4d8ce-f16e-415f-8fd5-10e9165106ec",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d3c0fe-47d7-48f3-b9bf-529c80c179fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ee2b56-90ed-4af5-a12f-88af4c3f3677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5dbfbc5-1695-4463-8f61-fd192ff855c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1865ea84-f6a0-49cc-841f-5aa716e480ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d9a678-11df-434f-b9ce-61c3d6cc0a30",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b21f4f-2113-4607-8843-e26e8e6b9f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56efb620-9765-43e9-9249-eb893b849a61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522e730b-9e0e-4bfb-80c5-33fcd962f3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4d01dea-1e8c-4562-90bc-a16bfe78ed05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd0bf500-03dd-4972-94a3-fa3c784d891b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6941b2-e943-40b3-960a-10fa9d1769b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "649fe276-9a3d-4693-8ee0-549017639795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429b261b-5f39-4e53-8b2a-63e68d4fac8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f91b553e-9a5e-48e9-a3b8-bc8b81afcfec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d554948a-ecc8-44e4-bd49-550458c32dc7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4afd19-1bf3-4d32-9a59-46051a920e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4616785a-7c86-4fde-afa9-6de761cbef7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1b98ed-f462-4266-8cf0-7ca5b4b395d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa7dd4b6-2dec-4f94-bde5-222cd8f010f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7100b64-eb13-4dbe-b888-e75fe403f60f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42f3bf3-f57f-4970-ba5e-f8d610ddea5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ab8183-103e-42d1-9610-dfba746fb1b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1001e713-ecbb-4290-8ed3-f5ef4fe35dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6990dcad-a248-4247-84ff-3da1cc933316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570f0b42-3060-4fc7-ab59-be6ecaa718ff",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2acaaf62-1e71-4942-b6b5-7857451ab46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1521d725-7cba-45b2-8758-265fdc66a55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "059cd87f-8d95-43f0-8d8d-f985c7d6490b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12b2b22d-0a0c-47ff-871f-4137f515a6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb51117-a6f3-40c1-a04d-9bcb34b8eca0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8037203e-7366-45ee-8665-87be94c9bdd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee55aa34-017a-4b3f-b1ef-f88413d2db18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0542a1-b541-451a-b3bb-db12359b24a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1212b48d-13cf-4e21-8337-981d446698ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f61891-1cb1-49e6-b399-8b9791664db8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e810c248-1c47-47e4-976d-5fc85fc62778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df454e5c-f826-4975-9e3c-3fed09666201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb38aa30-1c11-447b-bedb-fd968615bb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbfe5789-bbdf-4320-837f-45b077c711af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1217f20-6ec9-4fcc-a728-acbdf5ff6c0f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34880ba-bd41-4e97-b13e-b88a0ae65ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa8021d-a32f-4865-a948-54cf3e5dab7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ccbca96-e775-4283-845a-d7d1fd909a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59c4a602-770e-4910-a9bd-6a158203c787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85382374-f5b2-40b6-a705-936e7f62dfbd",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d76d0f6-661f-4bb4-834c-352687ff3a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a386ec0-18e8-4be6-bb3a-49f7784578f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48cf1185-3fac-4c81-993b-831404ef3327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96a3987f-c75f-4dde-8798-14ce824df7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b756fcd-9cd1-4c69-91fb-a0bae8b5b01a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df603d5-d7f7-4f33-986b-aed73daafedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ab96b5-84dc-4662-85a7-862cdabfc36b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfa43c9-8ce4-4363-beaf-b391500d9bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45e82b04-cd5f-4f5e-b774-7be50f68fc69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3fbda86-eca2-4682-9296-baae6d468a3c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce7d34c-8871-443e-8039-91e8aa55a58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8c3156-013d-4a73-b94e-2e9cddd64b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f41d8a5-4be5-421a-8e43-ab7fb1c52027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1915884f-4e86-4937-ac1f-91e792779eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c5c340-8028-451d-b627-a6631da49ff3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec47282b-3d98-4dd6-bd2c-39480c717214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d537d0-1cc4-468a-99c4-e9892aefb887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b0cf29f-423a-4c2b-b6aa-881f7422a95d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "074b5802-d432-4fc1-b9e3-c7a33d35b7ff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8051557a-f117-4a4e-961d-6ee78b2edc2b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c5195698-ccbb-4404-86c5-905dd95c2ea5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3059b1-fd6b-4554-afe0-5a7e92e37d53",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "964fd826-470d-4637-8809-b318b869dcb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6f4179-c491-4e82-8c79-593efba822cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7627be7c-5f26-408c-908d-5df83a3dc3e2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97e4951b-4c12-421a-8209-8f88764da724",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f3bbb668-6a6c-483a-918f-56f53d7c4417"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a70bcc96-0805-4d08-87e1-7aeb25a64f07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44259582-7e66-4acd-a691-feb5f7208874"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af5c9d2c-8ea4-4a59-8e64-1b1fca75cd0c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "92a8527d-e965-421e-a635-7e2e13a53c35"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d54727fe-6e06-435d-80c1-e8c93a3a7381",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "223a9485-e0e9-4830-a543-a0f6ef5ae154"
            }
          }
        ]
      },
      {
        "id": "a660bdaf-e5ab-450b-bd77-631b41238763",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "5322b022-58f7-4dff-9a25-d24bb9c6f1c9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6819095d-e809-4d81-8668-900672559462",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9d60b619-43e5-481c-a823-a5bf2b845e8e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e884c736-ca25-4157-88e7-c4134b788650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abde91ac-f081-406c-b62d-fff33fede92b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba377b03-df85-4a0e-a40d-8e202b94dbc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6dde7101-4b5f-4ad1-99df-63f50a6c6193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db1e3df-4f85-4b19-8677-be4373d63e9e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3dde58d-870b-4119-8b63-7b32be978daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4523b15c-a409-436a-826c-0b9edbe4eef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7682f052-7ce5-4540-beda-e17d23e15427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f4d208f-e2ba-4b23-9f14-1cde1b7f5f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31409a97-6f39-4f31-a84e-4653722eb66c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3562868-aaf3-4998-a87d-cbc9e352d638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a5eb5a8-8459-4812-8fef-5f8bf78e3924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1d3a22-8f0a-49a6-87b1-48e36fb4edfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2d2bb7a-aa82-491c-b209-c0bc89d7714a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542dc964-0983-4858-9406-0207b706d594",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b974fc-bd19-40ff-8abf-fe4ec8fbaae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e0723e0-7f36-4f60-8876-b0382939eec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf19d4f2-cb79-4f98-94c7-2b55bcacf1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d88ce115-254b-4f54-a7d4-916e8ba66c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28ad1b1-3ce5-4e2a-a3f3-a65014321d25",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf34aa9-78f3-4edb-9c5f-d72e9945790b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83d924d0-1151-41b1-9ef8-ca9c2223cac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464412fa-2476-4590-a4f3-d6da5d5cdc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88daa01f-c323-4e74-a224-78a123f46b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80aba4f8-2bbe-487d-8a9c-810470c44a3c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39092470-95cb-46d1-8250-51da8cfb130f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ec3f8a5-ac2b-447f-a0c5-98fa6c5f4983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ebd211-06fa-4b7e-8527-4c2b240c7d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a2fd83b-bb1c-4ed9-a8d4-0497471c8fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7efca28-197d-4f0f-b613-70664e25e3e8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156b7353-4557-4d18-a145-6da87e5f1305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c03b1c-b804-43a4-9fa1-380085df9de5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161b9ed7-3f3a-4751-9ad2-5235c3e16617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a9eb0c8-8103-429f-a2df-0c809241d4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce47acd6-3e35-4907-80fe-b463701ea1e9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad25990d-8df9-4a37-a743-c9fe7cc970cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20143d77-1d50-440c-8667-3f09e520f868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a761dd8-c81a-4f3e-8423-0ca6d7326808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9e50982-6c44-4e4f-8718-85185bb6b8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb21b579-ef37-4d05-b63f-a5f1ed6e5588",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e435b94d-7d17-411d-9b1f-5b345b30d577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a87d9df-9504-4021-9c71-f49278121bad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1843ca4c-023f-49ee-9fc0-5780d5ba81dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d18f76d5-d4eb-42f4-a4b2-09f9f34e5cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959f6296-0e08-437e-9cc6-a230b64d5b46",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b639b0-3b04-46e7-a39e-618057f8787e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "848c05f3-5ab9-4c78-af04-b7267f447ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ae64c6-3e3a-47a7-8836-c584595205fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73ee2c5c-74c7-4565-a1ed-ea92b99acb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c806ccd-a096-4787-82dc-c4c9378f5d79",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817ae722-3654-4100-b1c1-4a3c6bb5ce8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f2f8204-20a8-4a43-a5d8-438dbae0a8aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23fdbc21-4f05-453e-9a36-338c74059fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "33e8fe5c-bae6-4e80-9d5a-3bffff109322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e70f91a-6050-42be-ace7-9270e96fcdb1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "586ce058-ab6a-44c1-8ad8-64275929fbd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec9cc209-38a4-4641-9ce9-248448e366e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3ae460-f241-4478-9226-efef653f4d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e07c3210-c734-40a9-9408-9a421390230e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36c56f9-af03-48b1-a349-14ae9d92eed5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05fbe6ea-71b6-4b50-96af-e99f1555c46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b353f9b-07ba-4b2b-ad4d-aeaf8c23a748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0a2f49-cedf-460e-87f7-8b1c3721c611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "92a1cbfb-b348-438a-995d-f4c44f2d0d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7e068f-1480-4f2a-9546-b8c2c5c311e1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5989ed63-c7f2-4db8-a996-19fdfbdb0038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb8e557-2cea-4a7f-b649-84414f86671e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e68eb8-b2bb-442a-a865-7b928405c849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab388b3-51b0-44a7-945f-65dd794096b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6841cf51-a4a8-4534-a8b9-10a3e86f227d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7daa4408-d98f-4591-bee5-ed001b5fb036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90b06467-9527-40e4-ab56-af5c8d055d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54791250-731f-4412-9f55-e01c79f42181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "91f30f77-1c9d-4de7-af48-2db178a21c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e047710-75ad-403f-bc8e-1c27f49e8a10",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f60092-2062-4f3e-ba4f-923aa540cd19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9767ba91-90f0-4f6d-8944-b43c3046c042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc42bb5-cebd-49f2-abaf-317e80375434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c9a2060-207d-4a98-9a9d-821f97a069b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5bb6b7-5e0b-4374-b143-f6237ea33141",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17fd2bf5-bce1-4afa-b1d8-7ea8ac8f5382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a549c532-798f-4634-8a00-85ab26733ea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "908e9b22-c539-4592-8a6c-31f35503f0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b93463e-b78d-40e2-897d-0e4c58f54529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34fb08b-749e-41e1-93ed-79dd44cf3031",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fceca6d4-d0dc-489e-bb40-41062608bd07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c15bf2b-e4d5-4e56-aa3d-399b563105ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a6f7e84-ed76-4f66-8ce6-f938b5348a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "62d1549c-d27b-4e41-a688-022a8a2f0702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa7e98c-f397-46e6-b62f-fecb6c32c86a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1dff35-42ac-4888-9bfe-6fbde639dda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c95e98e-c8d2-4f9c-bad0-c0d6d94b60f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1047b8d-1e5f-4ffb-90e3-d23ce24643d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11c623b3-241d-452b-a964-f5ba027db7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebc74c4-9629-46d4-8870-4dcd24caa9bc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9022a48-a86d-46ff-abc2-02103efc9964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "731c2a6f-06d2-4c3d-8559-5b65b6b7328a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a9152c-0a22-4793-a76d-b215d189b6c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8ad939a-6169-4db4-b775-131e6df3fea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5fe2da-5612-4262-bd51-a8b7624c124c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "586f91a8-3c0d-42ac-ab4b-8301d0d9cece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d8f1e4c-40e7-4316-a98d-66b7fe1c7a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4271d2d-a79c-4a26-b434-1e4765ad40a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9625183-8cf0-4aa0-993f-c71eff964ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24e5e0a-d202-466e-a705-4f3788e709d4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "464ad864-343b-4825-94b4-6250867a560a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "078f2c85-c41e-4ef7-8483-f485a5762273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d4e9ff-744b-4a0a-921a-4b91865c7b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "764f8d3d-26be-44a4-9c8c-9abebb0509d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a473b1-57e1-45a1-8448-3e8b5486f298",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "433843f8-06ff-4c1a-b3c2-ae5d76ab1bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e6a327-53e2-484f-9a99-92cf3bcefe9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ae09d7-7415-409a-ab8b-052de65c20ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80213300-da90-46fa-8514-81008016966e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0add6d91-f2ce-468a-8a0e-5715bcdf515d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fbdee3-d7d5-48b5-bf2f-f5eec4131686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fec83e6-8e45-4a9e-aba2-aa7d14ca472a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382e5b72-c6f9-4f4b-8cec-37e96b08e452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "457a6b63-ef71-43b5-82e8-2c5462dff10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19170721-203b-4d1b-8b61-82c0a799dcdc",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a02d9c2-aa69-47e9-8b62-0d4266f98aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a35c208-9bbb-4048-82cf-f09e23380c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5cd9bb3-e6c6-44aa-b45c-af61575b6044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "141e73cd-1d52-40dd-a0c6-9163ff3e1509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3baf1756-99a1-4565-a1b7-e4cf55209ac4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa8c996-705f-4da9-9001-ad9795760efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cebea8b-83c2-4b75-b088-2a5cec652fc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d098a75-779c-430d-9cd6-a1525ecc386a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13be4576-bdf8-4dd8-aa31-8960f6121f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0eafd4-3a2e-4b20-88c1-442f8cd03152",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d43562a-a9d2-4545-b654-bb2da7ffdef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e77e37-3133-49f4-afc7-20eba462701b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f3be1a-ed5f-4dbb-854b-266afc5122e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c264ea1-062c-4dea-a95b-ae5c34224c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f41f62f-fc28-4a49-a22b-d027ce41b029",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36adaa27-5d79-4791-a7af-c0429ef3ca9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82e32ada-5c62-4ef5-8f08-23466eb789db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdeceaa2-d4e3-4c71-990e-10ba0ca5a2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c727e22c-d2e6-414d-bc07-45a491c563d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8ac8bd-399a-42c9-b850-8c5592cca88b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbae4c16-1dda-462f-812c-fbfe782f3c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4133c450-30a1-4696-a85b-1bbd9abfa80d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e37b7538-1465-4982-bb0d-9ce87c8dad90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e3cdfd2-68e8-4c9c-910f-27d106f9b9b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d03189-e352-4ac6-805f-43c612d3da02",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "685c1086-bc08-4973-860b-e9e7a39747f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "198aba22-9e32-49b4-878a-4793fd25f0f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14e3f2e-70d3-4531-8bd0-b8e48c53450e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b35e8e2f-ac1f-43c1-9864-5583e359bb28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572a961a-c937-45fd-9ff6-b127397e8b3d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90db8e7-2ab4-4107-9af4-9db6d072f82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79677016-d799-47d7-b51d-5fe950110d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e94848-4cd7-450c-8857-d19d1c1d8379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24c16fef-ee14-462a-8c6b-246024f794b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb6ba69-f111-42b8-8a88-bbcafae9f31f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fec7610-8ced-45b6-80dd-43e8ff8e3f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e7e729a-aad6-4a3a-b4fa-cde9e061273b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84d3c22-a9aa-4a47-8867-60cfab20d8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b89eaf85-4e20-4722-a69c-dd5e7fea7bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc9f663-c548-4c92-89ec-314104fa29b9",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dca4a35-4643-4946-acc3-4d9d3a4c7b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaebc57f-3c2c-4088-9447-7fd9152a5fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e08bdc2-aff2-439f-9c7c-ed53694b0d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa493abc-0ba5-48ae-bf88-58697d9e72c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "088da4f2-1456-4f6f-96d2-a26daf7da4dd",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ba8c6f-3774-43c5-b4b8-0fbb3bac84ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7febdee4-d643-4eab-98a9-f4f9cd17e73d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47dd85fc-9199-49e4-bca0-c994111d9fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa9c81a7-5195-4426-a139-ed6494603ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377236dd-b87f-4163-9eb9-c0cc3ff2e8a9",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e9effb-ec10-4caa-8880-f52e8685a9de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac427f80-7326-479d-b8dc-8a0f68834e42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75d6771-f3db-4d41-9179-ace7d1d78256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "afc7c2bc-de12-4604-b92a-92d179b97a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffb97f2-bf67-40d5-94cc-8068d2f9b94f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef9e471-61e6-4d9b-a8e5-3fd606409f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d38cc72-3038-4e6c-a1a4-daf1c9236b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb726ca3-7a2d-4271-a572-a35630eba74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f4db903-9a31-4cdc-a5b7-78e51383e75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e01e72-4135-4b5c-8fd9-406a492e6b96",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d31dbda-424c-4d17-8bda-42696bca2f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc1998a4-20e6-4b1c-9fd7-e5434418c67d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c751f389-ccf5-4817-ae1f-bd3607aeeb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47a8ea4d-a014-43f8-b08c-3f386123d111"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "399c88aa-0487-4b4f-a376-49e185b24f69",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ab855098-56a3-4935-9f78-80a3be4de350",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46eac5e5-f676-4a73-ba4f-83a4203f9f85",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e645a280-262b-4f4d-ad9c-22c2ebd854df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ce3b00-af66-4e59-875a-d62ce91c00d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23f59bc5-6c65-40cb-a881-16fa13c5d22b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a480e95-6117-43f4-bfae-536840be29dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca979592-4470-46e2-8e17-b41b91522450"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2443b3c5-2856-4d61-8da8-6653cbd274cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e2cd660-fafa-43de-8edc-f29b5f8d7908"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aad93b17-5fa9-4790-a2f8-07113a966841",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "87a940ed-e10d-4254-9210-90b5dabfd393"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe499021-08d7-4882-a20c-6626988d762f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a573fc71-f521-4316-8a94-231ca351c141"
            }
          }
        ]
      },
      {
        "id": "9b5f89cc-5a4e-48ff-89d4-ae5e6ff946c7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8a21b1d4-003f-49be-92d1-82bda0946ab7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "edcc0d59-ad88-45f8-b39f-00bae86f48fa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0cd84905-2114-4fae-8d1d-bf55528b9797",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb23bd6-c44c-421c-80da-8cc72bb7b0ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d99d07ee-a8ce-42dc-b0be-815767f326bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405887d0-4711-4da6-a535-aa1bc568f688",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "170a3b47-25f3-467b-a4ed-a266c398e256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e932e7a-bd11-4756-919c-094f34a40b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d59200-25d1-4a7b-ae8e-163538b4222e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c255cd44-7de1-4256-8f65-420c8a6ab016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdfbbdcf-45d0-41e6-b83c-14465938216d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33cc896-ccb9-4171-a3b0-0d2d5c9c4192",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a3c7e7-80a7-4f4a-b0ad-c3d47981d204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde2c291-7087-427d-86b2-9b24ddae0f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c17501-6c01-4ce7-92fe-eba8728b0c62",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02212671-0baa-4807-bed2-ffdf2a4a1f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b2ee89d-8e64-4073-9dbc-1c08ddde1b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de070e81-4efe-400c-9bd0-e883bc983933",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5136c6b-6ff6-4c46-bb98-975f84b03581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d885eeb6-90ad-49c6-9244-4f7bf2f7759d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa79ee7-e141-4478-b6d4-d6448dccc380",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7c010b-afea-4e19-bf82-9f5fcb154dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52eb74cd-26d5-498b-bb56-fb84b4676388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13822145-9c44-433e-ae26-c2631efde804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72caff27-c604-4a90-b2c3-28c7d2803408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe11daf-7e00-47dc-ae66-e40c3268759a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7184c2af-9038-477b-ad1f-4984a1bd15c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dd6a2c8-e436-4b90-a9be-09f3f91991b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2442c8e1-7ccb-48c7-803b-66683c861676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6278762-156c-4fe4-82a0-3665a129e052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d326513c-d049-4de4-923b-1d0e0ed913b3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e5dc4f-12bd-4f66-88a7-698648d906b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9927b864-a395-4fe4-9357-5dde8130aa90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d0beb8f-3201-494a-9690-e4b8870cf605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ecef60f-fa03-46eb-8872-4e698f48f6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17bc1883-e60a-4e99-bc2f-42d1f5f6b276",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98506f1a-6f2e-47f5-9c89-2bef89a2d8f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "150dbc1d-1bcb-42cb-b5ed-76a3dc691dd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28bafa19-6ca9-4dc7-b69b-40e9282d0df1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "656dc483-0724-46ba-b73e-837234cac188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5429420-b317-47c5-a167-6a035b218769",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b63aab-f98a-41eb-94a7-c178d9133ff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c80ce9c-f5a5-4ad9-a5e4-00d16bff972d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be82a13-555f-4570-8239-e793d1aac0af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a01938-2b10-4308-ac20-b4ac37a4745d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e2fbf3-c386-4772-82ff-9f1738a0786a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198ba364-b560-4a8a-8528-38734fee2943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23dafcda-20d4-412c-afa1-22b8ab41cc96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5c2614-7e2f-4c54-9edf-cfbae8d6388d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "525d8516-8bd9-41b4-8e80-26c2d82d3c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5043ae-90b6-4f8d-bd39-08c4aeef92f9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc862ebd-410a-4d91-b935-acdf07ae44c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9f78551-6a72-4e42-8285-dfca8f21934c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b855f006-949d-415d-a5ef-1357721b8896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3aac8df-2f74-42fc-8443-35d68f7829ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f5440d-75cd-4f2e-940f-f1525aad81ad",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ebc2669-1ac2-4034-b369-09d981d63671",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef6beb4a-29db-4b51-8b00-213f7348cf5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28122b5-33b0-4e1f-8e46-5b5fe20c7246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c129e25-bbd6-4263-8d9b-4c7ef3b98e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e047a67-f6f8-47f9-9c5f-f29aff0fe569",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4c4312-b79d-4059-8d9f-ec07598b4a61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b39f5557-95fc-4ee7-9208-217c4b07f8c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "969ac919-1a99-414c-9d00-b263ef74cdf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ddefdc-9ff8-4c9b-8c0d-7008afec7bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2764d8f-7e7e-4b72-ab13-f27eb8ba50db",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e76ca1-9c20-4514-807c-a263a937dbb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e114842d-a19f-480f-a905-56b90d5e66e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6955c6-1f94-4568-8fd5-8910d0b816ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e74b96d-1528-4698-9e55-82360ac738fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a354d026-98af-458a-8768-c1274f50d4bf",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3fd761a-969d-4f6c-8ebf-63cd5f843891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ead5989-3307-4e42-a173-6a02672ad119"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7c9f5e-0bb6-428e-aee7-4486fc3198ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "058b86b2-c3a4-4f23-8c93-f3a553020eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b6084fd-e075-4655-af44-d769d48afecc",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55abc0ca-4fe1-4b49-8ad4-23818a0265ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e804502a-c2e8-4d86-b0df-9dc074f17a17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "168196f0-040e-407a-a01b-c5b5a5a4ed9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eb49b6b-b9c8-421e-8591-b98ea0f84206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf09ceb-78e9-4666-8f0a-13aa428c1467",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe8d7eb-940c-46a7-8de1-66fa03a2c11e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7575d294-3e46-47e1-8876-363b53404cc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab60c47a-306c-44cf-b2b0-db74c8d3e4eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08b28332-8955-4bba-ab20-fb23879ee4d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18845aac-0874-435b-986f-50b78c1938aa",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d51bdd4-a0af-4e12-9466-c2fc2ab37bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e190acbb-fc8e-413d-9d0c-59cf4e792f74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "557014df-6834-4c28-9e57-7d624e08060f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c5ee983-0b2f-4dc8-a25a-8918644efeb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e82d5e4-b7ab-43e8-8988-e64a5836432a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c59c6c7-4f59-4006-9a5a-6e4a658b29f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df02bd49-1a5a-493b-888a-537e3a8e1327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c23bafe-88d8-49c5-acd0-a4fbb285d09e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7d4ee22-b7af-4b38-b8e7-0c28fb4950d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f5c66d-3f3d-4e99-b398-ad4b07b4bd2d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702b50c4-e824-45b4-ab93-b6d71dea70d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fee718c-5feb-4a5c-875e-f7fdb903f5fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de0ff52-46ad-47dd-a8ac-e7ac14280a84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea279bd-2909-4864-8679-d35f8e6e6292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4729a4-e3a4-4062-af44-59318b0b99b5",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e8bee3-2df7-44b8-a038-8c179c71a555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b94216b-442f-4ed5-ad77-e629d70a920f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "550e9b14-e0ca-4fd8-987f-b74e4fe680f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e2a5234-2f82-4363-a5e1-8c67c964f601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4ef4be-f3f1-4e52-9fe3-137f97feebec",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e3224c-a97f-4e9e-9893-b88522533c49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "692e6225-dc71-4431-ac2f-c22e38a933c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "850b0790-022d-4d63-bc5a-461d504c5be5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62bacb20-7a37-487c-a491-79077eb8efc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5889d57d-746f-4735-b81c-1ffc0fbb2d55",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a192aa-755a-45b1-ae5e-4c18e0e5fa59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd3a0ca8-dc4d-4164-8907-4eb26ca41a21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0fafd3-2b70-4dcc-841b-45fb2ef4ec29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71053fb3-0630-4029-9ea9-c8bb891bd962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c522685-9b4d-468c-b3b1-fed44d936631",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7e99ab-c165-4ba3-af2d-37544f63425d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af1b9b2e-3841-4a54-941a-17f1a53618da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6c8fd0-30a3-4d64-afd7-b6106be984af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d24fc40-1aad-485a-8ab2-930e40df9c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ea6430-c377-4a73-9b14-0fafc8a8c454",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e46c1e1-64e3-4be7-95f5-604bd45d25eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ed7c775-222d-40d1-bea7-1215eea1221f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3603c739-a7dd-49ae-a931-89af71e09fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9fa0005-75df-4417-b11c-129deeb25902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86fffd7f-a41c-442f-8523-8de148eee891",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389c6674-8077-40dc-b21f-861c26683e1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c76635d-fabc-4b35-85fa-e7488229680c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6d246b-cc82-4778-a7ba-9413087ed2ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4530a181-3695-4492-b6eb-f6969671b3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe85410-e082-43c7-835b-5f0743a749d8",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b24d12d-3aa1-4ffc-925f-ff56f0a34534",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f3e9623-4cab-4ae0-9731-d7cbe98c1759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31dd3f17-e75f-4589-946e-b600b4cdc12f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ace369-2da1-4582-9700-acc8594e2568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236fa3a4-48f2-4b7c-80ab-a7dc025547c2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4c5e21-8db2-4aab-be97-d9e10883226b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cd00fd7-655a-48ca-827e-deadec86e3f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98736b49-d632-42e6-b8ea-c95828550c93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4e5d71-17db-4c9f-ae56-c7c9641049ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb1647e-6e1b-447d-9ea8-94cf81cc65cf",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ec316f-ebf3-478a-a776-11738ee2fdf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9a98209-6d2b-4ffd-9468-ecf3de164778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8635dcf9-a122-40f1-bbc4-555650cf0a2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb74095e-4995-44d1-9a0c-4b4b1e800165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4787e4-c187-43c2-84d9-b1650f2dd9b7",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1c9043-629f-4af2-ad5c-eb8a15a01511",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84c164c5-a007-4c77-9788-e0e54c3777eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdabc291-4f28-4b33-b77c-89ac3e7ff03a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3becafd7-6649-48c0-9b2b-bbd5ea846a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7bde8e-9d7c-45f6-951b-2b5af0a0182a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8e22eb-2482-4125-8768-d52c32772dfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06d5a5a9-ff5d-42b6-80d3-e66f3689f334"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a043db46-5c1a-4671-9a7e-89f0277bb1fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25a00b09-aaa3-40ff-8ea5-cffb15968aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c949fc-10ae-490c-8dca-d341464a651f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39d5c68-5c3d-4a90-8371-c03fb3caef81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47c75dd3-8860-404d-8b7a-267c676cbd66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbc05ed-9674-4b1a-a9d2-7bf0b9617a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48df7fa5-a211-47ae-97a3-e90e00c9b80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845fd7b4-c2d6-4bbd-b243-7f11c5ef8d58",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdea661-e211-407e-9e0c-de09b32900fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acfbb362-9b39-49e4-b2a1-56ab5d1fb2de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e240b3e-6daa-42b1-89b3-f50b1c6539a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d6eb73c-fb29-485b-8eef-732f57811a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9dab07-1da3-4cc5-9286-ccad720641db",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cba663c-82a1-46d9-abb3-b467274bf442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e59b493d-be98-428f-9d96-dd9abf35011e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c69a77-a78d-4c0f-9c31-6f3adf2a5b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f66fce3a-a4dc-4154-8b74-9d7fec5d8ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77f38d5-ab48-415e-90ef-794d74b1342f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f28e93c-3c89-4e80-ae7e-f5df56339d30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "057f09c3-74dd-4576-86df-6c2ab2ef31fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "155b5b29-e8e5-47a9-b521-9b2b42f50ffa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "887d928f-dbdb-408a-ba00-c2ad9efd51ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6c193b-8daa-4ea1-b9c1-042cb5b63a0c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea32823-2d49-4317-9391-9759c5bd41ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3bee05-bccb-4ca3-b9e4-7d1aab9a6fc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32df439-ac69-4a1f-b1d9-9872f7d6d58c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ebd5a6-6133-4762-b20c-9882939705a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c1fa32-944a-49c7-a6a5-8cf06de14377",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b85d29-594b-407c-a33f-2dd9686c1bb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca68c0a8-f157-4bcb-b8f6-4243b2167543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f78e12-d91e-4016-8635-4ec5f2b14617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f9628a-97e7-4307-ae5c-a50179cd4dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2206df3d-5a63-45d9-a79b-e9509977f8d8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f335b0a-5e2f-474c-ae9e-f2995d5861d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "028703b5-55fd-4880-a720-192a01ff8945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6119c08b-c891-4d6b-bf60-770033023c52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f54e7a65-90e8-4966-9a48-14b8a460a404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e0d3e6-a977-461c-8a92-30ebfb40e990",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f474970-0e3d-40da-b4fe-962efef58f07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49fd5797-ed02-4485-9c46-5e26d6c4bf5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01677185-1a96-43dc-ae5a-d7ed67cae991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a3ff34-abea-4884-8691-abecdf559fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1871469d-f0cc-4459-8684-01caf7419449",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9a16fc-6303-4710-84e9-9b7d37d1054b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8063b55-dbcd-47b0-916c-42a511d16c96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e5e23f-e9bc-446a-a940-cf856f8efbe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d32f57-f564-4f8b-ad6e-116ad101380b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce42f20b-4fb1-40b9-914b-cc414da8f5f0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050a3056-e5eb-444a-b645-7235ed99f39a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "191ab9df-a750-4d4d-a9ba-c4188d040b50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abacb9e-8c13-4245-a7f7-a3bcdc36659c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e656aa-1653-464f-acb4-402144a7e982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e14cad3-4547-456f-88f9-9867894a11c0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc58fab-7911-4b55-b7b7-f160f5240e17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "856f82ec-dab5-4368-8bcb-6a6f4e7c33d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c7c00a-075b-4d2f-88f0-2289d72a958a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b97a48-eebb-4e91-8741-30a466c3c116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007ea27d-2b2f-4c73-9ee7-57796da164c1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ca78f5-950a-4b03-93e0-8b95dea14b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72b4242b-de5d-49c9-8e0e-36970d6836b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd8bd77-b4dc-4bab-a039-1a26136842ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "778ffd16-e82d-4a3e-ae35-e9af1d808df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cac2013-103d-4b46-b767-b85114a4dc5a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e945721d-e203-46bc-ac10-6c0ab0a3baf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f10e356-6bc6-49e0-8cd7-a3a93ce1c792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aacee6b0-ad10-4de2-8a3f-70f712e01eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f3cfa45-4cd8-458c-9087-7dae04555ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac428567-05ab-489c-b717-81853fdc7d50",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852d3105-bbfa-426b-9fc8-b49322c12c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab70a91-9fac-407d-9b7f-4736ba9231a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba80e85-04bd-4832-acc3-75f59e58c4b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bab45e2-c9f4-438f-9a1d-7b2f9c250586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41b9394-8768-4c3d-b044-c861d6247b15",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ae131e-36c6-41ec-b5bc-0af5440ce429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d21df1-b61d-416d-86fa-3431a4f851c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde12abc-d198-403d-b9db-43d7a919d5da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f6b43f2-45a8-4e21-81e4-bf62df323b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4dcbcff-3495-47ac-9d39-e8943ffbbfa0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9db73c0-662f-4c30-834e-d12ae51aeda5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f1e6fd5-9f6b-4102-a754-c202c57d56d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "233e5dd2-0c69-4b23-8521-473dcacd5651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70be1d6e-537c-45a9-98f5-d0854df624ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de414ddb-5b66-4374-a238-a293f6ef7c22",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f444123a-443e-43dc-b1db-1008b9d792f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d69bd097-4747-41e5-9152-23f9d5471dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "596fde39-073c-4771-a133-06ed33f69447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5981442-69b3-4ba3-8ad3-b8ded021edeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51456b66-e8c9-41dd-9875-aa8e35c3713a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada98da9-65cf-4a99-8256-39bbf7119cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ac102b5-5fec-41f8-824b-d72ab8864d18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85988329-8691-43e5-9e50-b27c2a4062f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8076b61-6507-4bfd-9601-d5c4c37ba5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714e7885-adfa-4c0f-b5de-0e12dc3d493a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61b3f00-97be-44e9-bc6f-2a264092e5c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e7109f4-a163-4797-99c1-1122b2f154b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c16addf-407a-4782-a4aa-0a07687213ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "162297e1-3029-4029-8dd0-f32b1a1436d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e3aafd-9d80-4ead-b62a-3df36add274f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7d4eb1-0da0-408e-b513-9f493f1e5d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9add4c22-3416-4ce1-a071-c1c83a61c9db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "064e49b5-e27b-483e-921e-d65a1759543e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "685e40fe-f124-4e76-9468-52a6af585880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f20b3cc8-6273-4382-9919-a7b93939bd61",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5906b1d2-3676-4e54-b326-a8343dbfa4dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf3b3dc4-11cb-4301-a53a-b3e47d4142dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09374d62-c552-4406-8701-c00281e98448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d2eca3-3ae9-44b1-bfd1-56a24463ec4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6598c335-cd17-4d7c-9508-257b2cb11b54",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb2bd89-b90b-4b64-a4f9-f1a900250275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d302ea-edb9-429a-bb19-ea3c4d401f5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18ff676-491c-402a-afc2-5084666926d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb6edca9-b6cd-4bc3-8355-fb27afdfd248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6137e737-d066-44a7-a3ef-42156cd58fa0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f001d609-cb94-4f62-9795-cd5f586662a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "069e9c3f-21c3-457b-8415-d13da19052bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e49d6a-ff90-423a-8b53-baa5209dd588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a8133a4-4457-40c0-86e1-c8046c5f68ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1552e988-8b83-4ff5-9f37-d073b14f23f4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15055365-f46a-4cec-a922-c006d56cb084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1794ab0-8235-40e6-b861-44c3a83ed6d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40573951-3fae-47a6-8668-4dac00b97cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd9e74c-7ba2-4197-9761-c9160aea0981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8f23c5-424b-4c26-bad0-d71d288262a1",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20fd3710-e72f-4015-a521-9c4dab7f0939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31152779-76ed-43dc-816d-33e5eb63058d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec20a25-4c0a-479f-a7d6-82a628dfcfe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca9498e6-e5de-461d-b176-047950c0af29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16826e1-151c-46a1-a013-134d4d62e6a7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db56219-0d3b-4c3d-9bac-3fec03711d98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0abd1bb8-75a1-49b2-8907-8408d0477307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c29fff2-60d5-42cc-84dd-1910adc6b3ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78ffe1df-1c1e-47f9-a28a-5cc117c90773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8dcb16-3247-4b1b-b759-3323d4094489",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c16174e-b4e2-4e38-9c02-59ec79b0d926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7819d04a-74f4-4ea5-be2a-2e0e20e66bbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe4cb23-15fa-45a4-85e6-aaa23b196822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1887b782-ca0a-49e0-bd4f-76fb8846db0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030d64cb-6634-4aac-b8a1-ee866f4a99be",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b133dc99-eab9-43ed-8024-04f495a379b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ebb8992-ca0e-4ae5-9272-a754fd589e42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a19d4a-dd4f-467a-bb8a-7dfff970c9e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60ad553-b3de-4d6a-b1a0-771cb5c62e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d50a34e-2275-4405-8abc-7f18d49d8d55",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befb1e7d-ef12-43a0-b1a8-2de179fc18e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af548022-ccfb-4125-a860-3fd5a4159b84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0249f3ec-ed1f-465a-9c65-e676467d615d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd6cb66d-7bab-4553-8aec-42663c9e7d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a799acc-6ff1-4422-8c73-fe171d15fe89",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d66c60-e4ee-43b0-bae7-35bf21863dfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b7108ba-5942-4c37-88b9-35d0ce3e1ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15497001-60b9-4afe-b852-a782b5847ed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a8fca9-5d56-4380-b7f4-b02d2b793f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0970b405-21a4-4807-94d2-83312de2d66c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4234292c-f102-49c9-8b67-95482d3261fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "161e60a5-e0ca-43a3-ad40-46df80be3b5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8142de76-1fd5-4add-b851-898789719669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b690cb28-02bb-4462-9da7-a66ea511a562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9b5cbe-15ad-4e15-9a43-a8b3de478d19",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874ca79a-9952-411a-912d-3a3b19907f16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf8d66d1-58fe-4020-ac16-4ecf84b05a9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea3b093-a8da-4470-9326-dff652c6b52c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "603cb7e3-663f-4857-96b0-7a14e324fec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4fa927e-94df-4c14-b1af-e5e6541e0869",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05178006-20c3-4cd8-b0e3-3c813ac2106b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24526dc0-c952-48d1-8aa6-92fbf4f4a466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ff561a-7ce6-4372-9669-0f2727a869e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04836dbe-e174-4f3e-a94d-2a97d8b53cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9228ff0-2da7-4a20-8673-23879d4a44a4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1f8465-e22b-49f5-aec0-ce35141582a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6aac3513-5574-4659-9522-5eb6c0e78f35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c645c38d-ef71-4ff2-af3b-220e2642a1bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05d60eee-5fc8-4c0a-9d91-0d9c4789cecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a77af43-169a-4800-9483-294482e6c11c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73ea847-0c37-4f4b-9224-3d11d134b741",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebc98feb-c1a9-49d4-9c12-c91870a1ccd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1844021-9c54-4c59-a91f-a8780fa483bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e72dc0be-8e58-40cd-b905-fcb48da24a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c816e512-1cf5-4c50-86c0-5caa14ffd745",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd9aac5-51cd-4312-88e0-41bbe5f7307d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b8e4058-67be-4aaf-97d4-56d50ab00334"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb8db03c-6a97-4ed4-8d91-f791f028c362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692cfe92-e861-43c1-8dfc-4a0695f725d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a48794-f83b-40da-b38a-b42525064626",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8530c4b-95ae-4166-b1f9-144fe91d206e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "786de2cf-489a-4714-9ea5-4e8afb2f5211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7611e8-f2da-4906-a18a-78342e6a711c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eafc0bc-cf8f-4957-8da2-c0093898e469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11916a4a-c93b-4979-a363-c4f7bfc190c0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02319616-2609-401f-9859-d1b52afa7db7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84995352-19ad-4708-b2c9-04d1d2ca722c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa06aeb-1948-4b1e-bc8d-569e44fa10b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6184b499-d9c6-4f12-8786-237e63a8e8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16407425-c702-4ca4-b0de-b938be3874db",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277ab338-97e4-4aa4-a3ac-48aed95a3ff2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c97924b-5244-4941-8101-6ec8efc59ec4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0946d7-8d47-4e68-bde8-7e6bd07800c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "155cbd1c-64db-4643-b88c-ea02fe96265b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893674e6-b5e2-41e2-9c2c-e13681b99f2e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb9983e-cb5b-4d4a-a9f9-f9cf23918723",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "766962e6-90c2-4450-af8f-f3ae59480f96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10a0b56-36df-4a58-a1d8-1c19c493ff9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "811a1b16-cf56-4c5a-9a5d-b38eeb716bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf63814-f99a-4258-8744-2b304f22c067",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00c3f8b-ac50-4f20-bc17-edb70e620cc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "058aa8c4-ef46-4548-a421-bf2f9b121113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6bf6605-a2b5-4416-b8a9-c14154f2720e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f8ded11-b8e0-4859-8d02-6768554a7a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8981fb-707a-49df-9c6a-5fe7dfdf6762",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6fbe91-b967-43f9-85a7-6d5c74811e05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00bee0fd-25b5-4c55-b4c2-9aab85126ad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc43c13f-52d3-45bf-879f-8ddf84b01302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f06d82-59ff-4f80-bfcc-8be421d6071e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4175601-2d02-43a4-bee2-f099c714abec",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2486fa12-7775-4ce2-9e48-a71ff08f6177",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f4670ab-f209-4a13-af7b-53d10e05fcaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef43afa8-f76c-4737-85a5-4854caef61ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ede5fac-a723-44cc-b800-1aa4fe7029b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3921ad-d613-41cc-bee0-478541035ac0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aed1bfc-0077-4277-a623-33d7cf7cf13b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c14c47d-876d-4b31-b57d-01256ac595e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc396f1-3026-4f5f-81c0-30efe4cef9ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc36927c-1663-46ca-acc5-0d8c4d02ff1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987871b2-dd97-4585-a71b-2d4162215b64",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28676c4-fcfe-4cf9-987c-636abe3e3911",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93481054-9d8c-4e01-b26c-e6e1c0167e02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "474897b0-e1e1-4ff5-9607-fc93cf3f55ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c240da-bdad-4571-a89e-da8b88cf1766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a51c621-d3f5-4826-a343-7eb150ce46ce",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d9a9e7-bf8f-4af3-9335-05ad2e89612a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c7a100a-ce80-4db5-b812-5fed14027756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b696194-5a0f-4700-b26a-b1c082db254a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8b856dd-7378-409e-b211-27784ac34d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3fb3490-b417-4409-905f-894cbacdc7f3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4afcf5e-31dd-4fa1-8086-015f281e6bd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "205a0ef6-9a47-4775-a992-88d511287180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0545a26-c852-4899-8516-17de7dc93ed9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfaabef9-5d71-4141-a52d-5d9718f71b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b2579f-9afc-4e0b-809a-21e0e10b120d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac49d843-89ba-419c-a64d-f00fbda524bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24ee46ee-d538-493c-a69a-4b4bb0981172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8072adfd-e8b5-41e8-8c51-fdc47617c2b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cf7b495-a096-45cd-94ea-b4b1a3539e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b577870-b7d2-430f-8fb9-b5e28bd0827f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1eaeca6-fa35-4abf-92cb-972d0a226e48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2b3cdc0-b9a1-4ef0-b520-53a4730d37a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93e9268-2b73-4f1e-b5d6-2008c0e52759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccfe9718-ea48-448b-bbde-36b4c28500e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4400303-5c9f-489f-91e9-3ff3259b7245",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfdb2970-7b9c-41f4-82c0-eb9d9dfa9cfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2feab0cf-f9e1-4085-b0d1-02bc09df418d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23140a9c-7fe7-4272-83e3-eeda6b4da7fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f78c396-864a-4ff2-b4fe-a9d2820eb456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7fc310-7681-4b80-95dd-b00422da3e38",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d409ca9-4218-425d-bfd8-c981bf588fb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfea8b6a-8e77-4073-8552-b8510edd18bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd24744e-c3b0-4424-a17f-698fa2580448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a9fe3b-be63-47b9-9f3a-70d8822b9281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546e401f-8f89-4518-a2cc-24340908ccb8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a2afba-2858-4bed-b706-3451ac453900",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f231d546-3bfc-4420-9914-ef5fa6ce04dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c37f96-6710-4d95-b7ec-55cf96ba351e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f97d66c-7aa4-42ab-a1d4-79bfbcb0236b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bafc217-e30b-4a39-b794-6efde3e9b5c4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0aeea89-c3d9-4153-b598-1c4db9369251",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86108a9a-8ad8-4457-b41b-45709e2b78b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54104ca7-b33c-468b-8dd9-29924fbd530d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6758e9dc-3b97-40b1-ae48-45dfff91db83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa101614-aa1a-4269-9cef-4b0059cc74bf",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38db5f47-17c8-4d04-a982-56158a263adc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66af591b-b79b-498f-a459-36ba6ae8c45a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fd712c-e7a1-4b07-a18a-c2111a13fc64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "444ec888-15f1-49fa-91c9-838c6e7b59b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b547643f-73ea-40b5-a303-3267fb32c59a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "effdd34a-7561-45be-b438-570976ca37d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7609bd33-229c-4010-9f01-a7ac40c6e047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f6cfdc-666d-44f3-9812-771f1910ec55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf44c4f-13ec-4606-bd6f-fa930e9fac18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d490de1-e4fb-4550-9d33-ed96db3802e5",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d50ca4a-1eff-42da-abbc-c4759fe5b386",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e56c53a2-12de-4ebd-8632-9bd1e2ae2103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9243d034-523f-4beb-9b86-b0544b772629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed2cdef6-da01-4cc6-887c-42d61e6f3465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f56821f-5c6e-441d-af05-49814d3ccbf7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89882d30-d9b3-4e0e-958a-12d4758f1ba8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccef1a24-68fe-4f56-8307-d22c639eabd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3b7f6d-099e-46ac-8c1b-7bdde4415088",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0fa72ad-56f1-40b1-92c2-1e147ec93398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f50d7008-b35b-4ed2-8b8e-88f5805ca612",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe026302-4ea0-4329-85ba-a6c93075618f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2715e218-19e9-49a7-91f1-f3b54dc02e39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03636bcf-67fa-4182-b1fe-6fa9da8c2e7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b3ec8d3-d71c-4712-8dad-eab99b80ccbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1939d36-4bdf-421a-897b-6da2b3c1940d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e02700-d517-443e-a9dc-c4a653bb85f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32591b6c-c6e7-4a05-8bb9-f12cb93815ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b6f7f7-c603-4bf3-9b3c-b88e00a3b028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4951a1ee-8565-4ba8-9aa4-35d60601723a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0afbf1ed-d659-4af3-ab2d-4284de6735e5",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35473a5-c379-44d2-899e-6cb0205f6766",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "728e3d00-43d1-4581-809d-cb5b66f11ff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8febcd33-ea58-4a78-ae43-c6f611632535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef28155-2729-458b-b2da-3c54b7661fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920a9e32-5289-47e5-bad5-66480e79ac51",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a68b284-ebe4-44a0-87ef-ec15cd49925e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8a91b67-2829-4635-9e7b-9faeb70b61ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8ae54b-9b25-4b95-92a1-3dc64479966e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5146bbb2-2776-42d2-a569-02ed03b86599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a0011c-54e2-42bc-bfaa-776316896c09",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c0f9fd-dea8-4cd3-98b6-979df16e0d68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77f76e50-f658-47ff-a689-c0ac054b6812"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7ccd64-e8ab-4e4c-a0bb-5731bcca4d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "070382b8-4028-46d8-90c7-2235422e660c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6bd49d-0e4a-4ce4-b8b1-e039901db38b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa79121-e101-4029-b612-228bec74aa3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10b77ff7-eaaa-4b0e-abe5-fce554a21e45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f042b734-fb30-45cf-a4e1-79ef588b6667",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "576067f6-736d-494c-8cbd-81277b0a9a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef62c8b3-931d-4ebc-9e87-f7bf33451e48",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0409298-fc3b-40a9-8cd5-31c845680d91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaa355c9-daaa-4325-a42e-62098a992bb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28efb32f-36cb-4321-a8d9-ccf454b549d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "399b3647-0a38-422b-90e7-891c7cf313b8"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1adeaa8d-5363-441f-9561-3724de2d6292",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d445489a-573e-4cb4-a451-01c8968b2eec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "599cdd76-6da4-4388-8604-dd66e8067266",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3771172a-da9b-4440-8b8f-fc28dd50c217"
                    }
                  }
                ]
              },
              {
                "id": "3f1ba7b5-1598-481e-a654-b0d3d1933b01",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2f313269-1ef6-4287-9bc8-84a689110df0",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e61ef8-be48-49cc-84ed-24a726617c77",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "cf1b60b7-34dd-4074-9e96-9cee7196c726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6843a9-57ec-446a-af42-cc53aa49ae03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0ece442-8e37-4196-a97c-3465bc01825b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b852473b-4e59-4a1d-8470-f9f0adf21a97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d26da9a9-44d5-4324-8052-97338943e5ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb7ff19b-0ff0-4035-91c9-d2854229f576",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e778c15a-6301-4370-9c66-b6d4b50263fb"
                    }
                  }
                ]
              },
              {
                "id": "317d1848-ff1e-43fe-a64a-5179b7d9aa31",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2f6de95a-0db2-4c50-921a-c97e39e95bc6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4da767-b51e-4b4f-9339-7173b1340ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fb72ce1d-90c7-4365-b2e2-7a5bcd0df479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5726e3d-5473-4d93-b4bb-4b979535aee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a2ee57f-7a56-415e-9761-7db0694c1268"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ca617608-469c-4d10-a02f-8caa45510ca3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f43b2756-d8e9-410f-9a9d-27cd4184189a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f010743-dbdd-4e27-974e-55f6e5ad8231",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "88cd4bb9-fe10-44ea-b0e9-c5ec8820b039"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc56b1dd-a9a9-4886-9901-8075cb32c1c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97e69615-28e6-4b03-8eb4-890278138707"
                    }
                  }
                ]
              },
              {
                "id": "eeaa796f-2825-467d-81d8-d4b933e427ad",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44a78944-7dd2-43d2-a5e3-9119ddbab84c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5d9b5a7f-4c8e-4b78-b4aa-60763a0e867b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6f34a14-da60-4af3-9154-f643900b5e20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc16fe8a-9bd0-42ce-8ac5-7e3fb75653c5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "78bd9a2e-c887-478b-b4c5-2a445c39ba6d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b9835be0-97eb-41db-ab92-b0f375fdc873"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e45f3c1a-a255-4d69-9e31-a94788370746",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0027d055-3da0-4f86-97c5-c4814e1f0410"
            }
          }
        ]
      },
      {
        "id": "c88f8463-1557-4a1b-be8b-1cde759fc5f8",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "76aaa26d-ac00-413a-8006-81b559600cfd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eff975b1-2d2d-4b4d-9a26-74758ea32b15",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "781a9f70-d1bd-42a0-a2cd-d7b41abb825c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9748c05-a817-47f0-a2e4-43aa68919bcc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b1272aae-eaf6-47bd-83e6-3ee234682754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa3e812-117b-491b-b7b1-e133a8458604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b2c69dc-c470-4590-b548-7d236f135fe8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "301e4598-0682-4548-b2c7-40e3975627af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "010eba2f-a80c-43c8-841d-95c8f687f151"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "df5c66cd-fe56-41e8-9a05-53fbe8f9d2cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4852e67a-3e30-445f-b4ec-2d0d21bab19d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7a747e73-96de-4c8f-9288-ddb04c5d998a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4ad64ce5-0013-4b7f-bdc7-b4841bd69f9f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b106ff2-f115-478c-91cd-b5c585ecfc1f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ad85e60-e61a-4892-b9d1-18542f9c12a9"
            }
          }
        ]
      },
      {
        "id": "f5519336-2917-47f5-be5d-69531b8e4ece",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2be33e0d-c913-440e-9fbe-04782e85cc87",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c0d5f48d-7aa9-40cc-92d7-1c30dde35229",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ea92d95-90a0-4a0a-855f-1e6c1b756634",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0a215e-f8d5-4713-9692-884098e079c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67a3d266-49be-455d-8a96-31d6e3542e81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "579f5d42-13f5-49e7-916d-eb21cb0a2c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6b644df-2a37-4055-a2ef-83b40c603098"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "406dab3a-69d4-438d-a0c2-0580943bda8e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2190dba-290c-4281-b401-e626c19832a5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c376ef0-f4fe-40c1-a5cd-e9e2f8acff2b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ee6d8cb-db2d-4c0e-aebf-90add023860d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1428da1b-7a66-4365-a63f-a76334cf1828",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "96f6cd0c-0b06-4b83-8000-2c505ad2a3d7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01ddeba6-43d3-4222-b747-2e1930897de6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "06696f9f-63d0-4b85-8a79-507109bf6259"
            }
          }
        ]
      },
      {
        "id": "d9dfec81-21a2-42b7-96e9-a311efdd1441",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5323804d-e02e-4d1f-9e6f-8d0a4fea73c2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f39f6949-9780-483b-ba33-23b23722c119",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1d857705-fcf7-4ab9-9d27-4f4482a53c7d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5370dd1-8d0a-46fe-af25-6f23a522a0db",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ef4b07e-96f4-431b-8605-940d834ffc22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1e43a7-41f3-4d18-acb3-87cac4d6f9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d02f97a3-54ce-48be-9c0c-3e55dd144bfe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5222acf8-441c-42bd-ba12-096c85659c92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d170e03c-1334-4337-bd1d-08bd7dba5384"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4a73649-f3de-4956-9a73-9da2e13ad2d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c263210b-1443-41a5-b938-5a5031f138dd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b6e151c-7ecf-405b-b609-101b919dd203",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0e6f35da-7402-4b73-b598-6ca4b405713c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9d65b10-5f54-48c8-9d0e-6498623b833f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "429e03f7-b011-4377-a0e3-5fa3a29c9991"
            }
          }
        ]
      },
      {
        "id": "e4a11ad0-3fd6-4e54-ade1-53a98702be4c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f927b5c-62da-466e-8d53-2f1a72683e8d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bcf34a89-7793-4ae6-bea4-3cd8fac7db3e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e61940a7-2be4-497b-b4e0-b1afd6741761",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b150c0ce-9e63-46b8-b8f6-d0a84bc0ae0a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee90c7be-647e-4979-a092-da6f16a493cf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 241.69718309859135,
      "responseMin": 11,
      "responseMax": 9635,
      "responseSd": 995.2228357553735,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1689036115189,
      "completed": 1689036195493
    },
    "executions": [
      {
        "id": "512da5d7-9ee7-4687-9191-32a267940cc7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "54319684-8ebf-44c5-bba9-68de78ce3cd2",
          "httpRequestId": "5a67b60f-6120-4230-9aa7-6d0e7d2b76aa"
        },
        "item": {
          "id": "512da5d7-9ee7-4687-9191-32a267940cc7",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "94da13f7-52b5-4fdd-9f10-8d9ed11d4f86",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 0
        }
      },
      {
        "id": "ee0c409c-6bad-4ad2-8877-982770147dd8",
        "cursor": {
          "ref": "b308fcfc-efda-428f-804e-a213fac5e0d3",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "876bca9a-4078-4ae8-bd41-7dec8ee4b782"
        },
        "item": {
          "id": "ee0c409c-6bad-4ad2-8877-982770147dd8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f0ab2ea6-8004-44dd-a8cd-29b3fcf12400",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "104dca64-957d-4dfc-8e0c-b0f306d33b00",
        "cursor": {
          "ref": "6f9e4fa8-d3dd-45d0-b88e-21488c07625b",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fa6ec9bb-15b9-4093-97b7-ddecf26611eb"
        },
        "item": {
          "id": "104dca64-957d-4dfc-8e0c-b0f306d33b00",
          "name": "did_json"
        },
        "response": {
          "id": "822c909c-a71b-40a1-afbf-b91977ae7d89",
          "status": "OK",
          "code": 200,
          "responseTime": 467,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c9e37b-671e-48c6-9242-b82bf242113f",
        "cursor": {
          "ref": "0d652a2b-d2ec-4031-9aea-15b5a00de297",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "de499812-7df7-4df3-b815-e4ef94ba985f"
        },
        "item": {
          "id": "d8c9e37b-671e-48c6-9242-b82bf242113f",
          "name": "did:invalid"
        },
        "response": {
          "id": "cab0730e-1f6f-4ce0-a730-86a63d6e32d2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 851,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d8c9e37b-671e-48c6-9242-b82bf242113f",
        "cursor": {
          "ref": "0d652a2b-d2ec-4031-9aea-15b5a00de297",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "de499812-7df7-4df3-b815-e4ef94ba985f"
        },
        "item": {
          "id": "d8c9e37b-671e-48c6-9242-b82bf242113f",
          "name": "did:invalid"
        },
        "response": {
          "id": "cab0730e-1f6f-4ce0-a730-86a63d6e32d2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 851,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "8d35a25c-9e6a-4a14-9d6b-82d3e61d1997",
        "cursor": {
          "ref": "31d688ca-230b-4f25-b1fd-18c0a02941cb",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b7872a53-7bc3-4add-96ad-8a823505d188"
        },
        "item": {
          "id": "8d35a25c-9e6a-4a14-9d6b-82d3e61d1997",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "40bc8d08-f549-4522-915f-c6b5277d4735",
          "status": "Not Found",
          "code": 404,
          "responseTime": 28,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922dbb72-0d37-4abe-9d5c-350f6db30ebe",
        "cursor": {
          "ref": "4b7aac7e-5214-4373-a575-5f4c7fcd3bf0",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ad7dd895-f755-487b-aeea-f69f9f76a388"
        },
        "item": {
          "id": "922dbb72-0d37-4abe-9d5c-350f6db30ebe",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2d34c343-6ef5-48e3-8238-34faedc7c341",
          "status": "Not Found",
          "code": 404,
          "responseTime": 21,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b66242-35de-482e-8fea-d7fe9b81f0bd",
        "cursor": {
          "ref": "2cf3ed25-186e-463f-b89b-dca05162b5e0",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b82645b9-d2bf-4898-af28-cfe9bb9d3e7b"
        },
        "item": {
          "id": "15b66242-35de-482e-8fea-d7fe9b81f0bd",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5854a05b-53b2-4010-bbbe-dc1561354026",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "a687402b-0c1a-407b-a26e-6c0a1d1f90c8",
        "cursor": {
          "ref": "423e526f-c1d0-4dd0-a7a3-7305b91d13d8",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5dc0c301-dff5-44ab-97bb-b607268055ef"
        },
        "item": {
          "id": "a687402b-0c1a-407b-a26e-6c0a1d1f90c8",
          "name": "identifiers"
        },
        "response": {
          "id": "43d1a7cb-4d23-4579-8230-fb162506e616",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae5a95a4-a970-45cc-80ae-66fde7667939",
        "cursor": {
          "ref": "8fd84627-9bf2-41fd-9d83-c41352700049",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a0773e07-0753-4639-b254-39416a593958"
        },
        "item": {
          "id": "ae5a95a4-a970-45cc-80ae-66fde7667939",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "74197ec0-d475-4ae5-bfec-5a451f3524ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5483c25-c10e-4af5-a112-4a7b0d3826cb",
        "cursor": {
          "ref": "35851312-897b-4eda-bd8e-8176920e4fab",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f2c2eebf-d91a-4d01-b8cb-3654c7020028"
        },
        "item": {
          "id": "a5483c25-c10e-4af5-a112-4a7b0d3826cb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b9419a1f-ed57-4ac0-ae63-d1f0abd12f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea46aa7-e19c-4fda-aa42-e7cae0a1006c",
        "cursor": {
          "ref": "f189de39-155c-4c54-9c3a-c0379082c16c",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "77230f6c-62d4-4ae3-9d2c-e02b2577c173"
        },
        "item": {
          "id": "3ea46aa7-e19c-4fda-aa42-e7cae0a1006c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "de7672bb-0a28-4589-b902-a2c0979b7c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a50e57-ddd5-49f8-b0e6-316660204c15",
        "cursor": {
          "ref": "96a26582-3fb1-4892-b53a-52a17e41b457",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3df189bd-89a6-402e-b188-be24a5ea72ea"
        },
        "item": {
          "id": "42a50e57-ddd5-49f8-b0e6-316660204c15",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6593ce44-18be-49a9-a029-95c2ecef0a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55dffe0-172a-4364-8a27-1feef7d590e0",
        "cursor": {
          "ref": "12939f0e-60a0-4721-9193-f639bea20560",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "04d89949-bfbb-45cb-88e0-f228de4290c2"
        },
        "item": {
          "id": "b55dffe0-172a-4364-8a27-1feef7d590e0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "513295c4-bc95-4bb0-af19-d8d390b491c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5af7fd-d7c5-4927-a151-d6a7866c6af4",
        "cursor": {
          "ref": "8f2e91fe-70b7-4400-93ae-74c0affae4cb",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dec9b61c-0e8b-4789-9329-54b5c68b1358"
        },
        "item": {
          "id": "4b5af7fd-d7c5-4927-a151-d6a7866c6af4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "da27af7d-b965-480d-a0e4-3257b9c53c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7919e1f-d00a-4f01-85de-1d22f8c86d29",
        "cursor": {
          "ref": "5cbe8630-cba5-4bc7-b70c-d9c9064361de",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ecfa0403-29cb-4b0e-ba40-51aaad4f90a9"
        },
        "item": {
          "id": "a7919e1f-d00a-4f01-85de-1d22f8c86d29",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2d102066-342f-4783-beed-1a6e9db04d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65962da-5707-468e-acbd-2c171f09d26d",
        "cursor": {
          "ref": "4b2037b7-c1da-4290-9782-d5b9d6d94fd2",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9a9e13bc-a31c-407d-af5c-25c23dbc0c4e"
        },
        "item": {
          "id": "e65962da-5707-468e-acbd-2c171f09d26d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "103817fe-9c42-474b-838b-66bd0b53921f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072c49a8-1202-4426-a768-4278b9fda886",
        "cursor": {
          "ref": "4475d6a9-7229-4f10-80c2-6f51d38f6314",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6e3f5a82-3e09-462d-84b5-a040859574bb"
        },
        "item": {
          "id": "072c49a8-1202-4426-a768-4278b9fda886",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2367b74f-92b4-421a-8412-0f0e971e4506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f14e81-7659-4281-abef-5d067533edfe",
        "cursor": {
          "ref": "ff7ce67d-afdb-43ef-9864-9172a2f973c5",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1e9a4d55-7e68-4d4f-9174-780e533741fa"
        },
        "item": {
          "id": "63f14e81-7659-4281-abef-5d067533edfe",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "22cf85d2-7487-4385-b723-72604a08f4bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09681f04-3d5e-43e9-86fa-d9caf7ae8bc6",
        "cursor": {
          "ref": "9eced632-b8e0-48a8-9cfb-4c1ceb25cc3b",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6941ff05-20d7-478d-96cd-9fddff93bfd5"
        },
        "item": {
          "id": "09681f04-3d5e-43e9-86fa-d9caf7ae8bc6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c0d1a7ff-b013-480a-95af-373db50b43f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2b040b-ea38-4ec6-b8a1-07ada7520426",
        "cursor": {
          "ref": "0d8f7da4-2951-4500-8455-ec4b8ece4c24",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "87408ced-4937-45db-9911-dc1cd35831a3"
        },
        "item": {
          "id": "6d2b040b-ea38-4ec6-b8a1-07ada7520426",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ba359566-8290-41a4-907f-8f1a65290732",
          "status": "Created",
          "code": 201,
          "responseTime": 687,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "20365dd7-f8cd-486c-942d-17284c2d440e",
        "cursor": {
          "ref": "f4f8175c-85c5-497b-89df-7f24ca8b087b",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "da4cb95a-9b5b-4d1d-ac3b-6516b233109a"
        },
        "item": {
          "id": "20365dd7-f8cd-486c-942d-17284c2d440e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0e72b29f-852a-4843-9e91-28bb1ba8bc48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ea2724-5b1c-42d0-9d46-a9a2832d5498",
        "cursor": {
          "ref": "50eac803-ce66-4c0b-8a5f-372e9cc9fc4e",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d6d40e50-c020-4a87-9b7b-2b49a0a3400a"
        },
        "item": {
          "id": "a1ea2724-5b1c-42d0-9d46-a9a2832d5498",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "834a4348-135a-40a8-a129-10d938aac71b",
          "status": "Created",
          "code": 201,
          "responseTime": 7889,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "5dd98c8f-4488-4804-b68d-fc91cfaedb61",
        "cursor": {
          "ref": "2016e4bf-3fa3-43f1-adb8-b4d39af76d5a",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5dc3f574-d290-4efa-ae73-e4718a516265"
        },
        "item": {
          "id": "5dd98c8f-4488-4804-b68d-fc91cfaedb61",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7df088b4-2898-47d0-b74e-73b90e1aadfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b912923-5684-4b28-b09c-0ddb03060837",
        "cursor": {
          "ref": "5eeb6aa7-221b-4933-867e-02b802480180",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f2f15bde-4065-408a-84bc-6f04a9a32fd8"
        },
        "item": {
          "id": "6b912923-5684-4b28-b09c-0ddb03060837",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2f77b1fc-d9f5-4daf-84f3-3b57fb86a306",
          "status": "Created",
          "code": 201,
          "responseTime": 6363,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "11706b8e-1add-4ef1-bdc9-a18cffa8ca07",
        "cursor": {
          "ref": "bd15c580-93bd-43b2-9de1-4698d4b18750",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "481c659d-3747-44c5-a89d-0686229cb30b"
        },
        "item": {
          "id": "11706b8e-1add-4ef1-bdc9-a18cffa8ca07",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e5cf8d47-c381-4a60-8c7e-08fd2de04d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b61331c1-2be0-4e75-ad6e-2ca69e8897d0",
        "cursor": {
          "ref": "c0a737f4-ac5e-404b-8150-5932d7b34fd5",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "1f676df7-af4c-4eb3-80f7-76d6c05e8177"
        },
        "item": {
          "id": "b61331c1-2be0-4e75-ad6e-2ca69e8897d0",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a963fb38-6a96-4df8-a39c-40e4160bec71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e22b809-8449-46ae-a07b-a4adb4e383d9",
        "cursor": {
          "ref": "b682f7d0-7f3b-4f4e-8851-b62bbd6d5f15",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9ff8c559-59f9-4147-b513-7572f2c631cf"
        },
        "item": {
          "id": "1e22b809-8449-46ae-a07b-a4adb4e383d9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "104d45a9-7447-43fb-b752-a0cee2196140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81dda8de-ddd8-46ae-ab8a-84284b0b423e",
        "cursor": {
          "ref": "65ad2727-184b-4f86-bd0a-5f5dd55528b0",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0cc3b948-be52-4671-b834-17ce9d64bdee"
        },
        "item": {
          "id": "81dda8de-ddd8-46ae-ab8a-84284b0b423e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2ff5776c-8a5d-4ff7-8f66-d870bfb68c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab420fe5-7d2b-4dbf-b0d0-03813e7e53fa",
        "cursor": {
          "ref": "1361a0b2-750a-4074-89fc-a482c6384f5c",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "df2ba046-79e2-4fe1-8d1a-47b104f7d67a"
        },
        "item": {
          "id": "ab420fe5-7d2b-4dbf-b0d0-03813e7e53fa",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "39edfc3e-b1e5-4c2a-85a6-f6b9071f09cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102c76b9-6ab2-40ad-be5d-4ec3fe8d7dde",
        "cursor": {
          "ref": "b26c866f-e509-4b8c-8361-6d19dce81353",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "65b1d5e9-bb8e-479f-9030-161152982cd4"
        },
        "item": {
          "id": "102c76b9-6ab2-40ad-be5d-4ec3fe8d7dde",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4f583663-0b18-4ee3-8428-0cb249ffa391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2038036-c3f9-460d-ac3c-4169ece8a8b3",
        "cursor": {
          "ref": "c760e3ed-4efc-49a8-8c33-d66d1700e06c",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6a5379d2-219c-4f76-8b1c-5c43cb0e9df5"
        },
        "item": {
          "id": "b2038036-c3f9-460d-ac3c-4169ece8a8b3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "96583bd4-f808-49cc-a42e-3a8a96d0452a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73b9db7-1b8b-40f2-81b2-5c70edfc32a3",
        "cursor": {
          "ref": "13579c7f-c129-4715-9a47-c6a890727316",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7bf5e3da-2c2b-4d42-9568-863dd253bb9e"
        },
        "item": {
          "id": "a73b9db7-1b8b-40f2-81b2-5c70edfc32a3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8d1e99fd-e96f-4df2-9b71-a6194c55c997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84405f80-efea-4e9e-a6fc-222c30212b7e",
        "cursor": {
          "ref": "2cccb802-5f44-4e9c-9d26-58f06c4308e0",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "05e73981-aa8d-41ba-a7d7-507771b65eb9"
        },
        "item": {
          "id": "84405f80-efea-4e9e-a6fc-222c30212b7e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fb00461c-ca75-411e-8280-792d455003aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57cc2bc2-3fe7-42d0-aa74-cec0bd0c542b",
        "cursor": {
          "ref": "c552c139-95d9-4907-a92d-02b9c7da7aee",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5db76705-d657-4ce3-9cd8-84c7e731d16b"
        },
        "item": {
          "id": "57cc2bc2-3fe7-42d0-aa74-cec0bd0c542b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "50f15dcc-eeda-418b-9ac3-772d3b12c7b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851ccb81-2d01-4c1f-bda7-a9d5f268e184",
        "cursor": {
          "ref": "dc42fbf5-b916-4e36-a47b-1c4f7d5bde68",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "06455c90-7d45-4fa2-b5fc-f2f5ad5e83f2"
        },
        "item": {
          "id": "851ccb81-2d01-4c1f-bda7-a9d5f268e184",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "44864969-a9f4-442e-8703-87c0b4c2b7e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "212d9343-f6ab-4b3c-a8f9-050785e4da98",
        "cursor": {
          "ref": "df6c4612-53fb-4388-ac3c-e11dbd372a2f",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0f68c8f7-ffd4-4d94-8f15-dbbe8e2713e4"
        },
        "item": {
          "id": "212d9343-f6ab-4b3c-a8f9-050785e4da98",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ff1283e9-ecdc-4141-a21c-a197fe9b99ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93046569-ef1e-4a2b-90f1-bd77f0844bfa",
        "cursor": {
          "ref": "8b06aea7-822a-4d89-b8f8-f9629086a88a",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "764f15d4-4ebb-48da-811d-22bee2b6a7ba"
        },
        "item": {
          "id": "93046569-ef1e-4a2b-90f1-bd77f0844bfa",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "79161021-b02b-406e-aba0-59d7be303be0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "164fbb23-a0c9-4016-9654-0199eea5464f",
        "cursor": {
          "ref": "cc8220cc-cc4d-420e-b2fa-8d8693d1ed28",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a47de185-a9cc-4d6b-a4c6-3c91488e3dc4"
        },
        "item": {
          "id": "164fbb23-a0c9-4016-9654-0199eea5464f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "dd0d9627-9e00-409e-91b2-3257049e7169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f793ef81-a79a-4116-8963-935c8dea2b48",
        "cursor": {
          "ref": "644c37a0-d520-4ff4-8e4e-81a936914512",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b5797799-c6a2-44f4-98a6-b1022fc5bc6b"
        },
        "item": {
          "id": "f793ef81-a79a-4116-8963-935c8dea2b48",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "13555987-0cb0-4bb8-93c9-84cfa8a3eadc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001c0dd4-20c3-4162-a7e0-2ca3a7344d34",
        "cursor": {
          "ref": "2ac163de-a81d-4bde-8284-a0c8cb9ac35f",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7e537c1d-b792-4f64-a235-00128ded3344"
        },
        "item": {
          "id": "001c0dd4-20c3-4162-a7e0-2ca3a7344d34",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "54a84014-7170-4104-8d5b-3d11cebcfc29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7735ee94-f132-48c3-b839-f4f4ec0d7c83",
        "cursor": {
          "ref": "e7ae3e79-7d97-4992-a207-c5866af783dd",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "cc450c95-3782-48c8-af58-f56f519d93cf"
        },
        "item": {
          "id": "7735ee94-f132-48c3-b839-f4f4ec0d7c83",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3ff6220e-86a4-4541-a30c-79ecc04934db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d40ed08-7f0d-4340-88d8-572af0b23211",
        "cursor": {
          "ref": "370c9c63-5276-4000-bceb-e63d3fbab134",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "030765b3-92e2-4827-8bae-126631bff56e"
        },
        "item": {
          "id": "9d40ed08-7f0d-4340-88d8-572af0b23211",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8c841adf-9a7c-4010-a1c0-16b62f850f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "773cdd8c-d874-4f92-888b-9983062b7f83",
        "cursor": {
          "ref": "c0c841a6-2197-4d9f-acc2-ea454dac5d52",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "26c5a1a1-4279-4cf7-8d48-66140b1edd86"
        },
        "item": {
          "id": "773cdd8c-d874-4f92-888b-9983062b7f83",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "af3686b4-646e-4565-a359-282c1b15c6e3",
          "status": "Created",
          "code": 201,
          "responseTime": 9635,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "30b0e351-a8a7-4d77-974a-5c22ebf4f4ed",
        "cursor": {
          "ref": "8ca42581-7677-4d89-b128-368f95b828ef",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a2f795a5-e8bc-4ced-90ca-99a1bac55d67"
        },
        "item": {
          "id": "30b0e351-a8a7-4d77-974a-5c22ebf4f4ed",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d5db0910-577a-4005-8391-d18652ebd052",
          "status": "Created",
          "code": 201,
          "responseTime": 2746,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a9619123-0f49-4385-85ed-d29374cdf21c",
        "cursor": {
          "ref": "90d96570-29d6-483d-ad0a-07bbb4463ce9",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6eb0cf39-a19b-422a-8a5f-1e0fa1b0e363"
        },
        "item": {
          "id": "a9619123-0f49-4385-85ed-d29374cdf21c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9b849e04-fdd7-4809-824d-5294f8391a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e1e182b-0852-4855-9228-f92dfb3580ec",
        "cursor": {
          "ref": "335e287b-886d-4363-a0ce-253b2bee0b9c",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9ac6783e-d25d-47c2-96fe-263d0aedcf58"
        },
        "item": {
          "id": "9e1e182b-0852-4855-9228-f92dfb3580ec",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bdccd673-a048-48c8-bc2a-e743d394d518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d3e7f2-99a1-46d6-bfa1-d03ca985700d",
        "cursor": {
          "ref": "d340df32-c324-4f20-b061-a28292de87ce",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "55a21a71-376f-4130-9ee8-9ca3b9e464dc"
        },
        "item": {
          "id": "b3d3e7f2-99a1-46d6-bfa1-d03ca985700d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6b2c9d18-5b13-41cd-8dde-ca45b5e31717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8334b37-efc9-426f-8f9c-bc94cd956990",
        "cursor": {
          "ref": "2c8b6b4b-b14c-42c6-8143-650020aa9ae8",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "972ec5b6-2ba4-4b17-8628-cbe8dd58c7fa"
        },
        "item": {
          "id": "b8334b37-efc9-426f-8f9c-bc94cd956990",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "02414254-ecee-4c50-9309-6c3034cdcede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7800260c-fb28-4b0a-b27c-04f64b509c2d",
        "cursor": {
          "ref": "86aef294-de12-4721-b129-a3569b2d33a0",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e2178f6b-1926-44f2-ba8b-c22a7b723409"
        },
        "item": {
          "id": "7800260c-fb28-4b0a-b27c-04f64b509c2d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e84a7e85-2af7-44f0-830f-f788ae70ab4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767ebddc-35e4-4d25-9d12-ce338fd4e3dc",
        "cursor": {
          "ref": "2181c706-2e6c-44ce-b40b-1a7e9c18f45a",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cbc08246-101b-41cf-9e87-e4f9eba117c7"
        },
        "item": {
          "id": "767ebddc-35e4-4d25-9d12-ce338fd4e3dc",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "293c4876-6315-4c1f-b414-dc5e7d997fb9",
          "status": "Created",
          "code": 201,
          "responseTime": 2814,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "72b3953f-c852-4f61-93cb-8d783fd2b722",
        "cursor": {
          "ref": "9a35cda1-8681-47ba-9766-69b44a2d5b22",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "250243f7-01e1-40fd-9ada-dd1f0292003d"
        },
        "item": {
          "id": "72b3953f-c852-4f61-93cb-8d783fd2b722",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "792e28b7-596e-40e7-8859-d05288c509ac",
          "status": "Created",
          "code": 201,
          "responseTime": 4836,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e480ddb7-5aba-4087-8dce-8f9350c25f02",
        "cursor": {
          "ref": "23b763f7-7796-44c0-9b85-82415706002d",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "43c62c15-4597-4347-8c14-37d1639a0fbd"
        },
        "item": {
          "id": "e480ddb7-5aba-4087-8dce-8f9350c25f02",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b1c3a943-d32d-494e-9067-43d1f7123b54",
          "status": "Created",
          "code": 201,
          "responseTime": 2676,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "61d1ca68-8aeb-462a-8f78-3522ad14551d",
        "cursor": {
          "ref": "0715f520-3caf-49dc-bf24-4473adb84ef1",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6b86cc3a-59e4-49c2-b9a8-f6d2be9c638f"
        },
        "item": {
          "id": "61d1ca68-8aeb-462a-8f78-3522ad14551d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2e8fc47a-825c-4c37-9865-0b9738c11776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55545f29-3557-4098-bd5e-a5f65625963d",
        "cursor": {
          "ref": "263c58ff-c635-4454-a130-796dee07027c",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5ee16ea4-7be7-46da-92a4-9c1b2936ab39"
        },
        "item": {
          "id": "55545f29-3557-4098-bd5e-a5f65625963d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a5bbeb34-9694-4e40-a216-86c371e3fcf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b740afce-68ec-4b9d-9a38-37bedaf24265",
        "cursor": {
          "ref": "b1cf0ff8-78f1-4b5c-a8af-f3be54eedf9d",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "42095c1d-3861-46a5-bc77-3df70690053a"
        },
        "item": {
          "id": "b740afce-68ec-4b9d-9a38-37bedaf24265",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "847db4b0-9127-4d6a-9be8-026366f07965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d027ca6c-222e-4afa-a6db-015b897503ad",
        "cursor": {
          "ref": "0c513334-8a7a-4005-a183-28812ba43e9d",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "642d25a2-5d26-4917-b11e-f066bcec2b80"
        },
        "item": {
          "id": "d027ca6c-222e-4afa-a6db-015b897503ad",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4b2a1c50-a0d2-4126-8f3e-9e1cbe1f28b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba84f07-cec0-4963-8be9-102ec1850568",
        "cursor": {
          "ref": "b3db4fa9-757d-4b59-ad8a-e9db61ed9203",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "523d265c-8766-4834-90d5-f71fb73911f8"
        },
        "item": {
          "id": "7ba84f07-cec0-4963-8be9-102ec1850568",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "049bbfd0-5772-4e47-85db-0d3ac7cf159e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c619f02b-e3ae-4cbd-971d-c7d49e8bb66d",
        "cursor": {
          "ref": "8ae5fb44-de7d-46f1-be6a-48dc399b7a26",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "db9dfccd-077c-49fe-b5d6-5814876fa2c0"
        },
        "item": {
          "id": "c619f02b-e3ae-4cbd-971d-c7d49e8bb66d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c725f95f-7be9-4a93-a3f8-7e4b122b2f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c54f9a95-91d2-4aca-9f6b-06e3eda70db7",
        "cursor": {
          "ref": "a46b63c5-bf77-4d47-9bcd-f1d17e4da428",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d5f5f3c6-69b6-4243-90e8-ce120754df5d"
        },
        "item": {
          "id": "c54f9a95-91d2-4aca-9f6b-06e3eda70db7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d2aecc68-8670-4aba-a8e9-ebe92b021667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14f50fd-6842-4553-b553-9565891a50be",
        "cursor": {
          "ref": "8dc40fe7-61a1-4c4c-a96e-8741ea1f2d48",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "efa1df5f-9693-4fd1-b12c-409a99d87112"
        },
        "item": {
          "id": "d14f50fd-6842-4553-b553-9565891a50be",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2acf0922-5242-4954-9d41-b1d29e6ffdd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf8643bc-9e06-4691-a9cf-a0028eb75405",
        "cursor": {
          "ref": "6fdcf53e-d9cc-412c-ac28-fbe55b84204d",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "89cf0cf9-0ec2-42c3-90fb-ec11200b18da"
        },
        "item": {
          "id": "bf8643bc-9e06-4691-a9cf-a0028eb75405",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "727267bc-d63b-47b4-aff6-da655b362864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef9c29e-b11b-4f40-9d3f-c9c27a3cff0f",
        "cursor": {
          "ref": "e88f78a7-f128-44ae-8b40-e5b3961d46be",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5a332c48-dc85-4f0b-80b3-6313f31c28a7"
        },
        "item": {
          "id": "2ef9c29e-b11b-4f40-9d3f-c9c27a3cff0f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "58450bd5-7725-4288-bd85-cbccc87a5382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec3f14d-696f-4869-9eca-fd58d1ed812a",
        "cursor": {
          "ref": "c868abdd-6ba2-4eb9-836c-3a9ec9230b06",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "89adc311-8ec8-436b-9d5b-32bb8d3910d4"
        },
        "item": {
          "id": "4ec3f14d-696f-4869-9eca-fd58d1ed812a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6846183d-fa9c-4d23-bde2-7d931e83e634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021eaa72-18b1-49d6-a982-35336264f3e4",
        "cursor": {
          "ref": "e21bcb88-aa88-4b39-9133-eecad41163b9",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "76fea338-9890-4831-9369-010927619382"
        },
        "item": {
          "id": "021eaa72-18b1-49d6-a982-35336264f3e4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2a40a94e-bbd8-4e90-be5b-638f7ce47e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443353aa-1f34-4b22-8062-6842adae2862",
        "cursor": {
          "ref": "3181029c-742f-4431-8004-7d3453c0865f",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5864d355-90d3-4651-a41b-6be0a8d0a29e"
        },
        "item": {
          "id": "443353aa-1f34-4b22-8062-6842adae2862",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "26d60309-e5fe-433a-8fb4-bab2808073a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87c468e-9745-44ba-a4bc-6b762e91cd5e",
        "cursor": {
          "ref": "afe5749a-5ef5-46c3-95c0-72d1c73af554",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "46133bcc-fef6-4833-8420-5b32d5209a6a"
        },
        "item": {
          "id": "e87c468e-9745-44ba-a4bc-6b762e91cd5e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6cef6f41-47d5-4a0c-ae72-187b70dfe78a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead10c67-0d8b-44f9-88a5-734cb21e7f97",
        "cursor": {
          "ref": "f41de726-8ff8-4790-8ad9-abcd693c6056",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "059a3771-40b1-4bbd-8ff6-3b5d8641d7b8"
        },
        "item": {
          "id": "ead10c67-0d8b-44f9-88a5-734cb21e7f97",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "86217ac2-03d0-4239-ad44-4b737f2833f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ad6f12-a2b0-4186-82f1-e328224168d2",
        "cursor": {
          "ref": "cb026f5d-b07c-4b15-a94f-c646aa56ab8f",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e4c6f5d0-6ae9-4bee-bd56-bf26cedcf208"
        },
        "item": {
          "id": "91ad6f12-a2b0-4186-82f1-e328224168d2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f37a9d5b-02eb-41ce-b46f-7cc724083be2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968398e2-c90d-4d38-a3c1-f1dc8b0a0508",
        "cursor": {
          "ref": "404bf9f2-6e67-477e-9635-8107bec28d84",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "017dcb31-eb8d-491e-ba2e-7f0327ae4236"
        },
        "item": {
          "id": "968398e2-c90d-4d38-a3c1-f1dc8b0a0508",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "88812ba9-a6ee-4a83-87d3-a2d84965d497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30ad1ee-903f-4c07-ab78-a96111658173",
        "cursor": {
          "ref": "a607fc4d-f853-49eb-9e54-b2299b4a9588",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "77c03fbc-8c95-4ced-8c23-345a60f7be96"
        },
        "item": {
          "id": "d30ad1ee-903f-4c07-ab78-a96111658173",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1ecfca7d-6c12-45bc-a452-08a1cf9cd3c6",
          "status": "Created",
          "code": 201,
          "responseTime": 2294,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "e27ed7e4-216c-43c3-8895-626b14ce400e",
        "cursor": {
          "ref": "3c77637b-6ee8-40ef-b727-8c6be26a05b7",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c2526896-ee99-4b3a-ba30-a3c2abe77a01"
        },
        "item": {
          "id": "e27ed7e4-216c-43c3-8895-626b14ce400e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6b57c2fd-0ddc-410e-8138-64e10a383d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b11781-0827-4207-b16c-e02f3783c38d",
        "cursor": {
          "ref": "467dcc9f-8dab-4d70-8e10-edf5d942cc28",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c350e522-58c5-4cbd-8d5f-c2f78d9cb10d"
        },
        "item": {
          "id": "94b11781-0827-4207-b16c-e02f3783c38d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cd9511b3-9fbc-4eaa-8b92-8b974886bcb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0291c4e2-ecbb-4761-8bfb-18485317560c",
        "cursor": {
          "ref": "0a1d5048-1e80-4136-93e8-cab1fd6fb107",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "00bdc62c-79a4-47d2-ba13-952da4452477"
        },
        "item": {
          "id": "0291c4e2-ecbb-4761-8bfb-18485317560c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "eea54445-b625-4603-9c26-40292773cf85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57518fdb-3673-4429-a82c-9bc10eebe8e6",
        "cursor": {
          "ref": "1203cc78-06f4-4321-a5d9-7fb79bdc7b09",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "aaa3b0f8-1e59-4804-89fd-cd9d82168680"
        },
        "item": {
          "id": "57518fdb-3673-4429-a82c-9bc10eebe8e6",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "93cdea97-9163-44f7-a825-ac3049d4a7a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d54cbe3-4717-4d1a-8d7b-39520471ca12",
        "cursor": {
          "ref": "3b669d4e-8c28-42ee-bc42-4b4c4caebbb6",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "11f0d0a3-3768-4d91-aecf-281cddb44d41"
        },
        "item": {
          "id": "6d54cbe3-4717-4d1a-8d7b-39520471ca12",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "258b1b77-531e-458d-abd7-03e13a98733a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80aa8a4-e885-4f58-b725-55190d4c57fb",
        "cursor": {
          "ref": "4b69370c-b948-46b5-8382-3ed0daf23890",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "94edb2ed-5820-4612-bab5-96551a9de5c8"
        },
        "item": {
          "id": "b80aa8a4-e885-4f58-b725-55190d4c57fb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "209e0aad-97c4-4b70-9a26-b36fb73c73d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9afac382-55ae-4fa2-a4ad-e5bfcb5dd259",
        "cursor": {
          "ref": "0bbe2407-86ba-4495-b1d4-41f977c99623",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "28058db8-e65e-4f78-9f3a-f47461234bcf"
        },
        "item": {
          "id": "9afac382-55ae-4fa2-a4ad-e5bfcb5dd259",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "817531c0-e2e0-4853-951f-e33db22b023e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a9fa10-6855-4afd-9425-995c1b5dedd2",
        "cursor": {
          "ref": "2a299d6e-14e1-4e0d-a099-284a8788918d",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "483ef019-3ce4-4a45-9dda-3f33380d3d9b"
        },
        "item": {
          "id": "93a9fa10-6855-4afd-9425-995c1b5dedd2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a8b1277f-7568-4d72-9e5f-0f0a96d33296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b60a71-b09f-4497-96c4-3ae2a1ec91cb",
        "cursor": {
          "ref": "fd9ad4fd-a566-4705-9676-071e42d883fc",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4d3b4a5f-25bd-4511-a883-67733e3fc46a"
        },
        "item": {
          "id": "e7b60a71-b09f-4497-96c4-3ae2a1ec91cb",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e323c11e-dfff-4a8e-a9ca-4b91b7c5a316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a1ebee-5f16-4585-b72c-d92853de73e1",
        "cursor": {
          "ref": "d18f90af-dfe1-46a3-949a-3f814d7ec039",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "71ae64a6-223e-4761-bbaf-9203da637d1e"
        },
        "item": {
          "id": "41a1ebee-5f16-4585-b72c-d92853de73e1",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3efad06c-0532-4a51-ad5b-5a9445feb3a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee9239c-f6f0-4121-b83d-c7418f227f9a",
        "cursor": {
          "ref": "7c1e05f3-53a5-4b73-9b21-ab9f8288cc58",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "449776cf-0c92-4fb6-96a0-d45a1a405cfb"
        },
        "item": {
          "id": "1ee9239c-f6f0-4121-b83d-c7418f227f9a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ecacf614-b008-4cea-9585-958e2a7d631d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "729e82e3-89da-4a2f-bfc2-2aef61fc2484",
        "cursor": {
          "ref": "538c153d-e64d-4dc8-b7fd-ef65a5cdbad7",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "521877c3-cfb9-4599-93e0-420877b8bf88"
        },
        "item": {
          "id": "729e82e3-89da-4a2f-bfc2-2aef61fc2484",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "35592c52-8075-425b-ac80-b61c96594d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c06251-4fc7-4d08-97ec-50ccf02b4865",
        "cursor": {
          "ref": "5f88b0be-5ac5-422b-88f1-a6b8e990c8ca",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e9ec4455-3ca5-4477-9f2b-211990db35c9"
        },
        "item": {
          "id": "29c06251-4fc7-4d08-97ec-50ccf02b4865",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4461aaa8-d43a-4d92-bd0b-72a7a1f6f128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab254f19-9341-428e-a755-b820268094e5",
        "cursor": {
          "ref": "d1b16cd2-aa0a-451a-baf8-08df1274851c",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8b440b7b-f633-4e25-a530-aee8836f6864"
        },
        "item": {
          "id": "ab254f19-9341-428e-a755-b820268094e5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "91c9608c-5fc4-4b1f-9371-cf52b7afb4ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "727f793a-35cb-4460-bf57-887a00ae0b18",
        "cursor": {
          "ref": "b7c6ea95-a212-4fda-9ad7-5dc1812ca13c",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "00681ed7-5723-4e55-829a-cde609d5b3ee"
        },
        "item": {
          "id": "727f793a-35cb-4460-bf57-887a00ae0b18",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b53204b6-c997-4783-866a-e09c7d53b5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6d0fcdd-ee04-4b9d-8804-bb303ea9da01",
        "cursor": {
          "ref": "ff91d08f-1c06-4dad-976f-80aba59de1dc",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "34cb7d94-6c4b-4311-bce1-cbdff55a214d"
        },
        "item": {
          "id": "c6d0fcdd-ee04-4b9d-8804-bb303ea9da01",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e14d428b-4f2f-4ca9-8158-3cdbd12cfb5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db016686-0014-4d2a-8070-b9ccdca84313",
        "cursor": {
          "ref": "d15a5282-ecc7-465b-9f45-d3ca912c63f3",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "37c58a5a-5f6d-43db-9f48-3c303906d676"
        },
        "item": {
          "id": "db016686-0014-4d2a-8070-b9ccdca84313",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "47867c8e-88a6-4fc0-a257-0435ec6935f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b3e1f1-82cc-4681-b599-3087de84d040",
        "cursor": {
          "ref": "0ca25f24-4e9e-47f7-8edc-25238e1465f3",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d3aacd7c-a95c-4d46-9fb6-c16dd678acff"
        },
        "item": {
          "id": "72b3e1f1-82cc-4681-b599-3087de84d040",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "02b48008-6c2e-424f-abcd-f7bda9dbca09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "060e3f68-4439-4edd-a42d-9b783a9c2981",
        "cursor": {
          "ref": "08ca9950-f224-4809-9f56-762acbad70af",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7dc8f3cc-e232-43ee-ae93-a40385eda75a"
        },
        "item": {
          "id": "060e3f68-4439-4edd-a42d-9b783a9c2981",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "07f0330c-504a-42df-92f2-c1156c205cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a11c406-25bc-4cb0-bfce-3587cc8105cd",
        "cursor": {
          "ref": "896e8258-98f8-455e-a446-481757323ac0",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a6965b70-1459-43f1-9f33-b9b765e4f497"
        },
        "item": {
          "id": "1a11c406-25bc-4cb0-bfce-3587cc8105cd",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "86307b68-9d8d-45e8-b153-d60c837f0023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b702f56f-516c-41ab-bb10-7948079484ab",
        "cursor": {
          "ref": "6069fea8-5c2d-4a35-a9dc-2f1ac5298a9a",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "92a77ebc-d745-4581-aa02-c68c70873a79"
        },
        "item": {
          "id": "b702f56f-516c-41ab-bb10-7948079484ab",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "711fe7aa-6687-4af1-a297-1ee9d46c8e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee436e0f-12ea-4551-8c82-2d29dc3a7201",
        "cursor": {
          "ref": "1a36560b-3cb9-48cd-9b97-90e9dd09ac18",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1260de6e-3b9e-4ed1-ae01-be272d92bd2b"
        },
        "item": {
          "id": "ee436e0f-12ea-4551-8c82-2d29dc3a7201",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2ffe5757-af39-4f83-9ed4-22f5c7bb5f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321c954a-8d75-4c2d-bf92-4d508b496d95",
        "cursor": {
          "ref": "f0ce2c79-1f85-4d58-9047-b5e050d0cf22",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5e9b71d0-3f6e-4458-bd8c-d44c8337a7eb"
        },
        "item": {
          "id": "321c954a-8d75-4c2d-bf92-4d508b496d95",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b4b089dd-89a0-4f37-8d37-4d44cf40449e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef098033-f0c7-4f6b-87f4-3b8256f8f4e7",
        "cursor": {
          "ref": "5470d933-1619-4c1c-9cbb-57d61e8c7fe4",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1acddb75-f4f1-4d3c-8042-e0d2e3fc413c"
        },
        "item": {
          "id": "ef098033-f0c7-4f6b-87f4-3b8256f8f4e7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "011b65a0-ec85-44ac-81eb-34f8f26e586c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5161b57-dfc6-473f-a4cb-b4fc2299e0c0",
        "cursor": {
          "ref": "30148c7e-9e35-4280-893b-6d241693dd49",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "23742d78-dfd0-49c0-a6d5-c477ae82f4f9"
        },
        "item": {
          "id": "a5161b57-dfc6-473f-a4cb-b4fc2299e0c0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e304eb1c-7561-416b-9f48-3010e09c5882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586f9c5f-fe36-40bc-8f91-1daccdab01cd",
        "cursor": {
          "ref": "5c83c5de-f1b9-40d9-afb6-9057157f6a3d",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "77531b42-2699-449e-8307-161d0c6319d0"
        },
        "item": {
          "id": "586f9c5f-fe36-40bc-8f91-1daccdab01cd",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0fe94681-8558-4e0d-a855-221ecccb4d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb767e5-7ef4-41b5-9df9-c8b2adeebc72",
        "cursor": {
          "ref": "3736af70-a110-4379-b316-f053c625290c",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d6ad9a13-23ce-42c0-b351-018014ac94ce"
        },
        "item": {
          "id": "2eb767e5-7ef4-41b5-9df9-c8b2adeebc72",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "06fc0e48-c593-4ee6-9c3b-75ecb153adf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a4bf00-be1f-4175-bcd3-28651cc988ee",
        "cursor": {
          "ref": "668c2282-72f9-4871-97cd-b5ea20dc67c1",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f27817da-2a6a-44f2-a8c2-3beb48a8ba30"
        },
        "item": {
          "id": "b6a4bf00-be1f-4175-bcd3-28651cc988ee",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3c867be0-2dc1-45da-b007-3f1ecbccc231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1170ae4-9743-42cf-8c42-6e543e8b727e",
        "cursor": {
          "ref": "19b7d2fe-e04b-4043-aedd-3da0fe658f32",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b6a064a1-b0b6-4e95-bf45-7eff55d1c044"
        },
        "item": {
          "id": "f1170ae4-9743-42cf-8c42-6e543e8b727e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "da8e1d78-4237-4f55-9f64-602998e6e6fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3188836-a0b2-49a5-8258-2d0e81fd8476",
        "cursor": {
          "ref": "4121a18d-a2ca-430b-9cad-a75d1292f55e",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1e5d0bd2-436d-46c4-abfc-3a443e986bbf"
        },
        "item": {
          "id": "e3188836-a0b2-49a5-8258-2d0e81fd8476",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d4cdcc09-adf6-412a-bdfc-ec2372fa8d63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293246ac-6528-4a97-9d0b-7eac959a5376",
        "cursor": {
          "ref": "fae21d1a-29a5-4be2-9c24-78c15e96aad7",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bdbee188-ba42-44be-a7cc-e6fdd54d1ec2"
        },
        "item": {
          "id": "293246ac-6528-4a97-9d0b-7eac959a5376",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c13076ef-9265-4ece-9dad-154b5d156c6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "0ef997ca-6676-4426-8867-85b512c5a882",
        "cursor": {
          "ref": "e80edc00-f308-4ada-af2b-38c1d9104159",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c598de4e-104e-49db-bdb6-eb1b1c2ae0fd"
        },
        "item": {
          "id": "0ef997ca-6676-4426-8867-85b512c5a882",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4696a68c-8d82-4015-a8e9-84f64cb97047",
          "status": "Created",
          "code": 201,
          "responseTime": 2679,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "6531243c-6943-4fd1-88d3-2984eab9071e",
        "cursor": {
          "ref": "80f1a60f-e6c4-4d25-8e40-44419e74b2c6",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "50de7e5f-ea3c-4c3e-a84a-1a2ff96aa121"
        },
        "item": {
          "id": "6531243c-6943-4fd1-88d3-2984eab9071e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8f5e553e-8a50-4825-b0f3-8e5b32c538d0",
          "status": "Created",
          "code": 201,
          "responseTime": 2720,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5011dc1-aae9-46af-9aa2-35e52aaba351",
        "cursor": {
          "ref": "2b6d6bd4-cfd4-47e3-9101-8e5ba3a9217a",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "641554cd-561e-4b9a-9a71-76593bcd9ed5"
        },
        "item": {
          "id": "e5011dc1-aae9-46af-9aa2-35e52aaba351",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0b5eed8b-ffc6-4db5-81f8-ebe74fbb08d8",
          "status": "Created",
          "code": 201,
          "responseTime": 2522,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "991e94bd-b3ed-43ed-a0b5-1aa877800072",
        "cursor": {
          "ref": "dd12b323-bd38-4708-bfd3-320673f8bb22",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "69ad3836-f2f2-4066-8b5a-4663fd077dff"
        },
        "item": {
          "id": "991e94bd-b3ed-43ed-a0b5-1aa877800072",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a679de0b-69bb-4070-82a9-c8d8196823eb",
          "status": "Created",
          "code": 201,
          "responseTime": 3206,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b9bce3-caef-474b-b463-30546624c755",
        "cursor": {
          "ref": "4d57dfcb-19e5-46c8-8258-5b7e16aac46b",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ec9d7f21-72e8-49a2-9da7-cf87a611ee1b"
        },
        "item": {
          "id": "e7b9bce3-caef-474b-b463-30546624c755",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "98088b23-ee98-4635-a6ce-6aed026d1e1a",
          "status": "Created",
          "code": 201,
          "responseTime": 2514,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-07-11T00:42:57Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-07-11T00:42:57Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "17f818a1-ebf9-4fa4-9394-4efde741fbd4",
        "cursor": {
          "ref": "25b24e39-1157-4085-8b33-bb3a6855593a",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e0f80a0a-f175-4ae4-ac9c-5dd371a3c9ae"
        },
        "item": {
          "id": "17f818a1-ebf9-4fa4-9394-4efde741fbd4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8bf4032f-f3d4-4a51-8c81-8c7bc956618b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "a9f6ecdf-0da2-4cfe-8341-34f089d57440",
        "cursor": {
          "ref": "6e11cfd9-ac3d-4a20-b340-03dc6d870e76",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0745cb32-88b0-41be-b115-7483935c1be5"
        },
        "item": {
          "id": "a9f6ecdf-0da2-4cfe-8341-34f089d57440",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "16faeff0-40be-49b7-a65e-36395ff4807b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8320a669-563e-43b5-9886-179ef23fffc0",
        "cursor": {
          "ref": "1132ddca-6ece-41aa-a80c-b3d149c91733",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2a6f5a9e-4f04-4bf7-aec4-303e1f1b56f8"
        },
        "item": {
          "id": "8320a669-563e-43b5-9886-179ef23fffc0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "eb60f6b1-1209-4d0a-ba61-3ba163baef70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bcec72a-2899-4339-93a8-933ebfe43ac0",
        "cursor": {
          "ref": "4e854b8a-1640-4925-ad59-4aff454f6d67",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "14c9237a-e7e9-40e5-aade-24e3ae10b566"
        },
        "item": {
          "id": "3bcec72a-2899-4339-93a8-933ebfe43ac0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "519a30c0-f3ae-48e1-a321-efcc2caa8d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57035118-3ade-4fbf-a329-5917a48279b0",
        "cursor": {
          "ref": "1c6f6222-099c-4dee-b9d5-4d2c911d6a13",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ac439882-dd24-4b1b-bc9b-657575e991f8"
        },
        "item": {
          "id": "57035118-3ade-4fbf-a329-5917a48279b0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2a8f819e-8034-4d26-a722-81466147f512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a03cec-5b85-4c9e-8990-7abd3da2ceb7",
        "cursor": {
          "ref": "4d1fa98d-fb5f-4da7-9c75-0a22af235b19",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3f62af74-bb89-4c32-be9d-10c868b2bce9"
        },
        "item": {
          "id": "49a03cec-5b85-4c9e-8990-7abd3da2ceb7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "fca4c717-835b-4b59-8ffc-6478fb040d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024a8040-4226-4ce1-a2c4-cd5694599bf6",
        "cursor": {
          "ref": "8aa99468-bfcf-4b54-8d77-81a939f140e1",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e557f356-fd89-4bee-8ef8-dabcd59666bf"
        },
        "item": {
          "id": "024a8040-4226-4ce1-a2c4-cd5694599bf6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f683f162-25d5-4cb7-acd6-47ea97becb0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713f64dc-073a-4cf3-861b-0952387fffbd",
        "cursor": {
          "ref": "56806d67-8d9a-423e-936c-22ba3777e68a",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f5054b3b-7373-43a1-a571-16309188f129"
        },
        "item": {
          "id": "713f64dc-073a-4cf3-861b-0952387fffbd",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5dbe6610-ab85-41bf-9dc1-2063b3d20bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a61f7bf-5667-4865-9e41-4cc1c2ab89b9",
        "cursor": {
          "ref": "03aec400-21ce-4ddf-8bd4-989548a1dc1f",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0390ef9f-2de6-43f4-9e4a-d7d5318affd6"
        },
        "item": {
          "id": "9a61f7bf-5667-4865-9e41-4cc1c2ab89b9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ba7326f3-2a28-4230-9b95-0546a8bd96b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cefbbdbb-d1f2-45a6-b637-169d56b43492",
        "cursor": {
          "ref": "35a86371-b183-4b68-884e-d59c9f6bb156",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8ff678f9-7ffa-4122-b48c-84debf4e6905"
        },
        "item": {
          "id": "cefbbdbb-d1f2-45a6-b637-169d56b43492",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4f00ff6e-d5c2-425f-b2cf-3a2d62d95f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6102d51c-5962-451d-9156-92ab369f3ded",
        "cursor": {
          "ref": "4878f50c-1777-45c6-84e2-7595b379a8f2",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7704c36b-33e7-480a-8de8-78813e51a40b"
        },
        "item": {
          "id": "6102d51c-5962-451d-9156-92ab369f3ded",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "698555be-3ad5-46e3-bc6d-2406ccf546e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4896962d-0d77-4e78-808a-78da4cff1f99",
        "cursor": {
          "ref": "2ba7b1c7-dada-496a-ac0c-5ab0250c087d",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6e6f72a4-c77f-4040-96dd-1722cd0d13c7"
        },
        "item": {
          "id": "4896962d-0d77-4e78-808a-78da4cff1f99",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d962bcd6-9f26-4222-a0b7-32ababd2d7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d4481b-7454-43a8-bf8a-5d6d939416b8",
        "cursor": {
          "ref": "1d9734b7-f2d6-474f-b3c9-dd387efa95e5",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e67ee744-9879-43ea-9ee6-358216a7f326"
        },
        "item": {
          "id": "83d4481b-7454-43a8-bf8a-5d6d939416b8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6260fb7e-4d48-44d0-b619-8ce58826c213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1faa6eb-bf82-4a5a-bd18-c98e6622c689",
        "cursor": {
          "ref": "7b2a94f9-c7a8-40f5-bfc2-395d66032ec1",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "968ce03d-15c2-4066-863c-385abadb2956"
        },
        "item": {
          "id": "c1faa6eb-bf82-4a5a-bd18-c98e6622c689",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "298f50fb-39c0-4c28-8e21-b291361a9903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1abba750-0a63-4a12-b17d-1d517e71c23f",
        "cursor": {
          "ref": "9c4d6a67-04cb-42de-8395-db6aabfe7750",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1a92736b-cee6-419d-91ba-ff30e0f11af2"
        },
        "item": {
          "id": "1abba750-0a63-4a12-b17d-1d517e71c23f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "81ba9d5b-5fe8-4fb6-a5e0-b78c8de97c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0058379a-19dc-4736-804c-593e9a5eeae9",
        "cursor": {
          "ref": "9ae966fb-1d3c-4eec-8fae-03ad3a976d7c",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c0584dae-edca-4052-98d5-b3d3485a0144"
        },
        "item": {
          "id": "0058379a-19dc-4736-804c-593e9a5eeae9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dd5fdcb2-15fa-491f-b479-0876916cf850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3b8caf-a3f7-4af8-8cb2-054716ece571",
        "cursor": {
          "ref": "1d0d8b02-730b-4848-8542-e46cd15e1236",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "748efd38-a391-4bd3-9495-ab1da6f14d8d"
        },
        "item": {
          "id": "ce3b8caf-a3f7-4af8-8cb2-054716ece571",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7fc42f2d-6f31-45d0-97e3-95baf1f5ed82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c83c6e-c75b-4bfa-a902-bf1d775ab977",
        "cursor": {
          "ref": "c9a8488a-601e-497f-a5c6-64e44e2dd0a8",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1cb1235d-ce9c-4c9a-913c-4351cefb7799"
        },
        "item": {
          "id": "85c83c6e-c75b-4bfa-a902-bf1d775ab977",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a3b1ad34-826d-44ef-81d4-160d10015229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6b96c5-aac8-4323-b5b1-94b72ef046cb",
        "cursor": {
          "ref": "8ee55a73-4d83-4768-a66a-36f72222a061",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ef73b2d0-0259-46ab-a348-64a684b1fc66"
        },
        "item": {
          "id": "ef6b96c5-aac8-4323-b5b1-94b72ef046cb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "86a29074-5940-41f5-9906-9c25b8f5809c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d774765b-67b9-4fc5-8bcb-5b268e6b74a7",
        "cursor": {
          "ref": "2a6f4971-646b-41ff-aa44-7b74d4a15084",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ebed677e-08b3-48da-9ed5-e904f4a2a922"
        },
        "item": {
          "id": "d774765b-67b9-4fc5-8bcb-5b268e6b74a7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3d7d2fce-c602-4c01-9501-15373080f372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f4d8ce-f16e-415f-8fd5-10e9165106ec",
        "cursor": {
          "ref": "4c0bd061-1688-49ac-b8e4-3902f5369130",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1a8ce9cb-91a0-4805-8508-fc352742b237"
        },
        "item": {
          "id": "c9f4d8ce-f16e-415f-8fd5-10e9165106ec",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1da6301a-7de5-4e26-b904-fd71c57b9052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d9a678-11df-434f-b9ce-61c3d6cc0a30",
        "cursor": {
          "ref": "22640a86-31a3-4a4b-9b69-62c6b3882caf",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "df373101-aab0-44e6-b5ec-e0eaceb02415"
        },
        "item": {
          "id": "46d9a678-11df-434f-b9ce-61c3d6cc0a30",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a7a36eba-d486-4dc3-90eb-f418de35cb83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd0bf500-03dd-4972-94a3-fa3c784d891b",
        "cursor": {
          "ref": "3863ae80-25a3-423f-8e7f-2a79e76a9280",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "88d4e6cf-20c8-45b9-bf59-7c3b7befba01"
        },
        "item": {
          "id": "cd0bf500-03dd-4972-94a3-fa3c784d891b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8c46d5af-90ce-44f1-96ee-f4192dba23c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d554948a-ecc8-44e4-bd49-550458c32dc7",
        "cursor": {
          "ref": "4d3fc320-e5f9-4741-b69d-a66a2a5e2281",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "52e30640-2c1b-4d0f-bc78-8ef97d949e35"
        },
        "item": {
          "id": "d554948a-ecc8-44e4-bd49-550458c32dc7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3e3737a9-582a-49ed-94cc-3bbb5f10fe48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7100b64-eb13-4dbe-b888-e75fe403f60f",
        "cursor": {
          "ref": "e7095d39-3daf-4d38-a875-8d17a7b25afa",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "dd919327-94da-4cc7-bc0a-6388cbce4df7"
        },
        "item": {
          "id": "a7100b64-eb13-4dbe-b888-e75fe403f60f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c0368c89-4b32-4984-b5b7-5cfac7066dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "570f0b42-3060-4fc7-ab59-be6ecaa718ff",
        "cursor": {
          "ref": "d45bf87c-0322-42a2-9349-61f24c5152d9",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6bf89a6c-f2f3-4419-a352-817f912be678"
        },
        "item": {
          "id": "570f0b42-3060-4fc7-ab59-be6ecaa718ff",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "cf10bca8-6a6c-4daa-aab4-37a663400a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb51117-a6f3-40c1-a04d-9bcb34b8eca0",
        "cursor": {
          "ref": "e197f758-d53b-4485-b1be-f8806f280186",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9f9a8b8e-e0a4-4dcf-b703-290915a87b3b"
        },
        "item": {
          "id": "efb51117-a6f3-40c1-a04d-9bcb34b8eca0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d5e77f02-9e33-487c-a8cc-877650e0810d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f61891-1cb1-49e6-b399-8b9791664db8",
        "cursor": {
          "ref": "b53b036b-b98f-4849-9817-31e6df5d2d95",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "16544399-9be8-4b1c-9920-943d96aa3004"
        },
        "item": {
          "id": "84f61891-1cb1-49e6-b399-8b9791664db8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b4d2bd4b-e78c-4149-833b-4c2049e4f35b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1217f20-6ec9-4fcc-a728-acbdf5ff6c0f",
        "cursor": {
          "ref": "18f1131e-f606-44f5-a425-2286fb7fb703",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a97898f1-63ac-4df1-a248-ee4f02959dbd"
        },
        "item": {
          "id": "d1217f20-6ec9-4fcc-a728-acbdf5ff6c0f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ebbd90c5-85c0-4c8f-aa7c-cdad04b76883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85382374-f5b2-40b6-a705-936e7f62dfbd",
        "cursor": {
          "ref": "9b2f5599-be6b-4ff2-940e-3bf8285f4f7e",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "70387edc-ee6a-40c6-ba3f-9d273fa01e5d"
        },
        "item": {
          "id": "85382374-f5b2-40b6-a705-936e7f62dfbd",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0de28f85-0df4-4d9e-ada9-fb493fc189c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b756fcd-9cd1-4c69-91fb-a0bae8b5b01a",
        "cursor": {
          "ref": "61b4dc9b-7fd0-44aa-8726-3f75e5c351b7",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7971b0ac-0440-4839-a1ae-4595a68381cf"
        },
        "item": {
          "id": "0b756fcd-9cd1-4c69-91fb-a0bae8b5b01a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "01e394d0-5d60-4708-8c63-c9b88e6ebcc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3fbda86-eca2-4682-9296-baae6d468a3c",
        "cursor": {
          "ref": "7d2a1e15-76f9-48c2-b8ed-ee4fe716aab0",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "38e40c77-eb67-4e25-8f68-3bf6c86b89db"
        },
        "item": {
          "id": "f3fbda86-eca2-4682-9296-baae6d468a3c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "55cf0438-c1d0-44a4-a33d-c407463c0e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c5c340-8028-451d-b627-a6631da49ff3",
        "cursor": {
          "ref": "da8fc330-3573-4c9b-8b2e-c49cd1c943ba",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8631d874-7d4e-499a-89c8-343b3e34c490"
        },
        "item": {
          "id": "61c5c340-8028-451d-b627-a6631da49ff3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1f6e7190-681e-4f29-a2a6-4c00e641f3e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5195698-ccbb-4404-86c5-905dd95c2ea5",
        "cursor": {
          "ref": "a884b94e-5a66-4d1e-9498-9fc4c7933da1",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "deb67931-9c76-4e72-b1a9-9da41bc4f327"
        },
        "item": {
          "id": "c5195698-ccbb-4404-86c5-905dd95c2ea5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "85936eca-ff36-4056-831e-14301d4a2ea7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "9d60b619-43e5-481c-a823-a5bf2b845e8e",
        "cursor": {
          "ref": "e6d18fda-bfb7-43cc-b6b6-6d36fd56fb10",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "5bdecefe-112d-46da-b184-4ee0b40b366c"
        },
        "item": {
          "id": "9d60b619-43e5-481c-a823-a5bf2b845e8e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7cd08b2e-8efd-4857-aff6-08ff499ff302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db1e3df-4f85-4b19-8677-be4373d63e9e",
        "cursor": {
          "ref": "332aea59-708f-4cb6-ab1d-10c14eb4c498",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4d6f58eb-c81f-430a-a7f1-129bc592c653"
        },
        "item": {
          "id": "3db1e3df-4f85-4b19-8677-be4373d63e9e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "aa3c7547-5952-4603-aa98-fb28345f9b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31409a97-6f39-4f31-a84e-4653722eb66c",
        "cursor": {
          "ref": "f3971968-c64b-4306-8196-6daf4c457287",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "73c5c8e8-c404-49c0-b162-3a9c9ecbd5e5"
        },
        "item": {
          "id": "31409a97-6f39-4f31-a84e-4653722eb66c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2bef76f8-f132-4cf2-ab26-e15e6664ec8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542dc964-0983-4858-9406-0207b706d594",
        "cursor": {
          "ref": "ecc6db8a-a891-4dab-943d-7a0f9024ff2f",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "268bb840-586a-475c-b421-0f2593fcbe2c"
        },
        "item": {
          "id": "542dc964-0983-4858-9406-0207b706d594",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "bfccffe4-d242-4ea8-abc1-99a3569af4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28ad1b1-3ce5-4e2a-a3f3-a65014321d25",
        "cursor": {
          "ref": "d2f5eff8-faea-43ce-a4a2-b273757609d1",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6a31e6f5-e4fe-4304-b3d1-e03a34210914"
        },
        "item": {
          "id": "e28ad1b1-3ce5-4e2a-a3f3-a65014321d25",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "af2d5383-e554-45cd-88b6-5675aa4b5225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80aba4f8-2bbe-487d-8a9c-810470c44a3c",
        "cursor": {
          "ref": "bf04364b-aaad-4a98-8fb3-37a619385def",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "acde308b-5f27-4966-ac26-013715b40634"
        },
        "item": {
          "id": "80aba4f8-2bbe-487d-8a9c-810470c44a3c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "84dd18d9-2e59-4afd-a1e5-8fb8d7d20f46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7efca28-197d-4f0f-b613-70664e25e3e8",
        "cursor": {
          "ref": "3f84e481-b3dc-4d4a-a041-073a6fc20884",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3d60c3dd-dd5c-4689-b87e-067f0a80fdcd"
        },
        "item": {
          "id": "b7efca28-197d-4f0f-b613-70664e25e3e8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "40c7df52-220f-4ff1-ab26-a44f4ef17479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce47acd6-3e35-4907-80fe-b463701ea1e9",
        "cursor": {
          "ref": "9fa377b4-6587-40d2-bdcb-761630183b9d",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "21ff13ac-b4d2-434d-a15e-4f2caf2b2c2c"
        },
        "item": {
          "id": "ce47acd6-3e35-4907-80fe-b463701ea1e9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9c96f3d6-1ae7-4143-8d63-ab7a814ea27d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb21b579-ef37-4d05-b63f-a5f1ed6e5588",
        "cursor": {
          "ref": "a3a81dae-cf30-420d-984a-521b58de4a07",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c141c61c-85d2-4f79-a331-f3a1348c5690"
        },
        "item": {
          "id": "fb21b579-ef37-4d05-b63f-a5f1ed6e5588",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3709c427-c837-4370-b309-fe79c8c82c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959f6296-0e08-437e-9cc6-a230b64d5b46",
        "cursor": {
          "ref": "4cb2bcb9-ba4a-44c1-aa4e-98c6681ba400",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ce7c9285-63ae-4a31-97d6-059b50b21aec"
        },
        "item": {
          "id": "959f6296-0e08-437e-9cc6-a230b64d5b46",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e0b4c4b2-28e2-4a77-9e97-9d4d87e58d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c806ccd-a096-4787-82dc-c4c9378f5d79",
        "cursor": {
          "ref": "b14b1d22-2097-459c-8e17-1c21817b3e29",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d2941d16-2fce-4436-a8a3-84f957548797"
        },
        "item": {
          "id": "3c806ccd-a096-4787-82dc-c4c9378f5d79",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "33869d66-2541-4593-ac97-192dfca46f2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e70f91a-6050-42be-ace7-9270e96fcdb1",
        "cursor": {
          "ref": "eba59962-15ab-47d9-8dae-9fddf2a3b3e8",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "338ab9d8-1772-44e7-a203-0640c80bb48e"
        },
        "item": {
          "id": "4e70f91a-6050-42be-ace7-9270e96fcdb1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "37859cc0-85c8-4457-8a2a-d7d78dcbcc22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b36c56f9-af03-48b1-a349-14ae9d92eed5",
        "cursor": {
          "ref": "98344870-69f4-47f9-85db-f37b61bb075a",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c5b8182d-1863-4dfe-bb9d-29faac83c390"
        },
        "item": {
          "id": "b36c56f9-af03-48b1-a349-14ae9d92eed5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6c61c8de-e5b9-4426-b6d4-93b3a54915f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7e068f-1480-4f2a-9546-b8c2c5c311e1",
        "cursor": {
          "ref": "90a81261-4017-46c3-a401-94d78b25b532",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0747616c-1ffa-4129-bf89-c8ad93f6d878"
        },
        "item": {
          "id": "1a7e068f-1480-4f2a-9546-b8c2c5c311e1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3bb4622d-f15f-47d9-a509-3fcbec87eef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6841cf51-a4a8-4534-a8b9-10a3e86f227d",
        "cursor": {
          "ref": "ab3f36fc-0fb6-44b8-ad24-668239004df0",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d5da6b73-c273-4d92-9ae1-958ab75428fd"
        },
        "item": {
          "id": "6841cf51-a4a8-4534-a8b9-10a3e86f227d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "90cf36fc-8ab8-4094-96fd-e97f1aa3241d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e047710-75ad-403f-bc8e-1c27f49e8a10",
        "cursor": {
          "ref": "1ba2782e-5101-465e-b78e-dfae6c8c01dc",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a8d696d7-94a5-4d8a-863c-e765b374a79f"
        },
        "item": {
          "id": "5e047710-75ad-403f-bc8e-1c27f49e8a10",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "959ca7a5-d58d-4abf-8b58-b937f6ef94ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f5bb6b7-5e0b-4374-b143-f6237ea33141",
        "cursor": {
          "ref": "8a315d41-144a-4e93-9bc2-8117ffecb8b7",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f066ffa9-e5c6-4560-963a-350b17934825"
        },
        "item": {
          "id": "5f5bb6b7-5e0b-4374-b143-f6237ea33141",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3713675c-d342-4e5e-8d4f-2e72fd297af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c34fb08b-749e-41e1-93ed-79dd44cf3031",
        "cursor": {
          "ref": "09257f67-0736-41e2-ace4-8c820c5fd880",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "bdc5ead6-3a33-4aa9-887b-233859a24deb"
        },
        "item": {
          "id": "c34fb08b-749e-41e1-93ed-79dd44cf3031",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "281d1c9e-dcb7-45dc-ade8-560a29a1a597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa7e98c-f397-46e6-b62f-fecb6c32c86a",
        "cursor": {
          "ref": "74c13ebf-be20-4f56-af67-31c2d1749fb7",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4a264267-c213-49a3-831c-02b7a87cd4f1"
        },
        "item": {
          "id": "9aa7e98c-f397-46e6-b62f-fecb6c32c86a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "41a7a4ed-fdf0-47a7-8243-3b939c6804ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ebc74c4-9629-46d4-8870-4dcd24caa9bc",
        "cursor": {
          "ref": "b325201b-2e00-4b35-8dbc-80029f3b5cc3",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "bc4c0db9-cfa3-4278-8eb2-d9c884a40079"
        },
        "item": {
          "id": "7ebc74c4-9629-46d4-8870-4dcd24caa9bc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "db6aea69-edea-4ceb-9b9b-5bd6d69f5775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a5fe2da-5612-4262-bd51-a8b7624c124c",
        "cursor": {
          "ref": "085b2c1c-6e3a-4660-8dc0-e26fbf8925e0",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5d6e5049-06a1-4cb7-8957-76c6e1e100cb"
        },
        "item": {
          "id": "3a5fe2da-5612-4262-bd51-a8b7624c124c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "30af1469-501b-4b1b-8ce8-435ff66323d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24e5e0a-d202-466e-a705-4f3788e709d4",
        "cursor": {
          "ref": "8f893541-4f58-4c93-b072-2325266cc38b",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a3d80b56-6faa-4a19-9fa1-4c3ed7595842"
        },
        "item": {
          "id": "f24e5e0a-d202-466e-a705-4f3788e709d4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d75cc6dd-3367-43d1-9723-9345c06f5b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a473b1-57e1-45a1-8448-3e8b5486f298",
        "cursor": {
          "ref": "fde153fc-0920-407d-941e-23e323ec0d05",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "89a7b49c-e7b0-4d67-98eb-9e17279dd71a"
        },
        "item": {
          "id": "37a473b1-57e1-45a1-8448-3e8b5486f298",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6b2b23e2-b8ac-4b25-9e2b-f46a3f9cb21b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0add6d91-f2ce-468a-8a0e-5715bcdf515d",
        "cursor": {
          "ref": "fb1ccf19-3e00-4308-9646-6480bb1d4480",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "cf335b3b-e960-4ce8-9201-5283766528b6"
        },
        "item": {
          "id": "0add6d91-f2ce-468a-8a0e-5715bcdf515d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "42e94c6d-cf2d-4a7a-9cb3-9fba0f608958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19170721-203b-4d1b-8b61-82c0a799dcdc",
        "cursor": {
          "ref": "15ab5891-6afd-4230-8cab-80499cba19af",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4d444ce1-3018-43fa-8fa3-f9b627d1c560"
        },
        "item": {
          "id": "19170721-203b-4d1b-8b61-82c0a799dcdc",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "aa866dbb-86dd-4289-8b87-fc1547907a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3baf1756-99a1-4565-a1b7-e4cf55209ac4",
        "cursor": {
          "ref": "ba2acddd-2405-40da-918a-6944d62fc320",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "71f04021-419d-4b43-819b-e6d29b0c1ff8"
        },
        "item": {
          "id": "3baf1756-99a1-4565-a1b7-e4cf55209ac4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "47766e18-ecb1-4a7e-8020-c32703d1bca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0eafd4-3a2e-4b20-88c1-442f8cd03152",
        "cursor": {
          "ref": "74b9fe65-6b65-4f69-b181-04095cb01913",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "741b6c4f-a320-4e4d-8bc4-081a4092a074"
        },
        "item": {
          "id": "9d0eafd4-3a2e-4b20-88c1-442f8cd03152",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "562c8035-8ba9-447f-8717-536e41e869a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f41f62f-fc28-4a49-a22b-d027ce41b029",
        "cursor": {
          "ref": "52591eda-2adc-4fd4-9fa6-cf9b7afd8f55",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "dc7456b8-fc02-4cc5-ab95-d79cc69b6c06"
        },
        "item": {
          "id": "9f41f62f-fc28-4a49-a22b-d027ce41b029",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c6d51250-a0a6-4e2e-a2dd-5663bca8b5b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8ac8bd-399a-42c9-b850-8c5592cca88b",
        "cursor": {
          "ref": "91d7d382-5dfa-4db0-b80e-a080fec1825e",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4dfd3e9c-7df6-4391-ad64-c11a8c89eebc"
        },
        "item": {
          "id": "ec8ac8bd-399a-42c9-b850-8c5592cca88b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8ac95dfc-c3ca-4f4c-9cf0-69fa80e6e271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d03189-e352-4ac6-805f-43c612d3da02",
        "cursor": {
          "ref": "fcffe959-46d3-48eb-9b04-8d3902130992",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bd6ce411-3e92-433c-a813-68e46516cad7"
        },
        "item": {
          "id": "24d03189-e352-4ac6-805f-43c612d3da02",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a074b740-614f-4a72-9e57-becca3ee2b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572a961a-c937-45fd-9ff6-b127397e8b3d",
        "cursor": {
          "ref": "fc7e0a70-bea8-4628-826d-05505ef9cddc",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c49c1d3c-ccec-49dd-b8a8-ef2a7d48a508"
        },
        "item": {
          "id": "572a961a-c937-45fd-9ff6-b127397e8b3d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1abc17ab-f868-42fb-bddd-490fd74d8c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb6ba69-f111-42b8-8a88-bbcafae9f31f",
        "cursor": {
          "ref": "90e042fc-81a1-4303-a690-1b743c972864",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d2294906-0a2e-4f5f-af50-9a0a76fd64db"
        },
        "item": {
          "id": "2fb6ba69-f111-42b8-8a88-bbcafae9f31f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "dfac1ca7-0e38-4abc-a67f-cb41499d08c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc9f663-c548-4c92-89ec-314104fa29b9",
        "cursor": {
          "ref": "a63f2282-ccc8-4bb3-a1a6-d90a6e297a88",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "45b74b03-fde1-432c-9ece-5d452c88bff4"
        },
        "item": {
          "id": "9cc9f663-c548-4c92-89ec-314104fa29b9",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "381febde-6af9-4a77-b1bb-54725ce2ac24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "088da4f2-1456-4f6f-96d2-a26daf7da4dd",
        "cursor": {
          "ref": "80aced5d-44c0-49ad-95e7-12dd90a19c8a",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c2566008-d521-4892-92a8-d39c53562d7f"
        },
        "item": {
          "id": "088da4f2-1456-4f6f-96d2-a26daf7da4dd",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "98133726-6ee6-4766-88e1-86672aa277f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377236dd-b87f-4163-9eb9-c0cc3ff2e8a9",
        "cursor": {
          "ref": "797f03dd-0956-4ac8-9442-d648c27df882",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8138fcb3-1830-4bb9-9449-fb79f945f452"
        },
        "item": {
          "id": "377236dd-b87f-4163-9eb9-c0cc3ff2e8a9",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "620002a6-ef66-4614-9d85-0bc9e1cf7b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ffb97f2-bf67-40d5-94cc-8068d2f9b94f",
        "cursor": {
          "ref": "0bb4e5d9-021d-49f5-90c0-a8c4e01e9d31",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ae6621c8-aeee-4c15-8e37-83a9f585a0c7"
        },
        "item": {
          "id": "2ffb97f2-bf67-40d5-94cc-8068d2f9b94f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "f2a4e1b4-dc0f-4395-8208-e088944240f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e01e72-4135-4b5c-8fd9-406a492e6b96",
        "cursor": {
          "ref": "dffddb39-56ba-4900-8695-74dff2cfdac3",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1d8561be-740f-4efd-b822-b8ad1f1db8e9"
        },
        "item": {
          "id": "d5e01e72-4135-4b5c-8fd9-406a492e6b96",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "59f00ca6-37a2-43b0-8e43-74ec414aef37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab855098-56a3-4935-9f78-80a3be4de350",
        "cursor": {
          "ref": "8047bd03-3264-4aa3-8a3d-5d4b7e855fc8",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "da907209-e6b3-4705-bdbf-c89b8573886a"
        },
        "item": {
          "id": "ab855098-56a3-4935-9f78-80a3be4de350",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0915a686-e435-460e-a7d6-459e485de732",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "0cd84905-2114-4fae-8d1d-bf55528b9797",
        "cursor": {
          "ref": "d51e3884-caad-44d8-80d4-9e654dd2d45c",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8b254d39-645b-4af9-bd69-a445f765dcd5"
        },
        "item": {
          "id": "0cd84905-2114-4fae-8d1d-bf55528b9797",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b8273f6b-6914-432b-9447-c3525e326d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405887d0-4711-4da6-a535-aa1bc568f688",
        "cursor": {
          "ref": "41f125e7-311b-444f-8ea6-1e3eceb3903e",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "01299e80-bb89-465a-8679-135523bc7acd"
        },
        "item": {
          "id": "405887d0-4711-4da6-a535-aa1bc568f688",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "81f73ea7-cd16-4054-8b71-0747aa64967a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d59200-25d1-4a7b-ae8e-163538b4222e",
        "cursor": {
          "ref": "b1a49f62-2b86-4434-b438-5a07486632fa",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8c394e84-583f-42b5-baf3-4c18bace7488"
        },
        "item": {
          "id": "26d59200-25d1-4a7b-ae8e-163538b4222e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "eddb92e3-8f0e-44e0-aa2e-b8633c3663d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33cc896-ccb9-4171-a3b0-0d2d5c9c4192",
        "cursor": {
          "ref": "94a47574-9c5e-41bc-96e0-27d0523853f1",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "cc734587-a9c9-4d62-9b95-bca87a442452"
        },
        "item": {
          "id": "d33cc896-ccb9-4171-a3b0-0d2d5c9c4192",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4de44aaa-faa3-4d6d-8193-7e8717fb27a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c17501-6c01-4ce7-92fe-eba8728b0c62",
        "cursor": {
          "ref": "947ceb68-5102-4a97-8684-9f97413279b1",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2d9d4e44-c337-415d-837d-05ebc9f9b1f8"
        },
        "item": {
          "id": "63c17501-6c01-4ce7-92fe-eba8728b0c62",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "832d59d9-911b-42e1-9a03-438e2ac3c5b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de070e81-4efe-400c-9bd0-e883bc983933",
        "cursor": {
          "ref": "8c802369-7814-4e02-9b58-0d8842bea559",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b6be1810-7aac-4589-8fde-a8da70a150a2"
        },
        "item": {
          "id": "de070e81-4efe-400c-9bd0-e883bc983933",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "116036c9-fe79-4c20-9424-a34897110deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa79ee7-e141-4478-b6d4-d6448dccc380",
        "cursor": {
          "ref": "2e6bbdd1-3ead-49fe-8ebe-9e26594f6c24",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "118e08f2-b5ed-48f2-a0e1-12e001bf064a"
        },
        "item": {
          "id": "0aa79ee7-e141-4478-b6d4-d6448dccc380",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "59df60b2-e77c-4635-8698-4668c4e8c2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe11daf-7e00-47dc-ae66-e40c3268759a",
        "cursor": {
          "ref": "59fd47ca-f20f-46ae-8793-2191c550a436",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c3c8de51-0253-4b3a-b39b-7732ecf97193"
        },
        "item": {
          "id": "dfe11daf-7e00-47dc-ae66-e40c3268759a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "bbf80325-2cce-4828-9478-88b6169199ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d326513c-d049-4de4-923b-1d0e0ed913b3",
        "cursor": {
          "ref": "70e16873-dc13-42cf-bbac-a26165b30e72",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "4acde3fd-8f77-4d83-967c-e79229872bfc"
        },
        "item": {
          "id": "d326513c-d049-4de4-923b-1d0e0ed913b3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "05c1ec44-9389-4012-aef7-21de91e9ec2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17bc1883-e60a-4e99-bc2f-42d1f5f6b276",
        "cursor": {
          "ref": "64f721d5-6603-4b82-9aad-b5b4b198cc9b",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c751dfb5-00ce-41d3-a538-d5df2bb650f9"
        },
        "item": {
          "id": "17bc1883-e60a-4e99-bc2f-42d1f5f6b276",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "23111a8a-ffb3-40fb-af67-32522f7d402e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5429420-b317-47c5-a167-6a035b218769",
        "cursor": {
          "ref": "97b08618-d3bd-4389-a5ef-a7e940cd803b",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "350b6806-4bf5-4297-8e90-ef1b29276b63"
        },
        "item": {
          "id": "a5429420-b317-47c5-a167-6a035b218769",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ac73be2e-6c38-4859-99df-5ad2b88c3199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e2fbf3-c386-4772-82ff-9f1738a0786a",
        "cursor": {
          "ref": "1f7a133c-47ef-4a6d-b499-e41c331b7975",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "781d08b8-f915-4115-a6e8-628300f7503a"
        },
        "item": {
          "id": "23e2fbf3-c386-4772-82ff-9f1738a0786a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d3ff3fb4-ae97-42e9-b36c-3936aa56e527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a5043ae-90b6-4f8d-bd39-08c4aeef92f9",
        "cursor": {
          "ref": "6f8d27ad-f876-43d4-a0e6-61eb81d8419f",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1effad94-2706-4871-885b-4a05b9d105bc"
        },
        "item": {
          "id": "3a5043ae-90b6-4f8d-bd39-08c4aeef92f9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "eeb8a703-3068-4038-b9e3-aea77a003964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f5440d-75cd-4f2e-940f-f1525aad81ad",
        "cursor": {
          "ref": "71b50c8d-d8b2-461c-903f-539929c55a92",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "149a6213-2274-426b-84ee-8588518e0d35"
        },
        "item": {
          "id": "45f5440d-75cd-4f2e-940f-f1525aad81ad",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "40d564c1-30fb-42d1-a250-606b408a26da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e047a67-f6f8-47f9-9c5f-f29aff0fe569",
        "cursor": {
          "ref": "1d5c8d39-126a-4c87-bbe9-223c71464d01",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4ac6e23a-3f46-4bd1-a0fa-7cfd29376e19"
        },
        "item": {
          "id": "3e047a67-f6f8-47f9-9c5f-f29aff0fe569",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "00bb6170-02ce-495e-8809-fa6631993ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2764d8f-7e7e-4b72-ab13-f27eb8ba50db",
        "cursor": {
          "ref": "79cb7009-b6da-4d80-b8c1-016afce0d8a4",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "91de9c3f-f973-4165-9bb2-0699e074183a"
        },
        "item": {
          "id": "d2764d8f-7e7e-4b72-ab13-f27eb8ba50db",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8406c7ab-0752-493c-b9b0-534d924b2e39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a354d026-98af-458a-8768-c1274f50d4bf",
        "cursor": {
          "ref": "a8add80c-d005-435e-a4b1-515223333abc",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e41b43c9-a0fa-4afa-bfcc-39dcbd4cb159"
        },
        "item": {
          "id": "a354d026-98af-458a-8768-c1274f50d4bf",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "833e5c84-9b47-4805-a53e-798ac866491b",
          "status": "OK",
          "code": 200,
          "responseTime": 213,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "0b6084fd-e075-4655-af44-d769d48afecc",
        "cursor": {
          "ref": "1a681d52-fa3e-4def-b6aa-a920083f0d2f",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "fed6478f-4757-4efd-b985-01d86aab0c22"
        },
        "item": {
          "id": "0b6084fd-e075-4655-af44-d769d48afecc",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3c4c0030-e9c8-4f19-bae5-ff28db29f18d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf09ceb-78e9-4666-8f0a-13aa428c1467",
        "cursor": {
          "ref": "ea0a0519-3879-4978-877f-ce058f53b53b",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a19da05f-cd1f-412d-bd02-4719a43d8ccb"
        },
        "item": {
          "id": "acf09ceb-78e9-4666-8f0a-13aa428c1467",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "dea873a2-f79c-433e-8d04-3c42ca4b7b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18845aac-0874-435b-986f-50b78c1938aa",
        "cursor": {
          "ref": "da6f7869-3f40-49fc-b7d4-c4b095c48b5b",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f3569bbc-18c0-4022-84a1-3def152e386e"
        },
        "item": {
          "id": "18845aac-0874-435b-986f-50b78c1938aa",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3fcb578c-5962-4b40-88f8-0c3344ceb230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e82d5e4-b7ab-43e8-8988-e64a5836432a",
        "cursor": {
          "ref": "ffe4f93d-0985-49d2-9d59-6471c618396e",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a5426f8d-a507-45b3-a1cc-9ecbf28ac87c"
        },
        "item": {
          "id": "2e82d5e4-b7ab-43e8-8988-e64a5836432a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d5f885eb-9fa5-45a7-a03a-a6c1f95368d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f5c66d-3f3d-4e99-b398-ad4b07b4bd2d",
        "cursor": {
          "ref": "0cc5a7fc-63ab-46cb-b985-5849789aa6f6",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "009e5c6c-d45e-4985-bc5e-01e7a4e7830d"
        },
        "item": {
          "id": "72f5c66d-3f3d-4e99-b398-ad4b07b4bd2d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c068863a-0d86-4751-a25c-f4305dbf43fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a4729a4-e3a4-4062-af44-59318b0b99b5",
        "cursor": {
          "ref": "5d59c7cb-a9ec-49ab-8626-be82b55ae4d1",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c2d52558-8395-4c59-8b85-948b87c54061"
        },
        "item": {
          "id": "7a4729a4-e3a4-4062-af44-59318b0b99b5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "dfe8bf35-1987-4557-9e95-e4cc231c70bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4ef4be-f3f1-4e52-9fe3-137f97feebec",
        "cursor": {
          "ref": "c13c326d-9c8d-4ebc-b684-04423f21d683",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "eaaccade-a162-468a-ae8e-35632fc88f31"
        },
        "item": {
          "id": "cc4ef4be-f3f1-4e52-9fe3-137f97feebec",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "80ea963a-7267-4e8d-99ec-ebe247f7b8f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5889d57d-746f-4735-b81c-1ffc0fbb2d55",
        "cursor": {
          "ref": "ffb01564-dba1-415a-99ae-f9ea7c1bd255",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "72d782dd-0790-4dd3-9dad-23f1522248f9"
        },
        "item": {
          "id": "5889d57d-746f-4735-b81c-1ffc0fbb2d55",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "40f4d1ea-016f-40a6-ba10-14b347dfefa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c522685-9b4d-468c-b3b1-fed44d936631",
        "cursor": {
          "ref": "2538529b-bcdc-465d-a649-54c4a7d198da",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "644a88dc-cf0c-4d53-9298-3d1e75426b80"
        },
        "item": {
          "id": "4c522685-9b4d-468c-b3b1-fed44d936631",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4c08f6c6-4256-479f-8d53-d9272aa6897d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ea6430-c377-4a73-9b14-0fafc8a8c454",
        "cursor": {
          "ref": "ad8cec46-1ea7-476e-ae46-69750eedc031",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9c9fa6e5-d4df-424c-b5bd-4f7e35c819b3"
        },
        "item": {
          "id": "16ea6430-c377-4a73-9b14-0fafc8a8c454",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0df598f4-3fab-4e6d-bc71-5e182d4dafa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86fffd7f-a41c-442f-8523-8de148eee891",
        "cursor": {
          "ref": "64830d94-6177-47f7-915d-9fb2492c98a4",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f54bf38e-c425-4e18-bfb2-e706e99444de"
        },
        "item": {
          "id": "86fffd7f-a41c-442f-8523-8de148eee891",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7559d96c-19ae-4fe0-9e09-81a43b2b191c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe85410-e082-43c7-835b-5f0743a749d8",
        "cursor": {
          "ref": "e3cfe4e8-0dc3-494f-9ff4-0a7123c4ffb2",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "78da08d3-3fd5-4810-bc08-927c71b96e1c"
        },
        "item": {
          "id": "cfe85410-e082-43c7-835b-5f0743a749d8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e7be7b29-290b-4c39-ba3e-4fbc1c109629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236fa3a4-48f2-4b7c-80ab-a7dc025547c2",
        "cursor": {
          "ref": "9f657cdb-6059-4bd4-ba5b-db66bf1aee41",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f568bce3-5380-4d8f-b0cb-f9676f5b3d2f"
        },
        "item": {
          "id": "236fa3a4-48f2-4b7c-80ab-a7dc025547c2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "85cd47f1-b1ef-4feb-b0e2-54c25aea7b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb1647e-6e1b-447d-9ea8-94cf81cc65cf",
        "cursor": {
          "ref": "7d32e50c-0049-4155-a7e9-d99e4d346890",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "21c1ac63-9c3d-4364-9098-62518afa6a38"
        },
        "item": {
          "id": "ecb1647e-6e1b-447d-9ea8-94cf81cc65cf",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "90c7b3ca-61d7-4859-a50b-ec7102822207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a4787e4-c187-43c2-84d9-b1650f2dd9b7",
        "cursor": {
          "ref": "5ed5613b-1e54-4b7f-b4bb-0fd3ca0af5db",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "91fcdc3a-fc5b-4594-b3d4-7ff28fcbdf52"
        },
        "item": {
          "id": "6a4787e4-c187-43c2-84d9-b1650f2dd9b7",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "39ab7a03-3e17-44d2-b1fc-a39bced8e72e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7bde8e-9d7c-45f6-951b-2b5af0a0182a",
        "cursor": {
          "ref": "0631180d-6a28-40f4-851c-b9b94a948552",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "72287161-ae28-4605-9442-a4a5a8d683d9"
        },
        "item": {
          "id": "3a7bde8e-9d7c-45f6-951b-2b5af0a0182a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bb40c426-feb4-4e25-bb00-8a63476f0a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c949fc-10ae-490c-8dca-d341464a651f",
        "cursor": {
          "ref": "b3fa0e46-85ea-4d2e-a077-cdd092c0309c",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "cf5fea89-07e2-4a9c-94eb-3980d1df46ab"
        },
        "item": {
          "id": "f3c949fc-10ae-490c-8dca-d341464a651f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3f425e03-240f-4462-9771-a1a605cda5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845fd7b4-c2d6-4bbd-b243-7f11c5ef8d58",
        "cursor": {
          "ref": "4dd0c44f-b3bd-4205-b180-beed09d218c0",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f26eb3f9-cec8-439e-98e8-92b89256ce87"
        },
        "item": {
          "id": "845fd7b4-c2d6-4bbd-b243-7f11c5ef8d58",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "18685605-2a99-4590-8db0-591fc3d5f459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9dab07-1da3-4cc5-9286-ccad720641db",
        "cursor": {
          "ref": "fd9a52cc-5375-4694-bb2d-2732303d7a18",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "70b20282-1696-439f-aa95-f6ec4592024a"
        },
        "item": {
          "id": "6a9dab07-1da3-4cc5-9286-ccad720641db",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3629fc0f-79f5-4687-857e-f0e5f76f6bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77f38d5-ab48-415e-90ef-794d74b1342f",
        "cursor": {
          "ref": "fea25cab-20bf-407a-9364-ef74d7d090d9",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "132dbea6-0098-493d-9b8d-53e47035942f"
        },
        "item": {
          "id": "b77f38d5-ab48-415e-90ef-794d74b1342f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2838e859-424f-4b02-849f-930aef845a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6c193b-8daa-4ea1-b9c1-042cb5b63a0c",
        "cursor": {
          "ref": "d64d8725-060d-432d-900f-a79d6c6e656e",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2c3cfd7e-be8b-4719-9bb3-913ca2769f81"
        },
        "item": {
          "id": "3d6c193b-8daa-4ea1-b9c1-042cb5b63a0c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1dc320a5-047c-49b0-b0a3-8896a927bac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c1fa32-944a-49c7-a6a5-8cf06de14377",
        "cursor": {
          "ref": "e5819871-2882-4430-b107-a77757832898",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "652359f2-2756-4da0-ad62-a91ce06f6d68"
        },
        "item": {
          "id": "d6c1fa32-944a-49c7-a6a5-8cf06de14377",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d23af57d-d43a-4713-8723-f24d1153e71f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2206df3d-5a63-45d9-a79b-e9509977f8d8",
        "cursor": {
          "ref": "87344412-2a57-4118-a309-448c689b211b",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "45ba6b3a-ae46-4cec-b307-c549f277bdac"
        },
        "item": {
          "id": "2206df3d-5a63-45d9-a79b-e9509977f8d8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "96dd4530-2a6a-4adb-a671-689a5cd548cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e0d3e6-a977-461c-8a92-30ebfb40e990",
        "cursor": {
          "ref": "20e38c00-df31-45b6-9e79-d488854afd76",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7e9f070c-713e-4d3a-81e2-8d427faf6b2b"
        },
        "item": {
          "id": "08e0d3e6-a977-461c-8a92-30ebfb40e990",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "129790a6-d547-42cb-93e8-8267264dcb1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1871469d-f0cc-4459-8684-01caf7419449",
        "cursor": {
          "ref": "ba8f884c-8982-48ea-b9c1-0e9eb6ba6e70",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a387823f-c2c4-431c-a670-2f016c8673c7"
        },
        "item": {
          "id": "1871469d-f0cc-4459-8684-01caf7419449",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "095d8aad-00da-4725-9421-c2f9ee5d23ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce42f20b-4fb1-40b9-914b-cc414da8f5f0",
        "cursor": {
          "ref": "14ed869a-33ec-42a8-876c-dee2a84f1040",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fab703bf-0f1f-4270-b705-c50c9087e281"
        },
        "item": {
          "id": "ce42f20b-4fb1-40b9-914b-cc414da8f5f0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8abf223b-ae5d-43cb-b5ba-2bf22e9edbaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e14cad3-4547-456f-88f9-9867894a11c0",
        "cursor": {
          "ref": "da5b499d-dee0-4dfb-a188-7330e3573d58",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "807d099e-acf0-4c51-b437-383d13b2cccc"
        },
        "item": {
          "id": "2e14cad3-4547-456f-88f9-9867894a11c0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6c871247-3626-463f-9e02-3000d959a99d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007ea27d-2b2f-4c73-9ee7-57796da164c1",
        "cursor": {
          "ref": "69854176-62c0-4c06-9997-20ee97cc5f64",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d4888e6e-1081-42d8-b9f9-e61276fe38fb"
        },
        "item": {
          "id": "007ea27d-2b2f-4c73-9ee7-57796da164c1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9240d93c-2b1e-43e1-b16c-a5931b734db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cac2013-103d-4b46-b767-b85114a4dc5a",
        "cursor": {
          "ref": "c9686aec-91a6-4b80-83c5-b47f1120f01a",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3ce7fcc2-7942-4810-a3a0-b928e61f75d5"
        },
        "item": {
          "id": "9cac2013-103d-4b46-b767-b85114a4dc5a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1bb18a70-ebbe-405b-beb6-5fad8d44d934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac428567-05ab-489c-b717-81853fdc7d50",
        "cursor": {
          "ref": "d6942b80-684d-49bf-ba5a-68b911b4923f",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "24b31a88-228a-4b1a-84e7-56a0861646da"
        },
        "item": {
          "id": "ac428567-05ab-489c-b717-81853fdc7d50",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bd9a6797-6d1e-4d85-92fa-10712e75790b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41b9394-8768-4c3d-b044-c861d6247b15",
        "cursor": {
          "ref": "f23cc549-ceb9-4e85-983f-8eda7e8b9505",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d3cbfb07-61ab-4451-bf0f-a082c90f746b"
        },
        "item": {
          "id": "a41b9394-8768-4c3d-b044-c861d6247b15",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5827643c-b04f-4ca0-a07c-0d59725b31f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4dcbcff-3495-47ac-9d39-e8943ffbbfa0",
        "cursor": {
          "ref": "602ab6cb-982c-4881-aa65-e40067ae4b25",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5cb96514-7f75-49bf-ab7a-359bfa32bc26"
        },
        "item": {
          "id": "f4dcbcff-3495-47ac-9d39-e8943ffbbfa0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2045e02d-fb4f-4089-9b03-7308ac717451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de414ddb-5b66-4374-a238-a293f6ef7c22",
        "cursor": {
          "ref": "2042c6a2-b9d2-498a-b8c3-8125319126f6",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5e377da0-6a80-40bd-8d7b-4f6039c69b7f"
        },
        "item": {
          "id": "de414ddb-5b66-4374-a238-a293f6ef7c22",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "66c7cb80-86d2-48fd-9853-faa318b6b3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51456b66-e8c9-41dd-9875-aa8e35c3713a",
        "cursor": {
          "ref": "58a7ceb4-0323-4aca-9410-6b9ff6898370",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "042ad69a-432e-4810-8a0f-9ac816bacf57"
        },
        "item": {
          "id": "51456b66-e8c9-41dd-9875-aa8e35c3713a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d46cf1bd-250c-4072-9969-30bde21aa6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714e7885-adfa-4c0f-b5de-0e12dc3d493a",
        "cursor": {
          "ref": "693eeca2-3c7a-4ed4-b88b-c34371835b70",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "01ff55b3-9bda-4735-b3bf-ff444c332d1d"
        },
        "item": {
          "id": "714e7885-adfa-4c0f-b5de-0e12dc3d493a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5cc11163-d42d-4265-ad8c-97a73fc598ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e3aafd-9d80-4ead-b62a-3df36add274f",
        "cursor": {
          "ref": "09dcfac2-5ca9-45a7-994b-aa96ff71192c",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9e010000-dc2e-41a6-8d16-80eba75e771f"
        },
        "item": {
          "id": "b0e3aafd-9d80-4ead-b62a-3df36add274f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "dc171c3d-25ee-4a46-bcba-1118d3defb7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20b3cc8-6273-4382-9919-a7b93939bd61",
        "cursor": {
          "ref": "ce7e29a2-494d-48f0-a3fd-413d2a816b99",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ce2df723-31cf-48be-858c-62699910cf8d"
        },
        "item": {
          "id": "f20b3cc8-6273-4382-9919-a7b93939bd61",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c685ec41-fb2e-4646-ba1b-2276350c40d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6598c335-cd17-4d7c-9508-257b2cb11b54",
        "cursor": {
          "ref": "a854891a-2001-49b2-bc21-e6bfd61b7ca0",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b4a06657-16ad-491c-bf87-d29b529289c9"
        },
        "item": {
          "id": "6598c335-cd17-4d7c-9508-257b2cb11b54",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1b4b2acf-7748-4d2f-bdf8-9edc42768d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6137e737-d066-44a7-a3ef-42156cd58fa0",
        "cursor": {
          "ref": "d4681635-8a3b-4d71-8c56-50c268a8c554",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8941964c-ed7d-4030-baff-57fe99fd7a5e"
        },
        "item": {
          "id": "6137e737-d066-44a7-a3ef-42156cd58fa0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1cedf707-b288-4935-88e8-0e3410c54451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1552e988-8b83-4ff5-9f37-d073b14f23f4",
        "cursor": {
          "ref": "fa3266b3-b462-42f3-a995-4ddbeb4c8953",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8ed2de8e-8060-4569-ba3e-9c3d69e9c470"
        },
        "item": {
          "id": "1552e988-8b83-4ff5-9f37-d073b14f23f4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "031480c5-3d1d-4e62-8512-19bcb5199c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8f23c5-424b-4c26-bad0-d71d288262a1",
        "cursor": {
          "ref": "2a2fefdb-bfd3-41aa-ab98-30c6e25ae4ce",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a6eb5b4d-0796-469d-b0c9-e064c60101f0"
        },
        "item": {
          "id": "af8f23c5-424b-4c26-bad0-d71d288262a1",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "626ae487-fc27-49c0-b2b9-d96b85262c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16826e1-151c-46a1-a013-134d4d62e6a7",
        "cursor": {
          "ref": "1d3b58a8-8dd8-4997-8014-a2014491b2b9",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8cfe6837-5083-4c70-bc9b-c27c3fc25e61"
        },
        "item": {
          "id": "c16826e1-151c-46a1-a013-134d4d62e6a7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f2048e8b-26f3-41e5-9b04-8fd912a87936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8dcb16-3247-4b1b-b759-3323d4094489",
        "cursor": {
          "ref": "0738f81d-9354-4133-b65b-1f9a20004cf1",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "30f11dd3-d587-4965-a120-5e46bd75e90b"
        },
        "item": {
          "id": "ad8dcb16-3247-4b1b-b759-3323d4094489",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0a472765-d1b6-4097-b930-9e75576b0775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030d64cb-6634-4aac-b8a1-ee866f4a99be",
        "cursor": {
          "ref": "8cad9121-992a-4298-8439-ccb62d84193d",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a1b22875-5702-40f6-b389-058a7d452f23"
        },
        "item": {
          "id": "030d64cb-6634-4aac-b8a1-ee866f4a99be",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a77f145f-7070-4c6c-8737-1306f2c93d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d50a34e-2275-4405-8abc-7f18d49d8d55",
        "cursor": {
          "ref": "2c9593a7-faea-4a53-a00a-74b26ff76ef0",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ac84213c-0426-44fb-8e38-c32921a8284a"
        },
        "item": {
          "id": "5d50a34e-2275-4405-8abc-7f18d49d8d55",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3ab970dc-384c-4632-971e-4090060d49ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a799acc-6ff1-4422-8c73-fe171d15fe89",
        "cursor": {
          "ref": "4cbcb2aa-e96f-4cf4-a0f4-999b9b4b67d1",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "62388555-f457-4918-9faf-2310f1ae6606"
        },
        "item": {
          "id": "7a799acc-6ff1-4422-8c73-fe171d15fe89",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e607da99-4215-4097-b5f0-9990c192bad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0970b405-21a4-4807-94d2-83312de2d66c",
        "cursor": {
          "ref": "f812cda5-48c0-4d6f-bffa-b400cba01724",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "bc18620a-f85d-4167-a1c4-0f765cd5682a"
        },
        "item": {
          "id": "0970b405-21a4-4807-94d2-83312de2d66c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7a32a7f9-331e-452f-a266-fc793c510cff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9b5cbe-15ad-4e15-9a43-a8b3de478d19",
        "cursor": {
          "ref": "96420251-77aa-4a13-8548-b4f2202b0198",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "19752439-4bd5-4a65-9b98-804cbffaa5f6"
        },
        "item": {
          "id": "1a9b5cbe-15ad-4e15-9a43-a8b3de478d19",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b0cc5a2a-7105-4584-a61e-dc976c2ea1a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4fa927e-94df-4c14-b1af-e5e6541e0869",
        "cursor": {
          "ref": "3c02cafb-1124-4511-8f62-f8ae6a411ac3",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5225e52c-650f-4e21-9d87-f8b52df32db4"
        },
        "item": {
          "id": "b4fa927e-94df-4c14-b1af-e5e6541e0869",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "572e00ff-6a02-42f2-86fc-5ff3d9702ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9228ff0-2da7-4a20-8673-23879d4a44a4",
        "cursor": {
          "ref": "f86b521f-b784-4e2e-a550-43d9c46c13bc",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "53fa8e5e-5073-483b-aa41-18cf0a822c05"
        },
        "item": {
          "id": "d9228ff0-2da7-4a20-8673-23879d4a44a4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "74a9c0a7-ded8-4521-846d-b5402350047c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a77af43-169a-4800-9483-294482e6c11c",
        "cursor": {
          "ref": "890a408c-e687-460a-bca4-d4b7852219c1",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e9537fa6-91db-41be-a8ee-74befe352abe"
        },
        "item": {
          "id": "1a77af43-169a-4800-9483-294482e6c11c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f0d418d4-e93e-4eeb-9422-cca64b064370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c816e512-1cf5-4c50-86c0-5caa14ffd745",
        "cursor": {
          "ref": "b0906358-b53d-4f5f-8901-3049933f68cc",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bfeaff67-eb01-4f55-93fe-a6e67bd33464"
        },
        "item": {
          "id": "c816e512-1cf5-4c50-86c0-5caa14ffd745",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "116f6169-4b81-4085-9c57-c2d0e8fb43ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a48794-f83b-40da-b38a-b42525064626",
        "cursor": {
          "ref": "6e141c54-51fc-42ab-a1fd-6a28a208f0fd",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0c659133-ce6f-4644-ab21-dbb979aa5c7d"
        },
        "item": {
          "id": "05a48794-f83b-40da-b38a-b42525064626",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ada06567-35fc-4f9d-9956-fd50f9271911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11916a4a-c93b-4979-a363-c4f7bfc190c0",
        "cursor": {
          "ref": "e229335e-3443-4193-b153-6c2893f66d1d",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "33c853b6-a5c0-4b7c-b2f7-43aa15fbd4d1"
        },
        "item": {
          "id": "11916a4a-c93b-4979-a363-c4f7bfc190c0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "181fe469-0e23-43ba-90ae-6610c6b2de46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16407425-c702-4ca4-b0de-b938be3874db",
        "cursor": {
          "ref": "48fd98f8-8965-44b0-9718-bfc3d169c02c",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fae522ff-7a8c-4745-9d57-53cf37b14856"
        },
        "item": {
          "id": "16407425-c702-4ca4-b0de-b938be3874db",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6b869056-e1f8-401c-aa4e-2fac871fd516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893674e6-b5e2-41e2-9c2c-e13681b99f2e",
        "cursor": {
          "ref": "75be2fa3-3c1d-4a2d-86fb-bcf0581cbeda",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "728b3d73-1db2-42bb-8cb5-354a96b8090c"
        },
        "item": {
          "id": "893674e6-b5e2-41e2-9c2c-e13681b99f2e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "68fde440-70aa-4733-9f55-8befcd31f6cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf63814-f99a-4258-8744-2b304f22c067",
        "cursor": {
          "ref": "e4235011-ba2e-436e-b9e4-9c2fbab73056",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "1aaad872-42ee-4cfb-a1ae-d7da935205b2"
        },
        "item": {
          "id": "dbf63814-f99a-4258-8744-2b304f22c067",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5b24fd58-fcbc-45cd-9b31-a6023b66ef34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8981fb-707a-49df-9c6a-5fe7dfdf6762",
        "cursor": {
          "ref": "447f2e68-de34-4d87-b59d-729468d42409",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "145cf762-5451-4c36-8bbc-c84c8a514722"
        },
        "item": {
          "id": "5e8981fb-707a-49df-9c6a-5fe7dfdf6762",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d8309140-c24c-4437-b892-3870474bfb9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4175601-2d02-43a4-bee2-f099c714abec",
        "cursor": {
          "ref": "eafa7794-315c-4adb-bde7-4f0da5ad58e3",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "f0e22be8-7d3a-48e4-abfb-73f7a5b99af5"
        },
        "item": {
          "id": "c4175601-2d02-43a4-bee2-f099c714abec",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "db3aaf0e-0e0a-4d35-bf75-994db7ff8ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3921ad-d613-41cc-bee0-478541035ac0",
        "cursor": {
          "ref": "085e8713-e9a9-4a37-9195-22fbe49ae844",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "54b36609-8677-42be-b144-6d2dab6369f3"
        },
        "item": {
          "id": "0a3921ad-d613-41cc-bee0-478541035ac0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "933e94ee-503a-4753-96c8-d02dd79ef2f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987871b2-dd97-4585-a71b-2d4162215b64",
        "cursor": {
          "ref": "ca1545f1-8798-4306-9887-1e9608835dab",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "78946832-b878-4295-a3f6-7e8bfd66f44b"
        },
        "item": {
          "id": "987871b2-dd97-4585-a71b-2d4162215b64",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4d7a61cd-9227-4375-b17c-fc263d2330be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a51c621-d3f5-4826-a343-7eb150ce46ce",
        "cursor": {
          "ref": "d4d872d9-8429-48a8-a6a5-f6e0e26bb496",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "510ade3a-f599-4d39-be80-2803f08e6fbc"
        },
        "item": {
          "id": "8a51c621-d3f5-4826-a343-7eb150ce46ce",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9127a35e-3c68-477e-b113-a47a542dcc16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3fb3490-b417-4409-905f-894cbacdc7f3",
        "cursor": {
          "ref": "5939a2bc-988f-4f34-b727-8e4e39679d38",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "d4cf8acf-d6b6-417f-8eea-f1d97d6ba662"
        },
        "item": {
          "id": "a3fb3490-b417-4409-905f-894cbacdc7f3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c88604d0-e09e-492f-9f40-a6bebfb3ad07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b2579f-9afc-4e0b-809a-21e0e10b120d",
        "cursor": {
          "ref": "2ce4da0b-a9c8-40bd-8e6a-093b750626c6",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "3031534a-88c4-4cc1-8b90-f9c8a0cb63e9"
        },
        "item": {
          "id": "c1b2579f-9afc-4e0b-809a-21e0e10b120d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "aa31005d-457a-4d31-9af8-961dc64e68f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b577870-b7d2-430f-8fb9-b5e28bd0827f",
        "cursor": {
          "ref": "15831b69-01dc-4de2-a7f4-2eb198607a85",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "add83e3f-b4a0-4e35-b0b0-d8cde2beada0"
        },
        "item": {
          "id": "0b577870-b7d2-430f-8fb9-b5e28bd0827f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9d2c3690-b7ba-4d3d-925a-06ad94e07d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4400303-5c9f-489f-91e9-3ff3259b7245",
        "cursor": {
          "ref": "aa438c6b-fb26-4f56-b78e-01af0eaf6f9d",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "8c12b43b-1603-466b-8dc5-ece56a1b93ce"
        },
        "item": {
          "id": "b4400303-5c9f-489f-91e9-3ff3259b7245",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2fde5cc0-be8a-4427-ba12-0f4180889ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7fc310-7681-4b80-95dd-b00422da3e38",
        "cursor": {
          "ref": "e7a9b465-3776-4def-ab01-c1809710798e",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "707ca7f3-7ed5-4a15-9bd9-590ba13dfef0"
        },
        "item": {
          "id": "5e7fc310-7681-4b80-95dd-b00422da3e38",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a301b115-3744-4677-977d-1c89d830831d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546e401f-8f89-4518-a2cc-24340908ccb8",
        "cursor": {
          "ref": "b79620e8-8e1b-4bd9-bd09-7152c2c26902",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "d98e2470-7520-49fc-a75a-6e69227f91cb"
        },
        "item": {
          "id": "546e401f-8f89-4518-a2cc-24340908ccb8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2f112d6b-c353-49eb-9762-bbbef5f502b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bafc217-e30b-4a39-b794-6efde3e9b5c4",
        "cursor": {
          "ref": "2ea2e5c5-8192-4b89-bba3-52309c30f81a",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "9255c5d4-95c0-4755-b642-8eb79191e501"
        },
        "item": {
          "id": "5bafc217-e30b-4a39-b794-6efde3e9b5c4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "33cb5fd1-3bd9-4cd9-a79f-a726d04540b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa101614-aa1a-4269-9cef-4b0059cc74bf",
        "cursor": {
          "ref": "a97cb9b4-1400-441d-8c51-218d2d756c01",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "3c272cbd-39eb-42ff-8a66-34893e86de67"
        },
        "item": {
          "id": "fa101614-aa1a-4269-9cef-4b0059cc74bf",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "4a8971df-de5f-4c2e-a8fd-046678d50c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b547643f-73ea-40b5-a303-3267fb32c59a",
        "cursor": {
          "ref": "dd919818-981e-4c56-a477-e10af4ce55cb",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f974e113-e448-46a4-852f-73f3da70f644"
        },
        "item": {
          "id": "b547643f-73ea-40b5-a303-3267fb32c59a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a975cb06-4c16-4242-8645-f8acd75a4bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d490de1-e4fb-4550-9d33-ed96db3802e5",
        "cursor": {
          "ref": "deec8991-83da-4776-9be4-858da97bdae9",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "ff19b9aa-31b4-4f74-aad7-9e54d63725a6"
        },
        "item": {
          "id": "2d490de1-e4fb-4550-9d33-ed96db3802e5",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6f09a738-e2ca-4fb8-a7b3-98542e1b6a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f56821f-5c6e-441d-af05-49814d3ccbf7",
        "cursor": {
          "ref": "37f105ea-7937-4064-8736-19f0589e2379",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "51c3fcd4-6de2-4ee8-adcf-b651f3a3ee6b"
        },
        "item": {
          "id": "8f56821f-5c6e-441d-af05-49814d3ccbf7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f598f753-feb6-49ba-b15e-9f226f7feeab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f50d7008-b35b-4ed2-8b8e-88f5805ca612",
        "cursor": {
          "ref": "ec285215-2831-4926-ac41-ad54a150fcf9",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "0a23de99-03fb-4ed1-bba8-9137164c97f0"
        },
        "item": {
          "id": "f50d7008-b35b-4ed2-8b8e-88f5805ca612",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "3def5947-b11c-4465-95a5-8e771c10702e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1939d36-4bdf-421a-897b-6da2b3c1940d",
        "cursor": {
          "ref": "cefdbc11-186a-47ff-9d6d-1f306ff37940",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "be59356d-dc05-4d6a-be88-87e1a5268d66"
        },
        "item": {
          "id": "e1939d36-4bdf-421a-897b-6da2b3c1940d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2e63c555-e12b-42cc-b6d8-be9c39b0dc72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0afbf1ed-d659-4af3-ab2d-4284de6735e5",
        "cursor": {
          "ref": "67964051-21de-43eb-ba5d-6a0f878e5b6d",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "9f0b6415-f68b-4c80-bb1d-6c9ae1f3f79b"
        },
        "item": {
          "id": "0afbf1ed-d659-4af3-ab2d-4284de6735e5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "882ecb80-9bfc-4fee-9af2-3f47c4d312d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920a9e32-5289-47e5-bad5-66480e79ac51",
        "cursor": {
          "ref": "c081b5e6-7ac7-465e-85ad-bfefba88c277",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "666ed4e6-978a-44e3-9dc5-94aea8008ede"
        },
        "item": {
          "id": "920a9e32-5289-47e5-bad5-66480e79ac51",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e059b671-38f3-465f-b708-a27b32c9e31c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a0011c-54e2-42bc-bfaa-776316896c09",
        "cursor": {
          "ref": "360433f1-2cf0-447b-9fb4-06d8a1ba458c",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "8ea90784-ff2b-4ce7-94ba-0b18dc43f0c6"
        },
        "item": {
          "id": "a0a0011c-54e2-42bc-bfaa-776316896c09",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "aafa0cea-4308-4311-bf19-9de923cedc13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6bd49d-0e4a-4ce4-b8b1-e039901db38b",
        "cursor": {
          "ref": "c25f747c-5dcf-43be-a990-7227d728bb99",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "ea1a1796-83be-4fd4-afe6-f6ebe6c50ec6"
        },
        "item": {
          "id": "9a6bd49d-0e4a-4ce4-b8b1-e039901db38b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "653e9851-431d-4c4f-9b66-f2f7e1faa8e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef62c8b3-931d-4ebc-9e87-f7bf33451e48",
        "cursor": {
          "ref": "8fe0aa11-1d3a-4316-a746-fd957529dc68",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "b0f5426d-e24f-4e74-875c-07c06a542977"
        },
        "item": {
          "id": "ef62c8b3-931d-4ebc-9e87-f7bf33451e48",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "34cdcc59-e0c8-4ac7-b929-96908eea63d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f313269-1ef6-4287-9bc8-84a689110df0",
        "cursor": {
          "ref": "28483e04-b81d-4149-8c94-5d4f27485edd",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "870ae8ac-d40d-4eb7-887e-c361dce34e93"
        },
        "item": {
          "id": "2f313269-1ef6-4287-9bc8-84a689110df0",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0287a111-8740-4b13-b37c-bdcca8a8a8be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "2f6de95a-0db2-4c50-921a-c97e39e95bc6",
        "cursor": {
          "ref": "50bed9aa-a8d8-4904-acd2-1f9dbe3a9292",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "343a9e3f-d7b9-4124-bde4-d46d48513663"
        },
        "item": {
          "id": "2f6de95a-0db2-4c50-921a-c97e39e95bc6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "60ba0627-6be2-49e9-93fe-86b65a996a44",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "f43b2756-d8e9-410f-9a9d-27cd4184189a",
        "cursor": {
          "ref": "ade85b72-8851-42f9-8b37-2d61b75eb133",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "dc34693a-8aaa-400d-b05c-7e56d1157ce8"
        },
        "item": {
          "id": "f43b2756-d8e9-410f-9a9d-27cd4184189a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7e12334e-2128-4eac-bcaa-a7ef765cec5e",
          "status": "OK",
          "code": 200,
          "responseTime": 2046,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeaa796f-2825-467d-81d8-d4b933e427ad",
        "cursor": {
          "ref": "4808f0f7-6821-4c37-a950-ab990a98fd29",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "42f7414f-a01a-4b07-95ec-d8207765bad5"
        },
        "item": {
          "id": "eeaa796f-2825-467d-81d8-d4b933e427ad",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6c3d9aac-d0db-4e06-a9ff-4aa15a9c4f11",
          "status": "OK",
          "code": 200,
          "responseTime": 2353,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "781a9f70-d1bd-42a0-a2cd-d7b41abb825c",
        "cursor": {
          "ref": "e291109e-1400-41f9-8991-1bc74fdd5705",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "dceba0ef-0461-48df-a3a0-d34017b03366"
        },
        "item": {
          "id": "781a9f70-d1bd-42a0-a2cd-d7b41abb825c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5986d190-defd-4cc2-a850-cc7352cfb00c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "781a9f70-d1bd-42a0-a2cd-d7b41abb825c",
        "cursor": {
          "ref": "e291109e-1400-41f9-8991-1bc74fdd5705",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "dceba0ef-0461-48df-a3a0-d34017b03366"
        },
        "item": {
          "id": "781a9f70-d1bd-42a0-a2cd-d7b41abb825c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5986d190-defd-4cc2-a850-cc7352cfb00c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "1ea92d95-90a0-4a0a-855f-1e6c1b756634",
        "cursor": {
          "ref": "8de88209-32c5-470b-96e7-e4c0971f793b",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2bd9b187-7433-4479-b44f-b9c662429a78"
        },
        "item": {
          "id": "1ea92d95-90a0-4a0a-855f-1e6c1b756634",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "60f1a9ad-7127-4197-bf68-bcf44b428573",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "1d857705-fcf7-4ab9-9d27-4f4482a53c7d",
        "cursor": {
          "ref": "fb65ab5b-8ea3-40ba-87a3-be72a58a9f94",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "13771aae-2652-46ae-af8a-d25dd739e7ed"
        },
        "item": {
          "id": "1d857705-fcf7-4ab9-9d27-4f4482a53c7d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a27f09ef-ad7e-4877-8efb-c5f09429beec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}