{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "63f2af94-d133-4be6-b5bb-f1ee21691fb4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8caef9d3-0ab8-4646-bfce-8880e37a4cf0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b6b85695-2886-47cc-9945-2e98c17c793f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4668f2a6-3b04-4e19-a973-5af051ee5ee5"
                }
              }
            ]
          },
          {
            "id": "c4b1aca3-1cfd-4ae8-ac67-51b066125e90",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9f757c72-1412-4b5f-888a-bb0d6ff0f9db",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "daee791d-955e-43e5-bfbf-2610a89cf452"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d830a781-09b9-4199-9936-3cbd2c1f3817",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "437a6d03-b598-47d6-8658-29bb8bba4274",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bae56148-9c06-443d-b816-fa26da689279",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea432ba5-b0f7-4d79-a400-c6a622ab4485",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "522807f3-ffea-4b55-a5ee-533ca28af2e0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5c0c2c77-c818-497d-a652-2d0d7679ba06",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "23d42b1c-b3c4-4375-9d92-0dbd48cdea92"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "be863f5e-2f70-4258-bed9-0969e846053a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7f227769-195b-4b6c-b2d2-595f4e1db718"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20654261-1420-4cc6-9ee6-2d00b345d715",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "31be1e71-da2c-40c8-8cfa-d4f3641f9d06"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a6c9c35-572f-4c69-8400-ed3a3c267c9c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b5e3fcb-e477-4343-b715-ea970d1cf012"
            }
          }
        ]
      },
      {
        "id": "0c036125-f356-4772-a578-d40f1a3f2416",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "31467c8f-11b9-43bd-a695-9f1a062b72ed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ed4422f-b08d-4185-91a8-4dafcf4f6950",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a6c9d763-009b-4bff-bed7-d52118a6a40f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6cef85-ef27-4722-8a12-e3c32ecde100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4db78e05-a08e-48fc-9bfb-3c9fddfe7b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a0052b-2cd7-48ab-9ab4-44b7d82656e3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b1f410-41b4-4754-997c-e97873e27fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d846cd8f-031e-4fa1-af8c-991c66e87bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d272dad1-c830-4646-8577-27ac1bcf3828",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65f0d93-62a5-4d6a-acf4-0859ccc6ce03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf73d02a-7623-4503-b501-91453d39efa2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a6e0a50d-3d1b-4411-b56c-f685fa9496bd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "405e6c4a-a5b6-4e29-8b0a-eccd4d8acea5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ff4223-bc3a-4c17-8472-55da8c1ad59f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f3b32a0-520d-4519-9133-56f0a8a54608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4352e4-8f0c-4f2a-8335-fd6be10e1425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16f6aa0b-c3ce-410c-9568-77da0dba04c8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e78dd537-ecb8-40bc-8c13-8ac7ee954552",
            "name": "Positive Testing",
            "item": [
              {
                "id": "636ebea5-e19c-4acd-a762-862561815fb0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fe010fd-6fe7-4b03-a0b4-be8dc90cca5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "40b636b6-9d7a-4d2e-80b3-2c8a78096e08"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "961ad8ad-7a5c-4158-96c4-ab199e4d5c65",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ddfe2ed7-7967-4b05-b94f-2834a721e862"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d359919a-8b81-4189-8144-b265697f6ca9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "253b8496-2532-4b09-8826-01e2ac5f575a"
            }
          }
        ]
      },
      {
        "id": "8155116b-0a1d-4486-8517-20a3a98aabf3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2c5c5187-496d-47da-8d5d-35519c773442",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1a97f231-67c0-48d3-ac78-1e8db85459c6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1d854a95-e323-420f-b798-7665dced95d4",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1cc2de-e6c2-4278-906a-78cda67140b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a620f763-f474-4e2f-985e-473e1d9a6a08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27554377-9989-4d8a-ba14-b4fd7f13a7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02186356-3a42-4666-9ed5-cbbf6dec611e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d63fcc0-5b39-4308-aeae-8159f289e8d1",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "909a6d4f-c672-4ed1-aab8-b6a707983ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e04e3f-268b-4987-8fdb-078561cd94a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f66b36-070e-41b9-b80d-dfcd67c7d9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26618863-c784-409f-be09-df022180e5e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e9dc80-c551-44bc-b763-e288e516523a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c466dd-85ea-41f3-b103-e1451064a142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a212bb3-d6ce-40bb-a791-65b9867dae05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d10d53-cdb9-4472-8dbd-4ca72516296b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05927ea4-54f4-4e81-bd56-d3ace75796ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef01b1d3-84d8-4754-b3bc-a2b21641ae23",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d2f879-bf82-450b-83d1-0bfd39d9eb39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7824210f-5200-454c-8a44-d56a4a67a0bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ca3ca4-b07c-457f-9b50-709ed70b0ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e843acbb-16b6-4386-b19c-e6be566491e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2266e882-b9cf-4eb2-809a-c87ac255a5e2",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6241aace-fa8e-42d4-a631-ed49102655ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca9ac8a6-6d88-45a2-b9af-0465f9e202d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01af9090-89b7-48bd-a823-c29c38d245df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29e6a98b-2432-48ef-acc8-1f4b1b6af3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c1cf2d-41ee-464e-912b-af90e6b85c7b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1e9900-4e68-44c8-bf23-bbbc39f6e716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc79287d-d6b6-4a1d-a887-f9884378459a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb57c33-e0ad-40b5-9961-83597f685e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f015120b-46fc-44ac-b1c4-a4bf26ae096d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004037f3-a862-4218-a1a3-be985ddd6b5d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a84e851-51cc-434d-b9c2-e1b75045e7cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b387fba2-3b55-4afe-a608-ea849aa05eb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c48705-d550-4f42-aee4-7062ff684fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef132142-25fd-4571-acde-a0344adf72b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cdfc36e-2b6c-4361-a798-194b072630eb",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0d2a30-85ea-4eff-8c17-0cb0e09078b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d66b2b2-3b0e-4fb3-b409-a45a540151ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e5af88-5807-4383-acb5-4fa85adf0eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e36e9f6f-f486-49aa-a269-e1ded9e84603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a804d5b2-b86b-47ab-bc8d-9b233977004a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "945ce41a-a4b5-4f3a-83de-cb352b577ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d0d0186-489b-4ecf-81b1-f913d3411a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc73178-bfda-40d8-a0e0-4eb1b681358f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8aac101-9ab4-46ba-850b-e1e683b5d194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c11b40-3376-4ca4-80fb-5f7fca59342e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1837cd4d-be0a-4898-8675-76fb9fc9cf51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ba6b67b-f59e-482a-ac15-8b2de58475c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8016446c-5a5d-44fa-abad-8e6b7f9a042c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc0cdaa5-6863-4f0f-a2c9-41da1dccfbc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e9074b-d8b4-42bd-b88b-14f56c57d349",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e94baa-1a6c-4cbe-8415-b3f52890f94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c93e0b-99e4-4449-9153-903cc8d61c48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6495e73f-66a0-4d11-b329-413d1410d07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9f1da86-31c0-4b05-9dd5-d4f2cef48ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816ec315-a1f9-4c5e-8bab-ca43d2fd48af",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35dc47ba-afbd-4e1f-a7d3-5d045e71e9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6701454-8aa9-497d-a51d-132aa58cd118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95bc53d8-1712-481d-be09-31b073a904e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25a1870d-d18d-4b48-b9b6-cd473da7abee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75806a1-4eed-48a6-a6e3-6e89e78932cb",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8dd155-ad36-4801-9e91-766ffe555995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d8de959-ecc5-4895-a049-d59175aaf0b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baae0b0a-dfd1-4384-a92d-35419ade3454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "009d8595-afb9-415c-b3ac-e29b236802f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e09726-0eb5-4063-91cc-361111e0fd76",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8cfe8e-69be-41bd-a159-8dca02316927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abbda79e-898b-488c-b3fe-de39a01ccbb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030021f6-384d-40fe-997a-3409aebf859a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da52556e-b4e8-437e-b20b-6baab527038e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "decd2c35-c23d-4f0f-9752-649e656fde03",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda70aee-d0d5-4e1b-9e2b-842d9fe7ed6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58a25146-dd3b-4034-aa98-b536397b1e63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e44a89-6b70-4ac5-b1b5-1cbf6551aef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9630e24-129a-4e0c-be37-fc9acfed7683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca438c21-4274-42a8-b0ee-bd870086b0ea",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7d4142-bae7-45c6-9837-064007343e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f1e1888-5b23-4e00-ab7b-ce4666b303c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c8dc5d-6265-4001-9b66-ffbca1c5d182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d58027d-0b63-49b3-9a97-26e508fb20dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e9fed8-6e41-4d8f-8929-38f2b2b567b5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "091208df-cf60-4586-b75b-4fd9c693f5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d5b1a34-6dc3-4db2-b3da-21e5f92377c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a293cc1-0aa6-494d-8cd0-db21d3eb9cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "442d8002-099d-41ea-9a02-9f9c1005d992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9320b2e-3981-43b6-b686-6c053751dc4c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5953860b-71d6-4454-8652-d488c3a824be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b6c41c0-ca5e-4c24-8bd4-ebc12c672100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0035f0-3239-45fe-a3db-901e1ba44099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f402b088-532a-494d-a741-59f3b250d764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd40414-c61b-4dfb-9196-58c6f99c6bde",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "352580c2-3dff-4a7b-a7ab-f56c1346fb67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d3013c-f650-4c7a-907a-f814582d3fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad036721-61ff-4557-ab70-72c533e777e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3927a448-383a-492e-8473-56d72c826ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ef96ca-4cb9-42b1-a8be-7dec4177f03c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbb1448-3770-41c6-82ee-458ba80749b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c74d39c-c30d-4801-ad2f-03cc67fe1ed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194abaf4-a528-4b3a-98d2-6e975501946a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc0c69e-9453-40e0-bc4c-98ac7247e2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55b8f77-3723-4d93-9a18-8df58efecc2a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4d099d-9fd5-4821-b0b2-22f5993eef0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c2f846b-837d-4805-ae87-e46dc0241aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab98bea-a930-4360-b2f2-858f2c88ade0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d394447-fe09-4644-93f2-b5266b483071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d4756d-ab91-49c2-9d7d-2f4a94fdea01",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f41abaa-b3b5-45c9-933b-f13e5ba2bea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "435dfae5-da4e-4902-84ff-5bf18cb8d2b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dec3571-67d7-4388-9990-7f68396c1685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "52971b32-fc52-4c81-8544-87a04640d60e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e43597-6e82-4570-8abf-aa1e423da917",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d1d56e-320a-4aad-9521-dbe5fc3303f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "627eac35-cd81-4858-8ce5-768057f9e90b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8865319-bfcd-4225-8088-18fff8fa7033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d97b2627-420f-4ee8-97af-40a483b42322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4dc09a8-58c3-451f-bed4-f7a8ec549655",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a115998f-7959-4892-a67a-f2e40138201c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "674a030a-5291-430c-add6-5f4aacda7413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e98a9c-6df7-4501-9db9-4c5f642b1a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "83000c53-f427-497c-b5a9-e0f56bc00ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c365194e-e096-41ad-a381-f80c07d72309",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf07c16d-3145-4830-bb8c-0791168045fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ebf4d73-b791-4aaa-ad2b-f96b7c5ee43c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175e0716-26e8-4f5f-8826-a98150622a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8ff7f54-66be-4e87-b1a2-5d9246839cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2682cd6e-dcc6-4906-89c5-7319f99684a4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75fff02c-68bd-47c0-b1bd-1173c2ca6f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7962ad12-450b-47d0-9a7e-dcf66d30c74d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d690d5-1122-4053-8322-b1a72add639b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "86d62d06-d985-4096-bbd3-296e02c525b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ef1744-224b-4295-b039-b8da9e015805",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ee2333-bfd0-416d-993e-4d5552936e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ed812bc-45f9-4c57-97e2-8b6a1f9e1e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d326860-4683-4ded-b562-f060024469d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "509528cd-549e-44f3-a44b-39b65957630a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99eff3c8-4bdc-41ed-8efe-3463cc39279e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff15eb87-0893-4dd5-870e-391f2b76d7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f48b036-9c54-4377-91ab-cd0a7630d0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d1f1a6-2eb8-4737-8f41-ed96196c769d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "13958419-908b-4654-917a-6b40d4135317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203dbc7a-ebe5-4c7f-ad24-65b9f2917e5c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aac536a-782b-44e7-9315-4ad1c23063be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28fafb09-95f9-4ab4-afee-4271e1aa20f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d90cee3-4fcd-4c94-a9e3-647e06fc8744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cac0835a-5d59-4d2f-b9a3-c424b0d1718e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5cf26d2-beb1-4d74-a75d-81712ede4bda",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5681f2a4-a3ab-4a18-b38a-b49e8f6fd2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb2fc108-3473-43f3-bba6-3cc2e36da6f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c317da8-b36c-4c54-872d-c1c4e9fb5412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0671e30e-b6b8-473d-a00e-f34d7971e385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522be44a-55c1-42ca-a201-8dd17820cbb2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aacaad50-0ffa-4cc4-ac13-03bb9264cd9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd819b24-25b9-462b-b465-cf97d29309dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96c534e-cefb-4c38-b0d2-d8f54b1680ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "34a54519-9409-4c48-bb4a-313a2fecf10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f158843d-67f1-48fe-bb27-b10c5b6c38c9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffbd95aa-8591-4427-817f-39c23756b90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22fd7f7d-067b-42ae-a943-3053a09fbd8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65702d8-a2e5-4d4d-b885-b3de84bd5dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc1730e0-a542-4eac-bbd9-1f9c99a6208c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df854a35-5ab8-484d-87e8-2528e601f8b6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba65e3be-30c5-4c51-9af9-9ccf9524003e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f54e4b5-7cc2-431c-9002-50747d2572f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36bd44b4-f5fb-458c-a185-999f8eb0355f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "995eb9cb-ec6e-42eb-b087-f41cee625672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7228c8c-0d42-476e-83d5-611be4113f56",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f3b2c0-824d-4e3f-86f2-3147371a7ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7868d30e-dbd7-4b74-a59e-043d6eafba6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66e7929-cb22-4be3-9515-d2f0ec887774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5497008a-5f43-4a2d-9808-7ef66cf02e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30687bb-72b0-4958-942d-6e7fbd37aa94",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc6d24f-c2b1-4ce4-877d-08a52ca5e17e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07976f76-9c7d-4f34-ba3e-15d566bd481d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3766c1f-e0a8-4902-9dae-ecd1787203db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1d96f65c-9dae-469b-9fee-2827986fb29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ce5120-7379-4988-a238-3bb0cedcfd9a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5920b7-198e-4194-bca9-725fcffa1ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9bc9027a-ace7-4025-af2f-3893ce69457b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55235a6b-5769-402c-bf7f-d24784ccafca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21d1a774-72dc-462f-a62e-f79e7744dcaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9f54a3-34c9-4888-a545-cb1f091f4a6d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78bc789-2250-44eb-a117-91fda561a84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36f39ff6-0e9c-4960-9d93-58c258e81bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46375322-b55b-4fb4-9461-53107795cb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "191b98c5-660d-4d43-be9d-4c8620402f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99cae06e-36fc-4fd6-93fd-757226b9bca4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a8c819-a362-459c-8f30-35a376772bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5b943e6-1c21-4f16-99f7-295d456525c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac97d34e-4d54-4e3c-ab27-31b671beb7fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bfad3fcf-449d-458c-9168-044ff2edc92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb88f7d-81fd-4925-a19d-cc893d095adf",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a52fa4-a144-4b73-8a03-999d91be9773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ea78a63-f4c1-4656-b414-6b80b9b623fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5a8460-2872-461a-b6e1-314725db1735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2dd4fef9-e193-40f6-a060-3d2c705e1ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3419ce02-b912-4019-80e2-59f0461b6f97",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf8abcb-6c75-4811-bad2-d2f14f0fb474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf179ff2-326b-4394-acce-b221eecc2b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f2af86-f360-426d-9397-3570ddf4696a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d032e249-b3da-464e-b95f-56957f0a4f70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04f00a9-e1f8-4af6-b2cc-e60dbc0fcf54",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfcedb7-7ac9-453a-a059-f21e56c54566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37865e19-484f-44cc-bdd0-cf46b34279b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397ec2ab-37f1-4421-bf07-91c0e2a5ae4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8384d7f6-3e10-4ac8-aea9-c48a5206f2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9a3ad8-2319-41d3-b9d7-ea899e13bbd1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef01123a-4709-4a4f-907c-526f285f8f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f07ece9a-0ec1-46d8-8cde-6b3fe9c27549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049e1cca-d13a-4d3f-ab7d-ddb2e90f1423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "87dcf5b6-7165-4f0e-89bc-f14029045e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e3bb14-f511-4746-ab01-380b2722d1f7",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d351206a-15e4-4726-9ea9-9d2428757ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "803e1524-04c0-4009-8c2b-2dbbc4d8b299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d876f879-4c68-4971-ba89-e885418a53ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f9d7bd6-21df-4c2d-916d-75113568df06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d137f816-8e1a-48f5-9cec-bf03802bc99c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89b28da-1f5f-4298-af8a-39b68f8d055e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c306bbb-4e6b-4b0f-bd9b-056abd6ab969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cd340d-7743-47a6-9256-020ae385e88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "35c08617-36b5-4c35-912a-fe2ad1ec6858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef06a30-be99-4494-bf80-bc4441221f5e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8630867b-06dc-403d-91ab-18f6e54222fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b1c0ec-abf4-442b-a3c6-78a64cef6e1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05adad27-77e4-4d1d-a3df-dc8b25a51b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "159433ff-2b85-45a1-bad7-3d99dcc07b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462ecf29-afff-4b8c-81cc-469df81503db",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "592eb0c5-7bb9-45d5-9215-3912d0287c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14083c2-f2ae-45c1-ae3c-8c63a69c4c95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d27a3c3-ca92-498e-852f-39b4bfe5f8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "886b8958-30da-43df-a47e-8d13e4d34b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d2a2f1-5fd2-4c47-9025-454667e4c789",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b02f456f-485f-4e9d-8898-f0c75d42e8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0c5d9e-2139-4657-8019-c86dd5cfbcd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae49d1fd-52a7-40ec-a8be-5717a1c2aeec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "edb79c9b-5891-4f59-b3c3-f27356768ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98821dad-43ef-4375-8d61-68b68b80aaba",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "195f6408-45b1-4b8b-878e-6d6276200ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97e2eb02-3d4e-40f3-aeea-b45d4f7f621b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94417034-1218-45a1-9265-829b348b79c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e7ce955-ca8d-4354-bbd4-1f7fb61443d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50738b87-8ae0-49f0-af80-4c902c8389a7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f138332-d071-4208-964e-88d427f1952c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a9f14d-b9e0-4eb7-8c54-35ff1a7313c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04cbc962-fa34-4cb6-a09b-449ad3895b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fcadcd2-7877-45a8-ae75-2e73a656fe6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f994ec-45de-4e23-bcb5-5d561f9bcb6a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a482bf5e-b790-4301-9ae6-15d8c6f11fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a40dc62-aeeb-4bc6-bfb3-b17e927c4c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e73131b-5db9-4211-95ce-003a2e945202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a37c5118-9adc-4389-9968-414dee0ffaeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df00392b-3ed7-44cd-bb4e-0109781a9d22",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36ca074-d9e1-4e04-96b2-4b837fa40b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe1178a-ab6e-4d6c-8455-1d9ff10a6100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed51d1b8-5815-48fd-9ca9-a05a250b33c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "913e389c-f329-4f2b-a68e-c74a85d7bc4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8217af93-434a-4f5a-92cc-402d9861fa44",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eebf4da-ef29-4ecb-9f82-5a96b84e5867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c45c87a-8058-4fbe-9489-488d2e28f92f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42eb2c42-765a-435f-a3d0-19778a53de64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "812b6b9a-e8f8-4dd8-9fe5-7fb1e46dca27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e66362-d7f6-42c0-aca9-a0e1d6d060af",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcbcdcf-ec58-4b50-8faa-6eceb176788e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da216309-8044-4678-b564-88d740995ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd2db44-7b65-413f-b238-998b5557fc5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ddc71ba-212d-4319-ad15-1d8de18d445c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5a0bd4-b241-4028-8ca4-bc0a2a0f1b67",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b08d1fa-1982-445d-a45e-1edb857fb5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b33edb2-6b1e-4c04-b03a-29fe398df338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2d2bca-5ef8-4223-ac31-2301aa9a36bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65bece80-0f3e-42c4-a9b4-f9184980f9e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba8d05c-7525-4134-ac3c-df1eee1094cf",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d26655b-2b5e-46fd-9284-c373b7ba787e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7bbad50-ad04-45e2-a0b5-57ebbf539e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab119ac-b669-4cfa-ac7e-9bb9cc5aaaed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17c1b93d-cf29-4155-8965-6ecc4a8f41a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5328c789-7d11-486b-b064-fe0b39e5b71a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7caa6df7-336d-4a82-86f0-4849eb4a76d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba9a5de5-26dc-4736-b031-9a50b34227c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f58fa80-16b3-4b00-b247-0dda80049307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7abf57b9-ab79-4d29-955e-f6ec4a2a3fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f62b38-44f5-4dcd-82db-b3ea268c4490",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffce7d70-651d-4d9c-8bb1-1e637f6f52e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc0eb76d-c250-43b2-906c-7cbbfdf1fbef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba9423a-e57d-471d-929e-23a3e7bbf069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fd17d3d-ebde-43bd-bd43-f842864e319c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41595dfd-5019-4f27-9f35-5f463112bb78",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e0112d-0674-4ff5-8484-94e8b1fea42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db58f942-4bdd-4bdc-bf00-66a284cbfa9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e8c04c-3e36-4935-8ed3-ff0ec48e2bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae8d99bc-dd85-495d-9db3-e9eace27f719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744408a9-70e8-4c0f-bab7-259016e99e7e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "457ef02c-9adf-4b10-a843-3e239f682232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee22f52b-cc89-4137-b3cb-b90a6b605094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64cfebfd-0db9-4374-8af6-fb0c3ba9c549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "49bf6e2c-04a2-4bf4-a8c5-d521644baa22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b7b4d2-18e2-4f9c-bd6b-56a16495f312",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbeb44f2-64f6-42bd-b274-a9df2b62cbee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcb80e44-ae4b-4710-8088-5b31245c0671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41aa88af-1107-4cc6-85a3-27bc1d42fa25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "04d74163-e34a-43d4-a9b2-d74d8d6aac43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a84b2be-9cb4-4bd4-a55b-e8460e16031c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a645fcc9-198f-49b9-a6f6-24caf060490b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9ee2a29-013f-450e-92c0-e12470df7efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5bee65-e441-45d4-b235-4e66cd99648d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad86ab65-78d7-481c-aa8a-a098103296cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a526e75-30a0-489a-89f1-181d0ec1386f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55e8fe5-0506-4d84-8fb4-3851a97c501a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d03237-1b78-4d13-b7cd-7b12d978e143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ad596c-4c1a-4ce6-af09-f5a0bc26dada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce156f3-6c1f-481f-8a19-7ac147d387cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36460e9d-4c34-4fb3-96fc-5e1024d4aa09",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e11b510-7b34-459f-aa0c-20ebe2bb28b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e98f2819-fa92-4a79-ba8a-089b9dad9b5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9ddd0c-a7c1-463e-9e73-291b8e94a820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f1fbcbc-3ddf-4b8f-90b2-6914d33ad352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2452c45-ca05-4615-be1a-1e007c5674fe",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74426f8-7891-4725-9c04-5333655ccbc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2f6ccdf-03c6-42c9-83be-bcb7b116afd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a012282-ce7f-4139-ab39-287ab44144d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9111e02b-583c-4bc2-bbd7-f06ba7368f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3663f18-6207-4d04-ad2e-d232c16f410a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15b4af8-2a74-4d2d-8f6b-3f4a7aafeb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa47b22c-48c8-4013-83bc-eac89e5402c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b682c9d-6d4b-480c-803d-e0c78f6530cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b76af47-f1b7-47e0-b048-01a31d49eaad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce51ddb3-692c-4255-8b21-84eaab37058a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd1a7ae-2a2c-4905-bc1a-eee6b7ba428f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "071faa7f-ec16-4980-99c6-506e981ebce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e5eadb-4a84-4dc2-a916-4d81e6035a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db564dca-c5c2-402a-9e21-c37073ce50a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9917c0af-810b-4261-ac2b-832827b13521",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ea9b9f-1f0f-4727-86ae-7a71028eea5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df596e8f-f109-469c-bf91-8b0a2ab86eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae900820-be9e-4c4d-adbe-43782e2f62a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "516d9964-00c7-40ee-bef1-4709086d6502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ea2d57-b697-45dd-93ad-40c02973cb0a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64604c9-0f24-40f3-a1c0-e4c120b67630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a58d0ee8-9e94-4958-ba22-f24b4050a86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27943647-e166-476d-b728-249badf95e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "52a99ecd-888b-4cee-9d24-ab6e409cb8a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82dbcb04-5609-4813-8a56-c08dd8bc489b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c958e36-42fa-4b89-a1da-9f2e97eda7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "985daa5c-26a2-4e58-bc50-36427237ed12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87048961-7fdd-4095-ad22-1266ccfc70a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc0f965-1f11-4557-a6f5-97bf3acb09a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06329dbb-b01b-42f6-80f4-ac741272491b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d70d0ce-f6fa-43b0-8f10-d8255df86f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa0194d8-67ba-4a60-8b1d-be2a615588e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3931f5e-f4c5-46a3-9ba6-85586788fc7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f04cc23f-19a1-4be7-a1b3-b4452cb60595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee63f4de-1296-49f3-af99-5361eeea208a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b9d688-b09c-4ebe-909c-303e6e63b3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32f45119-cdc3-441f-9b7f-3e7f934b345b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b43e86b-d84e-4a2d-bc08-c7746ff6d845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad9814f0-68ea-41ce-97d2-503eb9600c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f304c7-7da1-4930-b17d-1d2222184214",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66eb4de-a254-44c0-a07a-191f9c11101a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "120f9e7a-4fbf-4c22-b011-35b2f922f8b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a551ebb-4926-4013-9e19-f7959317b2dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c25c9342-7ce4-4fe7-b712-aa1349035f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38354fe-749e-48a5-bf77-5fa7b32402e2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4154d435-28cd-4ae0-9148-1c7a7ab6eea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9318687-b3e7-4b4a-8c9f-de875e014767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "334928fd-ec7a-4aae-9477-94d3ab7d387e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cde5a09b-3033-48a0-9f33-83b6559d17e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee5375c-ae11-4f46-8910-4c0217201845",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb338da-84f5-4880-ac24-75bbd1549517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcee8eb9-6e8a-49f8-8aa2-a757dd2917a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb229520-8216-4305-bd6d-fcb522a615f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba0f9a94-6124-4339-b321-aa8c5bbb4861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f91c45-adf3-4403-b3ca-2d2d5db78844",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c590e37d-9f19-4cb1-b021-bec90e6355a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5841dc-91c7-41ca-8d1f-f94f8a50b2bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e66be39-fbfc-4536-9158-7bcb41fa795e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a80a3a5b-5bb5-4a55-8978-40ea726e8b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7da8b8-5695-46de-a872-84219ed2c72b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3552421-1f45-4c6e-b549-4b153158e5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf7912d-8288-4a13-9dae-c9bcbdd4c1c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36684b37-5f41-4ac0-9665-02d4d0279571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e4bc95-e957-4511-8cf7-4fd2365323ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f3b547-16bd-480e-93fe-d4835c02e7f7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33203764-0f87-49b3-9644-02ec00eb6d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdd991bf-65c2-4704-b3c4-3c65320a2a20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af10c02-b286-41c3-ab3e-ab7a783c4c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9d03cc3-d038-4239-a3da-dd01126dd604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2374f327-2531-4c2e-b27b-a17bc7553018",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f12af8c-961c-4f5f-aea0-ca5a821e3bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29bce02c-458c-4e74-8902-cd9eabb87ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c62e62-d7fc-4085-8534-04f447610a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b01b71b6-125c-4125-ba55-6c9d0dae8b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6e1df2-bd2d-4add-9f1c-76a5103eac77",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0a341d-f006-45c8-9ed3-b327f8e53542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22adb25e-502c-4566-a4b1-b8b1c67ee031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff13292-fd11-4192-a6c6-4f39d826357c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "144afeff-43e3-4c1c-a13e-f9818990f08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee4203e-8102-4d3c-96a3-2f674780f761",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09286752-077f-4987-9667-a33b97e2c919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0989653-c744-4477-9df4-bf34b076d3b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36a1dc4-1e6b-47ca-8c8e-a98a83ad149e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cdfcb525-be0f-4e4d-9df3-d51aad644a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb84fda-2337-479b-91e9-1ea5c8d9642b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f7b6b3-942a-4e29-be5f-d71e1ef09d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec272a2a-d0fd-4f78-a24d-57f63877ca12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112a0e2d-40bf-486d-bf70-d0e3e31642eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d04c2f16-4077-43ee-a97f-2b1b4b0d3911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca95f438-51fa-4459-9c49-b38411d7ae0c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31e3a9e-222e-4646-908d-0e86424be935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c7d911-1e5a-461e-aeb9-cc1b4e0bb2fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c4dc2d-1e1e-4159-8485-55e6d15def2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "224178cd-808e-45fa-ae34-237f0033b4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa1396d-476a-49f1-9113-aa20466e59cf",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be66e790-e210-4312-9854-3ce5891585a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55e7d67d-edbb-48d2-a5eb-d8bb91751b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcea5f3a-9a52-4ffc-8b6e-e75248f55154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2ba6c64-7732-4d25-9f33-bed3aae1a766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccefee86-0b7e-448c-8bee-a6534049509b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d242073d-c89d-4580-a8cc-3f68040f119c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa83c7bb-e728-4bb4-998a-3996b8abe2c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d008bda5-25ac-4550-8fdd-cf9bb0680101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1364630-3a2f-40fb-8b4d-cd1eb379a0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510548be-6193-4722-8309-7679dc399370",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed460815-040a-4d5e-8c2b-68ba375fb968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb41ef5-e157-44b9-9046-a3d94aff76a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f005e31-50ab-4fa2-9d31-915d7610cab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "97952c9c-1921-4a15-a956-768c492d45e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06a9827-5af4-421a-a4a0-4168b753fcf0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "665102b1-dc75-48a5-9098-77aa5d76b372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7b83f29-a337-4a95-926b-cf825f2c97db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409174a5-b5d6-4f8d-9936-1a33619cca87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f4ef3d3-c5cf-47d0-a288-bbba25a689f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d9fb49-cf2c-4556-b884-63a620a69040",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9445cc24-0347-4c8a-9099-8e613c306513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be48fb2-81a3-4a45-b6d6-27af0430f7bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb321a86-32ab-4f6d-8dee-46fe7c97669f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "83d0cf43-bd34-4a11-87f9-892b82676568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce8cbeb-b800-4bb3-9f98-72a4c7c3962c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42667588-e5ae-490f-8a64-a00318fdac61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d21426a6-ace3-4e9b-8982-dd6efb599bd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb8eea3-1720-44e0-ad85-8ebf313dcc85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "07f54a3e-c712-43e7-a1dd-68429ee110ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17308b7b-7c7a-4b74-a6d9-b4b72f6a7638",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4469df1e-895c-4a2f-9d71-0114b2e1eb35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c36047b6-1826-467c-bf82-88cce7487765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca5825b-db2a-4fcf-9fb3-72cb0af4fd8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe521b4-eb62-4035-a489-06ea4a6feae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1baa5592-bcfa-4c51-b515-6e05ffe43d81",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b98c850-8463-43af-a34a-af1faed46768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64d897e8-6af4-4402-afad-6e77cf2e75c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921c10a7-7b44-477e-9ea9-e98e3b8a4597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f65246fe-aaf7-43c1-a972-dce1a8caff6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86917664-5079-4327-9e10-2c2288bafb3b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d079a8f5-190a-4432-8fce-2ca333529b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efa6d891-f482-48d9-ad1e-73cfadb2c61a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc8e4c4-82e0-4aa8-87a8-9fb330f97423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6e29e44-0ef1-47ba-8072-3bd01179df18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22aea510-aa6f-4ba8-a879-ff5601382b3e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "776f01d8-ceab-45ff-9177-d93ec23f85f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b5604b39-6995-4b89-b6f5-c1e8835d42ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f375e6-356b-4f95-8753-c3502fb7456c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b25845c9-877c-4e56-ae0c-ea71aee44e15"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "13a481de-82f3-4963-b654-6a697be8d6ee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d79f13b-bf2e-4166-80bb-006ef7bc7081",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28452e4-75ab-4f10-ab23-120a76b4614e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0fad388a-10a8-4df1-a36c-0115b62cc450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330cbd0d-1bbd-4253-8813-96b778b20884",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2e00d34-f71c-4921-8e27-212c3484371b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a762879b-e097-4f42-8d4d-e1b759e248cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfbc1a20-8410-4ca0-87a9-38a1e7ec9e9e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8eedc9e-a32b-4228-9eae-292d4944bdfe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd509a4b-e59c-4063-ac2b-3b4888ce965a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "58078e85-2f8a-4758-8681-cf60807eed39",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1356aad7-2739-44dc-a60f-4a27c3a2c416"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "81a65ad8-d1d3-45f9-9c60-162ac7604021",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2f249838-ddb4-4d89-b032-e5a8a3570a13"
                }
              }
            ]
          },
          {
            "id": "4d948542-ff54-476e-9809-ca9ad74cb69f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ec646bb3-b798-43c6-97a6-b7615a898567",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b652797-6c7b-4bf2-a877-d3a5ec548794",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2bc6e9e5-744c-4623-abc7-dd583cc6e88d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14b2f5c8-48c8-422c-b02b-f045de8ffbc3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "218e4d92-2120-4ee9-82b6-4a095dbeaa7b"
                    }
                  }
                ]
              },
              {
                "id": "84666ac3-2be8-4ebe-8beb-7565f7ac289e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "45784f75-4137-481d-98af-339d03e24acb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94c14963-00fe-42e3-b244-ade8a4d92047"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1b8ab68-bf2e-4416-843e-b8ba4b987ffc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f8007349-179d-4b6a-8e7c-7c974f7bd6c8"
                    }
                  }
                ]
              },
              {
                "id": "b611acad-f373-42e7-b4fd-518e0091bb8f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2ca0576-1568-4466-8207-f2960c663a24",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b115061-841b-4fa7-9210-03657b02459f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "253da5ad-9961-46ac-a75f-129dca11153d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d2318a19-4681-40bf-ba12-e19419df7d8a"
                    }
                  }
                ]
              },
              {
                "id": "b1011df8-6fd3-4913-990a-8cd27d668e64",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95f3eff4-12c6-4ded-9fd4-b42813f4fef3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f1b5ee37-91aa-4124-bcb3-8abac7d8d455"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c55ea815-b13e-44b2-b640-9eb1874afd26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "761aabf2-2544-4d31-acf0-2e258b7dbdb0"
                    }
                  }
                ]
              },
              {
                "id": "a9b67011-e4b0-483f-b283-462040de75af",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98b1a659-dae1-433f-9e71-954cccb39cee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1c29cc92-fc3f-4a60-bacc-d395c75a0b22"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36e88ecc-155b-4c13-9c78-8837509d8180",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7f757891-f3fb-49c0-805f-c57b4053424e"
                    }
                  }
                ]
              },
              {
                "id": "7f4cc308-ebf1-47ce-9884-1cf9f696a9d9",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "541a2646-354f-4629-9975-b0ab6c628e4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8ad0b855-29c3-4942-9f44-7712a08e905c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e323f4df-8d38-4942-a9e5-a9d00c019e31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "659958b2-4331-4f4b-a1b4-f9da02287c2b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "de92785c-2bbf-44d2-993c-20266c651666",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ec9e6e45-1a10-42ce-873a-9a77515ef37d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f11c5b2d-c8e7-4593-98bf-0b7afdfb1d0b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3303bb02-c6f2-47b7-ad6b-1833b52607bb"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73a38804-465c-4aa3-80a3-27ef00108a64",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6abba78f-058d-4b07-9be9-3f66f5c7ad2e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d486d57c-f094-4d41-bb8a-f04f76dff855",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "885ee5e7-afdd-4f15-865b-e5ed1cee881a"
            }
          }
        ]
      },
      {
        "id": "61207ab7-f0c5-4217-bfd6-f78bd1525d1c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b129440a-0871-4559-96d4-5de8f121a219",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4d4c6d17-6d7d-402f-bfa3-613d0a157c72",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3f6e1808-596e-4c09-91ed-5a4c061d67a5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8c88de-cbb3-400b-aea9-8c6b9578e4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "397e85e8-1d24-45ed-8b77-4fe2c5d60c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c93840-3be6-4382-b498-0d55d98d2680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "30437362-9331-43df-ac30-de2a27c6f9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98eb580d-382b-42ad-95a3-d9e57b601acb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "570449e3-5551-49c2-a773-d0df99c71fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7947faf-33f6-4219-8804-7e5afb338417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24b8b70-1bd1-429f-8965-92d6f02b18b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e33b9e3-d7ab-4007-9697-70b5fff1b668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d75368-bcf6-4ca0-bbc6-8f1130d987d4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70bc3f3a-99de-408d-81c8-3a09c5c3f41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc5e5f48-cf75-435e-8fd2-c2b44fc5b36a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29846ee1-50ee-4f21-8b40-3bdff6ebc762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85c30fc3-8512-41ec-8550-5d3eb8be77e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2491725d-1acb-4566-96ce-1f4876edad8f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75113b66-8fc7-4eeb-ba64-a7c52e45fd36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f5d6a24-a583-4a4a-a26b-789579faa852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7495a77-392d-41c8-9709-6b4c0a17e780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa900768-9a27-4590-82c3-d4fd1ac1ab36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8beb33a-1db4-4ae6-8c0b-807ca00dc920",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59841779-d0ae-481c-87b8-60699ba8131b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f2c0df1-80a5-4dda-b915-b013907fb5e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e9fbc6-eafb-4314-82d1-0ca7b0145a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d4f4fe-b402-465e-ad43-1e4a79f8959e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1150b4b9-586d-41ba-b5f4-3e1c739067fb",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955a337f-1b57-494f-87d1-5504ce781f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2332b61-223b-4e97-b6b6-c29c4a50fc88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb23486-2c35-4b18-91f3-d9fe7fd9330d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fd96909-eda7-4117-904d-03cb45b075ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89bce31f-5d1c-4790-8ab5-c5dc004dde0f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7543076-a35a-4b7e-86df-eb226dda09b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "257a4f25-5967-4a5c-a27e-1840f4f20f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b99d5b-b844-4b3d-beb9-2a0ba3bdc4bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec012581-a342-4788-abe9-e1ed454c6e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0b46d3-7643-4552-a066-b93b483adac0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a590db-cf92-4ba6-a019-dc83d131fd68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6367b2d7-92cc-48f8-a9d6-4cbd978264f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c109a8f-21e3-45f4-b67b-ea292e3e76e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "418e92b2-070e-4517-9143-487d96e88ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346ed6ba-8a3d-409f-8b7d-aa42ee5747d6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3d3d68-8132-4c28-8ce7-50947816dfe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "666f45e3-531a-4b09-9fa0-3c6fc8336ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58dcf7eb-d5df-4621-9c36-255f54eccead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e6ad67a-6855-494e-bf57-4e06df057ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2f9dbc-ad12-4f8a-9c6d-67822faf39d1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "febdccf7-3786-4e5d-bdab-5fbe00a5dd9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51a070ad-0661-4744-b1df-b34f3cbf1421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2888d629-b8c2-4c4a-a326-727e83387c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ec15036-d6bb-491b-b26f-ad014a14d63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f179d656-9c01-4807-aa4c-141710627e32",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1110d0f-fb22-4f41-9f58-770705646c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73ce9695-7045-4cd7-8b57-96c01a7d8d01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ded7b7b-70c2-4b38-81d4-4ce28f9e00e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e7ab55d2-431b-466c-b8e0-0e14603cad83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2fe3e99-2e38-408b-b3b8-d4e1859b6eb1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88130ac-41a9-4fc9-89b8-fea3022fb1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef4cbbd-2c26-4ba8-8503-c063e42dcf50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e5df7a-85d6-4d73-a915-2b14a3c15b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "297170e6-fc5e-4874-831c-ab513bec7d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d07d6eb-8cf2-4be2-89ce-a90ff501be5e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85b117f-f37a-4ce3-ba7f-2123a0eaf1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f8ede7-ab1c-444b-a72a-06cb3b3bcc63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7279c01d-f786-423a-aeea-dd5a8093f03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e5a39ce-345f-4cd3-8a5a-c7a9ee8320ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90669de-442d-4ba6-94ae-de50c8d0e5aa",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff67d540-25ad-4ced-b1c6-08e104b51910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b0bca4f-920f-488c-924d-2470e3f44167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf41841-abca-46c3-93d2-ef45184bd186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8ee10c8-2ead-48a5-8f0d-582d9d07c2d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a553ce-c51f-4cc8-9417-3ec5597f276a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ead2f93-4e0c-4ef3-aa97-0a7d564ac49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad03f270-7b96-46cb-86d7-c501461d2758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdca049f-ab4e-4cdc-96df-e5d7fb469fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b12b6d8f-e1d7-473f-a386-78e99f80157e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7010c8b-1c9d-433f-b9f0-cbb3f66051a1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3db3c9-f365-4827-881e-f7d223c3a07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ede4ec80-fa6d-4b70-9fc2-cfc0f9803031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5298b51e-8554-433c-adc0-3f0bcf2d6ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "09e19968-673e-45fd-b1dc-4e7b2d0d580f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f8a7d2-e025-40b8-b656-fa0f95dec885",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f37b134-2d2a-4b5c-9f45-918e7b4afe87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "545f7235-bee8-4489-8be1-e558ba76fe16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e649800-04c6-42d7-a40a-dac55b05daa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed55790-b0d9-4116-8914-3d57a9921b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5329d728-d653-4ea5-bd50-87c7aedf9295",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b136118-0bc5-442d-a916-f073df4c9d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86332d18-455d-4643-a38f-06f895fa43d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e6258cf-2fba-4359-887f-caca4d7f5e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8e74480-938d-47b6-9225-042cf69f0261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73de67ae-eefa-4a30-80db-ae92e008a29a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f229c056-1bc1-4821-b8fb-4e18fe9cfe90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "423250c7-b594-40c9-81cd-fd2e7d69d296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1105ac-41cd-4a97-ba4d-90618230238f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1eb88358-34fc-4fb6-b3fa-950c08c7dbe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3cb67f-a2d6-42cf-ac82-984adaf657e2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f2a5be-a042-4fdf-9dac-f8760857351c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaedc6e1-06a2-4107-b7cf-90ae05671bc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a78da4-65aa-4f71-8a1c-c79b30e5c23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f390d276-1e4e-47f7-9ba0-3e2899d15904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569b3c9b-88ab-4149-a66a-110dfdfeb3e9",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16182962-45c3-4bd2-b5cb-51ad2a2dc81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c39e3d3-581c-472c-aff4-9434b92dec8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f85c9a-a7a7-42c3-a2d7-7bf62cb802fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f45318e1-1e76-4569-a18e-5bb16eabd3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1223656-1da7-4fc7-a3c4-1366d48a5237",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "531d3149-948e-431d-aa2e-6b328579acfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6cbb07e-5cda-45a5-8ba2-720cfa07f3de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc7006e0-3c8b-49ae-bea9-2bce358cb108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a1594a3-90aa-4fc5-b36b-55194b0197b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8147de39-9071-4c8c-9491-843ff92a2780",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb9f466-9eeb-4057-94eb-78657a3cd79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75bb7f8e-b5b0-4621-a76f-34aadd825b0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b246b0-402c-4d68-8f95-0a344e9345fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0084c08-861e-43da-b5b2-34a64ee56a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a681d5-f842-43a8-a1c0-6a66a1c86d6c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "208665c7-690e-4459-a07e-35575081d97b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d8af956-525c-4674-a3bd-ec6ecde45fc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dffa6b1f-4eb7-4ba6-ac03-5165d03139ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e91b572e-1ffa-4be6-bd55-6da672a68d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093fba4e-6945-406f-a46e-e2380959a124",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "286a4eb3-7a55-4808-96d0-b4df3b93dd62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e530608-a432-4b04-b560-6751a6c8cc10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c02e1e6-dd59-4e41-b49e-5e71eb195ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "418ca08d-83a5-4ecc-90c3-6757a84a93fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f07c33-2739-4517-8c13-1cb1d89a939f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e519a6-9bdb-482c-8e94-33e4c2400bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bd64279-08ec-4e58-9702-c9a22c0babb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d1e2c1-bbe6-4a9a-adee-0c296938a629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "567cb1dc-0a93-4730-86a4-d127132d9a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7271ff8-8369-441b-91a6-b2141d3b7c66",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fcdbfca-791e-4c35-a840-e432a434fcd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d3862f0-c162-47d1-9a7a-8dd6074714ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062b833c-0311-4ea7-a5b1-b0c8ef691271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b41796e-6221-42ee-a98f-ac61989ad06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbef3641-bdcb-4dbb-8aa4-cdb9dee60ac7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "239cd23e-bfb7-460b-83fa-4a1ea4488874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8de522-f7ea-4516-a70a-24a9bcbeea36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587115b8-0c3c-44e8-9619-9f14cc357b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14ee65a9-b567-4f1d-95a3-b56db801a600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb8266c-4678-4eac-8e68-a4fcf4fff3d4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c4b7e0-e27c-47e9-9f22-68988744d0f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32f66397-3a9c-4793-bf69-da8c9a71115f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef10a47-022e-4464-bab1-470a0a2c61bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5425e09-ff53-4794-a68b-fb77b57a6206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35daf696-12f5-4ac7-b405-e9c8fa8cbf53",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5beee0ec-a1aa-415e-846e-72d5e1b4368e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9022b798-55ba-44bf-8519-fc80f8a176e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6980c1ef-63f8-4b0c-bf1a-24e7a841046c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71bb3892-f0d7-4b7a-9a05-089d847a0f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39003936-2cb8-4ae6-9296-cbc4f98b533b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee380dd8-6a10-42cd-9d4a-3941f10ad325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5503a53a-765b-4586-abe2-3fb5bff776e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e596f3ce-bccf-4bb4-9bc1-61796a144d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d594a875-4fb9-48a2-9004-dce294fea126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba54330-36d5-40ae-94d1-098009c1e2a7",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2596605-c1ba-451d-bf87-375aa7283a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99092a61-cbf5-4e75-a0cd-c2b2f3e9c1ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797721f9-777b-499c-960b-71a8c035653e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "322e1910-ccfa-4e21-94bf-940db71b7f63"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f7214203-1d53-4a4e-9f81-70fb7d88892e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bd4d09c3-b25e-449b-815b-6d1bc88d31b9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b86c592-71ae-432f-a0ae-e857a2feaddf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "cad10366-2fe2-4639-b35b-e111b4dd722a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24023b5-c2c0-4bae-9132-548f4511dea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0d49438-a296-436f-96f6-2bded1353328"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8cad32d-18bb-4588-a111-50192335c0e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81f53333-4473-41b6-9609-e618bd7b4aec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f447a6c0-d6b1-4353-9265-c8ec1f681ecd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "751cfa27-f406-4117-9886-b326cbaaf4f9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd97aa74-f52a-4c0d-b109-90e79806db0a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bea93756-0b43-487b-821d-15d2b9a2082c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd638ef4-2300-429a-81cc-c962c2ed80b2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a09413b3-57b5-4acb-b21e-70eeadca30bc"
            }
          }
        ]
      },
      {
        "id": "37cde818-fa50-4aff-86e0-b2b31267178c",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "f5912a90-f5cd-4248-9301-d463e724e4dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2584960b-f242-4d25-84b7-feb2794da7b5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7416492f-60d6-4956-889c-466c7d4f99ad",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1aaf70-c8ae-41a4-b6c4-ede5a8ed1fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bb10479-db36-4441-ad0c-d7004c6d6fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4fd71ff-c117-4832-a55a-b848d2eedcd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa508586-9902-494e-a6d8-fbf3f2a6bc6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa36e497-9ac6-4085-9239-6f66a5ee8f51",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad3af7e-680f-4103-9d58-d01a5b42ed7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22f18e9c-4e1a-418b-a951-b4b41d8e5c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ffa69e-682c-463b-9534-01fe5f151f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d84d44a2-70f2-4f73-8203-3377d2ebb6a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33a30ca-fd3d-4346-9f91-c7c8faf7ade3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa9c78e9-f71b-4d65-90bc-7a63c8226baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50e53a2-452a-4c78-83ed-4292859d6e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4cd5994-ba98-4f1c-94e4-2fb11546db37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "275acb3e-73b6-4a5b-9094-beabb01d5358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e426dbb-dcb9-4745-9674-61dbdaa2006d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88190869-01da-4e35-8a6c-7406827df1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b665654-c827-4c5c-95b0-40237ab6b8fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6135115c-3739-4c1b-a045-f506cf3c6e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7053ae02-f1be-481a-af22-47975ae5574b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a54f034-0092-4679-94d5-518553f47411",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d614bc0a-c86b-4f2f-9683-359598891d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a9db5c-1c78-41ee-9a1d-57863bdb4853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6e760d-916c-4733-94e9-26781484e1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c373a0da-c623-40c5-a116-66b3c47cb149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359ee881-f696-4c3c-a56f-7c0b7f3e3f01",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e330bc92-1a02-4c24-8e6e-dc0fc74c630d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc94a9cc-b307-4875-a109-e76b1159ab4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e6ed7e-80f6-4b8f-81c3-9b10798c01aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "724cb012-3334-4cbc-9714-14cb8930a0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2b69ce-584c-402e-86f2-e796409c2961",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60c1ad1-63f6-403a-b08e-ee57ee5b9f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b76b9f4b-287d-4705-8770-eda3ca582e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c5ba83-af81-4d46-9444-3cb45fc5f915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4653014a-6e68-4748-91d5-775e1f25ca46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3e9f27-cecb-4d0a-af60-26fafc9accf8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f1fa01-cb1b-4706-8beb-be2b71b44b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "397c4b69-e5cc-4626-8f79-86edf07e3f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc010da-661c-43b8-83ae-9c479ef2692b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cc80419-95dd-4c79-8ed9-9ef66a70cc00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602f6dee-c73c-4722-8507-700ac72f8f6b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9e74a2-10a1-4468-8ebb-b77e55250a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3bb20ba-a64a-458d-9297-985f376c6a58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c7ad34-c20c-4994-a820-462257d1f0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81e93673-c7cf-470a-9c6e-a42efd0d64a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f667bc-ef01-4072-bb7f-dc1e77bb2ca0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e418cb-4d61-4f5d-9995-9514f4cae7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f844723e-b32f-4f3f-894a-37809b019c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de046c38-6658-4432-aefe-17e8c0f1dec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe23acb-cc83-4d8a-b3d9-e4a6dfc80f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc072656-8b4e-442c-ad70-0e7a159b0840",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bda7980-86cd-4b9c-8480-01813729fa8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26dfe8cb-b596-45de-92eb-1ddac0152330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f8e5f2-0a01-4f48-83e2-d563cc724b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5c33dc3d-52ad-491c-abf6-57a2c2138938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ff9206-7626-4f32-9dd1-beca9273c8a9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079e6fea-cade-46c6-a060-cecc2b7ba2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "228ad003-3856-4e20-bf95-3b5d858f461b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "419fcd5f-7a2f-4d9f-8eda-f752b1bda87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c303330-c86b-4065-a500-9c26c04d36a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5563b883-a26e-43fb-98ff-00242cd97658",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a4a5ef-9c9a-4ea0-825e-9bf863bfb005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "183bda05-ce22-437b-804c-b12ea9cfb2e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7583758-4878-4657-b91e-2c275a445d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "16d2d1f6-ed85-497d-9286-df9d12f40602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697e9260-5530-4ad8-8b09-39d9ac41905a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fe0c22-4e00-4db6-996d-7fcd5820ec8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "769ff219-8b3e-4521-a659-3afa173dc43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bae8a31-f5b5-470d-94c2-f9a32017d513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee8fc847-1228-4268-89d2-7fa2b14c69e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c6f152-051a-43e3-a6fd-73c790a9329b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1c237f-d47e-41a5-ab30-7307ba07b342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b3940a0-6e4d-4986-9a60-6fad01425725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0f97c1-0886-4230-86f6-93426ac382a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ead0c256-e98a-47fc-a2e3-40bc66d56567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7e836b-a407-40bb-b1c6-2830b08355c4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec5694c-ffba-4f4f-aa55-8f78e8b5e677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ef418a9-0727-4d59-b6c6-9b6f77bc8161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c470b5-7862-4f8b-bd4d-0d4925d02623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "204d3619-86cf-41f2-a023-f68711badfca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40768ed-9e02-485a-9d46-7c962cd68e1d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce80756e-10e0-46e6-85cd-a9ca78758086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72e9d6f0-463e-4a98-b27d-6f6e995e0118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6f48da-7cf0-4935-8238-2af40a667c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ac5d7b0-792f-4a70-8cf5-fa4214b7c65c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf4d5ea-f567-45b9-9b27-a494920cef1e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77787ecc-d749-4483-834f-06c7bbe89848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1561440-c455-4e3a-93e0-c9063425442e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d003262-5168-4321-913f-e520e86eafad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7012b6e3-906a-48cc-9102-f2348b3ddd4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636cc754-e7c4-4a5f-a9c6-a7eb7f51ba55",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf492ea-68d4-4f5e-9e50-29d7246eb6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6288c4d0-304b-4313-8325-0863e2cdfca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c204ec-653b-4a2f-b4d5-08d1a70b577f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c5681e3-e658-4fe3-a401-0f91610e31da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01caed65-becb-4cb3-99f6-5a72f5921d3e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5bad4d4-c5e5-43bb-bc38-0b310954a32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a12dc21a-8b58-4435-8450-905e3cabdbcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eeeb536-3dbd-432b-905a-ddaa12fe4e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d451e0af-ee39-4341-8fc8-fbab469a1eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4c59e1-85b8-4dd3-9edb-8d7251a66e6d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b26dbac-fec7-440f-8543-4b11c31ba51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "327e24b5-d1bb-4961-ac04-98303f30e596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36a9aa0-0def-4fa7-8c36-6dcc5bfbc5d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e78962c9-e956-456f-bb0e-002ddcf17100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b01543-d202-44b5-84dd-64babfdf64e4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a567ce9-4fcc-4d57-a7c2-047164bf0735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f768010b-d7e2-4b3f-b3e8-33e31448d6a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3c46d6-2820-452e-a522-308e61eadbf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4f427d8-8761-4465-8b01-ae4aad6aed43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e38c7f-c85c-4047-8f8e-ffe10a3848d7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1c0765-9503-436a-99fe-6beda316d2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc91681-1b97-4e3f-80dd-fb22a242da78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80af68e1-66c9-488b-8063-3223f39973c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c4adce4-61d4-4a07-a4ee-09687a83615b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e3a91c-2e3d-4106-b066-5e931c3fbc1a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb466670-fe06-4dea-a87a-9c74220bcb0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b7a8a42-3a04-4a31-a91a-ec7dead93599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79dc1fd0-fdb3-454d-a7ed-e61c01e6592c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2572f6c0-2d91-4ee9-98c3-6089f52e0196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6423fc04-e254-45a1-9cdc-17d48830f701",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff2e8c5-2d77-418a-b852-b5d9b680c140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3e573d5-482b-4ea1-987c-39bb2d2eec41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173a013f-78a6-4333-9385-756793bb3eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f137a3a-dd37-464d-9b5b-41532498cf57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a66b9a4-4a80-4808-81a5-ad458c662041",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "727b7044-d703-4008-b5dd-6e3d448e022c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17330829-38dc-45d0-aeed-15a0c13c5af7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7361b4f9-807a-43d9-987a-ec7c17ab3c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28f3c624-9fa9-45b9-9d9e-fea187be1a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191281f1-93e3-4c72-a5d7-800ecddf324a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0eb2656-c146-4390-895e-d93872c3219a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ded14c0-61d7-4ddf-999c-19dc476c332f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9000e725-6b05-406e-90e8-485595ee46a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3f2bf77-9e40-47c6-91df-aaa2b29af7ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2784fc-6c53-48fb-87bf-622fe13d499f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e134810b-d95d-48f1-9d63-6ef2fa061549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c2e2c60-664c-437f-996e-4342d8ab3955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4e5108-241e-4e32-b5b4-b1c2f08fe1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4508fc0e-c3b7-45ff-a43d-de840db4491e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53aa92b-e097-4425-be8e-b73e5f7cc7a6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d077ce5-d620-49eb-bc04-83a242b55e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fba7bfc-7f03-4e24-858d-b1dfb8ace596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6d2367-f039-47f5-b836-c1ecba0f34cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "246d0805-24c3-4b76-b014-4f9f0a6c145b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0b7c79-8726-424d-b2e0-5801d27da3e3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "616dbd18-75ff-47e2-b9ad-45ac2404cbd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac8eed8-feab-4f73-ac03-394a0d9e96ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9efca3-a147-41aa-8658-002ef0d01f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8bba64d-a8cf-4fbf-9ab7-4b1de3d8d8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9840aa-dd90-4521-a3a7-2b06c23fdf93",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aff028e-8dde-4e99-b4f4-34e278f3ed3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a21a40ae-31f5-46ad-8638-0cd6c85901d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64abd11-695c-4d88-b748-2e96920d8193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a890952-3f1b-4b3c-ba5b-c99be00ba1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0e7700-8b94-418d-ac72-0b03d96991a3",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc5d9c1-ed77-4525-9044-f6e6dda04d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "165cfb2a-3149-45d4-9f94-5a02607baadd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1926175f-b6ad-4de3-8b1b-9281d599b62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa2be9e6-37c2-42a6-816f-a2772b0a120a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87dbaf26-f0b0-4564-bff0-0da4b8985ef0",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bca45cf-3da1-414e-81c9-39e0d503159e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c063d8f-7cd9-472f-b188-a7ee75ca0e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e139940-6540-49b5-9930-11cc737f873c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c783fda3-773f-4111-9a1f-f6275536bb96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af16e990-735f-45fa-ad73-8c2bf73dea50",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040c4ec0-22c9-4c87-85bb-64d98fd2c62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe7cfdc0-652a-4dfe-af67-1bf01b9348a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b881614-8055-44e0-af5d-556432a01db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d05d811a-f164-406f-b2be-c2c603109cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da87b3a-90f3-4587-8535-7fc62ebf43b9",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "724e899d-064a-42c2-8732-7acbd7ff9b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43853d9a-90e0-466a-ac47-3b16701ffd01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1061a44-b776-4730-bfab-fd3d4d7403ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fb94dee-10b3-4c74-b352-444abdb6c160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65428f0c-1c5d-4692-80ac-21b25cdcb5d5",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b8dca9-194e-4ed9-9864-403941824f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0194a58-6915-4044-a163-69e8e1441c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3eba27-80e7-4002-88f6-36b2c591f42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e82b52f7-24fb-4940-91b0-2f260216d458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525e331e-a6d4-42f4-ad17-d6e8760a5766",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b235a545-f27c-4867-99f7-98bb02c60d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3a6e51-a0a4-4052-a0e8-f05dd19239e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4938f8d-7575-4bf1-a946-3d295ad068a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16a7f7a1-98bc-40ce-839a-e5d4c318b87c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b257300b-b1ff-4440-aea0-4f4419f1bb42",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fe0c407d-0130-4657-8489-6a589a8d824a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a0373b-5883-4f26-83c6-f4049079903b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "419d0e90-9218-422c-a89f-c5c067d30d83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77414e2e-2761-4e29-8032-3aa81a541fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a146272-b60b-4873-ae1e-5a773e81fbff"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad85f7f8-6df5-4799-8bab-47035d93f3d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9aefa20-5f67-41e5-9044-d70db19acbc1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c71cca2-1a33-409c-b780-7e5b00ea4430",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99e7a8e7-03f1-426a-841f-1035b7879fa7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0fea8165-738a-4c91-b6ba-2573d8ecf2e6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d32d14e0-2984-435c-993c-328f85e4481e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb62136f-938d-4958-8ab8-fdfae420c842",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "49d5ac49-e876-401f-bd61-6b32dcc6d4df"
            }
          }
        ]
      },
      {
        "id": "e0b69159-9d92-4a9a-860d-e00cc593a92a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b1dcf23a-18da-4a8c-8c80-d29a04b11802",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7c8b7287-5016-45f0-818d-909659ad2f5d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4b653fd4-4e3f-4e7d-ab20-9c0433a08b05",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4778fb9-9022-45a7-a0c9-c53d043d2a22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd67c039-e3a0-4644-96b7-a9558c0a6318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eeb61a5-900d-4c11-a4f7-b7b8e8467ba0",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10989d87-e706-4a00-9f2e-16951ce5bd1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e3fb0c3-d6af-4c4b-9750-28d1c3cee69e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539aff14-34e6-4f40-b1ec-c2ba2049326f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8330e28-a360-4b56-9c6e-c795812215b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ac4ce8-e482-498c-838e-7fd3415b45f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57993c2a-ae45-414a-a96a-3e195432fa70",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a88e9cd-0f5d-4cb3-b0b5-f02d353e750a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9e86dba-6f90-43ed-9013-cc6aed766f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361c81be-b519-43ea-9399-a98a4288d81c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35209d2e-8511-4ce0-9c97-0b30c2294be3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a47dbd14-006f-40a8-972d-511182d52b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d13a07-0ec4-43d8-8d4b-bd00e9a7b54f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ec414f-44cb-4cb1-9515-a0575f51f6ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c045a7c-bc17-4b75-b3a0-04353dcacc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2b139b-3190-4662-9bd1-5544ed42ee34",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92da47c3-2bcd-48ea-ae2e-68e26a766967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd24eb83-fbe6-4f1f-9f15-449dfec4428a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "165735b7-b1e7-4f4e-8420-6316b058b145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b68c8de-7976-4dc7-8d97-a66a543836d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce66e23-e43b-46b5-9e96-cc7077928da0",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59574dc-0947-4d70-b498-031d7c18fa5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c3e70d8-72bd-4af5-a433-99c4230ed336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2373dacd-2e78-476c-8642-d59ec54701a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ec9e27-165a-49c3-8811-cf3e4820370a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc32f92a-dc19-461d-a077-ce6c73002aac",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1efc5e27-41db-446e-8c4e-e05d7580faab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "531eae00-79da-4dd9-a7e4-33696c63376d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7293ba-3610-46cb-a737-0703dc13e5b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb01dc0-6ba4-4107-93d0-7dbe0fc41506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ee78ba-d4f0-48a8-8c30-47cf39cc5a74",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba940101-8fd8-4e94-a695-21470bd79c90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b354c4a1-d6c3-4e73-bd9d-7d685fdf46a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7125216b-f09f-4500-a557-db48b08bd789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "699f0cf7-aa32-408e-89a0-1752279d9ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592a5478-8013-4116-9caa-00996c716578",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1d340e-325c-4682-ba21-cf75dbb1c2d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c45ebc85-6906-4e02-8cf7-1f3a1c8834bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb603680-93f3-4fed-9241-49568eee544a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee8e6309-da80-4b1c-8217-9fd58a43e220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5833fbc-23ae-42a5-87fe-bae032038514",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9299c4e9-6c8c-4547-9361-38655cb80708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b575c61-3030-4974-af7d-d16d741328ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c693b641-e93f-478a-9f18-b97abd329d84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8c6bfd1-088c-497b-8a21-d77ca0a7b532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56cdff5-8946-415a-bbb0-cf8d8f97791a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c3148c-3b7f-4510-a421-b7c4c208511a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ec33793-5fc9-449b-83ee-223e9d021f93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "712d1a82-fec8-4f1c-8476-18b7065ed125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f40e587e-54a9-456e-90be-84a8e2ec8a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10056aaf-579e-409a-b2bc-7253f8d2b72e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8733f0c3-23f5-45b1-aac7-bf364111b8be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d396d760-74f9-4a68-ab16-121c51dc142a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89afa0f8-d314-421a-b12c-25904064a28c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8bfef32-2ffe-436b-bf06-4044476af333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17420bee-6a3f-4927-91c5-4f15f1b8d37e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c597e3b6-6024-4b88-8691-cdda867ffea1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e31918f1-94a1-43d4-99dd-d6498cd3c9d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f289b4ed-3338-47ed-9f16-d190d2a061d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d774e9-e051-4291-a753-a9b84dde2abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c7aa2b-a126-4a6c-85ee-2829aba72e0a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d81d55c-6600-446b-8872-68abb8118fb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07d616c1-6e97-4278-bdee-bd08b0652bda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e56151cc-b4c7-4b8e-81c7-2582dcb79f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae95fb83-a891-4cff-9379-bdd74390f73d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b4abf5-90ed-4e68-8277-0183abf0d32e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53228000-6d0f-4213-8753-222080a5d079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a3cce1-4b93-4b28-9a4a-8983da13e3db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa104005-2d0a-4280-b2b9-8cc8bc5b6df6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3943de0-984c-40ae-a13a-3905f068b445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1746d89e-973c-4496-bdb7-9a6c9dfe8ee4",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79ca052-71a6-493a-8390-844c067e511e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af462e54-8452-4dca-bad5-48cf5b2b63ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54acac03-1df7-4190-85f6-a06977504c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2c5d892-1fa5-4756-9962-60e7d250e14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e3f72c-f195-4775-b6ec-024fe03b2446",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857df309-b825-46d6-8827-82247513ad78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd1ec0f-80ac-4543-a083-aa68f4fdcccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fa6c69-d8a1-4419-989f-ce56d5bd6ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9b449c1-6ccf-49f2-a9e5-f043eb8d61db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f849fa95-c7f1-4b55-acac-df7eedec30a5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca173d0-f0d8-4fb5-8812-616f7102d3a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09d2bc85-e9ac-444f-a850-bcb5eced0ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bd8d2f-fef5-4502-97ba-00ea2bc4b172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b33a8b-9baf-4c3e-ad26-841f63cdaae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0cd1b6-e6b4-4bc1-936a-889a5c967337",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc8f9b6-7d2b-44c6-ab33-bc2d083a1ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "853d15c8-af2c-4df9-9635-dd930c965a70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fde40f2-9d47-4343-af86-cc204b09ee5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4859003b-f539-42b1-9403-6f55d9d56b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050d2284-9c57-4d5f-aa0a-2507be334ae9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4a694f-88f0-4a22-8bd2-19629c4cfcd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6a8c0d8-9faf-497f-a596-1944216ae66d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ee3fba-51a5-4d86-9e2e-4d6046ebc4be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "522a5f22-6c43-4de6-a43d-a61d7daaa346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b30606e-93c9-4389-b20c-b33b92b653b7",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2615624d-6398-4736-ab1d-db32c7032e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b77faf7-2cc7-4610-850b-bdbe051ef248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c16ce9-a005-48b4-8827-6a1501b17b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "307013b6-888e-4e6a-9020-91df8f0d3752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "888a9320-9597-49d1-ba61-abff0cbb16d5",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96259e8-2370-49f8-9d7f-5104934f31d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78d5c217-86b7-4477-a2c6-683b811a43d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4138ed24-8554-44ad-94eb-4ea25b6b9802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a729c5-a1be-4f29-8f80-f7409db7724a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952c0541-24fc-4126-bf79-c7d98b900a02",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e71151-3645-4d6c-9609-33d3cef77078",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72f7b84b-d2bf-4119-8207-0a3cabf884d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e89b2d0-471a-4934-b1ff-29df06c24051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd446276-92d5-4c4e-851c-18d65659d620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3bbe7f-8703-4976-a1ff-36f66271b318",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed4f3af6-81ba-4ad6-83f5-aa14b52b7094",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1954095-12ce-4400-8258-23c4589a9347"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af03345-f873-4330-bfe9-7db1a126d8b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb09f365-71c7-4e73-903a-2140c6fc8955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc267fb5-6e23-472e-8c70-56dec0bcbc5c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45500b87-d393-4baa-b493-780e720e53de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e6311f5-1b1e-4954-9d9a-54edd6ffeffc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f49ce4-4236-496e-9abc-04eccee9c9ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e68506ee-3c93-47d5-a43f-b1cf61325083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "659b5ccd-bd70-4e33-9422-c8d01e96900e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a237eb0-3cf9-44c1-9e1c-c5180abf6b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f63e80f-6303-49ee-9c9e-c6f03364b59e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d177cf0-d218-4e62-94e6-26a41dec479a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a48907c-c3ba-42df-8217-3c927442cfb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed448cb4-3c3b-4dfc-b7f8-8654b1017013",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13c63ee-ffe2-464e-b870-d50e3bd9b4c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c53bda85-c568-48d9-91ed-e00e35347c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb02c56b-4829-45e1-aede-7bfa7c128b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b807d6f7-30c5-415b-9d29-5890b83a48f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88702b71-e626-4732-aaa7-1fb9d84b9bf5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08907f4b-4e1a-4317-8ebc-ba4763e90e0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64ccc0ee-ed43-4bcc-aa2f-2554479898ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3dd417c-600e-478f-9575-8bca1d221e29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "607669d5-e948-4713-8b9d-e7ed9d9379bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc963a2-924a-43ef-bad7-977fb8885121",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf96c254-80d0-48f0-b5e7-e30a85720e49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5bb112e-ea81-4cfb-a423-84bc39899ec4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3b43ee-2ce1-48c3-84ef-351d6c044aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94286a53-2895-4ea7-b8b4-f865c0853746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6eed72-f864-42b1-b296-5388f2f071c5",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f9161a-8174-4dbe-9e1b-c51afa22c243",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbc14e9b-01e0-4899-8d7b-03303c010d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19dd652-e68a-493f-88c6-2f06607ab691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a320f0e5-9b62-4204-bfc2-12c18e5400bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d14983-c512-4375-8cf2-07e16832843f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3fbd0b-01ff-497b-87a5-908b8d0fa41d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "631a9442-ad2f-410c-80e5-e6eeff9ea2b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6c3fee-cecc-41d1-a2c4-097188a30b3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e04c845-7736-4412-b7f9-bea1b38b7e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d76cfa-9992-498f-a6a6-2ae37547abb9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7afde93b-c80c-4caa-8213-54a8da51e863",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39a7129e-4f18-4be4-9c90-602e6927c047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d897a7-cfe6-4fbf-8831-534edf48a78b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94981e90-2105-417d-9932-e576ec6484d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd318842-b88f-463d-a973-f5a8226a5189",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0f20b3-75aa-471b-9990-437bd9dda6f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a80f88d-9e3c-4c6b-961b-e5086979f00c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d993e27-05dc-4ab4-aa14-731cd69e6b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e505b2d-2919-43be-9563-ee6bcfd5180f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8714fa73-0f14-463c-9d02-530920f1cc53",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cccaff75-9239-443d-81cc-f65ffb2a232b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2061fbb-192f-4cf2-acc1-2d7f6622d710"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a34d4d-79af-4129-a651-47b7a2922290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6720635e-dd59-408e-9f3d-245adf6e116c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2288004-857f-4bdc-82ba-3418ce4e2d1b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa2a7c3-1e01-44dd-a0cb-485c1ae7b1ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea9103f-6dc8-4623-9d4f-241ba30fbc23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60cb174d-d7bb-4cdd-b57b-ceb7bfaf4fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4390f944-63da-4ef2-8ed6-28877463a22b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e747b9c4-6873-4893-83ce-cfbee27c886b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff37512-4e36-460c-a2d5-7ca47b0f2d70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb9b07dd-aa8c-49cb-b7af-9ac1e956e70f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a5bb90-15d9-47a8-ac31-e0d48a966e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a22e8c6-521b-47f8-9abb-71d2a3ff8446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ed802b-cd3d-4283-b98a-1258f7ba13c7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5008bf2-4aca-483c-985b-10c35a63abe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dcf6f19-406e-42db-8d96-f73699c64605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef17892e-b110-49c7-b171-60cfe88b1058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f39818-8651-4f0c-84dd-85b6bf374091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ca13fc-c3e8-4336-8097-562dc42be09c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8279e66f-a8fd-4792-81e7-8f7bb636b5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "510c911b-2097-4ccf-8b6a-12ad109bed6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af757e09-bd80-480f-bf22-4fe3b8cb6199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "757d3612-0059-4d19-8932-cc2101ddcb4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780c55fb-9225-431d-87ae-7513b756c050",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2e5579-b59d-4e49-be51-a2872eeb3d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d7ccd74-2086-4f4d-b68e-d3d6ad9269f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c5143d-555e-43df-b02b-718ae152854c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96cd14fb-9f40-47e9-88a1-7b505037b791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc12173-2229-400d-8553-39649e086e3c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfec3f5-90ac-403e-be8b-d4ecdfe86c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ebc867-8ee3-4b30-afd8-b2d06fc2384e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ad2d73-8cdd-4ab2-95ba-a6ef4f324d69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "612e2270-b22c-4675-81fd-1b8d0e93e751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7181255e-db4d-4b8b-9edd-3026a895ab65",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e60b7f-7faa-4999-b9b2-117be09eb6e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee71bdf0-c0b9-4645-8385-38b3fd921d35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dad4fde-aaed-4e15-8c5f-0b96d315a003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f68a1dca-278b-4531-ac4c-47015b505ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4787ce-b35a-49c0-8f16-0074230df64f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dcd400c-59b5-4941-b198-0cd8932902d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe29545-cbed-48c5-9d4a-6cca90da1393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbfd4b4b-0420-46c8-b50e-fc6bdf6641b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6312e85-73d3-439e-8857-66f8420bac78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a14922-36a0-4fac-a55f-134f1e1f5075",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3258ef00-3b1e-4759-a5a4-8ed456a06a7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ee8480-70c8-4d58-9d6c-4475e841c6f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f34d6456-e815-4d91-bc54-c6c0683881ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aa8aff3-2e11-4ca4-9c39-4d96cde912ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68de081f-1f18-47b1-9751-c94236f314cf",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32fbbec-d66f-4e2f-b2a5-92f772189486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716a7c9b-5ee5-424c-afaf-2796d9aeeae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1876ddc4-7e15-4351-9a61-62a3860b72f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b88b51b-61d9-426c-861e-c44ef238bbb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8566ca1-18d3-4b4d-b9d2-ba9d7cb2e404",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a5e7f1-293d-4d5c-abc7-46db858864c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6259f41-aede-4d8f-9ec7-446500da4a96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "662342da-61ed-4c74-86b3-01eed659161d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6423db7-c599-42a0-9508-228e8a43bd6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a96260e-cc6c-4e25-ae24-ba2bec4485b1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3345c57-0ec4-4bd4-94ca-63a5e9344417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff6b097-8628-4d0c-9649-79f0c7d357ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c34cfa-5979-4dbf-9d7b-0a50f2efcfea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b0bf9a-55c5-42fb-ad44-417ea50bf2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95504143-66e7-442a-8192-fa91a7327fb7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b28144-b5cd-4169-adf0-445f7e8935dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32f5f845-2b2b-48c9-93b3-851a4d8bffd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dad05a1-cbf3-40fc-b7ea-0c9a7da2e4a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a323bb8f-3c28-4b36-aa63-ff10d92c4fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b722fc-f1d9-4356-af61-ed0e26b85b8f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b9ea69-2073-482c-8c2d-61387ec575a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dba1a67-9a5d-4f0d-9ff3-2623a9ebdda1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ec4981-8b05-4159-a14b-315eba27659a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced1bcf1-5e37-4fe8-bf71-70d2c8bf5720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8396fee2-203b-4187-9e44-69989ec2f625",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d6eb2e-7bbf-492f-944e-7b3a147a33ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1073e34c-e6b9-4cba-9b4e-c457d9389129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0add3c8e-8787-451c-9cfe-e7d0d27edc96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "834a5615-fbdb-4257-aa3c-a9a4625dfdff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec285c9-7e69-4de7-badb-cc479e9f4ce2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cac0008-6e3f-49e2-8900-257c73813a77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d14dbc28-b038-4018-8351-c5d28dc377ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8366117-f111-433d-ac70-ab76a3c5e78b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e444e004-aa81-4c58-8db8-be37f5fae875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e224b214-623e-4632-8393-f26b1372441e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d14f0e0-3b02-4621-92a0-ebcfe77848f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d96f204f-d3b6-4ba7-b2ac-ef4a50be8fca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7ae49b-ed0c-42a1-9c74-2c330b6fd256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40622e5c-bccf-4c3e-b6d1-5f197704b030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa145a6-a37e-4c08-8b1d-0d9e5b114e2d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5689745-709c-4440-96c7-d5e141be6fd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98192638-c991-4425-83dd-9067dda9beea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0b4ff4-afad-4cd4-a636-25e7a4f52e30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72a84f12-e2b3-471b-a7d5-a17a4c5899e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1576a0-d79f-4f7c-abfd-f07da2459713",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea91a2b-558b-408b-a67c-01d259fcc5d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f88f8b79-df5c-4b1a-a5ab-5ca22fd0aa0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd0c113-96ce-4805-947d-6522eab077e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24761aa8-49e5-4ffc-a73e-b92f82d45597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01592eb6-fc34-4d6a-a1aa-8090f262cef7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b25ad11-6b27-45fa-9650-5e173faeb619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a04df11-d0a6-422a-837c-afbe6e829b7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e8d11d-99de-4b18-a24f-c9208e7bb453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f3d78a8-08c7-4b8a-8415-440f25202a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d69f71c6-5ce4-426a-b395-0d0ffe3fdc7a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f04e39-d9b9-496a-a162-d22cfbd7f7ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "215ca32f-99c6-4427-bd42-548f84440de1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3abbdbd-b2b9-4f40-a4fb-27eb0569ecfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d43162b-6b09-4315-ab94-fc839dd8fa74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b8717f5-c25f-4b98-90d3-0eb40e3b644d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be577ef6-a428-4a61-a05d-3ab9ede812f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b22fa5e9-065c-4357-9749-bdc15724de26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9203da5d-88f6-41d1-86c1-ea6b8c988894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e7b4722-a5c6-4ac8-ae27-da4dff85ab5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21be0b20-be58-4293-a60f-ef80e368f2ba",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7a9050-a1a6-4595-b96e-39501d81829a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b41e269d-d9e5-4da8-8fa7-1c82c9a69045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c30f05b-a2f2-407f-be76-8312b4aa3f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19a2cc84-8fdf-4734-8e22-31a6ebe0a925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "399fca38-afa0-4be2-bff7-5750c489a639",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c147e31f-b8f3-4706-b70b-37768d5ea0b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb8d66f4-50a2-4cdb-9968-572f0319637b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0a592b-b354-445d-b3d9-fd5b04270c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "336c18e0-1a3b-4cc8-b754-6c533c573e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6bfb8d-347d-42ea-8733-b44051fc52dc",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48b8f1c-ccd7-4b94-b10e-aa2e40bc1769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a16b0d-cc88-4f63-8efd-c7c3cad9f76c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14d897a-9fb1-4ed8-8c47-cdd2e7ca37e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3d42ff5-4729-4736-87f8-ba9ed470efd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b189233-7090-4f1c-ba9c-79a481a97dc3",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd7dabe-4c5e-441e-a6d3-29c8be6289da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50778755-b4f0-4633-80fc-855164d0e229"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb277af2-923d-4e9a-8491-18c80edf962c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40d1ef4c-e8ab-4d67-8636-ce4b397e6b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d5d84f-17f5-4ec9-9192-2efc635c1a5a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffa6abc-81d2-4330-9f77-018852a99e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b04de67-ca3f-4c97-a447-3a2f796a6fe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c945b6-f2d0-4020-b2f7-d08cf4b88471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86dde356-ec67-4a61-aa7f-c6cbaec4b277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0eb03ae-3d5f-4797-88c5-eafe79459787",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10980373-5a93-48bc-9a08-e36a4db19c18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2756b415-2c35-4698-837c-8512fcb300ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5dfe667-544b-4a73-bb10-a2e5aa0b83b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4abfc053-ab54-440d-9d8d-d2e29f3522e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f2c132-2907-4e8f-b309-b87b03229a2b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee5a655-5c3d-4491-9ff6-fe9e88418c58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec5afec1-6466-4667-b5a6-f1249a568afd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "378ce389-767a-4fd8-8ef5-9e039fa6a118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3496bdee-f7ef-43c2-8ca2-6fb61cdefa3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1834a716-90de-4f43-add8-ccc441c8d358",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83c149f-07f9-4f57-92ff-3f13f84221c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fdcbf8b-dcc7-43e7-aaf4-c963ce1d33b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e22e89-35a2-47c7-b408-13ecbe21172a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e2f72e-1ee4-4d0b-9e2c-8fe1c16a1ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c338a879-5f5f-48f1-8698-f8f7a3ab97f5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8033f3-62e4-462b-87c1-5be1b8442681",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "104d62e4-5aed-49c4-a335-99af19afcc81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67fc1793-3d9e-4827-8089-60a381063408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a74106f-747a-4cbe-b2dd-75bfbca87988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee10133f-1944-4e37-b990-6aa8b06dfbeb",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12bd1ef7-828d-4399-8ef8-f5028db09bd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "443127dd-c530-4a35-b04c-8fffd11e4bef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05d0f93-afc7-47d0-8e3c-38cf7122fd08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fa7881c-9c32-4f66-9ad5-e7f95ded329c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20d0dbe-4636-4f93-b806-c3b19edf7571",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533e7c3a-1863-465e-9cf1-ee2937bbe4f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "893e58cd-6a5f-4541-9545-2cf307a64983"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "257c0845-f852-43aa-98c4-b067b65509e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3481ed11-a559-4397-8e1a-b620791f94c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8edc92c-d571-4df5-8b0c-f52556e472ed",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19edaa7e-596f-4d8f-857e-21009cdabb23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c8191a6-c97e-4548-8695-886db3e54ec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "186a9777-c87e-4350-b2d7-dcfcc2477c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa43a77-cb8e-4c0e-a133-ac04e2b4c19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e09daed-7bee-4968-b464-622e5e4b8694",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b70507-3efe-498c-bb85-558f796950b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6253641f-13e5-41d3-aca9-dd190f1cdd18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b661333-461a-4171-ad22-0781208e5871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4773ae98-58d4-4f3c-889b-2db392ac2124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb4160f-4a45-45db-9b72-b2c7139e7b67",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e7f9d2-d22d-44ae-a7be-68cb7d7a1803",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "790611c5-edd3-41eb-8e7d-2bf773862c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bffb29ca-e7ff-45b6-ba58-6754d9c679a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e2638e9-9333-46cb-ab37-5016e1cc38ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "790ab26d-8c36-46a7-a7e2-892065e38e60",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc46099a-7832-431c-9a44-5482b5a92a0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b14a3f0-3f1e-41ad-83cc-2f512cfb0319"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c53d6a20-0774-4cc6-93b0-4dfc6db44043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a1ae239-ef47-4593-930d-b657038481c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4680c74b-b7b7-4f46-99ac-9560be112660",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b11c5e-8781-4d34-b3ed-af4b42cb0666",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5142d923-f9ea-4e4b-8870-166ba2b6c304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a60be4-a829-4c6b-b6f5-8e421ef22200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21960c39-b875-4a68-ac53-dc4ee876f877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc6acb9-a706-4f6e-a520-8a0a2008183b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9de7fa-3dba-4963-9ec3-1abcd49978c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24b7e90b-73aa-4965-87f9-f9a8345f0aba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "451e0c92-0258-44ea-9bba-6303cc89337c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaff4bb6-749d-499f-b2cf-38b0e7eed80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524d22f3-4bc2-46a8-bd95-84d56807eeee",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9022d20-73c5-4c0e-949b-70b4c3d933f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b489ed77-a59f-4249-91f0-0ead0c9fe3ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a257b31c-bdb6-4c31-ab5a-304d0a441917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d12c987-c83d-490b-baf7-2386cde2b532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ce33b4-67df-492a-a572-42c326ca73a5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ec4e59-be11-4ce7-89bd-488a94e68142",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9944faf2-9e5d-4b6c-8321-ed2f491f724a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a97cfc0-1c9f-403f-89d7-23da371a51fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b25b8934-de20-4e5e-a20c-7061503285c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c413bbea-81ea-4e16-9696-92daa1cb2a46",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51993db1-b059-436f-96bc-f38696523a9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ca9e321-7cb2-45cf-a1cf-092fedfb6a7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91882da-c875-4037-bee1-8e4227789606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2158c2f2-2af8-4094-b7f7-9622db5e7a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af8bbe5-4392-4b82-abf0-46efd57123d8",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b2ffdc-c480-436b-9df7-6dac0ce3da04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4eff898-35e3-49ca-8540-4a5c2a4c2d61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6301e5a1-0ca3-40d0-85aa-a742fd81bde4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d8ee6cd-36da-4671-b274-c1a6aacef793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d8f9a3-e349-4122-926f-5ab23c71ef37",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd93df9-d459-4b4e-a85a-503d56c421dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acd292e3-1171-4fa9-90b8-93b83d580775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89839578-fe25-43cd-86c2-004052b63665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31b276e5-8c27-404a-aa29-a8ec1bf98113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45ee77d-7c0b-4704-b5db-fd0a7995aa21",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1038fe-96f8-4fc2-a2d9-c96e89ca5935",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a328588-7973-440e-a2c2-89f5e04cdd41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8c0447-0966-47ed-93c4-477b3aaf13ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60ba55d6-e210-45c8-803d-a73962b7a0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb494c7-808c-4db5-9f8d-89889a352e71",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e533a5-6414-4055-8059-9bf9b112522a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ad9e0e2-bf3f-4db4-ba59-e263cb6d31d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7158b08-3006-4f85-b6ba-9ac565fdeed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cc602f6-2431-4f84-84d2-1470f97bd11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50a4f69-bfa8-469f-84a2-16af88ca4008",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4224508-90fc-48a6-9cdc-aa0af89882ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f2e4fc4-c755-4723-accd-89031e74bb4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "378efa8f-7296-45ce-9c79-81e8eccc2ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41cf4e5a-d9ef-4a7b-9729-5a20bc50138c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f7a1b3-f34b-49cf-8527-9c8a4f6257dd",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a47a6be-215a-429f-90e8-4f1bfe193522",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d7f0beb-616f-4e51-8dfb-1d24ddd49078"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50b1022-3255-4183-80ca-042eead0097f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddbcee9b-9017-420d-a2b9-d7f681e4fc30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ceeddd-b311-4c8b-b211-73dc2a07bc38",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47256ae0-66f9-4fbd-b7fe-417df3498c0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee2a15a6-fe15-40da-9245-ba778d9af9f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75ba658-a048-4356-99f9-de20bd59bf9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "339a97fa-5c4e-48fc-88db-7270c7679a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b1bde9-88c2-4248-b155-68231581b4d2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efcd8097-9d18-400f-bddf-f713530d108c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "675fc45c-371f-42c2-a162-57065467e83f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c479a00-8a16-4c3b-b148-35f735d58515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13d046f8-22bc-4911-8fc3-fc74a349e95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be68b2b0-04d0-42dc-9e24-a14508cc7260",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37cc0fab-016b-49bc-b18a-c696a4941279",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01ff02d1-b560-42e5-b6f8-83bba90988e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbaea58e-f680-4f8a-8845-12472435aeb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1adb10c7-a8f1-4abb-ab6a-5cabf976b718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045d1c6a-cbd7-44a1-b2d6-000dcdcc8970",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7344db6a-a897-4126-b7c0-c7858815905e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3318805-9a3b-4255-afa4-704b23a36132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ed9ea3-aeeb-4a3c-b429-dcae033d35ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce2a4ee5-937d-49f2-9d5b-57710c985e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "692781e7-8f0f-4591-9e24-df53007058c6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa0cf1bc-f5f4-4049-9d20-202687e695f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4c3d5dd-670e-4341-aa5d-f0e4e255ad70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9238d90-e2e4-4de1-b07e-5e4e11836075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1be3e7d6-6a19-4f26-86f9-4433db0e868c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50e0203-2137-457c-9fce-3ff90f888376",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2988d9-f640-49a3-9b31-4d76edb6ab5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59eb8c33-5d36-4274-8591-7b6aecdeda4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2df145b-43d1-4ce5-a8cb-79d33b5e40ca",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89e4d013-89cb-47f5-bafa-307b360e6390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01e230f-0425-46e1-b0e1-ed67a170652d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa10e812-c28b-4861-a5bc-fc5067b5b061",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "428bb6fc-f0fd-4103-914f-5feac79ce774"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43313f7-70c1-4d29-af7e-a0372e92963b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c265d231-7936-4c6c-80dd-6e103f62d9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcbdb9a1-17cf-4c2b-87d4-847ce06e6b22",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49bbefe2-4e49-45e2-9482-0d4d971f0023",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fd1fc08-6cc4-4488-8210-87d296930e23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd088d4-cb0a-4a29-97fe-06e78dbe33e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a19a0ba-1a99-45be-abfd-fc9ad56ef9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e1076ff-8308-4c20-b071-ec5f837337f2",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2298728-e5f3-44f3-92bb-c37850d6d7e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff57d12e-5b7a-4067-b79a-c9f17c46ae15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0857864f-552d-4ff2-8f20-716135b8a183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7fd36bf-05f9-4ec6-abfd-aab187bd4f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22632c7f-06f1-4210-9a3d-df85cf86f1a1",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704a39fc-e3b2-4e86-80f8-31410faeabad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18daea6a-284e-4e7c-85ed-302078cb53e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "024d4d3e-b8d2-4375-83cd-a6df640c2fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e238e751-313c-433e-9576-9749d856bb19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc80cc8c-059b-4cbe-b24b-d4beff38053e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424e1c27-96e1-49db-9d2d-e68e2b5fb443",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0ca7759-de08-4f6f-b7ab-e92edef75f80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18696993-143d-423b-b761-327842dd7da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1acc2b9-1d9b-4c4c-a05b-be259a398a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d5ce9e1-d169-4053-867c-79186b3c02fc",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38a79c6-8c9c-449a-88fa-44363f7a3625",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5cd4599-fbb5-416a-9a4c-e63de94ab1a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5a021c-f57a-4ebd-9477-bae638e574d0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed43301-477e-4b8b-98fc-e5a524ec3b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912cb009-d2d7-440d-9e83-a8b52811f0c8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb97608-d603-4810-9690-c3fd39cf759d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11b40d77-beec-457b-9335-fdbf83aec39d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8065e26-79ae-419e-992f-b61129194f68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ffe4ef7-2c17-4c5c-91c8-ac0372659920"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a01ebd7-b020-482e-983b-d85b1033041d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8cdcdf47-5a46-4ba2-ae6a-4b5096cb4f83"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "226201a9-7bcb-46ba-84b6-a04413a5e5b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f5652941-2b5c-4804-b097-53093a1e280b"
                    }
                  }
                ]
              },
              {
                "id": "2bac18d6-f0aa-44e5-a2a3-efb9a34739cb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d21d8b00-26f6-45fc-baac-a75ded2c15a9",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa93fba-271c-4840-b37f-977c8b8266b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "17d7935a-b969-4244-b41b-688b82ce84ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d72cb41-f35a-4c03-919f-aa22bfe2745d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45ac0764-ae42-4378-a9ec-dd42c2fefcb5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89d1efd7-d1fe-45d2-8a13-4c3e51a8c0b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df346d3d-b13d-4a40-ab55-4635b6a7e6ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "812d189f-c8aa-48f7-9ffe-49f5450868de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dccc96dd-6654-48bc-80cf-f7266a666c06"
                    }
                  }
                ]
              },
              {
                "id": "4d144921-0b4c-4d69-bcfc-eed885d22031",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f0c3d76f-3c39-48dc-9596-b7915918156f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8552d052-a326-4c6d-9d10-78d8a1b065e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "1aab79b0-ad06-4276-8a9b-cc57b3a67c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897c3cfb-2501-46f9-8ded-f36e272b43a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23fb0d1-5735-44b9-bfe6-e1d25ef638bf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2cac1d2f-a0b5-4100-9a13-3dafe226a1f7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0b70d5ca-2833-472d-9f55-04d8255b7235",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19c2dcd7-595f-48ec-b739-597ceea1fae0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b319954e-cf58-4e5d-8cd5-dbbc8817217f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86c44b4f-032d-4c8a-9f3d-eb79817a9c46",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2c7096e-cfdd-4dc6-8e37-9f13b6163d5d"
                    }
                  }
                ]
              },
              {
                "id": "34505328-60f0-49cc-9a3e-150b4a7bbacd",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "94b643b1-a64a-4309-8b4c-6fad030ee282",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7ef0876a-8701-40d3-bd15-af331bdbdc2a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ab57e25-f3d2-49f6-845c-98cca8bfc4f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d75a9b4-ca04-4599-8bca-aa612483f700"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20db30a2-0e87-4ac2-b1c8-14c931af0eab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b99247ea-257e-4c55-9ca4-9da81db90b53"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "00862813-127e-477a-bcd2-a4f1c092a137",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f59d0644-b000-456b-bf83-f0cdfc70af38"
            }
          }
        ]
      },
      {
        "id": "7e09b60e-813e-4663-8d32-f2d560dfa597",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "84fb67a7-9dfd-453c-b98c-24ad2ba3a310",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ab1d2bf-12e9-479d-8ee3-2404e4dd7568",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9ae0d198-2e27-476c-85ad-f1f4dffcbb8f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c57cb805-0103-4433-b254-04406ffe042e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "71804fbb-043c-4205-a13c-e41e827da47e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9009e540-1a5f-4382-8b3f-e9975b0f7557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f83027a3-117d-442e-91fb-c6b6a550db25"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "939b9aa1-d75f-4743-829d-a0b7d19b558d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "697be9f7-d04f-4d1b-ae71-0bcc86f7254e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "95e0b148-0400-40d7-84f2-37ba52bf7d10",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "caf8f184-aad1-45fa-ad4c-667d3078d9c0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9b329803-c98a-4edd-9bfc-0822f39fbc38",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3ece6c0b-7f44-4028-b4fc-3a7c4918906e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "749b34e1-df74-4ee0-8f9d-c9bf25f4f9d1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0cbf34d6-d1f6-4550-b5f3-44565bab6b8a"
            }
          }
        ]
      },
      {
        "id": "60cdb8de-3c3c-42ed-9956-405230b66721",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "936e5923-1af1-492f-a4da-030c8bc9b680",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df796300-1b36-4bfa-baea-dd7d7569e10b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7cdee9c3-4351-4e8d-bc4e-4755a1b571a8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32941d17-c049-43ef-8acc-9b353ec192ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00b95371-c325-45d2-ae49-ebb753012ba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "712f70ea-e586-4a7a-9588-e7a4c6db32a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4fa92d7-4209-405e-ad8f-6f7f8db63ef0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5fc5d695-b0e8-477a-9681-5186d8d6743c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cc82e04-f788-4e19-9e4c-3aeb47e1e2e0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f89e9eb5-63d2-42df-8305-d264ed8a8e31",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c72c826-0b93-4753-99e8-db0642d4d585"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00904330-83cd-47a5-b131-d6dc9628b903",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "855ff49c-81c6-470d-8171-6cac834f5aa4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "afb6f7c2-a598-423a-b7c3-a18af2cf1d31",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e78195b-2bae-46b6-b14a-f46cda307c54"
            }
          }
        ]
      },
      {
        "id": "499fade3-2ee2-4565-8411-430237cc05e3",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8f6d6795-e021-4929-880d-9121f0c9bcd5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "96fcf38a-31ec-4028-bd13-ff5428cb9ebc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d84b4a19-19fc-47a2-8854-ef06f040c461",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f3c127-9bb5-424b-8efa-ca92d97498a5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b34dabb-3fda-4d36-ade3-4a36aaa61b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4f37a7-2b12-4f94-bfe7-49b4e4fbb39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0640d77e-9540-4512-b829-3e7c7e3e79cd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be2a719f-5ea4-42aa-9db1-2dc4ad7a5840",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eefec71a-2f39-48bd-b790-1b6f9d1498e2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ab543da-78b9-4487-9776-972e411f1334",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ed6d2ec-4ba0-47d0-8524-2a8b6cfd06d9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "575f070d-0109-4fa8-97f1-0f845b255c6c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f73e740e-c6ba-448b-998d-082ba4910b2b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31539f26-d3a6-4e24-9679-994236a748cd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "22795ae1-bad2-4fcc-a714-4c3a26a26e60"
            }
          }
        ]
      },
      {
        "id": "56381fb1-08be-4066-ad5c-28b99fffd069",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e7465f5-6edb-46bd-9306-753e48ef90a9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1eaf1ae-e6a1-4da6-b9af-712e2d4cc0a6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3933ea59-f7b0-44c1-aa95-9444d8d30f2e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01119290-8033-4bf1-b4f3-3d2aca97ce5b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a887a5e3-1dc9-4130-921b-d254238bb00c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 142.98591549295776,
      "responseMin": 7,
      "responseMax": 1909,
      "responseSd": 206.02705572072497,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1697416480517,
      "completed": 1697416535213
    },
    "executions": [
      {
        "id": "8caef9d3-0ab8-4646-bfce-8880e37a4cf0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5fc054bb-dd1a-4c09-a3e6-864d8d46fd04",
          "httpRequestId": "f5a8eec8-5c6b-41cd-8455-de61a675f467"
        },
        "item": {
          "id": "8caef9d3-0ab8-4646-bfce-8880e37a4cf0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f7b8fb56-1dbf-4e40-b702-7b0728e82963",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "c4b1aca3-1cfd-4ae8-ac67-51b066125e90",
        "cursor": {
          "ref": "61055b66-093e-4ae7-9947-4e5a6424669d",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4c95785d-09b8-4bc7-8efb-40845d19d0a5"
        },
        "item": {
          "id": "c4b1aca3-1cfd-4ae8-ac67-51b066125e90",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "490caac5-b877-4f1d-93f1-1da9d835db52",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "bae56148-9c06-443d-b816-fa26da689279",
        "cursor": {
          "ref": "7771bd5a-fdbc-4352-bbd3-893f5677a779",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ed50da06-434d-4051-a21d-02fb6ddb8d2d"
        },
        "item": {
          "id": "bae56148-9c06-443d-b816-fa26da689279",
          "name": "did_json"
        },
        "response": {
          "id": "91b71f87-1952-4d8a-a600-d2526e9a1809",
          "status": "OK",
          "code": 200,
          "responseTime": 276,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c9d763-009b-4bff-bed7-d52118a6a40f",
        "cursor": {
          "ref": "b70886fa-8bd5-4a6b-bf2c-1462a7a7d77c",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9ea96bd1-b375-453c-a337-0a00439b6a03"
        },
        "item": {
          "id": "a6c9d763-009b-4bff-bed7-d52118a6a40f",
          "name": "did:invalid"
        },
        "response": {
          "id": "253e6b15-3ebc-4c3a-8830-721bfd821112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c9d763-009b-4bff-bed7-d52118a6a40f",
        "cursor": {
          "ref": "b70886fa-8bd5-4a6b-bf2c-1462a7a7d77c",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9ea96bd1-b375-453c-a337-0a00439b6a03"
        },
        "item": {
          "id": "a6c9d763-009b-4bff-bed7-d52118a6a40f",
          "name": "did:invalid"
        },
        "response": {
          "id": "253e6b15-3ebc-4c3a-8830-721bfd821112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a0052b-2cd7-48ab-9ab4-44b7d82656e3",
        "cursor": {
          "ref": "5df256a4-0445-488c-94e4-443c33b03e36",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "94e0e7a6-8ebd-4956-aebd-d21fb6207d01"
        },
        "item": {
          "id": "30a0052b-2cd7-48ab-9ab4-44b7d82656e3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9a89b897-f1fa-4cca-b0e9-b0c65dfaabb7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 147,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d272dad1-c830-4646-8577-27ac1bcf3828",
        "cursor": {
          "ref": "234857c1-9c36-48c6-9695-22a5478b35f0",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "705d9c02-e0a2-4754-b451-38ac8d0febbc"
        },
        "item": {
          "id": "d272dad1-c830-4646-8577-27ac1bcf3828",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "08f40de4-3d7e-4769-8b5c-1e846c1eaf5d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 100,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405e6c4a-a5b6-4e29-8b0a-eccd4d8acea5",
        "cursor": {
          "ref": "e36e2019-8e4d-4e9d-b026-abc50d4e1c00",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "179591c5-2427-45b4-afb5-b2da44837771"
        },
        "item": {
          "id": "405e6c4a-a5b6-4e29-8b0a-eccd4d8acea5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b8950f4d-2282-4562-96bc-6408dfea087e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636ebea5-e19c-4acd-a762-862561815fb0",
        "cursor": {
          "ref": "ef69a03e-937e-413c-8e7a-255c04a83810",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c5d89754-4885-433a-9b20-eb10d8056412"
        },
        "item": {
          "id": "636ebea5-e19c-4acd-a762-862561815fb0",
          "name": "identifiers"
        },
        "response": {
          "id": "b171c347-2094-448c-a325-8fa06dd5b96e",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d854a95-e323-420f-b798-7665dced95d4",
        "cursor": {
          "ref": "ae11d613-ed73-4c4c-a9ad-676d79ddc80d",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0635a75c-1aa9-4924-9387-9956bb4b33bc"
        },
        "item": {
          "id": "1d854a95-e323-420f-b798-7665dced95d4",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "125c6682-4fdd-4cd5-a825-2340dbf8228e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d63fcc0-5b39-4308-aeae-8159f289e8d1",
        "cursor": {
          "ref": "b56a7af3-0cf7-4edc-86a1-35246c943e4a",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4e5bbcaf-a30d-4ff5-a9b0-e63f258b6525"
        },
        "item": {
          "id": "0d63fcc0-5b39-4308-aeae-8159f289e8d1",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1d67cd07-e866-4eb8-9c8b-6deada163e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e9dc80-c551-44bc-b763-e288e516523a",
        "cursor": {
          "ref": "bc85cb2a-3b95-477e-988a-b33822b932e4",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e607e4a8-e7f0-4284-81f9-511896d2463d"
        },
        "item": {
          "id": "c7e9dc80-c551-44bc-b763-e288e516523a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6fbc9c0d-d6b1-49fc-a809-30bdd5b33a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef01b1d3-84d8-4754-b3bc-a2b21641ae23",
        "cursor": {
          "ref": "8600f9dc-aba6-4a09-bbc7-f1d2bb30d9fc",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5bd1e2ab-1bd7-4ab6-b3a0-3192aa4e8b06"
        },
        "item": {
          "id": "ef01b1d3-84d8-4754-b3bc-a2b21641ae23",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "fa966213-452f-48c2-b7ef-3c6ed63dcb1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2266e882-b9cf-4eb2-809a-c87ac255a5e2",
        "cursor": {
          "ref": "1cbbfccf-f263-4166-b6f8-fa05feef3eab",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9bcf8e0f-f420-43a5-95ef-073127e66611"
        },
        "item": {
          "id": "2266e882-b9cf-4eb2-809a-c87ac255a5e2",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4eb9928d-da65-4070-b228-3d257381c0c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c1cf2d-41ee-464e-912b-af90e6b85c7b",
        "cursor": {
          "ref": "815537f9-5f3e-4100-9dc3-b03b3ef4e1fb",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b28af5a2-614a-4862-8628-d7c652cc448a"
        },
        "item": {
          "id": "74c1cf2d-41ee-464e-912b-af90e6b85c7b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "60c9f1cd-bf36-48b0-8bab-69d558bbaf59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004037f3-a862-4218-a1a3-be985ddd6b5d",
        "cursor": {
          "ref": "afcd2cbf-41b4-48ef-8bc8-8e903399d2db",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "baa41354-7202-43f6-a363-316d93313dba"
        },
        "item": {
          "id": "004037f3-a862-4218-a1a3-be985ddd6b5d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "97e0d663-3827-49b0-820b-2ea109596769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cdfc36e-2b6c-4361-a798-194b072630eb",
        "cursor": {
          "ref": "01fac844-7c0f-4491-ae21-c9b9baea46f1",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8d930ae3-517e-461a-96bd-3c63ccdcccdd"
        },
        "item": {
          "id": "6cdfc36e-2b6c-4361-a798-194b072630eb",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8644038d-8f3a-4bc2-b054-023baf26077a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a804d5b2-b86b-47ab-bc8d-9b233977004a",
        "cursor": {
          "ref": "9656721a-7e5c-4f9d-80fb-232d89cdf89e",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1fb1fc1c-0536-460e-adf3-1f93320b01fa"
        },
        "item": {
          "id": "a804d5b2-b86b-47ab-bc8d-9b233977004a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5811ef4c-cd16-481c-83b0-31b489bc6288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c11b40-3376-4ca4-80fb-5f7fca59342e",
        "cursor": {
          "ref": "6b77c6ef-71d9-4702-993a-55752ad0a5db",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b015942d-1b13-49b6-945f-8f56455902ad"
        },
        "item": {
          "id": "a6c11b40-3376-4ca4-80fb-5f7fca59342e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e20d78c0-3032-4dac-b4cb-d45cee883c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e9074b-d8b4-42bd-b88b-14f56c57d349",
        "cursor": {
          "ref": "d47c9e41-2cc9-4f14-9e61-e49ec1237ba8",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "feef3dfe-8273-456f-8458-d23d9ffd387b"
        },
        "item": {
          "id": "b2e9074b-d8b4-42bd-b88b-14f56c57d349",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1153d42d-bbdd-4f3d-8495-d49729e61ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816ec315-a1f9-4c5e-8bab-ca43d2fd48af",
        "cursor": {
          "ref": "2cb0bd18-f44b-4c4e-b340-0fdd473543a2",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ba1cbe7a-7a3e-4a84-9df8-f6f400f189fa"
        },
        "item": {
          "id": "816ec315-a1f9-4c5e-8bab-ca43d2fd48af",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "27482391-098a-4c2b-b2db-511e3e6fa105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75806a1-4eed-48a6-a6e3-6e89e78932cb",
        "cursor": {
          "ref": "39238aca-c629-406f-8452-d21573f84783",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f15bc3b9-13af-429f-b25f-da9bd9ed2774"
        },
        "item": {
          "id": "a75806a1-4eed-48a6-a6e3-6e89e78932cb",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "061743a1-c379-41b9-aa16-ef0909f660cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e09726-0eb5-4063-91cc-361111e0fd76",
        "cursor": {
          "ref": "96207574-f78e-4515-893c-220948530b9b",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6a99ace5-2b3d-4022-90c4-db03f0f5d585"
        },
        "item": {
          "id": "20e09726-0eb5-4063-91cc-361111e0fd76",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "da684a2d-65f7-44b9-a746-903346f403cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "decd2c35-c23d-4f0f-9752-649e656fde03",
        "cursor": {
          "ref": "51d75f36-fb61-4e68-8d9a-880fa98e678e",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "08d3d9b9-87b4-42b6-a0eb-b458ac2606a8"
        },
        "item": {
          "id": "decd2c35-c23d-4f0f-9752-649e656fde03",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1395ab6b-eb95-4c00-97e7-97b2e3cc78d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca438c21-4274-42a8-b0ee-bd870086b0ea",
        "cursor": {
          "ref": "cd18356f-f879-426e-be9d-2013d399868a",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0ee610a7-a019-4327-9138-a885ccb34ed4"
        },
        "item": {
          "id": "ca438c21-4274-42a8-b0ee-bd870086b0ea",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "91b60f37-c41c-42c8-9b9d-675971d53b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9e9fed8-6e41-4d8f-8929-38f2b2b567b5",
        "cursor": {
          "ref": "03e8afe0-ea53-4612-af40-85b07ebc7a9c",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "68983237-0e20-428b-b452-bb12f0823dfd"
        },
        "item": {
          "id": "b9e9fed8-6e41-4d8f-8929-38f2b2b567b5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5779030d-bcf4-4e43-9e3f-4647ed651759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9320b2e-3981-43b6-b686-6c053751dc4c",
        "cursor": {
          "ref": "0b81717a-f6b6-4520-b6b7-3ba3d40a22cc",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ffac7c6d-57c7-43de-9261-38ca7fe27ec1"
        },
        "item": {
          "id": "a9320b2e-3981-43b6-b686-6c053751dc4c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "127e81fc-863a-4ea5-aefc-3bbf05345267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd40414-c61b-4dfb-9196-58c6f99c6bde",
        "cursor": {
          "ref": "84c95ba6-1dd8-4fa8-a90e-865d833d1a67",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "25442506-a5f5-4cb2-a100-ece48ecf2cc0"
        },
        "item": {
          "id": "6fd40414-c61b-4dfb-9196-58c6f99c6bde",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c90959e1-1899-4782-8298-360ddc4dbc67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ef96ca-4cb9-42b1-a8be-7dec4177f03c",
        "cursor": {
          "ref": "73024e93-9f54-4226-b33c-8d9cc744f178",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6390b48e-4b84-42e5-9d70-baa345b1adb3"
        },
        "item": {
          "id": "b5ef96ca-4cb9-42b1-a8be-7dec4177f03c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8d31b7fa-1978-4362-a64d-13054d0da4f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55b8f77-3723-4d93-9a18-8df58efecc2a",
        "cursor": {
          "ref": "ba2f84b5-befd-42d0-a6c2-a367959f2891",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8e5d756a-4744-4165-9749-067b2317c8cb"
        },
        "item": {
          "id": "d55b8f77-3723-4d93-9a18-8df58efecc2a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a5028c48-04ab-49a4-9374-037cdb47b1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d4756d-ab91-49c2-9d7d-2f4a94fdea01",
        "cursor": {
          "ref": "2413aa3a-8783-4def-8b03-bb4eb1389f0e",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "57518142-708c-4a41-b06e-8c28b47a34a9"
        },
        "item": {
          "id": "e2d4756d-ab91-49c2-9d7d-2f4a94fdea01",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8162a4f5-4c46-4e8c-a338-805cc8a3c1d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e43597-6e82-4570-8abf-aa1e423da917",
        "cursor": {
          "ref": "971e9150-6e3d-4158-ba73-b2ae37c5b23b",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "83cb0cc8-2b01-4661-bc92-c062e97078ec"
        },
        "item": {
          "id": "86e43597-6e82-4570-8abf-aa1e423da917",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b618bba7-397c-4ea3-933e-608be02e130b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4dc09a8-58c3-451f-bed4-f7a8ec549655",
        "cursor": {
          "ref": "8e85418a-10ec-4c4c-b490-e9af5694eaae",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "16a0f8c6-c9ee-47e8-aa81-3aec80ecc357"
        },
        "item": {
          "id": "c4dc09a8-58c3-451f-bed4-f7a8ec549655",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "37217c1d-51ea-4774-a7cc-c69325adaa7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c365194e-e096-41ad-a381-f80c07d72309",
        "cursor": {
          "ref": "06530c29-e63a-4221-b1c9-ca1ecbcf092c",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e23d50e9-5b13-499e-accc-eadad9331638"
        },
        "item": {
          "id": "c365194e-e096-41ad-a381-f80c07d72309",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2e311851-cbef-44c9-9ff7-e3355d7e858c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2682cd6e-dcc6-4906-89c5-7319f99684a4",
        "cursor": {
          "ref": "a5723b54-e4b6-40ea-8d11-091803bc7723",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c903905c-f2ba-4538-b440-8f153af878b0"
        },
        "item": {
          "id": "2682cd6e-dcc6-4906-89c5-7319f99684a4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ad8c063a-830d-49bf-a49f-754eb44474c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ef1744-224b-4295-b039-b8da9e015805",
        "cursor": {
          "ref": "716cab75-3a2d-425a-8c96-9cf3770d5f4e",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "72373eef-fce0-48d3-b843-aa1fdaeeb172"
        },
        "item": {
          "id": "21ef1744-224b-4295-b039-b8da9e015805",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "251f43c7-4206-45dc-ad52-ead034011899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99eff3c8-4bdc-41ed-8efe-3463cc39279e",
        "cursor": {
          "ref": "93b8b971-829f-49a1-b64c-569ad343e822",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "62db727b-e601-4665-a0a0-da5e77291850"
        },
        "item": {
          "id": "99eff3c8-4bdc-41ed-8efe-3463cc39279e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c77633a1-e3c4-467e-9181-45989cb48b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203dbc7a-ebe5-4c7f-ad24-65b9f2917e5c",
        "cursor": {
          "ref": "c0304300-d74e-4d88-9476-0760fd22e7f8",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8b75ebde-aa50-4938-bffc-4234155e7f4e"
        },
        "item": {
          "id": "203dbc7a-ebe5-4c7f-ad24-65b9f2917e5c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f0f4f1e3-dddf-43df-ad57-b6704ea74823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5cf26d2-beb1-4d74-a75d-81712ede4bda",
        "cursor": {
          "ref": "2d5d4ade-d936-459e-bca9-2bc5f900b5d0",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "36db3e43-b815-4257-bd69-70c845112b72"
        },
        "item": {
          "id": "d5cf26d2-beb1-4d74-a75d-81712ede4bda",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "05722aad-887b-45ec-9d30-6ee2d19bec25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522be44a-55c1-42ca-a201-8dd17820cbb2",
        "cursor": {
          "ref": "6a2980e0-c4c4-4458-a528-8416e0d738b9",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9d7d8885-5046-4cd7-8309-651ea5bae1d4"
        },
        "item": {
          "id": "522be44a-55c1-42ca-a201-8dd17820cbb2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2e0fca62-33b5-4e19-8964-c791eed1ba56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "f158843d-67f1-48fe-bb27-b10c5b6c38c9",
        "cursor": {
          "ref": "f411a3e5-d115-41b1-bd60-707996275153",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "dad23436-22f7-49aa-a449-485e2efafd91"
        },
        "item": {
          "id": "f158843d-67f1-48fe-bb27-b10c5b6c38c9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "befc065e-0d1f-4ec6-a91c-ca472a3c600f",
          "status": "Created",
          "code": 201,
          "responseTime": 1909,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "df854a35-5ab8-484d-87e8-2528e601f8b6",
        "cursor": {
          "ref": "bc94f66d-fa1b-40ec-9402-431d7f26e6e0",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bf620413-156a-4386-873b-745e428918bc"
        },
        "item": {
          "id": "df854a35-5ab8-484d-87e8-2528e601f8b6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7259edb0-3dbe-49d8-a108-d45bef5b4e9a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 89,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "e7228c8c-0d42-476e-83d5-611be4113f56",
        "cursor": {
          "ref": "11319847-bea6-4a79-91d8-0ad253372cd5",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e56f3889-0199-4d2a-b801-f03e48c8b5dd"
        },
        "item": {
          "id": "e7228c8c-0d42-476e-83d5-611be4113f56",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "81ea2973-9515-44fc-97f3-524336f2b677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30687bb-72b0-4958-942d-6e7fbd37aa94",
        "cursor": {
          "ref": "f14b5a31-3ef0-4546-b82b-5145f068d1e9",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "740e9ccf-172f-4749-828a-0b6686690f0c"
        },
        "item": {
          "id": "f30687bb-72b0-4958-942d-6e7fbd37aa94",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1a974b59-eb0c-4007-bb92-1cec3cc50afa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "22ce5120-7379-4988-a238-3bb0cedcfd9a",
        "cursor": {
          "ref": "65442d9d-5e80-4373-ab82-ea86b3c03b61",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "15e1afdf-ec4d-4181-9873-6404b81c1a18"
        },
        "item": {
          "id": "22ce5120-7379-4988-a238-3bb0cedcfd9a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "16f74ef9-2f88-4da0-8fe9-eb126d7d3a85",
          "status": "Created",
          "code": 201,
          "responseTime": 973,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5c9f54a3-34c9-4888-a545-cb1f091f4a6d",
        "cursor": {
          "ref": "178488d4-0a8c-4fa6-b56a-eb283893f6b8",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bef81a48-79bb-4179-a2da-fcf2dd5c8515"
        },
        "item": {
          "id": "5c9f54a3-34c9-4888-a545-cb1f091f4a6d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e925ac25-501a-4cf6-be9c-537ac089c2fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "99cae06e-36fc-4fd6-93fd-757226b9bca4",
        "cursor": {
          "ref": "de3c711c-7882-4337-9770-23ef15df2c57",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d45ce3e7-fc8f-480e-a008-a04a6edca268"
        },
        "item": {
          "id": "99cae06e-36fc-4fd6-93fd-757226b9bca4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2fc59756-5fee-4522-a9cd-5049690c464e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 637,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "beb88f7d-81fd-4925-a19d-cc893d095adf",
        "cursor": {
          "ref": "143592bd-c3a7-4d93-8761-907fcc7d7720",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0dc8f827-3f08-42ed-8e64-9e6097c56df6"
        },
        "item": {
          "id": "beb88f7d-81fd-4925-a19d-cc893d095adf",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3dfc6900-821c-4094-b78f-20fbef41c262",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 88,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3419ce02-b912-4019-80e2-59f0461b6f97",
        "cursor": {
          "ref": "51609c48-e347-486c-b65e-a2d6e2261ce8",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "49334ba1-a5b5-4342-acf9-8cd2c859d142"
        },
        "item": {
          "id": "3419ce02-b912-4019-80e2-59f0461b6f97",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "be220b4d-e8a1-442f-a2cd-80fd1cbd9390",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d04f00a9-e1f8-4af6-b2cc-e60dbc0fcf54",
        "cursor": {
          "ref": "d4f440bb-c913-4cc2-b62a-b82a28173105",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ae6697ca-c397-4ae4-b36e-f41a81457343"
        },
        "item": {
          "id": "d04f00a9-e1f8-4af6-b2cc-e60dbc0fcf54",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "985729bc-db50-4e15-b209-06577bffcb42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "0a9a3ad8-2319-41d3-b9d7-ea899e13bbd1",
        "cursor": {
          "ref": "60e67783-8f55-43a9-9b7d-8e6329df4d27",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b72680a3-515a-468d-97ce-07e93f31418d"
        },
        "item": {
          "id": "0a9a3ad8-2319-41d3-b9d7-ea899e13bbd1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f3a13696-f4d8-4aef-a0fc-0cc444bb9ac1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "29e3bb14-f511-4746-ab01-380b2722d1f7",
        "cursor": {
          "ref": "767b5fd7-81c7-4edf-8488-526782fa628f",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ab4b25d6-05a4-48ed-bd00-33b3f729bbbc"
        },
        "item": {
          "id": "29e3bb14-f511-4746-ab01-380b2722d1f7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6f973589-289b-4286-8f7d-847f1e61e605",
          "status": "Created",
          "code": 201,
          "responseTime": 876,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d137f816-8e1a-48f5-9cec-bf03802bc99c",
        "cursor": {
          "ref": "6c2dbe43-1538-482f-b491-d57714c46ed9",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "29d7a477-95e5-461a-a952-05f6e42ebcdc"
        },
        "item": {
          "id": "d137f816-8e1a-48f5-9cec-bf03802bc99c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b62920dc-6cda-45d2-99d6-4b578e4acd4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef06a30-be99-4494-bf80-bc4441221f5e",
        "cursor": {
          "ref": "be73d5d2-23ab-4ba1-bdaa-72f61c0b5e1f",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d2aaf827-3a2b-406d-9551-464952d0111c"
        },
        "item": {
          "id": "9ef06a30-be99-4494-bf80-bc4441221f5e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9618e33f-59a2-4933-9f1a-5d74a75f492d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462ecf29-afff-4b8c-81cc-469df81503db",
        "cursor": {
          "ref": "2b59acf4-bf64-4793-88e8-77ec8563da48",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "96d37196-f8a0-42de-a61a-e9ab814b5376"
        },
        "item": {
          "id": "462ecf29-afff-4b8c-81cc-469df81503db",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "469da41d-76d5-48ff-82b2-5c8ce4993251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d2a2f1-5fd2-4c47-9025-454667e4c789",
        "cursor": {
          "ref": "bd009d89-16bf-46c5-b733-ff9377d9dd07",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9d6b8f04-966c-4d03-be19-0e1482edfaf2"
        },
        "item": {
          "id": "77d2a2f1-5fd2-4c47-9025-454667e4c789",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "3fc064fc-4c53-4fa5-ac31-15e6933cbe65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98821dad-43ef-4375-8d61-68b68b80aaba",
        "cursor": {
          "ref": "733c9ac5-7e65-47cc-b3ba-59264c6b4f09",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d8dfcbb7-b90e-4163-b6e9-0818e32a6185"
        },
        "item": {
          "id": "98821dad-43ef-4375-8d61-68b68b80aaba",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "25845add-cd2e-445f-bfbd-6091da508fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50738b87-8ae0-49f0-af80-4c902c8389a7",
        "cursor": {
          "ref": "0ab003d3-efcf-479c-880c-e4ce8c2be002",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "97089d53-684f-4795-88a9-4d27245bd77d"
        },
        "item": {
          "id": "50738b87-8ae0-49f0-af80-4c902c8389a7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "00e149a7-7e68-4b42-bdea-704c8a00ef1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f994ec-45de-4e23-bcb5-5d561f9bcb6a",
        "cursor": {
          "ref": "2e2b847f-19d5-4cde-84b9-a6f1116b377f",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1f87a585-6e17-47f6-8567-02085f2d4158"
        },
        "item": {
          "id": "84f994ec-45de-4e23-bcb5-5d561f9bcb6a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "003c973c-b300-4311-abd8-70f472d5ece2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df00392b-3ed7-44cd-bb4e-0109781a9d22",
        "cursor": {
          "ref": "d4d6e57c-51c2-45ec-b3c2-2d0cda7716bc",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "91137aef-c88f-4a51-b1b6-528d30841a4e"
        },
        "item": {
          "id": "df00392b-3ed7-44cd-bb4e-0109781a9d22",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4e5526a2-b1c3-4593-adac-82b7de1f35dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8217af93-434a-4f5a-92cc-402d9861fa44",
        "cursor": {
          "ref": "7c517886-3c61-441f-8327-64b9f2113554",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "aa9fb1d8-3d85-4070-ab1b-d533b41e9134"
        },
        "item": {
          "id": "8217af93-434a-4f5a-92cc-402d9861fa44",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "aad701a1-1c32-483b-9cc6-b58e08ee276a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e66362-d7f6-42c0-aca9-a0e1d6d060af",
        "cursor": {
          "ref": "7e61a911-4929-40d7-a33b-7bb8d35168b8",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c8d2a57c-6ca8-4257-8fd1-2c940c8ffe3d"
        },
        "item": {
          "id": "86e66362-d7f6-42c0-aca9-a0e1d6d060af",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "53911928-0671-4ee1-a32a-1da0403d8c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5a0bd4-b241-4028-8ca4-bc0a2a0f1b67",
        "cursor": {
          "ref": "1f33ce2a-8628-4bc3-a453-be4db015e8c6",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c411f2fa-e942-4583-9906-ca3fe49948ca"
        },
        "item": {
          "id": "dd5a0bd4-b241-4028-8ca4-bc0a2a0f1b67",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9b6ec5ad-3a3b-4acc-b42d-245a9f90f01d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba8d05c-7525-4134-ac3c-df1eee1094cf",
        "cursor": {
          "ref": "ff2d089f-73e9-41b5-a919-8321245f3174",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "03ccd4e1-2cff-4c13-bcc9-363242d064e8"
        },
        "item": {
          "id": "6ba8d05c-7525-4134-ac3c-df1eee1094cf",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6384e694-d78e-43b8-b707-b4789763a180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5328c789-7d11-486b-b064-fe0b39e5b71a",
        "cursor": {
          "ref": "7dd9b4e7-1766-4883-914e-bdfc180229f3",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d1b7c1fe-e3b7-4183-b63d-ca2f090e8e6b"
        },
        "item": {
          "id": "5328c789-7d11-486b-b064-fe0b39e5b71a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "fb65490f-45d8-4736-aa0a-dd1859750ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f62b38-44f5-4dcd-82db-b3ea268c4490",
        "cursor": {
          "ref": "2938ba1a-46d9-4aab-8f0b-c27cc45d4111",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9a9f5c1d-02b6-4ae7-b79e-cf0c27cd3319"
        },
        "item": {
          "id": "b8f62b38-44f5-4dcd-82db-b3ea268c4490",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "15cdad45-6bdb-4461-b18b-61ba4d0700dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 591,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "41595dfd-5019-4f27-9f35-5f463112bb78",
        "cursor": {
          "ref": "0042a1c1-0bbb-438c-8344-e3a9f45da17c",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "76e866ef-8af7-4808-826d-c9d01b7048d2"
        },
        "item": {
          "id": "41595dfd-5019-4f27-9f35-5f463112bb78",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "cc611524-fb53-43d9-aaa0-96ce1b4f693a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 634,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "744408a9-70e8-4c0f-bab7-259016e99e7e",
        "cursor": {
          "ref": "fee34697-9857-44f2-a371-0e6ce08193d6",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3bafdde5-ca53-4053-a342-a7f70a89f75a"
        },
        "item": {
          "id": "744408a9-70e8-4c0f-bab7-259016e99e7e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a4cf30f0-d036-41e8-ac2e-8db97d04a380",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "47b7b4d2-18e2-4f9c-bd6b-56a16495f312",
        "cursor": {
          "ref": "68d76fa8-e63c-4b99-8850-f1e1684b6df7",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1b86bce0-0659-40b5-a8b7-b64c5869ce50"
        },
        "item": {
          "id": "47b7b4d2-18e2-4f9c-bd6b-56a16495f312",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9231e8c0-9ad0-465e-a9cf-df796d9bbe78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 962,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "9a84b2be-9cb4-4bd4-a55b-e8460e16031c",
        "cursor": {
          "ref": "c4a1c0d4-78bd-4e49-abfd-e891eb95e36f",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "96aa72fe-cf06-4873-a8eb-398bd91c0eca"
        },
        "item": {
          "id": "9a84b2be-9cb4-4bd4-a55b-e8460e16031c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b26d939b-830c-494d-a38a-21649434e09e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "6a526e75-30a0-489a-89f1-181d0ec1386f",
        "cursor": {
          "ref": "41deaa65-6785-4222-88d6-bb70c11fbbd1",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "615ef2dc-6f43-415d-9b82-afe94c7df8c4"
        },
        "item": {
          "id": "6a526e75-30a0-489a-89f1-181d0ec1386f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ceba29e0-ff0e-427d-936f-ac72b73f1776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36460e9d-4c34-4fb3-96fc-5e1024d4aa09",
        "cursor": {
          "ref": "cb2249b5-729b-486e-ace6-3ad41545254a",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "86e50961-ec27-46bc-8007-03a03b5947e1"
        },
        "item": {
          "id": "36460e9d-4c34-4fb3-96fc-5e1024d4aa09",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b71c4a55-99c9-4906-92d8-f6d7707577cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2452c45-ca05-4615-be1a-1e007c5674fe",
        "cursor": {
          "ref": "7d6dae77-5b9b-4c8a-aa86-d72da5d10ddd",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9eca423b-6425-4776-a477-a27c62e00c7c"
        },
        "item": {
          "id": "f2452c45-ca05-4615-be1a-1e007c5674fe",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "74c7aa0b-1a6a-40b4-811b-96010c8ab11e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3663f18-6207-4d04-ad2e-d232c16f410a",
        "cursor": {
          "ref": "adc19dcd-2beb-468e-8dda-9401cead1dae",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3d64e0b5-c4d2-4147-8ad4-44cb79e7282d"
        },
        "item": {
          "id": "b3663f18-6207-4d04-ad2e-d232c16f410a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c037f681-70c5-418f-81c4-b62a24075634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce51ddb3-692c-4255-8b21-84eaab37058a",
        "cursor": {
          "ref": "591b6f4c-a057-4978-868f-4fbf8532ca5b",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c636058f-5a3b-4836-a61d-7d9fb2359bb3"
        },
        "item": {
          "id": "ce51ddb3-692c-4255-8b21-84eaab37058a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "eaa9324d-99ad-408d-8233-f2502d3ded0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9917c0af-810b-4261-ac2b-832827b13521",
        "cursor": {
          "ref": "430a9d21-ae68-4c16-bc8f-27eca3a26e2f",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "274115fd-6b1f-4229-b7bd-958d42c20285"
        },
        "item": {
          "id": "9917c0af-810b-4261-ac2b-832827b13521",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3d3ec771-fe05-491b-8a2a-c64d37ef9a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ea2d57-b697-45dd-93ad-40c02973cb0a",
        "cursor": {
          "ref": "6ceafdec-b1d8-45c3-8512-11425733c487",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "4d09fbc0-0774-4fb6-8832-07690de7e575"
        },
        "item": {
          "id": "d4ea2d57-b697-45dd-93ad-40c02973cb0a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f4df80c3-02ab-4ca1-b300-5bd67ba0c695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82dbcb04-5609-4813-8a56-c08dd8bc489b",
        "cursor": {
          "ref": "4195cb1f-fca1-404d-80de-d13fa68d7353",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "33503986-bf92-46e7-9752-f2692bf7ed8e"
        },
        "item": {
          "id": "82dbcb04-5609-4813-8a56-c08dd8bc489b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2ba42747-88a4-4bdb-ad16-b6782d70caaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06329dbb-b01b-42f6-80f4-ac741272491b",
        "cursor": {
          "ref": "29297df2-ff37-4efb-b788-ca251e6dbe77",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "cf0046f9-bc70-4855-835f-0fe1161a1483"
        },
        "item": {
          "id": "06329dbb-b01b-42f6-80f4-ac741272491b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "de03817d-774c-4dc9-b45e-bd87ff87f5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee63f4de-1296-49f3-af99-5361eeea208a",
        "cursor": {
          "ref": "d653f1e0-7244-4eb5-96b0-8020b2ebc4f1",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c6973152-3dfe-4401-bc67-93072bc1e51f"
        },
        "item": {
          "id": "ee63f4de-1296-49f3-af99-5361eeea208a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7701dfb1-ff8f-4786-b4d8-6cd8a8bdc706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f304c7-7da1-4930-b17d-1d2222184214",
        "cursor": {
          "ref": "6ba2f09e-7b6d-4c84-9a4b-dce7b3179e24",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "cac83f1c-067e-4552-9604-c01223346961"
        },
        "item": {
          "id": "76f304c7-7da1-4930-b17d-1d2222184214",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "7d9cf567-5182-465c-b824-0f6c132ba6cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38354fe-749e-48a5-bf77-5fa7b32402e2",
        "cursor": {
          "ref": "f5960f84-76de-47f1-b4c0-0c3d5912b77f",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "13258cf3-303c-4757-8290-79296ba552d6"
        },
        "item": {
          "id": "f38354fe-749e-48a5-bf77-5fa7b32402e2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c621b188-c3ac-442f-98af-be3f30a38547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee5375c-ae11-4f46-8910-4c0217201845",
        "cursor": {
          "ref": "e7e4bb66-a641-4cf7-8973-e297f96aad03",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4b4f8da3-7859-4f6d-ab69-8f6f22bba809"
        },
        "item": {
          "id": "fee5375c-ae11-4f46-8910-4c0217201845",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9d024d07-5b07-4bf9-b283-ba5845519532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f91c45-adf3-4403-b3ca-2d2d5db78844",
        "cursor": {
          "ref": "6f662362-eb86-46fd-bc1d-2e35cf0130da",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "22a31fa8-6b6e-4d23-90a8-884c239d716e"
        },
        "item": {
          "id": "86f91c45-adf3-4403-b3ca-2d2d5db78844",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1127e96d-0aab-43ab-a7d5-db9f58959c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7da8b8-5695-46de-a872-84219ed2c72b",
        "cursor": {
          "ref": "508190bf-97e5-4a43-9f2c-651f0fc5b9fd",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c1c2b688-bb98-49e3-8f3d-acf355a0a0f1"
        },
        "item": {
          "id": "db7da8b8-5695-46de-a872-84219ed2c72b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6eaf5568-de3f-45b5-85cf-7101ee20e727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f3b547-16bd-480e-93fe-d4835c02e7f7",
        "cursor": {
          "ref": "969ed071-af25-436e-8f54-a65c3ee097f1",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0bbb123d-3043-483d-b59b-7b65b8ea1e4e"
        },
        "item": {
          "id": "12f3b547-16bd-480e-93fe-d4835c02e7f7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5b0a5a6e-e696-4ee1-9863-2ff9ebd2ec17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2374f327-2531-4c2e-b27b-a17bc7553018",
        "cursor": {
          "ref": "a602473a-b06d-46fd-9eb6-38747e268600",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a393bc70-2635-4e66-9a0e-8261324902bc"
        },
        "item": {
          "id": "2374f327-2531-4c2e-b27b-a17bc7553018",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7a0eafdd-5e04-4808-a743-9cc7e9886fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6e1df2-bd2d-4add-9f1c-76a5103eac77",
        "cursor": {
          "ref": "ca094243-ad1b-459d-ad27-e0ce638c4db4",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "66a5eb8f-947f-4242-8345-503bfd09d024"
        },
        "item": {
          "id": "9d6e1df2-bd2d-4add-9f1c-76a5103eac77",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6b2b8acd-5527-49b7-b1d9-306ddd1846df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee4203e-8102-4d3c-96a3-2f674780f761",
        "cursor": {
          "ref": "d55e0bea-c94e-4821-bc6d-481edd62d52c",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2abb5979-eb9e-43b7-8fa5-abcaeb7d98fd"
        },
        "item": {
          "id": "5ee4203e-8102-4d3c-96a3-2f674780f761",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1d72c7ef-b0e3-486f-b9ba-6e2995051e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb84fda-2337-479b-91e9-1ea5c8d9642b",
        "cursor": {
          "ref": "65a6723d-e2ec-4bdc-bd5d-d0895d83abee",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a4dea065-8eba-4264-acfa-136a26a28fa3"
        },
        "item": {
          "id": "eeb84fda-2337-479b-91e9-1ea5c8d9642b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0cc2f45a-379e-47e5-bf5e-f08c3ac3238e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca95f438-51fa-4459-9c49-b38411d7ae0c",
        "cursor": {
          "ref": "7b55f2a8-7382-4003-9fc5-4b81ad27cae2",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "24df69f3-1575-41c8-8a32-46306ee2a4b9"
        },
        "item": {
          "id": "ca95f438-51fa-4459-9c49-b38411d7ae0c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "92bd2ea7-aac9-4243-b864-777ec0d73380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa1396d-476a-49f1-9113-aa20466e59cf",
        "cursor": {
          "ref": "d478e1e4-36ae-494a-8927-798de6ba4f0c",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9b106f7c-4792-4189-a3fd-ca576777ee0d"
        },
        "item": {
          "id": "8aa1396d-476a-49f1-9113-aa20466e59cf",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2058cc94-e400-49bc-b76d-362e9079a5b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccefee86-0b7e-448c-8bee-a6534049509b",
        "cursor": {
          "ref": "1d5fe4f1-dfa6-463c-a37b-8da4603ff6f4",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3e9b6212-cb1e-4c4d-9b02-ce115c011e0d"
        },
        "item": {
          "id": "ccefee86-0b7e-448c-8bee-a6534049509b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1bc87591-51fa-4b4b-84e8-ef54ba82af8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510548be-6193-4722-8309-7679dc399370",
        "cursor": {
          "ref": "7135055b-fcf4-4ea4-9d15-fc92b01aa07c",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "812d030f-922c-4fbe-ac90-5602f4a188f1"
        },
        "item": {
          "id": "510548be-6193-4722-8309-7679dc399370",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6bbc48ac-3eaa-4306-9125-df9bb58b3329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06a9827-5af4-421a-a4a0-4168b753fcf0",
        "cursor": {
          "ref": "a1138019-8d35-4230-a67d-171527ea44ad",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3b844ff4-9157-4cab-81df-557e544a881c"
        },
        "item": {
          "id": "b06a9827-5af4-421a-a4a0-4168b753fcf0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7b40b079-47ef-413d-9dcb-b9459a02b31b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d9fb49-cf2c-4556-b884-63a620a69040",
        "cursor": {
          "ref": "393916d1-abc0-41b1-bbfb-754b92e7dafb",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b97c6d53-e5d5-491c-ae8e-9496102dbf03"
        },
        "item": {
          "id": "55d9fb49-cf2c-4556-b884-63a620a69040",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8fa3cb0b-2a60-474e-b951-83243c50a839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce8cbeb-b800-4bb3-9f98-72a4c7c3962c",
        "cursor": {
          "ref": "eb507afd-4726-4d9e-98cb-62c5536963fd",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "61124f8c-5f37-4be8-92d6-6a1d3bb387de"
        },
        "item": {
          "id": "2ce8cbeb-b800-4bb3-9f98-72a4c7c3962c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "502e1728-fcb9-4510-8c3e-e2f56c623d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17308b7b-7c7a-4b74-a6d9-b4b72f6a7638",
        "cursor": {
          "ref": "3381d2fe-b2cf-4f2b-9cd3-034081e3fb09",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "108d07d7-d44d-49ec-af88-b6254072c397"
        },
        "item": {
          "id": "17308b7b-7c7a-4b74-a6d9-b4b72f6a7638",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a52beff7-2b9c-4973-9f91-0e3dc2221b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1baa5592-bcfa-4c51-b515-6e05ffe43d81",
        "cursor": {
          "ref": "d5672fa5-960a-4fc0-a796-f9de6d0b775e",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "cfa8faac-991c-4ebc-9ba3-63af1322b633"
        },
        "item": {
          "id": "1baa5592-bcfa-4c51-b515-6e05ffe43d81",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b6fd4d95-5156-4f4f-bd9c-5d1166e37248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86917664-5079-4327-9e10-2c2288bafb3b",
        "cursor": {
          "ref": "c98b3b5a-17fa-46b7-9d32-2cb75d817a18",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0acae115-ad08-4c05-ab8a-119c0dd0dffc"
        },
        "item": {
          "id": "86917664-5079-4327-9e10-2c2288bafb3b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d58cff48-98a8-4a48-9a3d-9affef42516a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22aea510-aa6f-4ba8-a879-ff5601382b3e",
        "cursor": {
          "ref": "41131842-1c98-48cb-9e7d-d0d7ada6ca20",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1d6266e2-51b5-40cb-98bb-d4491d5f8013"
        },
        "item": {
          "id": "22aea510-aa6f-4ba8-a879-ff5601382b3e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "98f337a3-e549-4dd0-b604-a6ae81a49dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d79f13b-bf2e-4166-80bb-006ef7bc7081",
        "cursor": {
          "ref": "84738d52-ab30-46b9-b232-bbe5bb5ce9b8",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c2152922-31f8-48bd-94b1-06d575129878"
        },
        "item": {
          "id": "4d79f13b-bf2e-4166-80bb-006ef7bc7081",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d878ca18-0b68-40b3-b510-13ee505077dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec646bb3-b798-43c6-97a6-b7615a898567",
        "cursor": {
          "ref": "87c8c18f-eb64-4be8-86bb-594e6e1b4acd",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8d71e471-86bf-4953-9ea6-0d11f810f090"
        },
        "item": {
          "id": "ec646bb3-b798-43c6-97a6-b7615a898567",
          "name": "credentials_issue"
        },
        "response": {
          "id": "add7bae2-14d3-47e4-b05f-4115fd50f7cc",
          "status": "Created",
          "code": 201,
          "responseTime": 968,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "84666ac3-2be8-4ebe-8beb-7565f7ac289e",
        "cursor": {
          "ref": "76b316f0-c657-4ee3-9434-e912a99e7522",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0796ab22-d8bd-464b-8bd0-90b0b78c2d34"
        },
        "item": {
          "id": "84666ac3-2be8-4ebe-8beb-7565f7ac289e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6e6caa33-e296-40c8-ab72-4b856e42f275",
          "status": "Created",
          "code": 201,
          "responseTime": 899,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b611acad-f373-42e7-b4fd-518e0091bb8f",
        "cursor": {
          "ref": "2c4cfc98-29fa-469e-9246-97ae410fbed5",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5d503598-818e-49e6-9b35-0b338d8c24f1"
        },
        "item": {
          "id": "b611acad-f373-42e7-b4fd-518e0091bb8f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b6629306-c146-4900-a791-076ad2dd29bb",
          "status": "Created",
          "code": 201,
          "responseTime": 827,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1011df8-6fd3-4913-990a-8cd27d668e64",
        "cursor": {
          "ref": "ee8ec8c5-ed74-4025-892d-8829b24a2f55",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d04a8ec6-7475-4f5b-ac29-268866c54e9f"
        },
        "item": {
          "id": "b1011df8-6fd3-4913-990a-8cd27d668e64",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "48aaec60-8098-4787-95c0-a4765bf3dd0d",
          "status": "Created",
          "code": 201,
          "responseTime": 857,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b67011-e4b0-483f-b283-462040de75af",
        "cursor": {
          "ref": "c55508c2-4ca3-4074-a9f7-4d24709df411",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7ece4ba7-8755-4a7c-adb1-5e1201a8b741"
        },
        "item": {
          "id": "a9b67011-e4b0-483f-b283-462040de75af",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1bfa7c27-94c5-4ec1-aee4-ef2d578aebf2",
          "status": "Created",
          "code": 201,
          "responseTime": 881,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f4cc308-ebf1-47ce-9884-1cf9f696a9d9",
        "cursor": {
          "ref": "9565efda-383a-44e8-9f75-d020bf1d59f0",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2d42b1db-7cbc-420a-9515-761e981d5246"
        },
        "item": {
          "id": "7f4cc308-ebf1-47ce-9884-1cf9f696a9d9",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0e0545b5-93f5-4da4-846f-672b2afc516b",
          "status": "Created",
          "code": 201,
          "responseTime": 1183,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6e1808-596e-4c09-91ed-5a4c061d67a5",
        "cursor": {
          "ref": "8a42df0d-ba36-40e9-8bde-7bf2964686ce",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7e7e938d-5b6c-4740-ae0b-c4cc02bbcf80"
        },
        "item": {
          "id": "3f6e1808-596e-4c09-91ed-5a4c061d67a5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d9ac9838-a424-4003-89b6-983040a93732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98eb580d-382b-42ad-95a3-d9e57b601acb",
        "cursor": {
          "ref": "042a6e3a-1322-492f-b4b0-aea5c5b7cb92",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "03ec692a-b83f-4c39-9354-9cef61b5443d"
        },
        "item": {
          "id": "98eb580d-382b-42ad-95a3-d9e57b601acb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1207a74c-45d9-4f76-8aaf-8ae1001cb44c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d75368-bcf6-4ca0-bbc6-8f1130d987d4",
        "cursor": {
          "ref": "7b4c53c3-47aa-4008-bfc4-734d5c6f4ed8",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2f66a4db-faa5-4c8f-96a6-a0cbb8717af8"
        },
        "item": {
          "id": "c7d75368-bcf6-4ca0-bbc6-8f1130d987d4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f656b396-61f1-4195-9076-0e4a1ba7ff47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2491725d-1acb-4566-96ce-1f4876edad8f",
        "cursor": {
          "ref": "9c6d6ec3-6a79-4185-ade6-be7b54a22d56",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0d864e21-8a6b-40aa-b575-cdf125462211"
        },
        "item": {
          "id": "2491725d-1acb-4566-96ce-1f4876edad8f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1cf7e0c9-6871-4105-9742-ae1aa6675486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8beb33a-1db4-4ae6-8c0b-807ca00dc920",
        "cursor": {
          "ref": "78cb1623-44b1-49fc-83ea-9c19ede649fc",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "06d92abc-79a5-4d83-a570-6f5b29a6c4c0"
        },
        "item": {
          "id": "d8beb33a-1db4-4ae6-8c0b-807ca00dc920",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "72356e60-1e50-4c12-8a3d-8f202740f510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1150b4b9-586d-41ba-b5f4-3e1c739067fb",
        "cursor": {
          "ref": "1b0ecdec-f346-4016-8174-04efa917ee7e",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0da347cf-4dee-44c2-95f6-c0acaeebb1d7"
        },
        "item": {
          "id": "1150b4b9-586d-41ba-b5f4-3e1c739067fb",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "44e46d8b-75f5-4c26-a2c3-29142b2f9ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89bce31f-5d1c-4790-8ab5-c5dc004dde0f",
        "cursor": {
          "ref": "548a6b5b-9472-4889-b70d-ef4953d0ce8b",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "edc9b26e-1485-4bf4-b0df-f773dd878e21"
        },
        "item": {
          "id": "89bce31f-5d1c-4790-8ab5-c5dc004dde0f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "eba1f9e3-2ac5-4128-9199-f0f293aa6948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0b46d3-7643-4552-a066-b93b483adac0",
        "cursor": {
          "ref": "506e9034-9b9b-48f1-a42e-70bb4c580c42",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b2b45f0c-f10d-47fd-b088-64f318c1dbde"
        },
        "item": {
          "id": "0c0b46d3-7643-4552-a066-b93b483adac0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cd552c06-26a3-4d60-9f05-73306102f4c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346ed6ba-8a3d-409f-8b7d-aa42ee5747d6",
        "cursor": {
          "ref": "1f368ec2-f95c-48e7-b2ac-4fb3cefba5d5",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "51b1b78d-918e-49a4-a795-42ad172d997b"
        },
        "item": {
          "id": "346ed6ba-8a3d-409f-8b7d-aa42ee5747d6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a80d99b0-07f4-4d7f-8cc7-1c835c113da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad2f9dbc-ad12-4f8a-9c6d-67822faf39d1",
        "cursor": {
          "ref": "8ab07e86-672c-4014-a0b1-cb3eaa8f5a66",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "24271854-bbe5-4c12-98b9-f180b8d74f26"
        },
        "item": {
          "id": "ad2f9dbc-ad12-4f8a-9c6d-67822faf39d1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1dfed13a-8902-47f7-b302-3429fe6d0416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f179d656-9c01-4807-aa4c-141710627e32",
        "cursor": {
          "ref": "5bdab609-c670-416d-839a-f0eab456663f",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5ec2a083-c576-4bf2-9dcf-3ca2380b4c4f"
        },
        "item": {
          "id": "f179d656-9c01-4807-aa4c-141710627e32",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "94463347-6dec-43fc-ab88-67811b21a890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2fe3e99-2e38-408b-b3b8-d4e1859b6eb1",
        "cursor": {
          "ref": "1a07c31e-cb5f-4193-82bc-8747f1b8c337",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "29fb50b7-9697-4ecc-9789-97fe7c10c0c9"
        },
        "item": {
          "id": "c2fe3e99-2e38-408b-b3b8-d4e1859b6eb1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e5f91410-95ca-4285-917c-8360d9c96ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d07d6eb-8cf2-4be2-89ce-a90ff501be5e",
        "cursor": {
          "ref": "a45c61a8-fa58-4133-8640-9117a2294191",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9dc2768c-c343-4e5f-8ec7-54a8053b1242"
        },
        "item": {
          "id": "8d07d6eb-8cf2-4be2-89ce-a90ff501be5e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b8d40df4-91c4-41cd-b20c-4fb61afd19d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90669de-442d-4ba6-94ae-de50c8d0e5aa",
        "cursor": {
          "ref": "e4a207d1-3388-434e-8b6e-0801fb40066e",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f24e6c4b-66f0-4a50-bb8e-a545172d05e9"
        },
        "item": {
          "id": "b90669de-442d-4ba6-94ae-de50c8d0e5aa",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5b66d703-f63d-41be-adcf-e974bbef06d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14a553ce-c51f-4cc8-9417-3ec5597f276a",
        "cursor": {
          "ref": "1a4d39ae-b2da-4c00-ae56-eaaa92bc59e3",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "cdbfca9a-e8cc-4508-987e-4890667ce6b9"
        },
        "item": {
          "id": "14a553ce-c51f-4cc8-9417-3ec5597f276a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "54284010-6e8c-48e2-9221-46a732c449c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7010c8b-1c9d-433f-b9f0-cbb3f66051a1",
        "cursor": {
          "ref": "381f0d19-5a91-4ffc-a32b-81fa28a97956",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5a430384-33cf-43bc-b2ee-a7d95a802f3e"
        },
        "item": {
          "id": "b7010c8b-1c9d-433f-b9f0-cbb3f66051a1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2edc2ddf-1306-479d-a365-4a6470adb94e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f8a7d2-e025-40b8-b656-fa0f95dec885",
        "cursor": {
          "ref": "0ed8dd6c-6c18-4519-8216-6c89f4cfe49f",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e06aa00f-9292-49f1-8097-86f8b354edf4"
        },
        "item": {
          "id": "04f8a7d2-e025-40b8-b656-fa0f95dec885",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c69c5c0f-dcd9-4bb2-8f9c-93cbbcc8f830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5329d728-d653-4ea5-bd50-87c7aedf9295",
        "cursor": {
          "ref": "6bae1b27-58af-453b-bef0-145810b8e91c",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b5d0848b-af85-4951-bb79-a27369e8f156"
        },
        "item": {
          "id": "5329d728-d653-4ea5-bd50-87c7aedf9295",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "54a17b9f-97b6-4051-b388-2f58b86de613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73de67ae-eefa-4a30-80db-ae92e008a29a",
        "cursor": {
          "ref": "8fc76083-99f0-4415-bbeb-c99d2c779e94",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4cbcc0de-e74e-474f-abb4-3b79521e2752"
        },
        "item": {
          "id": "73de67ae-eefa-4a30-80db-ae92e008a29a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "69c6a062-6098-4119-ba4d-2a9676b088f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3cb67f-a2d6-42cf-ac82-984adaf657e2",
        "cursor": {
          "ref": "f174073b-3a47-495e-9f90-9add584de9d5",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2e533d23-f89f-4607-b49b-f5c766719a0a"
        },
        "item": {
          "id": "6b3cb67f-a2d6-42cf-ac82-984adaf657e2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ddc953f4-604c-4fc3-b57b-1f53adc1e6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569b3c9b-88ab-4149-a66a-110dfdfeb3e9",
        "cursor": {
          "ref": "d8aedc0e-1ff7-4678-a43f-ca5fa89f9a82",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "34840740-8afe-4dc6-b50c-ddd94f60d93c"
        },
        "item": {
          "id": "569b3c9b-88ab-4149-a66a-110dfdfeb3e9",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "54f2b27c-ec86-4290-8244-4a53a497b127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1223656-1da7-4fc7-a3c4-1366d48a5237",
        "cursor": {
          "ref": "15b01e33-d115-463f-9cf6-f211624d51f9",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "afe0c791-e2ce-4691-85d0-39428319dcf2"
        },
        "item": {
          "id": "e1223656-1da7-4fc7-a3c4-1366d48a5237",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d0406e01-e3bd-443b-b6ee-db4b87519d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8147de39-9071-4c8c-9491-843ff92a2780",
        "cursor": {
          "ref": "5a08f546-4a24-49cb-9a83-c9ff3d097c82",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0fd95b2e-d610-45c6-811b-aea2386ecc95"
        },
        "item": {
          "id": "8147de39-9071-4c8c-9491-843ff92a2780",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c4ea3c51-b885-4cec-a880-2a80a8f7083f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a681d5-f842-43a8-a1c0-6a66a1c86d6c",
        "cursor": {
          "ref": "129fbc52-7d30-4e1d-bc2c-3fa495c77c42",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c01a964f-6950-437c-aaa2-1e0e1c34a47b"
        },
        "item": {
          "id": "a5a681d5-f842-43a8-a1c0-6a66a1c86d6c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d851ee7c-cdb5-4af1-9f5e-cc4c8b8a9261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "093fba4e-6945-406f-a46e-e2380959a124",
        "cursor": {
          "ref": "2db75eca-59d0-4640-ad51-6506deb4f856",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a67dacc5-dc01-4b0b-af67-37667c7e9b78"
        },
        "item": {
          "id": "093fba4e-6945-406f-a46e-e2380959a124",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ebd36dff-fe18-4b27-a882-7c0a2e800288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f07c33-2739-4517-8c13-1cb1d89a939f",
        "cursor": {
          "ref": "15c255f9-8a63-4302-adef-67a69e6a1196",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "cd01f7cf-b2e1-42d4-be82-390a5f6b127b"
        },
        "item": {
          "id": "97f07c33-2739-4517-8c13-1cb1d89a939f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "164761e5-d590-446c-ab43-17196d45b2d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7271ff8-8369-441b-91a6-b2141d3b7c66",
        "cursor": {
          "ref": "534abbb2-af41-4ba7-9725-0bb3b61678ae",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "de43036a-c262-400f-9980-293962a8c8a8"
        },
        "item": {
          "id": "b7271ff8-8369-441b-91a6-b2141d3b7c66",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "09e6ecf7-8343-4290-b19d-b2d2a5603177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbef3641-bdcb-4dbb-8aa4-cdb9dee60ac7",
        "cursor": {
          "ref": "5f60d203-7f85-4c24-8233-cff8e162191d",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "fd834a0f-642a-4cc1-8892-33f6e6a87bea"
        },
        "item": {
          "id": "cbef3641-bdcb-4dbb-8aa4-cdb9dee60ac7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5b9cab91-93d6-4589-b86e-f67e8476d5e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb8266c-4678-4eac-8e68-a4fcf4fff3d4",
        "cursor": {
          "ref": "f8d62053-e7e4-4177-993e-04075d55db4f",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7c7311cc-53b9-42be-86b4-abb720417c07"
        },
        "item": {
          "id": "0eb8266c-4678-4eac-8e68-a4fcf4fff3d4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7f31142f-0c01-40a6-8911-12cbff931ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35daf696-12f5-4ac7-b405-e9c8fa8cbf53",
        "cursor": {
          "ref": "be2e3f92-dd09-4e62-b890-ef055f5a30ff",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b598e78f-642b-41d2-a043-ff9547fbc8df"
        },
        "item": {
          "id": "35daf696-12f5-4ac7-b405-e9c8fa8cbf53",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5f9f554a-6aa9-46b3-942f-52699d95c4e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39003936-2cb8-4ae6-9296-cbc4f98b533b",
        "cursor": {
          "ref": "72a690d4-bae5-4d74-9d2f-30b5e5759ba6",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "78762c3c-bbd1-4aa1-979d-b179c708e54a"
        },
        "item": {
          "id": "39003936-2cb8-4ae6-9296-cbc4f98b533b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "492fbde4-3f52-464e-add2-887aae3a126e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba54330-36d5-40ae-94d1-098009c1e2a7",
        "cursor": {
          "ref": "62d74933-7ead-4680-8501-41f48a529746",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e2efa266-3ddc-4eff-a52f-ec7bf1c7b0c9"
        },
        "item": {
          "id": "9ba54330-36d5-40ae-94d1-098009c1e2a7",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8fd5d38d-f7d0-4aaa-a61a-29ecb381f2a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd4d09c3-b25e-449b-815b-6d1bc88d31b9",
        "cursor": {
          "ref": "af652539-5a9f-4923-a3dc-506cdd713bff",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "052902ac-ec74-4e18-a897-9d7d90ba5035"
        },
        "item": {
          "id": "bd4d09c3-b25e-449b-815b-6d1bc88d31b9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "56a00dda-d9d3-429f-a6d2-8e65ad29715a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7416492f-60d6-4956-889c-466c7d4f99ad",
        "cursor": {
          "ref": "cba54e76-4ba6-4844-bd81-c9c318d2dadf",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "853974f9-e271-4020-8d26-dc60116ac0fb"
        },
        "item": {
          "id": "7416492f-60d6-4956-889c-466c7d4f99ad",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "579fb010-d7b7-4101-9869-c2f00c60f338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa36e497-9ac6-4085-9239-6f66a5ee8f51",
        "cursor": {
          "ref": "b87b2231-cb05-4809-9a8a-db55071f0325",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4fb47764-e953-4718-b678-656dc73c011d"
        },
        "item": {
          "id": "aa36e497-9ac6-4085-9239-6f66a5ee8f51",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "02ce13c0-8746-4110-aa61-4a3db48f0612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33a30ca-fd3d-4346-9f91-c7c8faf7ade3",
        "cursor": {
          "ref": "1ed23f05-d6e8-485c-b3ae-e890e48e7387",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3ac3116f-77a5-4c32-8318-bfd1e29eb1b8"
        },
        "item": {
          "id": "f33a30ca-fd3d-4346-9f91-c7c8faf7ade3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "11fee13f-467f-4ad3-b0ad-af28d6b6f91f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e426dbb-dcb9-4745-9674-61dbdaa2006d",
        "cursor": {
          "ref": "ab61e414-0141-4261-b3d7-b8b6f201496b",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "956ff9f4-575d-4dc3-9cb1-2d759f1c1031"
        },
        "item": {
          "id": "8e426dbb-dcb9-4745-9674-61dbdaa2006d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3dda7c29-e61f-47f2-adc6-13dbc9592cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a54f034-0092-4679-94d5-518553f47411",
        "cursor": {
          "ref": "520846bb-5a46-4c94-9d68-7e8c8652f89e",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "57db5f96-85d4-4b73-b2a9-98876f6cf891"
        },
        "item": {
          "id": "9a54f034-0092-4679-94d5-518553f47411",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "670ec87f-2b73-4226-841d-5a325fdb0f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359ee881-f696-4c3c-a56f-7c0b7f3e3f01",
        "cursor": {
          "ref": "7c843404-9c16-463e-b525-98ff09128890",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "bc2f69ec-adcd-4811-b6f0-09ba1a54472c"
        },
        "item": {
          "id": "359ee881-f696-4c3c-a56f-7c0b7f3e3f01",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ed90e70c-d62b-4896-9a8c-a8d8a21eca59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad2b69ce-584c-402e-86f2-e796409c2961",
        "cursor": {
          "ref": "ddd2e2a8-8e14-499f-aede-01451e1a10b2",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ba993573-467d-48be-8804-08ba3338849b"
        },
        "item": {
          "id": "ad2b69ce-584c-402e-86f2-e796409c2961",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "265bdbb4-5cad-47d2-a7a0-70dda7b79854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3e9f27-cecb-4d0a-af60-26fafc9accf8",
        "cursor": {
          "ref": "62877a2a-ef23-4ba2-a917-6f0b736c1d45",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "aca282d3-53bf-47e6-8324-8fa58e4ee22a"
        },
        "item": {
          "id": "ea3e9f27-cecb-4d0a-af60-26fafc9accf8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c12917b4-ffde-4643-a237-62cb367bdf59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602f6dee-c73c-4722-8507-700ac72f8f6b",
        "cursor": {
          "ref": "bdbe7eb6-849f-479c-9ea6-fa43a110e2bb",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "26125f13-a572-4c51-857a-004efd15c9d9"
        },
        "item": {
          "id": "602f6dee-c73c-4722-8507-700ac72f8f6b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b7d9accc-db76-4927-bf5e-afb7f6f6df16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f667bc-ef01-4072-bb7f-dc1e77bb2ca0",
        "cursor": {
          "ref": "d60569b5-7944-4f12-8207-c7518224f18a",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "919b9e19-b2c4-407e-bbad-d6f1cc3c9224"
        },
        "item": {
          "id": "22f667bc-ef01-4072-bb7f-dc1e77bb2ca0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "46be0663-5589-43d5-8a2f-74b1af51b143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc072656-8b4e-442c-ad70-0e7a159b0840",
        "cursor": {
          "ref": "17a66f9d-2a21-41e4-8b48-1c7d284241b3",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b8abd4c2-5ab3-4f4f-bdb2-4a23feb62b65"
        },
        "item": {
          "id": "bc072656-8b4e-442c-ad70-0e7a159b0840",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "88bb6f01-ea68-4da7-82c9-668cf58f871e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ff9206-7626-4f32-9dd1-beca9273c8a9",
        "cursor": {
          "ref": "1651971f-28c8-4ca2-b9ba-80460e97842d",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "71468698-b4fb-40c2-8840-3b353632c86f"
        },
        "item": {
          "id": "04ff9206-7626-4f32-9dd1-beca9273c8a9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e29b2836-e56e-471c-b845-5f946a9fafd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5563b883-a26e-43fb-98ff-00242cd97658",
        "cursor": {
          "ref": "9ab0d959-4861-4d41-9311-6b1dba834627",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ae07126f-f2c0-443f-8c29-1abcb49f319d"
        },
        "item": {
          "id": "5563b883-a26e-43fb-98ff-00242cd97658",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "921ac299-9504-4384-804b-15b09d8cb7a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697e9260-5530-4ad8-8b09-39d9ac41905a",
        "cursor": {
          "ref": "9c8cde6b-3494-4cd9-813e-4eb480bee7f5",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ef122e8d-a4d2-454a-a9f8-951ee785837f"
        },
        "item": {
          "id": "697e9260-5530-4ad8-8b09-39d9ac41905a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "934e6460-9de5-492d-bd08-5435874e58a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c6f152-051a-43e3-a6fd-73c790a9329b",
        "cursor": {
          "ref": "e5221a66-8eda-445e-9f14-288c64ab4265",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "11a35482-8467-4acb-93c2-2e73a9120b67"
        },
        "item": {
          "id": "a4c6f152-051a-43e3-a6fd-73c790a9329b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2b907eca-298b-4e50-9e37-ad14e703795d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7e836b-a407-40bb-b1c6-2830b08355c4",
        "cursor": {
          "ref": "3c3f72b7-bd41-4549-bc0d-2811117f5ec3",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c58b7272-e2e5-4d90-8ffc-a7d527c56cea"
        },
        "item": {
          "id": "5d7e836b-a407-40bb-b1c6-2830b08355c4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ae85d23b-5ac7-47e4-a114-1735ac7a0006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40768ed-9e02-485a-9d46-7c962cd68e1d",
        "cursor": {
          "ref": "a7cf0c66-fee5-4379-9c4e-e7c4b7906e70",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d58c9bf6-0242-4ae5-9e58-3dc90b7395fd"
        },
        "item": {
          "id": "d40768ed-9e02-485a-9d46-7c962cd68e1d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ea6aacc9-5caa-412b-a5a4-cbee4d9535bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf4d5ea-f567-45b9-9b27-a494920cef1e",
        "cursor": {
          "ref": "33992064-b6cf-4fd8-b632-bd83e206e7cc",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b698eee1-3174-47cc-bb83-6349bbed46ed"
        },
        "item": {
          "id": "6cf4d5ea-f567-45b9-9b27-a494920cef1e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "37796372-f8d5-4c5f-a14d-8e11f10e5bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636cc754-e7c4-4a5f-a9c6-a7eb7f51ba55",
        "cursor": {
          "ref": "522c9b66-88d0-45c3-9f1d-ad8b2509049b",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d16d8ca4-cd76-497b-a37f-68843882730a"
        },
        "item": {
          "id": "636cc754-e7c4-4a5f-a9c6-a7eb7f51ba55",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "19258d18-1c94-4227-87a8-e73c89cef3b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01caed65-becb-4cb3-99f6-5a72f5921d3e",
        "cursor": {
          "ref": "1f18213d-5ec3-48c2-93ae-ab8bb5138c0a",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9bd3c8c6-cee9-4b10-a6d7-377e1bfd3a40"
        },
        "item": {
          "id": "01caed65-becb-4cb3-99f6-5a72f5921d3e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "35d6c9ff-b022-4dff-8cc3-fb2a9e6e9c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4c59e1-85b8-4dd3-9edb-8d7251a66e6d",
        "cursor": {
          "ref": "46d99849-a510-46be-8b22-9a0521b3f3f5",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2b222682-7615-4c1d-819f-497eb948b520"
        },
        "item": {
          "id": "6f4c59e1-85b8-4dd3-9edb-8d7251a66e6d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b0dd15f4-2740-43cf-8d01-c7f508d60d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b01543-d202-44b5-84dd-64babfdf64e4",
        "cursor": {
          "ref": "5cadf4f4-f19b-458d-9375-7965f2eff798",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7611a186-942a-4044-bc77-06902181fa7a"
        },
        "item": {
          "id": "73b01543-d202-44b5-84dd-64babfdf64e4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f6799104-016d-4205-aeb4-ede6474d1aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e38c7f-c85c-4047-8f8e-ffe10a3848d7",
        "cursor": {
          "ref": "d9ab31cf-ad9b-444c-89c8-84d5423006eb",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "bcddea8f-a2fa-426c-9673-bf6b23257e22"
        },
        "item": {
          "id": "17e38c7f-c85c-4047-8f8e-ffe10a3848d7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c85b1e14-b427-4340-b54c-10ebc3096e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29e3a91c-2e3d-4106-b066-5e931c3fbc1a",
        "cursor": {
          "ref": "c48be613-ab2d-4a36-a359-09f34461d9c1",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "7c0356aa-1a71-48ff-bd31-809f840c19f9"
        },
        "item": {
          "id": "29e3a91c-2e3d-4106-b066-5e931c3fbc1a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "81052ec0-ee35-4fcd-bac0-f0f036d39a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6423fc04-e254-45a1-9cdc-17d48830f701",
        "cursor": {
          "ref": "60ae1916-88d0-4c7c-8722-7bab5685524c",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0e1f6576-6919-496a-bcae-1453845ad160"
        },
        "item": {
          "id": "6423fc04-e254-45a1-9cdc-17d48830f701",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "19531edd-6224-47b6-b5b2-65fa359cd23b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a66b9a4-4a80-4808-81a5-ad458c662041",
        "cursor": {
          "ref": "cffd8b49-3e2e-4668-aedc-5308d8defc82",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b8cae51b-c7dd-4386-8cbf-a79c150970f0"
        },
        "item": {
          "id": "3a66b9a4-4a80-4808-81a5-ad458c662041",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "13a570f2-6020-4bcc-8957-a37107f7ed54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191281f1-93e3-4c72-a5d7-800ecddf324a",
        "cursor": {
          "ref": "ae90f236-a195-4af6-bf4a-c195577d58ed",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6c0f5d78-6748-48dc-aa2c-edd8cee39320"
        },
        "item": {
          "id": "191281f1-93e3-4c72-a5d7-800ecddf324a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e3f0d20d-d136-43e6-ac14-bf8a01c21cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2784fc-6c53-48fb-87bf-622fe13d499f",
        "cursor": {
          "ref": "6141b4c1-48d0-427c-b3e5-7abb1104e78c",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3cad28d3-99ab-460e-8c1b-58c9f7722805"
        },
        "item": {
          "id": "5f2784fc-6c53-48fb-87bf-622fe13d499f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b5b7ddbb-b47c-417a-97bb-ecb68d51da36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a53aa92b-e097-4425-be8e-b73e5f7cc7a6",
        "cursor": {
          "ref": "1d8ce87d-c85a-4bd6-96df-8bc4bb02742e",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d79f5460-f186-4e11-adf3-daff59f61ea4"
        },
        "item": {
          "id": "a53aa92b-e097-4425-be8e-b73e5f7cc7a6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "25608782-3b9b-44cf-9159-5749eb286a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d0b7c79-8726-424d-b2e0-5801d27da3e3",
        "cursor": {
          "ref": "506a3268-6723-4679-8d7d-0ce6835c1a63",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b6756aeb-b8c2-438c-8615-e5f9724d2a9c"
        },
        "item": {
          "id": "1d0b7c79-8726-424d-b2e0-5801d27da3e3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "809ac0ba-a372-4771-9e9f-03ca46b06b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9840aa-dd90-4521-a3a7-2b06c23fdf93",
        "cursor": {
          "ref": "f25d7536-c207-41e8-b601-fe53cf440097",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2bc79a2d-7feb-40a1-aa72-ccd0a9ca6040"
        },
        "item": {
          "id": "8f9840aa-dd90-4521-a3a7-2b06c23fdf93",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "088b904d-67f5-480a-8823-1e4ef5725466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0e7700-8b94-418d-ac72-0b03d96991a3",
        "cursor": {
          "ref": "e2bad9cf-e0ed-46c9-bf66-a76a7b996c1a",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fb96bec9-27ec-48ff-8719-f1875a0270f5"
        },
        "item": {
          "id": "9f0e7700-8b94-418d-ac72-0b03d96991a3",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "88429a46-341a-480b-b12e-ac6203f8c03b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87dbaf26-f0b0-4564-bff0-0da4b8985ef0",
        "cursor": {
          "ref": "24347114-361b-4cbd-b4f2-67194eb52b2b",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d3476c03-8094-4512-a6aa-1621e439d626"
        },
        "item": {
          "id": "87dbaf26-f0b0-4564-bff0-0da4b8985ef0",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f3b7ee9c-decf-4a8f-9daa-213b2fd0cb02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af16e990-735f-45fa-ad73-8c2bf73dea50",
        "cursor": {
          "ref": "6c6bee7c-5616-41c0-8fc0-9914f6a12788",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e8f3ae9f-eeca-4089-8711-fdec12c074ee"
        },
        "item": {
          "id": "af16e990-735f-45fa-ad73-8c2bf73dea50",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "6072a135-c673-4437-8804-51334f3d1242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da87b3a-90f3-4587-8535-7fc62ebf43b9",
        "cursor": {
          "ref": "83cd9bcb-6571-47a6-8f25-38438cfeeecd",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "772aceb1-2175-4f41-a798-6d0cb9030ee9"
        },
        "item": {
          "id": "2da87b3a-90f3-4587-8535-7fc62ebf43b9",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "3c1665cb-710a-4b2a-8ea7-2f75ee934b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65428f0c-1c5d-4692-80ac-21b25cdcb5d5",
        "cursor": {
          "ref": "21e1cef6-251d-41bd-9f68-c0e9c64437ce",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3359ce5d-5624-401b-af9e-171da7999aee"
        },
        "item": {
          "id": "65428f0c-1c5d-4692-80ac-21b25cdcb5d5",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "9e241f11-90a7-4198-9672-4c1923e07211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "525e331e-a6d4-42f4-ad17-d6e8760a5766",
        "cursor": {
          "ref": "6a360721-28ef-42fa-8570-63e75e095e95",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "47fd1598-f41b-4ffe-8a5f-f3c5e6ce64f6"
        },
        "item": {
          "id": "525e331e-a6d4-42f4-ad17-d6e8760a5766",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "68ba7588-9812-4bf8-b347-ed165b9074d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0c407d-0130-4657-8489-6a589a8d824a",
        "cursor": {
          "ref": "f2928b23-0d29-4747-8b4f-36131f5921aa",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ab4992c4-8bb8-4203-8199-b35c4b5b3fc5"
        },
        "item": {
          "id": "fe0c407d-0130-4657-8489-6a589a8d824a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b1308daf-8090-442e-b2fa-b7b099826e8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b653fd4-4e3f-4e7d-ab20-9c0433a08b05",
        "cursor": {
          "ref": "f1634fc6-e04c-4b40-b58e-537b0dda7e58",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "af458a86-6ea4-4cae-8fcd-829e0e9477dc"
        },
        "item": {
          "id": "4b653fd4-4e3f-4e7d-ab20-9c0433a08b05",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "322142ab-6763-4598-bf18-0d6ee89885ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eeb61a5-900d-4c11-a4f7-b7b8e8467ba0",
        "cursor": {
          "ref": "d434fa03-a1a3-4f6a-952a-a652f3ea13ff",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "59c53158-bb8d-41f7-854e-d48c0db69e6a"
        },
        "item": {
          "id": "3eeb61a5-900d-4c11-a4f7-b7b8e8467ba0",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5da269ce-dbce-42ea-a65c-9286f23e49e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539aff14-34e6-4f40-b1ec-c2ba2049326f",
        "cursor": {
          "ref": "fdb03b96-ade6-4e46-98ba-396961182e57",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "bfb2dc38-2d75-4376-82d3-6cbd9ebad744"
        },
        "item": {
          "id": "539aff14-34e6-4f40-b1ec-c2ba2049326f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "dd941791-7d30-402f-9212-047949f2d8e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57993c2a-ae45-414a-a96a-3e195432fa70",
        "cursor": {
          "ref": "fbc16fd0-a7ea-49a4-9ba9-2dc1facf1b56",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2382dbad-7b90-4f2a-ae14-e6928027aaa2"
        },
        "item": {
          "id": "57993c2a-ae45-414a-a96a-3e195432fa70",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8ed886cf-9aa8-4db5-a20f-28209b9bf54d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361c81be-b519-43ea-9399-a98a4288d81c",
        "cursor": {
          "ref": "b1f07b96-1f4a-44ea-8678-16e5f0b23646",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5fccdac0-8df3-4493-8c10-431705c04d91"
        },
        "item": {
          "id": "361c81be-b519-43ea-9399-a98a4288d81c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9bbd999d-e3ed-4b56-b4c0-209ab7ba2c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d13a07-0ec4-43d8-8d4b-bd00e9a7b54f",
        "cursor": {
          "ref": "559a696d-e5d8-4470-8551-8c661f67fc05",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e4812aad-73c5-4575-b2c6-0007c177eff9"
        },
        "item": {
          "id": "47d13a07-0ec4-43d8-8d4b-bd00e9a7b54f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1824318e-de6c-47c3-b694-ec8c4a3c126c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "3e2b139b-3190-4662-9bd1-5544ed42ee34",
        "cursor": {
          "ref": "a55d648f-3d52-4f64-83c7-f684ec4545bf",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "90cfbd05-fccf-431a-a058-26c4e8711f8c"
        },
        "item": {
          "id": "3e2b139b-3190-4662-9bd1-5544ed42ee34",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f600ef7a-6ebd-4de2-b3fe-9a695e391009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce66e23-e43b-46b5-9e96-cc7077928da0",
        "cursor": {
          "ref": "f2fe6283-60c3-4184-bc3c-acbdd6e0a4a1",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0e98aca4-dd7d-4f3a-80ff-37dcd28513b5"
        },
        "item": {
          "id": "1ce66e23-e43b-46b5-9e96-cc7077928da0",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f872617f-f6d3-4398-80cf-c9554148ae1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc32f92a-dc19-461d-a077-ce6c73002aac",
        "cursor": {
          "ref": "0c098826-8a5e-49db-9ff6-a041d2ea2ee1",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "17041c94-e3d3-40d4-9489-19b0a90bbddc"
        },
        "item": {
          "id": "cc32f92a-dc19-461d-a077-ce6c73002aac",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3ae9d5e2-fc2e-43aa-9942-b32764b65ff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ee78ba-d4f0-48a8-8c30-47cf39cc5a74",
        "cursor": {
          "ref": "16630759-8327-4ecc-9581-a2ae96769254",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6747d740-ca0d-4093-a6fa-4cc02de3c90b"
        },
        "item": {
          "id": "77ee78ba-d4f0-48a8-8c30-47cf39cc5a74",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "945afa6d-0427-4194-a3eb-ca8287efa8fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "592a5478-8013-4116-9caa-00996c716578",
        "cursor": {
          "ref": "0713a3c3-2d25-4c5d-878b-d399af6f0e5d",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "799d4412-9b16-4e30-917c-9a1c482d7958"
        },
        "item": {
          "id": "592a5478-8013-4116-9caa-00996c716578",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f01cbbc9-8a74-4494-a7bd-a9aa83443e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5833fbc-23ae-42a5-87fe-bae032038514",
        "cursor": {
          "ref": "08bb7bef-72f7-42f3-913e-930bba7c5675",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "84e67e3d-8496-4627-90c2-e15d74c52902"
        },
        "item": {
          "id": "e5833fbc-23ae-42a5-87fe-bae032038514",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f51b8080-bcd0-4b82-83e6-ff07c3f907d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c56cdff5-8946-415a-bbb0-cf8d8f97791a",
        "cursor": {
          "ref": "7f426d72-24ea-4806-896c-8b093837184f",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "27eb6cd4-3c79-4978-b788-0e498f3ca7ca"
        },
        "item": {
          "id": "c56cdff5-8946-415a-bbb0-cf8d8f97791a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "13088b0c-0e79-43e3-a978-1b84c06ee86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10056aaf-579e-409a-b2bc-7253f8d2b72e",
        "cursor": {
          "ref": "a0e27ee2-efa3-40ee-9446-21c7b2d842f4",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "347165a2-7b58-4f21-ac81-c3b5694c90ab"
        },
        "item": {
          "id": "10056aaf-579e-409a-b2bc-7253f8d2b72e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a36ccb66-a764-422e-93c6-0c9070ddd4c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17420bee-6a3f-4927-91c5-4f15f1b8d37e",
        "cursor": {
          "ref": "d2f8c6f1-31a6-4fc9-a0d0-439fb213fd7f",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f1b83808-c12d-404b-b1cf-f8402ad0bc87"
        },
        "item": {
          "id": "17420bee-6a3f-4927-91c5-4f15f1b8d37e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e9ea144a-978f-49ed-a061-148ad3681d1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c7aa2b-a126-4a6c-85ee-2829aba72e0a",
        "cursor": {
          "ref": "6a636cc7-9d7f-47c2-a264-aa4fd632d9ac",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5d03095a-af9c-4e1c-9c05-6c461719c3e0"
        },
        "item": {
          "id": "47c7aa2b-a126-4a6c-85ee-2829aba72e0a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "dd2b1216-9787-44a8-bcab-8acd3e14fa2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b4abf5-90ed-4e68-8277-0183abf0d32e",
        "cursor": {
          "ref": "3881b208-dcbd-403e-baa4-48e9acd087b5",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e9ba854c-8f49-49c5-b9c0-eb5c42236f92"
        },
        "item": {
          "id": "19b4abf5-90ed-4e68-8277-0183abf0d32e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "90edea0c-9bc4-44da-895f-18470cfbba5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1746d89e-973c-4496-bdb7-9a6c9dfe8ee4",
        "cursor": {
          "ref": "05f84ff2-01e1-40a9-9267-88f547ebf242",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3b52e599-ba5b-43d5-ab09-6028869f718d"
        },
        "item": {
          "id": "1746d89e-973c-4496-bdb7-9a6c9dfe8ee4",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d42f9ef6-d144-4273-ac19-fe7ae9519c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e3f72c-f195-4775-b6ec-024fe03b2446",
        "cursor": {
          "ref": "a4a8f08e-d675-48f5-b373-d1e50f1b19c6",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6ca0fd88-a3f8-4031-8faa-552d222d99f5"
        },
        "item": {
          "id": "23e3f72c-f195-4775-b6ec-024fe03b2446",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c777b4b1-e4c1-4867-8ef5-8a43d6abd8cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f849fa95-c7f1-4b55-acac-df7eedec30a5",
        "cursor": {
          "ref": "f1985e11-6d8a-4cee-84bf-63907a737888",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "278c08c4-1966-4a8e-9335-be9f7d1cdd3e"
        },
        "item": {
          "id": "f849fa95-c7f1-4b55-acac-df7eedec30a5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5d0b9cd2-80a5-49c4-82f5-0bd83e7021af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0cd1b6-e6b4-4bc1-936a-889a5c967337",
        "cursor": {
          "ref": "32c88f2f-e98b-4a6c-a368-2be256fdd4bd",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "03de0673-b1fb-4ad2-86a1-730a7e58e73e"
        },
        "item": {
          "id": "ff0cd1b6-e6b4-4bc1-936a-889a5c967337",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b03813ea-c362-4e43-afce-f7006ba732d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "050d2284-9c57-4d5f-aa0a-2507be334ae9",
        "cursor": {
          "ref": "26079242-14b2-409e-b13c-0a266e031b61",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "66eb4d4b-569f-43ea-833d-b3b5f5dd628f"
        },
        "item": {
          "id": "050d2284-9c57-4d5f-aa0a-2507be334ae9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "18ede58e-665a-438a-bc5f-b13186960ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b30606e-93c9-4389-b20c-b33b92b653b7",
        "cursor": {
          "ref": "ab0b8941-8372-4401-9aae-608e7126e3f9",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4ab31fd7-9279-4d31-81aa-9e77be5f699e"
        },
        "item": {
          "id": "7b30606e-93c9-4389-b20c-b33b92b653b7",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "733d457f-c418-424c-b8ef-e2a07966a104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "888a9320-9597-49d1-ba61-abff0cbb16d5",
        "cursor": {
          "ref": "3610f715-903d-4d5e-94d4-3e7c1178de2c",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "15d7ad88-e963-462d-b955-ac91140febdd"
        },
        "item": {
          "id": "888a9320-9597-49d1-ba61-abff0cbb16d5",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b389adcb-488d-4ae9-a692-4e2230aa99d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952c0541-24fc-4126-bf79-c7d98b900a02",
        "cursor": {
          "ref": "e5af6f33-6441-4a2f-8491-1276b69e0d06",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "558a725d-09ff-4e2d-ac4b-ad649ee67857"
        },
        "item": {
          "id": "952c0541-24fc-4126-bf79-c7d98b900a02",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cfacf68a-eca7-4983-8822-5a8c49caedba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3bbe7f-8703-4976-a1ff-36f66271b318",
        "cursor": {
          "ref": "c47e5b4f-a2b3-43cf-ab65-294e0b092c8f",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a3796e33-a9f6-40e3-bb3a-f5620310c862"
        },
        "item": {
          "id": "1c3bbe7f-8703-4976-a1ff-36f66271b318",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9960087e-52e7-4ae6-b759-c7b6615dc4dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc267fb5-6e23-472e-8c70-56dec0bcbc5c",
        "cursor": {
          "ref": "53e2a47e-c578-4675-9fe9-196c768bf5ba",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f2fb51a4-1609-4fee-84b5-d96df190d7d7"
        },
        "item": {
          "id": "bc267fb5-6e23-472e-8c70-56dec0bcbc5c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7425510a-0048-46aa-8445-d3bce88c01aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "659b5ccd-bd70-4e33-9422-c8d01e96900e",
        "cursor": {
          "ref": "4c16f741-6529-4c43-a9d1-cbee0cc11558",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0556ea47-c380-401b-bed7-5a4e6953533c"
        },
        "item": {
          "id": "659b5ccd-bd70-4e33-9422-c8d01e96900e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b799d3f9-1755-44e0-a8ea-260ad4f1391b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed448cb4-3c3b-4dfc-b7f8-8654b1017013",
        "cursor": {
          "ref": "5a5f8d47-99f9-4ff1-84c2-a02d9ca5cc01",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "85565329-50c0-47fa-83d0-2ee0dc10608c"
        },
        "item": {
          "id": "ed448cb4-3c3b-4dfc-b7f8-8654b1017013",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "12b70453-2c89-4c5f-a696-029440694054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88702b71-e626-4732-aaa7-1fb9d84b9bf5",
        "cursor": {
          "ref": "48199d36-b6b8-4399-852d-68addb8aeed6",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "73288247-87a7-4763-96e1-8387166c5ea5"
        },
        "item": {
          "id": "88702b71-e626-4732-aaa7-1fb9d84b9bf5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "586b38a0-87a7-4749-a401-310a34a0ec34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc963a2-924a-43ef-bad7-977fb8885121",
        "cursor": {
          "ref": "033daedf-a6fe-41e9-8fec-41c914ee003a",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "93d14cc6-efdd-40d1-93b2-485b5e2b050e"
        },
        "item": {
          "id": "6dc963a2-924a-43ef-bad7-977fb8885121",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f04f62ff-b7c4-4dff-a752-d72699699667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6eed72-f864-42b1-b296-5388f2f071c5",
        "cursor": {
          "ref": "7266d735-adb9-4704-b981-a75fa1c5fbcf",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "72966021-be44-4ce2-bf80-5fd52adf0f86"
        },
        "item": {
          "id": "ee6eed72-f864-42b1-b296-5388f2f071c5",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4e3579a0-4727-4a83-9aa5-7d53194401fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d14983-c512-4375-8cf2-07e16832843f",
        "cursor": {
          "ref": "ea2a79ef-ad1f-4f09-8f7c-d9d62a944581",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "39bd5be0-c8d4-4ba4-b6cb-db3995bc9cf6"
        },
        "item": {
          "id": "98d14983-c512-4375-8cf2-07e16832843f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "74965eed-b25c-4428-a0bd-3f1497b16b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d76cfa-9992-498f-a6a6-2ae37547abb9",
        "cursor": {
          "ref": "5903be2a-92ec-4efd-b929-1d5144961448",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "cad584da-7b40-4f3e-b6ee-0f0ce72a14a2"
        },
        "item": {
          "id": "b9d76cfa-9992-498f-a6a6-2ae37547abb9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "32e6d8ae-9d63-4628-a8b9-62588c54967d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd318842-b88f-463d-a973-f5a8226a5189",
        "cursor": {
          "ref": "5264ecb4-fc4e-48eb-b41a-4fc544e9e5c8",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5833894c-4ebc-4d20-9c5f-291d148ce929"
        },
        "item": {
          "id": "cd318842-b88f-463d-a973-f5a8226a5189",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9d0c57a8-0623-4dfe-a543-d9a7c543ad91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8714fa73-0f14-463c-9d02-530920f1cc53",
        "cursor": {
          "ref": "2038e045-2411-4247-80ee-5e41a555f6ee",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6bd395fd-6f7c-49e7-ba3c-1e5a2125a2c1"
        },
        "item": {
          "id": "8714fa73-0f14-463c-9d02-530920f1cc53",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d8ce7ebb-1239-4c43-8ff4-3d86c605ba8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "e2288004-857f-4bdc-82ba-3418ce4e2d1b",
        "cursor": {
          "ref": "c5bf4620-dbae-4ad2-b944-989ce882c29f",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "cecb2103-2583-4c88-9fc7-01b2267c59f2"
        },
        "item": {
          "id": "e2288004-857f-4bdc-82ba-3418ce4e2d1b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "af3f27c6-064f-4d39-8d2c-0ad7957f69da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "e747b9c4-6873-4893-83ce-cfbee27c886b",
        "cursor": {
          "ref": "557707a7-676d-4be8-968e-ef97a64d3b31",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6d050d03-daef-4d06-8b65-0228ac8282d4"
        },
        "item": {
          "id": "e747b9c4-6873-4893-83ce-cfbee27c886b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "96d56ef9-48c7-447b-a0c0-30e2ca02a443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "42ed802b-cd3d-4283-b98a-1258f7ba13c7",
        "cursor": {
          "ref": "987fd1ad-a959-4c69-ac67-f5917df2b010",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4c9a00f8-fa61-4c09-8dcb-fb7f84454640"
        },
        "item": {
          "id": "42ed802b-cd3d-4283-b98a-1258f7ba13c7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c4638a91-9a40-480c-a850-19332d3364ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ca13fc-c3e8-4336-8097-562dc42be09c",
        "cursor": {
          "ref": "bdc1f5b6-6f51-49ab-bb0d-719b6d07c88a",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6f4c182e-04d7-4c00-a054-4522651e196a"
        },
        "item": {
          "id": "82ca13fc-c3e8-4336-8097-562dc42be09c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c2abe225-9b26-477b-a3a4-03b46ba58757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "780c55fb-9225-431d-87ae-7513b756c050",
        "cursor": {
          "ref": "731b2109-5cad-4f30-8dd1-eac7d5815160",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1c0f41d7-a827-4928-880c-a67193f6ee7c"
        },
        "item": {
          "id": "780c55fb-9225-431d-87ae-7513b756c050",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6eb891de-5cb2-4117-bb61-e4d25ef1ecde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 964,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "0fc12173-2229-400d-8553-39649e086e3c",
        "cursor": {
          "ref": "c2e961d0-b177-4dba-be11-22cc38d7c2ff",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "dacc62e9-c7ec-48f2-a877-a80c00bd8d80"
        },
        "item": {
          "id": "0fc12173-2229-400d-8553-39649e086e3c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9b122ef3-1799-4094-a2a3-29f7801fcb55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "7181255e-db4d-4b8b-9edd-3026a895ab65",
        "cursor": {
          "ref": "010d332b-e2ce-4232-aea4-bdc775773288",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0194bf98-5b9a-48dc-aaee-9eebdb257a82"
        },
        "item": {
          "id": "7181255e-db4d-4b8b-9edd-3026a895ab65",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "22e899a0-be62-4c1d-a4b5-74cfbdc104b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "3f4787ce-b35a-49c0-8f16-0074230df64f",
        "cursor": {
          "ref": "b2aa88e6-c6a0-4133-9fe7-83f3dfac344c",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "10a153ad-ba34-4f2e-9335-07f6333f3cd7"
        },
        "item": {
          "id": "3f4787ce-b35a-49c0-8f16-0074230df64f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "91e15929-ee36-4dce-a1bb-7e845c2839bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "d8a14922-36a0-4fac-a55f-134f1e1f5075",
        "cursor": {
          "ref": "90814458-3622-4abe-b50d-18c0606b53ac",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f92448b8-9d84-4789-bc0b-515b7649732e"
        },
        "item": {
          "id": "d8a14922-36a0-4fac-a55f-134f1e1f5075",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0eb9a742-0371-4ac6-a201-044c7c131752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "68de081f-1f18-47b1-9751-c94236f314cf",
        "cursor": {
          "ref": "33e98897-b45f-4af6-89a0-638518537872",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "09233e96-5bda-4cc1-a8b0-4ece4eb61b3d"
        },
        "item": {
          "id": "68de081f-1f18-47b1-9751-c94236f314cf",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ba6a73e2-d899-4563-a7c7-f08c27f638bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8566ca1-18d3-4b4d-b9d2-ba9d7cb2e404",
        "cursor": {
          "ref": "8332b9fa-57a9-41b6-bad2-d3e3c981a640",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5909ff80-5209-465b-b75b-0777450f4471"
        },
        "item": {
          "id": "f8566ca1-18d3-4b4d-b9d2-ba9d7cb2e404",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ee46eae0-f0ad-4d15-b693-2fa816d0086f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a96260e-cc6c-4e25-ae24-ba2bec4485b1",
        "cursor": {
          "ref": "2b588b00-cc7c-40f8-a04d-aacc15871b4b",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4a51eba8-d9d4-4f95-84c9-5bb035ac6604"
        },
        "item": {
          "id": "5a96260e-cc6c-4e25-ae24-ba2bec4485b1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "76ef9ebf-0b1b-4eb1-a56c-55b73a2d01c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95504143-66e7-442a-8192-fa91a7327fb7",
        "cursor": {
          "ref": "1dd434a0-a927-4711-a96d-15d2516fa7c6",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "608e6d36-d09d-49a5-a607-89d6d325d23f"
        },
        "item": {
          "id": "95504143-66e7-442a-8192-fa91a7327fb7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f8e90149-a39b-449d-bc0e-340186ef39da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b722fc-f1d9-4356-af61-ed0e26b85b8f",
        "cursor": {
          "ref": "1c9efd63-ead8-4698-9e92-17b96b4bda8a",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0e38bae7-a582-4750-b83e-9635349211af"
        },
        "item": {
          "id": "e9b722fc-f1d9-4356-af61-ed0e26b85b8f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "00c922d3-c794-4fbe-bfe5-624281cb87b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8396fee2-203b-4187-9e44-69989ec2f625",
        "cursor": {
          "ref": "1260381b-c237-45b0-bcb0-369a18db26bb",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c9a3c68f-95d5-4a64-8302-9de4d67635e3"
        },
        "item": {
          "id": "8396fee2-203b-4187-9e44-69989ec2f625",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "09b0f855-e374-4d7c-b103-3a15f8012056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec285c9-7e69-4de7-badb-cc479e9f4ce2",
        "cursor": {
          "ref": "2c5b99f6-3aaf-49a5-a3af-33a5e2085039",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "2ff55d2f-a56e-46ee-96ed-36acbdc87ab4"
        },
        "item": {
          "id": "8ec285c9-7e69-4de7-badb-cc479e9f4ce2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d840f1b3-8c8c-4ba4-9dbb-bbf590d1a0a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e224b214-623e-4632-8393-f26b1372441e",
        "cursor": {
          "ref": "caab9552-2be8-4679-938a-6860fddd41d7",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "75bcad94-c735-439b-b7a9-3e5f6ab50091"
        },
        "item": {
          "id": "e224b214-623e-4632-8393-f26b1372441e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "77e71889-a7f0-415e-9c75-49169e2aadd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa145a6-a37e-4c08-8b1d-0d9e5b114e2d",
        "cursor": {
          "ref": "01badfd7-818c-4ef1-b8d6-2d6e9dbf23f3",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a0ac5f72-6ff1-41d9-81da-0f54ea91807d"
        },
        "item": {
          "id": "9fa145a6-a37e-4c08-8b1d-0d9e5b114e2d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4de643ac-327f-42c6-8ce1-719e477e30a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1576a0-d79f-4f7c-abfd-f07da2459713",
        "cursor": {
          "ref": "dd3b6713-5076-4a70-9e7c-7a4714643a97",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f3d281d2-cdf6-441f-bd18-a74c94616af3"
        },
        "item": {
          "id": "fe1576a0-d79f-4f7c-abfd-f07da2459713",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7e8236d1-ab95-468a-8bf8-bdfa1181c302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01592eb6-fc34-4d6a-a1aa-8090f262cef7",
        "cursor": {
          "ref": "5d3b4de6-a63a-425c-a84b-9c2026a8b017",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a4f8df43-e993-49d3-b2cf-5ec4e6976435"
        },
        "item": {
          "id": "01592eb6-fc34-4d6a-a1aa-8090f262cef7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ca3a5b28-a514-4abf-95cd-1eec22aa7bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d69f71c6-5ce4-426a-b395-0d0ffe3fdc7a",
        "cursor": {
          "ref": "e0ce2615-80e9-4901-b0f0-ad885e4a96fa",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1a4279e1-1a33-4bd5-b35a-70e64ba4447a"
        },
        "item": {
          "id": "d69f71c6-5ce4-426a-b395-0d0ffe3fdc7a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "04a2998c-8c2b-444b-ae84-2273e4bfcc10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b8717f5-c25f-4b98-90d3-0eb40e3b644d",
        "cursor": {
          "ref": "0ddce718-9ff9-4ce9-96c8-4367c6c9257b",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "06a5441b-3922-4660-afec-beaf5ffe1ff7"
        },
        "item": {
          "id": "3b8717f5-c25f-4b98-90d3-0eb40e3b644d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5cb81574-592f-44ae-aca0-0ab17b86eda6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21be0b20-be58-4293-a60f-ef80e368f2ba",
        "cursor": {
          "ref": "0b3470e2-2a99-48f7-bfbf-173be18c268f",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "417b6f54-e8d1-439f-bdd4-8703d8942269"
        },
        "item": {
          "id": "21be0b20-be58-4293-a60f-ef80e368f2ba",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d9f841bc-e331-48c9-9260-682cb2586d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 573,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "399fca38-afa0-4be2-bff7-5750c489a639",
        "cursor": {
          "ref": "736c6958-0e13-4c4d-a8da-95764213931e",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "686d296a-4c21-4f2d-b74f-978a4be4c232"
        },
        "item": {
          "id": "399fca38-afa0-4be2-bff7-5750c489a639",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ed68b8f6-69d4-4997-bc9f-a690ba42f67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 587,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "1e6bfb8d-347d-42ea-8733-b44051fc52dc",
        "cursor": {
          "ref": "65183a37-9198-4f47-8b21-3da960920259",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "28bd2309-cdcb-4947-8bb7-3bbdf0ab27ea"
        },
        "item": {
          "id": "1e6bfb8d-347d-42ea-8733-b44051fc52dc",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "00fe11c5-20d3-4839-988a-78a1b470dc9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "6b189233-7090-4f1c-ba9c-79a481a97dc3",
        "cursor": {
          "ref": "401c8cea-a458-429a-8380-9a80fa2dfaaa",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9f1b5aa3-3586-417f-a851-9001bb2e5755"
        },
        "item": {
          "id": "6b189233-7090-4f1c-ba9c-79a481a97dc3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b810700d-8e30-4416-93f5-8a635e4a89a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 596,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "a9d5d84f-17f5-4ec9-9192-2efc635c1a5a",
        "cursor": {
          "ref": "678cdbfa-47a8-4874-abf0-6e94a6d2ace1",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "52b04231-9b0a-4b6e-a6a4-cface2a43448"
        },
        "item": {
          "id": "a9d5d84f-17f5-4ec9-9192-2efc635c1a5a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "717fc561-1bec-4143-a21a-890162558e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c0eb03ae-3d5f-4797-88c5-eafe79459787",
        "cursor": {
          "ref": "dfd8acff-227f-40ed-aea5-26eb652a915e",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "709d987d-4745-47d7-b8ac-aa2341c7fe72"
        },
        "item": {
          "id": "c0eb03ae-3d5f-4797-88c5-eafe79459787",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "39c2afdd-a002-4574-87ef-186186412088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f2c132-2907-4e8f-b309-b87b03229a2b",
        "cursor": {
          "ref": "249fdadd-fc0d-407d-af90-1c766913f7b6",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2f688ae6-760a-4fcb-a3a9-eb7d440f4163"
        },
        "item": {
          "id": "e1f2c132-2907-4e8f-b309-b87b03229a2b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c7ae67c0-70e5-4dba-ac9b-ede158da1e99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1834a716-90de-4f43-add8-ccc441c8d358",
        "cursor": {
          "ref": "cbe7eda1-5f93-4c13-9f5b-ecb9aa33f6d0",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1396079f-c33e-4a8a-ba97-65407817e92f"
        },
        "item": {
          "id": "1834a716-90de-4f43-add8-ccc441c8d358",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b0a38f1a-1ece-4e12-a250-9021322a5a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c338a879-5f5f-48f1-8698-f8f7a3ab97f5",
        "cursor": {
          "ref": "1ea9c74f-0ed0-4bd0-a7c3-613bbbeb88df",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2d626ebd-089a-4aa4-a08c-533f80335574"
        },
        "item": {
          "id": "c338a879-5f5f-48f1-8698-f8f7a3ab97f5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "26d7e9db-7ad0-4536-9631-1943d147a76c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee10133f-1944-4e37-b990-6aa8b06dfbeb",
        "cursor": {
          "ref": "e9e0c63e-6c4d-4570-8cdc-00affc0cca3d",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d43176c5-8ae7-4b1e-b288-1687f8587117"
        },
        "item": {
          "id": "ee10133f-1944-4e37-b990-6aa8b06dfbeb",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e6f0795f-bef3-4a12-99d6-04de673bc906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20d0dbe-4636-4f93-b806-c3b19edf7571",
        "cursor": {
          "ref": "d8d359c4-b38c-45f8-80ed-68f5e96e4792",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c58012d0-adf0-4fe9-8a78-9654bf0c9c49"
        },
        "item": {
          "id": "a20d0dbe-4636-4f93-b806-c3b19edf7571",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "600a8e5a-71c8-43f8-bc75-d24bf8b46012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8edc92c-d571-4df5-8b0c-f52556e472ed",
        "cursor": {
          "ref": "79539761-9bb2-4ba3-889d-7392e060a768",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8dd958f9-aac6-4164-a7d2-b7b8ef5dfbfc"
        },
        "item": {
          "id": "e8edc92c-d571-4df5-8b0c-f52556e472ed",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e6fcd1ad-c676-4db1-b7b6-f1139bff1b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e09daed-7bee-4968-b464-622e5e4b8694",
        "cursor": {
          "ref": "5300dd36-05b7-4272-988b-fddc0cec1cca",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cf7f1b78-11d3-45d6-a24c-facbc4dcf2dc"
        },
        "item": {
          "id": "2e09daed-7bee-4968-b464-622e5e4b8694",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8e4d1710-d432-4349-b497-b8449b40693e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb4160f-4a45-45db-9b72-b2c7139e7b67",
        "cursor": {
          "ref": "180cac1e-3819-4e07-8122-61e5cf58b11a",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c70d6286-e323-46f8-93a8-d9dff1e4ea73"
        },
        "item": {
          "id": "0eb4160f-4a45-45db-9b72-b2c7139e7b67",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2a0a8c90-5bfc-4733-a190-315fb98221ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "790ab26d-8c36-46a7-a7e2-892065e38e60",
        "cursor": {
          "ref": "4d8c7942-b458-474f-adfa-eca11273d4fa",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "6505cc7c-06e1-44c5-93b7-550c19ffe3a3"
        },
        "item": {
          "id": "790ab26d-8c36-46a7-a7e2-892065e38e60",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4dda91ca-da2c-4ffd-aaec-2dce7f54aa86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4680c74b-b7b7-4f46-99ac-9560be112660",
        "cursor": {
          "ref": "10e899f0-8217-4d3e-946c-02c07233dedf",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e74ae015-d15b-4a32-bfc9-c2f05a0179d2"
        },
        "item": {
          "id": "4680c74b-b7b7-4f46-99ac-9560be112660",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5ee63827-844f-4e99-ad0a-b91ed85e2e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc6acb9-a706-4f6e-a520-8a0a2008183b",
        "cursor": {
          "ref": "5d741a5f-717f-4932-bdee-ea159de68fff",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "968b2109-2ebe-4a39-b1dc-0d403d09a812"
        },
        "item": {
          "id": "8bc6acb9-a706-4f6e-a520-8a0a2008183b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "eea16fc4-dde6-47bc-a570-9d743fd46a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524d22f3-4bc2-46a8-bd95-84d56807eeee",
        "cursor": {
          "ref": "8b0c65fd-d11f-4ad7-8afd-c638fdd1b128",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "a6a4266c-be17-45b8-9083-a3075a04b892"
        },
        "item": {
          "id": "524d22f3-4bc2-46a8-bd95-84d56807eeee",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7365c7a9-0a59-4105-9fb5-7cb8bd86b47b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ce33b4-67df-492a-a572-42c326ca73a5",
        "cursor": {
          "ref": "c25150cc-9e1d-4259-a8db-2ede5e967e60",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "06de7950-5868-4ffc-b188-dd98a0886831"
        },
        "item": {
          "id": "36ce33b4-67df-492a-a572-42c326ca73a5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f5bff0d9-8d77-42a4-9399-07be237a75ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c413bbea-81ea-4e16-9696-92daa1cb2a46",
        "cursor": {
          "ref": "3bfe8521-da96-4cb4-9480-7f2a6f6b677a",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "c8280bf4-4f7c-4bfd-bcf7-885bd10e29c4"
        },
        "item": {
          "id": "c413bbea-81ea-4e16-9696-92daa1cb2a46",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e6786a41-01ed-447d-90ab-6d5a40064b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af8bbe5-4392-4b82-abf0-46efd57123d8",
        "cursor": {
          "ref": "7fee9ee7-092b-4c75-998b-55f161a3e465",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "e4677cec-3918-49bb-948f-344bd5dea0a4"
        },
        "item": {
          "id": "1af8bbe5-4392-4b82-abf0-46efd57123d8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e6515219-c4e0-47d7-ab67-d05eca7d1af2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d8f9a3-e349-4122-926f-5ab23c71ef37",
        "cursor": {
          "ref": "0cf6e4ee-66be-4adb-8903-834c02c13ac0",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "0b1c4eb5-63b5-470c-b551-8df46feb24cc"
        },
        "item": {
          "id": "78d8f9a3-e349-4122-926f-5ab23c71ef37",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8911cdf5-e604-4360-b8d4-9c6a9cbd9106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a45ee77d-7c0b-4704-b5db-fd0a7995aa21",
        "cursor": {
          "ref": "e12c1061-2480-4059-9ccd-fde3325c9b0d",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ec146dd8-e7df-49b0-87cf-3edf7cee3afe"
        },
        "item": {
          "id": "a45ee77d-7c0b-4704-b5db-fd0a7995aa21",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "05c937fa-564d-43a4-bdba-0ee19acd5a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb494c7-808c-4db5-9f8d-89889a352e71",
        "cursor": {
          "ref": "84ad9609-0b87-45de-a693-203828c605ff",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "75b07da4-8ad7-4f9a-b5ac-8b2f087f5b31"
        },
        "item": {
          "id": "ebb494c7-808c-4db5-9f8d-89889a352e71",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "30a42e0c-ca3f-4d44-ab39-d0400f6108ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50a4f69-bfa8-469f-84a2-16af88ca4008",
        "cursor": {
          "ref": "2810f20a-9bb6-48f4-bb28-c225b5ada895",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "00a08847-e3f7-44c9-a613-62d17cf2d421"
        },
        "item": {
          "id": "a50a4f69-bfa8-469f-84a2-16af88ca4008",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "700d9690-33e3-47a4-a80c-41ba0bdb5728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f7a1b3-f34b-49cf-8527-9c8a4f6257dd",
        "cursor": {
          "ref": "5f31db6b-2ff8-4a91-8bba-16836ff5a8c9",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "d03341b8-f0bb-43a3-84d0-1ffee8062471"
        },
        "item": {
          "id": "55f7a1b3-f34b-49cf-8527-9c8a4f6257dd",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "74703fc6-6596-4f1b-b483-816957fd102e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ceeddd-b311-4c8b-b211-73dc2a07bc38",
        "cursor": {
          "ref": "0e210dff-6711-4496-bc46-a57913de6567",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "6d387b9b-4a66-4b8e-80bc-7c170adb5538"
        },
        "item": {
          "id": "77ceeddd-b311-4c8b-b211-73dc2a07bc38",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "dd22105d-7255-4c1c-afdc-6a3c505cc3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b1bde9-88c2-4248-b155-68231581b4d2",
        "cursor": {
          "ref": "ded4b8e1-2947-44d2-8906-7fac3c0b5aea",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "bb538da1-4671-4d4d-9e49-ec7ab241972c"
        },
        "item": {
          "id": "d2b1bde9-88c2-4248-b155-68231581b4d2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b7527c7b-ce3e-4f8d-97ef-a90ec600cb21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be68b2b0-04d0-42dc-9e24-a14508cc7260",
        "cursor": {
          "ref": "aa996ea3-65c8-4237-94fe-919162d86b18",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "489b52c8-a49e-4e2d-9862-d8a090552fe8"
        },
        "item": {
          "id": "be68b2b0-04d0-42dc-9e24-a14508cc7260",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b9076398-48c0-43dc-b60e-6e4d2b932714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045d1c6a-cbd7-44a1-b2d6-000dcdcc8970",
        "cursor": {
          "ref": "3e2ee910-05f3-475f-ba5b-2f1dfdd95583",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "58eec423-fbfc-46b9-b37b-dc4ff3875a0d"
        },
        "item": {
          "id": "045d1c6a-cbd7-44a1-b2d6-000dcdcc8970",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9fdf9096-a7c3-4899-9703-8289ee532494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692781e7-8f0f-4591-9e24-df53007058c6",
        "cursor": {
          "ref": "90259601-3d50-4c3d-9596-918b12caee08",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "be6977e8-298c-42f5-ba1d-59aa28d047ff"
        },
        "item": {
          "id": "692781e7-8f0f-4591-9e24-df53007058c6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "64971167-7bc1-4b9c-b16e-0fe28f80b415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50e0203-2137-457c-9fce-3ff90f888376",
        "cursor": {
          "ref": "55c00aac-1ef5-42c6-838c-afd9dc2354dd",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "1cb005bc-4ceb-4763-94f6-1c10bb2da742"
        },
        "item": {
          "id": "a50e0203-2137-457c-9fce-3ff90f888376",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a357cb94-5acd-46a5-8692-109cebe4290b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01e230f-0425-46e1-b0e1-ed67a170652d",
        "cursor": {
          "ref": "7b193290-22db-42b8-81e7-8e255f7cb244",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "433b6b86-ce61-4888-9e67-71abe0459a60"
        },
        "item": {
          "id": "c01e230f-0425-46e1-b0e1-ed67a170652d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f620718d-ad3d-4c59-bd63-fdb55c38e765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcbdb9a1-17cf-4c2b-87d4-847ce06e6b22",
        "cursor": {
          "ref": "76ec6cde-5b33-450f-b361-f51ece058d61",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "c4fbfca0-70c0-4cd8-9d5d-ea6956ac64fc"
        },
        "item": {
          "id": "fcbdb9a1-17cf-4c2b-87d4-847ce06e6b22",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ef4e002e-aad6-44cf-aa53-547383ac0580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e1076ff-8308-4c20-b071-ec5f837337f2",
        "cursor": {
          "ref": "e5ef492e-9f95-4e70-80db-f991adc1a62c",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "d078b97f-b39f-46d6-bf00-a3b35ed17703"
        },
        "item": {
          "id": "5e1076ff-8308-4c20-b071-ec5f837337f2",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "eb9aa48b-d82e-4220-b00b-e2d97fbbc90a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22632c7f-06f1-4210-9a3d-df85cf86f1a1",
        "cursor": {
          "ref": "17da8c22-49f2-4d2c-a071-8209ea855b51",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "4689c450-959c-45e0-b667-4f3652a3f760"
        },
        "item": {
          "id": "22632c7f-06f1-4210-9a3d-df85cf86f1a1",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f3a4bcac-9e88-4f57-9a28-01068dc37b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc80cc8c-059b-4cbe-b24b-d4beff38053e",
        "cursor": {
          "ref": "4c5af234-093b-4e77-8545-05aa1cc86e2c",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "8427b6a3-a18c-4b7d-be10-faeab13c42e8"
        },
        "item": {
          "id": "bc80cc8c-059b-4cbe-b24b-d4beff38053e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c884ec19-1d0e-4b68-a77c-61fb46bae99f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d5ce9e1-d169-4053-867c-79186b3c02fc",
        "cursor": {
          "ref": "a13ce826-4d58-48dc-8ea4-ae2ec8e9d1d6",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "131ac356-59a2-4d97-ac3a-31ab066f553e"
        },
        "item": {
          "id": "7d5ce9e1-d169-4053-867c-79186b3c02fc",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "724f435f-12f3-4f6d-9d20-88e6261b805a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912cb009-d2d7-440d-9e83-a8b52811f0c8",
        "cursor": {
          "ref": "ac60f0c3-9023-4baf-a3fd-7c797a73e62c",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "c401e95e-c1a9-403c-8440-753d76c529a7"
        },
        "item": {
          "id": "912cb009-d2d7-440d-9e83-a8b52811f0c8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9446e847-4242-42d9-9843-d4dc08a17fc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d21d8b00-26f6-45fc-baac-a75ded2c15a9",
        "cursor": {
          "ref": "04884394-097d-4114-981d-7310a5ade379",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "c8f8f139-8014-46c0-b2ba-5164bf95967f"
        },
        "item": {
          "id": "d21d8b00-26f6-45fc-baac-a75ded2c15a9",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2cd480ac-e3c7-466e-9ef4-5784734c714a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c3d76f-3c39-48dc-9596-b7915918156f",
        "cursor": {
          "ref": "77eb9829-3147-419f-aeaf-c11006def562",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "230fb53b-4050-4597-8ab1-3aa021887c52"
        },
        "item": {
          "id": "f0c3d76f-3c39-48dc-9596-b7915918156f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7cbc5400-3bcb-465a-9333-7df74f051bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b70d5ca-2833-472d-9f55-04d8255b7235",
        "cursor": {
          "ref": "aab8e24f-c9db-4241-982f-ca08c5f0b466",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "8f70fdac-4ac1-4841-b69e-ede2e2d5703c"
        },
        "item": {
          "id": "0b70d5ca-2833-472d-9f55-04d8255b7235",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5d532f09-065b-4228-905e-bfe69b21732f",
          "status": "OK",
          "code": 200,
          "responseTime": 632,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "34505328-60f0-49cc-9a3e-150b4a7bbacd",
        "cursor": {
          "ref": "761c903a-a6aa-45f3-a165-faae02a8cb85",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ba70ca89-a442-4497-b7a3-3cda53ac10fd"
        },
        "item": {
          "id": "34505328-60f0-49cc-9a3e-150b4a7bbacd",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "fe50a857-e35a-4602-b6d0-d9ec0ed16e1d",
          "status": "OK",
          "code": 200,
          "responseTime": 637,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae0d198-2e27-476c-85ad-f1f4dffcbb8f",
        "cursor": {
          "ref": "71c826ff-ab0a-4ec6-b25f-9d645217b09f",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "1910e7d0-05a7-4761-80b9-dc2f12006bad"
        },
        "item": {
          "id": "9ae0d198-2e27-476c-85ad-f1f4dffcbb8f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e5378f7b-faa0-4766-9068-214638f6036f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 92,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae0d198-2e27-476c-85ad-f1f4dffcbb8f",
        "cursor": {
          "ref": "71c826ff-ab0a-4ec6-b25f-9d645217b09f",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "1910e7d0-05a7-4761-80b9-dc2f12006bad"
        },
        "item": {
          "id": "9ae0d198-2e27-476c-85ad-f1f4dffcbb8f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e5378f7b-faa0-4766-9068-214638f6036f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 92,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cdee9c3-4351-4e8d-bc4e-4755a1b571a8",
        "cursor": {
          "ref": "05c53463-f8fa-4b04-b571-03c6349a6de2",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "42c4ae5b-8e3e-409b-a1f6-638e56c7f2ab"
        },
        "item": {
          "id": "7cdee9c3-4351-4e8d-bc4e-4755a1b571a8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "40fbbde2-da60-4315-8d98-c7becb44925f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84b4a19-19fc-47a2-8854-ef06f040c461",
        "cursor": {
          "ref": "2bac0518-a50c-421a-b1b8-ba8c6591213c",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "c4652da0-09ea-4fed-82c0-e09729f18521"
        },
        "item": {
          "id": "d84b4a19-19fc-47a2-8854-ef06f040c461",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "85e8a5c5-58a8-4bf6-94ce-3f4b2e6fa2e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}