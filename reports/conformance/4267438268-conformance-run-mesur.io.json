{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f10bffa9-3c91-47bd-b07a-d4d9295f10a9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e4acdad3-3f2f-4516-8cd7-06bc1a908280",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c1663ef0-b178-4aa2-a9d0-d123c4ac041d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1c48a497-59dc-4c12-a65b-40f6adc30c12"
                }
              }
            ]
          },
          {
            "id": "103721b4-eb09-4371-8488-a0a013e9b366",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0619b5b4-dda8-49f4-a12d-5397ef7645d0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4fe1df32-549e-43f2-9e98-6cb7dd51025d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4c085ea6-a8d7-4901-9bcb-6cd07dbcd313",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "88f527d8-3a02-4f3b-8eb3-3ad026bbee36",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e50f484b-991b-4087-b654-1ec5b42ae416",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "474495e5-1c64-4721-b0d5-5950b3dc3a55",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9666c824-471c-40bb-8f6e-dc664c48954c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1230abbf-c6bb-4db9-b625-cd8495ee024e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "60acf0e6-7788-4270-9afd-51123ddad021"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e25ba277-2c4b-40c3-93d6-14c117708fb4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "86d48baa-60c5-430a-9a8a-ad97ea0eeddd"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1905203-e529-43db-88d1-9c9255f13be2",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "cfdb5c52-245c-4577-9ac8-a3d027004f49"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2c1fd8e-dffc-4ec1-95ee-a4ba957805e2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7143aa22-8389-4538-b1cc-ca2c6f7e717d"
            }
          }
        ]
      },
      {
        "id": "834afbb4-6b6d-4ea6-9d19-8f8f2fcb8988",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2d367983-c988-4d4e-88d9-5c3d96d7f8d6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b1d9680-9b44-41f1-bf0d-9e63f30e1bc4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "898c5976-3379-44c0-9634-5df4fce707e2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d4e0d5-0636-464d-9c32-ab3e179797c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad9d9b75-36d7-4df8-b596-0043777fdd64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf74f2a-672f-4139-b8ed-ac520d55c2c1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccfe74de-a4fc-4bd3-bc62-7e4ecf7888ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c30bd0cb-0611-4e22-b10b-5c299530d03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959413dc-ebc2-41a1-a81c-55c0058cb713",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb01d6d6-ff1b-4a7a-a4bd-315855bee559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76d48606-9ecb-401f-b271-a3cb2e2891f3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1768ecb8-a9dd-4147-be20-20816b6bc20f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "05c75d86-3ebe-4a53-bea4-e90d1c327765",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e18a8d-257a-49a8-a26a-19e8b8eacab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8f480b2-be85-480a-af39-2a41becc5ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e7693f-936e-4b38-9238-b841675f126b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8440817-f834-4c0a-9a29-6f38579852d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121c3926-2686-4294-bce6-7198ffbe15ec",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445372b5-6217-4782-80a0-87a4706ebbe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c3edfe4-e3a5-498e-a8f2-85299a92d1f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2910cdef-0b03-4454-8300-8734911e5b64",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "0fc8a065-f109-46e1-9fc1-8618db8d5096"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "05ea6e95-848f-4135-95f8-34b1bf2c2d5f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3015944c-6c4f-4a5a-a3bb-efd78691967f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91a5edf6-273a-46dc-b30f-4dd3c4cc5e7e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "17180615-268c-4400-b1a4-fee5264e4732"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c9ce4835-36ab-408d-9464-8c6edf5f3e32",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "592f095b-eab5-4cb0-b1c3-30da19b1447b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c3a45b69-d055-428c-9f4b-9ae099cdf56b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "778fc179-0925-4c7e-aefc-4813cc12e0b2"
            }
          }
        ]
      },
      {
        "id": "ce641c29-0ba0-4191-ba10-688cbc578438",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bd75f53b-1dc9-4fdc-8e21-88c375ea7a40",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b1487629-1675-442b-944d-588bf2f0fd9f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "487b59d5-863c-4daa-8009-2c009d72c2c4",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fea863-ffb5-42db-85ab-9049dac34b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b31a30c7-7475-4551-9601-efafa46d5eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b1d897-3d7b-48ab-b9b7-e34f6268158b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d0f054d-253b-4435-99dc-d189a7f5edc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab686a70-8b1d-48a2-93ee-0b1d07b36d02",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79fcc404-9970-4578-ad16-f8a502564cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "315d10fa-0c4a-49e1-9e57-ff886e4ebb38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2dc1e3-c892-498a-b02c-d06831b69de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe77d3a6-c7f3-4155-b750-b9b8a3265caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b70a570-3cb3-4e89-9517-de993384ad40",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a9ac18d-a888-4345-a41e-55426eca3ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f319259-08de-47c8-96e8-be0092ffd596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db3f894-636d-406a-9b04-fdb8158b16bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5ded58a-9fb5-4883-9111-3e5958dba52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f18e2b1-716e-4266-bb7b-e1d16a32053a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc0679b-4b26-4f6d-9dbd-b3a802ec8807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8740121-44cf-4138-9a29-d7b6b8aecd48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d77c6d5f-97c1-4552-a7a4-ed1506bfcbdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3109626c-307d-474c-a35c-21e64b34d0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da7bd5d8-cedc-437c-969d-ddbaaaff9e10",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7e7bf5-641d-463f-84f1-ef858f92cf8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b165086-d7e3-4382-bf1f-853382af7db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80d7795-7147-4e37-bdd1-ac967b9ba2c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44d6e3f8-2e1a-4c56-a59b-6113a0be7eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6f02f1-3fbe-47a0-ab86-cfc1da1f0d4e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97faf29e-b6b4-423f-9d5a-9e2d7ca1a5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae4dcbf1-bb7b-41b4-8862-7fd0aec0033c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610ec753-1ae6-4671-bb67-49cabf628998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75f57b00-24f9-49e7-bff7-0c3d98b700da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7bdbcf-b229-4f5b-ac25-3d8a1ff50445",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1c6300-cde2-440f-a2e3-7f0f01d74508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb174b17-f3d3-4424-a905-b94bc26e2e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167f61ea-0928-42e4-a745-f497d836f043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1dc69dee-6595-4f08-83ce-b9d6acbdddb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60dadf4d-c240-46db-b30d-5f05ecd1d9e8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b52131f-0b13-4037-829a-6ccfdb77a964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b02d5679-3266-4e49-a7dd-a33ede67be24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e491e145-e3f8-4f6c-93ab-b8c4401863a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4778319d-23d5-4f0a-98eb-53a70c1b0d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b431a9-075b-4914-800e-56574dfe68d1",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e0ebd5-49a0-4016-9ce3-818239312251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7742a07e-aa5b-4a36-b219-dac36d1db232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813cc383-7bd8-4ddf-ae35-4a3e25a7ce3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76190ab4-c45a-4942-88a9-faf9545bc966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec0b455-c0d6-4509-9ca2-651246f9301d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d3b79a-cdcb-44a1-8892-d3dd9461402d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ca0709-c35d-451e-8ce3-6af0a3de7035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c27fd6f-f025-4eff-adc2-0df9d99c4bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a958e069-9f43-460d-9a37-a4a960ce3a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917292ba-7634-473e-8dcb-3bc8aaeaeb4c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "930cf2ca-6d3c-4bc1-aa7c-ca0bda4da15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5f1e0cf-94f1-4823-b040-da15f0cdf449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada4268c-33e5-4df7-8fd1-188f4edbd809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba244c18-bab4-4ec9-8c6e-21d4e0ce8368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca9dcff-0425-47dd-be16-4ad149a7b791",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04263c5-1553-4cb2-9faa-2b18e08d8639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6029cc26-7836-4b2c-8dd3-208c411949df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9b2d5a-8851-473b-a76f-a3b9a621146b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef70f191-a1a0-4aad-9795-c220c0f39afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41bdce8-1d4a-44c0-b352-dccf1860c38f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e0d815-cba1-4efd-a39b-b2e877c8cc87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bbfdd04-3e9b-4830-b991-e36c3f12d81f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23528fd-4b56-4101-a16c-addf180d0daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc821705-dac1-4951-8b9a-5f95737caaf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f355b84e-fff6-4242-8647-9d7ec52e786b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10b0865-f364-4018-9e70-8912f361a430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7857f82a-1e51-4b13-a3d5-5bcb3aa0f2f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2dc6258-4790-49cc-969f-f14894de4ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60547cec-b25c-4c7c-a9bb-254afc047d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44c39ca-fb71-4e59-a9db-dcb24c905b1c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aee2057-57db-4e64-9295-a582a442b230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a69e7cfc-802f-450a-9839-c42e9e41cb2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17701342-68ce-4f93-9e26-1138182c78c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09647ad0-6e1f-480b-9fe2-b8573f89b46a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c63b9e-e8ae-407f-a6ee-fe8279296b3f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb328f3d-38e6-4a53-9737-0205d29cea80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f62483d8-f9c6-4fa1-be3b-e620946bd7f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ea6f2d-644f-4e9c-851f-3efc03297f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5fe783a-3a92-42aa-9843-406dcf1caa25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5ffdb4-d825-4a9b-b7e4-cdcb123f9446",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ab61fe-d007-41c6-8b18-b426f6c8349b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a830a1-2d5b-4f53-85c0-a19d7f12c9f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b986de-333a-44e1-84df-3a10d0236de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b656227a-efb2-4c52-bbdf-2f5bdbd6ce9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b569e6d-23c5-42bd-9e09-135e05465f9f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40fdca3f-9882-4cc8-bac1-1a0e73164bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff10fe1b-3bcc-48c1-9662-7a6c3d6f95f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7cd113-a696-46b1-913a-792943e4afbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6d6fd64-8a47-47f7-a2fb-db124d6b9d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2745f920-6203-4627-9532-499ab9ab9d1a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1d1170-0a38-49b9-acf2-823d32c6d4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a730810b-9824-4027-8ec9-5ef8ddad2a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4611a389-de4f-47f0-ab92-634cad9cdc9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4475f48b-1de2-457c-9e64-31975f4de67a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72082b99-3dd1-477d-8d25-0f0785fbadb8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e30add-3923-470c-9509-71c9e9a7c5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43940cd-f264-4943-af93-ac9364e527de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622dc25a-67fc-4231-ad9c-2e58341eb79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c55f3a3-e591-4822-ab67-7c1c2ef53ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c7a5eb-0d6d-4050-ac94-33dc752ec0f0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8d60d7-4797-44c2-89b3-acf4ffc5c003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7edad53-5f49-44d5-9d3f-1aa76e947aea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8980fa76-e5c4-4249-988d-273420bb5ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73428fb1-9207-4cb6-b27c-32ced823d9eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5cfd52f-5187-4268-bd22-4972633e2a8f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c06daeb-26ed-40fe-83bd-bf82bad55b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7e2314-8a73-40ff-9302-6646f73dab2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4023eed-3f15-4c06-a502-1cd2d63f7510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a33f32d0-4dd2-446e-8442-b31665d4a49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3845c75-1c5a-457b-b9f1-55f8b2b98ed7",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd2d22a-5d74-4cb3-b063-6f709f023eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c65f42d2-a8d2-4018-9250-1ba03b9c8efa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e9606a-e49b-48fe-9fb4-940936495180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "501ebe7e-a599-439d-bbc5-a87a2d70d5e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73ede4e-0dd7-4e99-b992-d58540b190e8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2653be9-a200-406e-af1e-b7981d63ad94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aa47749-29ee-40ce-8c05-177f67430d3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c870a6f2-d132-4722-8bde-0e2bbd360b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7bf909f-0286-4dc6-86f3-a49a1226aead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ec9ec0-c32a-400b-a528-db65ef6143e4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e32ffa4-f565-447a-9991-548f878c4483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ea4c723-2d17-4246-9fba-82210dc62790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9befcc7-6635-4cd5-85d8-79958c391d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "63f77a33-a879-47a9-bc8c-38f9c62198bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96706e1d-1081-41aa-9294-d37416e548e8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa19ac76-cbc7-474a-a9d5-fb2c3035fe88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5653acdc-66ee-4178-82ef-bd12e621c05c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578e70f7-568b-435f-a3ed-e7dd14f068b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b4fa4ff-053d-4158-85ad-cde8c7eba832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb7dfa2-d75e-4713-a44f-adff5de391ae",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1e9d3c-b6b5-4462-a8c1-b46ea7c8c63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba685bf-24f4-4505-91b7-82b286c48a57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aadf0fc5-5ddf-4d40-8dfe-1ced96d85622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aab538f1-c765-4c26-b7c7-e9aefb47a603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09a41b7-e91b-4566-8929-2751859cfc58",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6068011e-ef34-45bf-afab-03604da90182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "127dcebc-e4bb-4ca3-b396-75688821f9e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a49f46-a781-41b1-8418-b316cfca5d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "01dbd0cc-8f86-4f9d-b77e-c453837b8ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04d6513-0a39-4e94-8f10-60764af3e832",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "821a4dfe-4027-4f1f-a4ae-d8d862fd8979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96dace59-e6ae-4d7a-8bc8-38080d66b55d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda6acc7-9c8c-405c-affd-435cb6fd0c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dea4f17-aa14-422c-9709-22c598d6a6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7235db-ebff-4e73-8122-dbb714b6b349",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5019881e-e5cd-4d0e-bc28-694fcba92ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff266e13-3dda-4aa0-8c20-1aafa3343d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36362a67-5dc7-47ff-b4ab-4af812b9e92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "811df6fb-a17e-4b75-96bd-fd45b587f510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b1620eb-05fd-41aa-ade6-8c14d187a41b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf2b03b-1798-406f-bc3c-1b0f73cb647a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bfc8f36-a25e-4749-9dca-1dd4957d4dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1dbb5b-5562-40fb-8fce-81e7797e0418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d9f507c-0662-46a5-ab49-dc517c56ba1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fcf84db-461d-49e1-be0b-03585496548c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c811c42e-a497-4d82-b103-b8e6086c8583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68421429-32a5-499d-a6f8-7692308ffbd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ec497d-c24d-4c54-a614-f1171f8cf67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c274a459-0124-4fff-b029-1b98438c4ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64bbbfbe-d2fe-47e9-a4ea-c0d832140b8f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67bfbfb1-2844-4d24-b54a-1a2b758677b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01e0ec91-f51c-4ce3-9078-b833727a3ec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e147c3f8-2f2a-4463-98fb-9b008efdcdd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9072fa4c-0917-4141-b00e-7fdf57c2839b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f67a4aa-33c0-4312-a3cf-280fc337c24f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5c06d3e-3a45-44af-8920-21bb94e65829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d6b1f1-c1dc-40e1-a2bf-ead0edeea574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727d4b33-6a8e-485d-b310-5de5b38edf50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cc08ab8-ed5c-4ede-8e43-8d4d5b358314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c10b507-0724-4ee8-9478-c28287b9c2d2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7cc81a-c6cf-4e72-b0bf-848bbd10c2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a52e5b-4fcf-42d0-88e5-d7a977372629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05b6a23-f930-441a-aeab-91f7133f781f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9013c914-c087-4c1d-b56e-6bfb595b5f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1477163-2c1a-481a-9087-cbfdcee166cd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0616c92a-a84d-4689-a4fa-550fd1f39f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40c930b4-1f21-483a-826a-af4282ac8be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041fac3d-9668-497d-9331-c9962d6162c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "302e07c2-5ec0-4cd6-b9af-b9b21a28c260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220b319e-77ab-4b5d-8b3a-9c344fcb023f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3edb0973-40d9-4949-a9a4-89ff5383adff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d54cfa85-1398-44be-bf63-1daf7cbef403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661addde-8071-47ca-99ea-05a046e19474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "350f6f9a-d8a9-4a90-87e5-77cda1b24a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1099bd-9e96-4936-a2c1-17969c58c2a0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37d2e9d-e55f-4d28-b4b3-ea2007ac9150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccfdd000-ec8c-436f-9dec-24f20b91b78c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d350240c-1fb6-4487-978e-487450c4f69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "89b8303c-0f67-4b55-af12-b7330b15893e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d505eb0-34ea-467f-886c-88bb9bef2d1f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca504955-a3d0-42ed-a624-73f3e2c8522d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c286932-8089-4f06-b291-9856bc1e8625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0c4c6b-a9a6-4d9f-9c06-fad14df065c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c30786a9-e90f-4df8-ad2d-e2ee58c2e18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d33b2c-612b-4c66-8078-8d443faf85a7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffe0057-918d-428a-bfc8-97e14bdb6869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b29f3b-6161-498b-ac39-422986f29451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6300e50b-203b-46d8-98b0-65707c1cd8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e31c7e9-b0ce-441d-839e-107b62fb5c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdca405-29f4-431c-aea8-e7abae8a2f84",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8aab709-76d2-4178-abad-9a89ec53da2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d886d56f-7027-4d2c-8b31-47228fa960e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd95548-9bb9-442c-ade0-0dd5d50a255c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a7bff04-784a-480b-951a-ca9a75435a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4077fd2c-ddad-4733-9541-27671b0a09dc",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5875c50a-8f6f-4436-a4ae-7ac065510694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a08941-6256-4113-9278-a344962f5f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdcec4bd-2451-452e-b7f8-d2d85e4b8e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "57876616-ab1b-4c6e-8398-659a77ce5255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbcc47d2-9612-4b49-a57d-cf52468ca5e3",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab7a483-47bc-4143-8eb5-6162b3737513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "026d9be2-c77a-4cfc-b854-165e99fcf6ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a781eb-77c2-4c16-80d1-e0ef259c9a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "14a95a57-2fbb-432e-a12d-90c00521221c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8eb4424-121a-4879-b5a4-1fe5d06acddc",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02df47f3-97d1-407e-9c45-03d8b2b6b741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "964c5043-66c8-4628-8fef-bd17882f9652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e0473e-67b9-4cb6-96a9-ebcdd9dd114b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b96b28b7-1148-455b-93f4-e7e14b248cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7566730b-2706-4c49-81c8-be11ff409dfc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d72bde-cbf4-433c-aac8-aeab29b646c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf48421-491c-4fd2-8b1a-4c261f933066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d726c31-1b8f-4972-9a0b-34c36c853683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "12819686-8ae8-473c-87ef-1c36b5bebf03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f198ac-483d-49fb-9ea0-dbe3c645f72d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9198c3cf-094c-4573-93f3-260ee2d83429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101286cb-89aa-48a1-9d42-0a2d90469a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03110b2a-e0fb-4f7f-859e-3ca570002dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc6f413c-73b4-44ee-a027-e103bdf30747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3319fbca-75b0-4169-84e3-1e21b25e30d7",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3f0a2a-5a41-4b8f-b98e-8a60a0dfcc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27e229e2-0c2e-4b82-8e28-4f5df0a4045e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6016969a-858e-473f-9893-801502491c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d03879a-e265-49f7-a13c-5f85518f3756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf43b842-c59d-4031-b037-fd8deac20f85",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c64bfc-3229-4873-a732-b36af865874f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30621787-74f1-4ba4-82c1-8ad725624549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d846c6d-f386-4a08-b082-9ba65c1a6620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee563706-cad3-4040-81f8-caf0ae8012e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c379ab-0aa1-47a4-9141-d2ad416915fd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee0c12a3-44e8-48a7-ab84-715f7c3a673d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fad42a5e-ce83-47c1-ad1c-cc8d30256fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "addb7fd0-7d0d-4b2e-9162-c0196f622e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c1e8804-a86f-40f1-a070-079c3cd0335d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cb93f3-3d1b-4ee8-a845-9900002e76f6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb702e2-9e49-487a-9d0e-b02b8b5e15d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af16388-1147-4428-91ee-24a2949b33c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776f8de8-1790-4e1d-a74d-fb5a0c1bd83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e3bf192-8db2-40a0-9660-a5f4dbef288a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23615629-6ad2-4771-b38d-88ba0ed801f2",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f145c666-6f95-42ef-b646-7793bf81d16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ade72b1-159f-41b5-9044-7a0814fb958d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd41b86-bdd2-4c93-a311-f9ed937aead5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3df4a9ba-6f88-4f01-b806-657c599bfa85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fdb2a8-80bf-4f3f-b378-ba1f05585fc5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad1d837-8883-485a-9293-b2e88c68d650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e749840e-689a-44bf-8d06-3e9519571025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd86a81-eb77-48fc-a890-92b22a69f086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1636c46c-5cf5-4a48-8d1d-b7260447720a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2f81f6-9ab6-461b-8f75-abc0051ae9ea",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e56276-4a08-49c2-91f8-cec0e227b4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4b04b5-89b1-4c7a-8e13-322219946203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1233ac7-b586-4749-8545-11c1972f1757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "602851ae-18b0-4dea-9dff-62c83c96d36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17254eb8-d3d9-4cc8-99d8-3fd4f92bd92e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccaaf0b6-8668-4967-ac49-791c16204ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c4be966-cff6-4c9c-b776-9299683bcc50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb237d06-072a-4901-b6ac-fea196f802a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "32114fdf-bb22-4204-9e36-991858f80305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d32255-c39f-458e-a37b-31ecc4515c4d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "678387ca-8068-4f20-9baa-2d498380a6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "046b6310-f1c9-4455-bb27-338bde525d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05da5341-3dca-4937-b01c-40fdbb8c0bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a8ed9ad-bed4-4740-8d57-c720ee2c6391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6abfdba8-472e-4750-ab35-dec7651b0028",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bd95da-e2e0-4630-9c8b-bf1bc7f1f8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f74064-7428-4fa7-933b-5782d5143d65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af977d5-0b4e-4ed5-93c4-6f3f00374b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ede3da68-54eb-44e8-8ea2-eab4aa65556d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced57854-ffae-41a0-b532-19cebeeefb39",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b37aad5-0819-4ff4-8e5e-e6584b8ff85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f32a8f6-5357-4836-8b28-afbb556daae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a44d20-dab5-4cfa-9125-7e6512887b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d351151c-46c3-4ee7-b841-0a65f6087214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f59fe2-faf7-4a9f-8c81-df8c42136694",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc993150-73a9-4163-8a1d-0100be10fa23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a5e244-0d64-466e-9a2b-4f25b014b348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156bc28d-66d1-4a56-b7e4-83b0d952091a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f05aec90-28aa-4068-bbe1-fbce5d6c2d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccdbd522-90d7-4962-8b87-8b1fe6ebae67",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e6abfb6-06d9-4b6e-a72e-e6a585962af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f022f1b9-c44f-4b78-a5f5-eb120acb7322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc2fb59-d22d-446a-a520-b4fc54fb7290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bec3baaa-9e56-4212-be9a-c0b7180e9aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46539b74-ebdc-48df-bd8d-ec05ab17615f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a2cbe3-b027-427b-a693-d1dcb29fa89d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f09809-3f89-49b7-923c-ef7492f4e601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b88db62-e32d-4750-86df-69635d77bc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ab05581-bbf1-4e19-8cfd-5a1293f753fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4643d79b-58c4-48be-98d0-2d127824daf1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a282fa-6f7b-432d-bb43-eb57963c2ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b1bb66-5dbb-4bb2-a677-33701a06b15a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20cb361-d662-44c6-95f6-6ef94fec8d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6925efcd-b295-4672-86a2-08334cf388a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9382b347-c4c9-4f4d-b0bb-4adb5fee35cb",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1435e4ae-5050-4dff-804c-c7144afdfcc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02cc3527-90c9-47a0-af64-5c7013b6a6d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4bb905-fc73-46cd-927e-52f8adbdb6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "45e7bdcb-a53d-4c4a-9b7c-fef4cfcaf7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec28af4e-67e2-4232-8574-9efd92e4cc66",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452b4fce-cb99-4b3c-bf3d-7c32a26b2e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81037f3c-64b2-4316-8023-2910a765d200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776351f0-8b77-46ed-be51-cbea1390ec8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "84d71035-458b-4998-be5b-c0aa7052b1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f6fab0-0e85-45a9-b627-d415f175c6bb",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c02e53c-0f73-47c5-a5a1-55372447701a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b979a131-457d-4c0e-ba67-06d29a3efa38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5ab608-52c7-4eee-ad1f-bf2e1617fa45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6877a4a-d9ca-4f7b-834e-ea07db3566c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3e93fc-8620-449a-9f8b-ea7d8bfb7b6e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce3668a-4f2f-480b-80fb-8ef35628a8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7316fc43-93b6-4d65-aa37-7023ec96bc97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9085b1aa-15d4-4018-a1a5-0b02c3528a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "67b77d34-499b-4959-868a-1ca35b9adf8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f791b50-dbef-424b-b7fa-779bd773f837",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3669fd10-9416-4266-b7ab-2e145adc108b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d267f4d-d20b-4d3e-a590-03f36af32b40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29622fe-9fb4-4efb-b508-dc55324aade0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "23201744-f9e8-4465-8c39-9c08909099e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21250e15-918b-473e-8f50-8ae2bb70ecc9",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca5290b-e1a7-4da8-9d57-e34f8db98deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce78280-f69e-4052-b96e-8156485101d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76122d9-c3f4-459d-b423-7bdfdec4f5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "113843fd-f9a4-45e1-9d2f-37c84d141937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c6acfe-d0db-40bf-9fd1-123525a9fbe5",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913228fa-2fe2-4533-bd3d-d86bec9881f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73772dac-4479-4de5-92f4-24a1188dcdc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3238a4f-7b0e-4104-87de-32fa48a89cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8adb2a5b-277d-4b8f-a628-1d37e8469a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79eca976-e6a2-46a4-acd6-5baec2fac9ed",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9181166e-5169-4087-b378-02bc7861a842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bfe0b77-824e-4a97-8bd0-cd9cc1b3d839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2af4e58-715e-40c4-8fa8-27487e39fa52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "02dfc17b-e306-4175-b3a3-261e1839b7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d6f28a-c444-425e-983c-cc9a57b79734",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c177510-1bd8-4ad6-b4de-1039997bcee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9e595a5-9d09-4ea9-8451-8f797f45658b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60dea384-3e2c-4542-8783-fb4d6983d27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9c3055b-b073-4682-86a2-c60cbe7cc270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f0a42fb-cdc4-4c61-bf1d-a999bbe17f0b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc9c022-5813-44db-9f00-341a11c41c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d1d429d-38ef-4b56-be0c-907ffe005c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdbc9156-a40e-4f74-8100-e4667ffabf8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4e5c115-7214-4474-8eee-24d39464e397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789be3f4-d74a-4465-b0d3-62e3078d9d74",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11d8f7c-70c4-4030-b252-f26b8e5030d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f9c8e1e-24ea-49cb-bf27-30ea7b8a5b91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6c694c-563e-41ad-bd1e-485a785dd039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5336d0d7-04d0-4e7c-81b4-801fde7e69ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5183c1-c855-47b8-84ff-8ee4868bec7d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ade7167-80f1-4295-b453-e45b6ab1821c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d2c15b8-a676-448f-98e4-1b1385f4212a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df71405-9bcc-479f-bc9c-a3e1d5078b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe47f973-b8ca-45a7-aa7d-5753c249d440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7610531e-5efa-4c18-ac8f-3b51197efcac",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b066f3c-a410-4798-a5ce-12332770d418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40162231-d452-4ee0-90fc-ee164f904464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d64fbc-2c6b-45be-af78-11b78c777f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "60b9d011-b8f5-46cc-a723-ff6dddf3772d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea1c550-ab50-430b-84bf-cef79040cab4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "add11a7d-441d-407a-b1c5-b0e74ca96d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c83c481-6122-42bb-96fb-5300647cd66f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d33363f-952c-458e-a201-62d3ed05ff51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "99b2eab8-6619-4b15-81d1-27ff8a339c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72599390-6469-49b5-888f-09daab263525",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7112e2f0-4b23-4f57-8791-7022cbd5ff9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee6d498-627a-4ee0-a7ad-bb65ce65449f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6976f8-d66d-4af7-a4c1-44d80dc8aef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87b00c03-dd94-4c67-a736-c18eff4e1b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bccc0c65-b8cc-4949-8c2b-0f2ad5f07f31",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e2bffb-2b2e-4567-9755-36f6dd40603d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ce97ede-0ee6-414d-a8c2-47a0350dc322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5410b3a-c076-4fcb-8f70-e7bed099e8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f0a369-0ed8-4d84-8c26-3c105ffed4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d71448-2164-417c-85da-e7938fc2d32a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a82fbc9-f861-4620-a672-5d7ec319bc67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d8eac8a-4472-46c6-a498-1944eec1ef8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6bf7bc6-b1ab-4312-81f6-919745d94b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cd4492b-e005-48a6-8ca0-3b419d447613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a971ea98-3455-46b9-a876-6ddf4303741d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a038a0b7-739b-4bfb-a0fd-d468bc178468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f929ac5-8ca4-4f59-bd01-579f50dc94ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c586802-8fe6-4e19-bfe2-68d06842ccac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56b295b4-53ac-40ca-807c-255d9cd5cd12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b816cb8c-f53d-42df-bdb7-03dbd05523bb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6706e81-cdd5-4a61-abea-bc0b284cd896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d812836-1cfc-4a59-93ac-238bc5409f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafae4a0-d00c-49f8-8337-549aed47be16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "302bbe96-9264-4f9e-bc65-f8f0d0e53d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c53e37f-b7f4-4038-aad8-cb249292bde0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7661e02a-fde3-48d9-a6a9-86d7fb6a283e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f0246be-4883-46cf-8af4-5a385fc6a52b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142346f2-f050-47e0-b0c8-45dd22c01e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1790c231-2150-4ba7-8515-9082aed90b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e568cb4-0e61-45cc-845d-b02b328aa2d2",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcda122d-9f45-4859-a829-e747d783782e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a8c580f-9f56-4396-a10b-4272654eff15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d15062-588d-4132-8383-2e6107caca1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f657017-7320-45af-80bc-c5e32a79546f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1731276d-f2c2-4256-ad50-aa51e3b47d3d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "076720bb-8472-4900-8849-94ff9120e162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d93b8f27-6cf5-4fa4-85ff-1aaf49cd8ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d05a1f-47e2-47d3-91ab-d145ff3f2e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef4d3e2e-349f-4022-a4bf-74659a99feef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13217c53-4d11-4f8c-badf-440790bcc412",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "133b9659-44aa-4057-88ec-c8b9dc242b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e233872a-8bed-426f-a684-dfe72d6cc783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96c7244-6374-47b6-be21-c4aeb4991806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e388e1d-bc2c-4fa6-a230-b425436b94ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecdeaf33-8aa8-44f9-99b0-409c6fb39262",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc63d75-6bc1-4621-a4b2-677a392a21a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19967043-ccb3-4921-b531-dae8420996b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b532db-3ea3-4d6c-bbcd-5fe89eacec05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "25aad0cb-1942-402d-b9f0-b4656f8dc33e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad33bd98-ba51-46f4-8654-36cb2b94d676",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ab7d66-7972-48bb-8dea-54047e8cb3f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58afd641-fe5e-4c28-9bc4-8d7796b9debf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abfc5c46-47d5-46dd-9727-83d05ba5ad27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "24e4d4d3-8de0-4f3d-afa7-05e6c559980a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f23af5-8f12-43d1-ba48-0d21f4ed03d8",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ae6c3a-01f0-49d4-880a-4d04eaa8cafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "614bcf56-2125-4203-92f6-e71f6e3c537d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3c87fa-2311-4bb7-82a9-932918ff35e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "69012c82-9a41-4ac1-81d2-0725cdd8eeb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dcca016-a4c9-44da-a62a-163845495f8f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e164ccf-2ed9-44f7-aaa6-856131881431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a71d4f6-58be-42cb-af1c-6bd8702a8635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975291f1-752b-48fa-8445-9e459ee0dba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e2c3051-0ce3-484a-8587-9d897ec88072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89db43c4-44ed-4bb5-a285-2c06131489ce",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c562e645-0a23-49f5-8433-038f609ffee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7004325e-25c0-4299-873a-15db3bd1c2da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73070e7c-070e-44d3-9979-22dab8635945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0506626c-666a-424d-a085-3a871cf2eff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0cdc727-f224-45d9-a898-89c2887ef0cc",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf545ef-46ca-4173-b043-5fe31a061a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "968557cd-e961-480c-9f73-35d001f50265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2954f4-fc5b-410c-a9e7-fce70e1cb05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "988db530-a600-44d3-9015-279c5ae0551f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f428fa-262b-4da9-8d41-798936153d4d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a5b3db7-7d8d-445d-8133-a06444166f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c7864c-39a8-482b-89d6-e645dee5bf82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02940c6c-700d-4892-a34f-4557dba3b555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e0b2d0d-2e24-4427-a620-08250adc520c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f62454-a509-4a28-a880-3abf0426f5eb",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf29123-5889-4be2-b4e5-ab80c4b5f008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ebb56281-ca32-41a7-8120-66df554f6f7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f61c332-8691-4afb-a04f-eb05e2f35109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc8b1789-e727-4b3b-bb2e-d1e1d866e8af"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b9d25d7c-f90c-4373-af58-9aba2b7948b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "960602a5-c1e1-4f9a-bf21-2928f811a5be",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b3b60e-c9ed-4e36-91a7-98d75340aa0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88e16f58-76f3-4790-a6fa-7a66fe39b0da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28fcc71b-d00e-46b0-9448-659da417f43c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a9b9666d-a5d1-4f31-8986-592c354dd81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6a43a9-f6a4-4943-901a-05360ef6b832",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d755f545-5c39-4156-90fa-d76e6adfb273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d6ca545-67a1-4d7e-ae76-eb1f9906ac6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88178ffd-d67b-461d-8f34-ff4e2581963e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "959fdde4-053d-40b9-8f16-6fb1b984c0be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "942968a0-c91c-49fb-9463-691470f1c471",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1856a2a1-76e7-4352-be8c-2784020f1c26"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5049a3e0-f4c8-43d3-8142-cd25ae5b0afb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ee223f6-96f6-4f70-acba-d4f8170aea25"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6bf4058f-c58b-4c0b-aa4e-5d087f7021b0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "45aa7fb1-497f-48c5-bb78-60d9dbb9d8c2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e1a84b65-5866-4b83-a448-4bf62331298b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e1b0112a-78f0-484c-96dc-290426d9ae58"
                }
              }
            ]
          },
          {
            "id": "6f6e14b4-6b83-48bd-845d-bc0f46183464",
            "name": "Positive Testing",
            "item": [
              {
                "id": "82f521c4-584e-49a4-b91b-6406ddd4f8d2",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "645879ad-abe1-444a-a9da-d4e5ad89366f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "64f9cf96-22db-4b0f-8c41-b16e5f34e8f2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bffc7636-fb35-4f79-b7fe-b8febb8461b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3d7e14d6-5c93-4d4a-9641-788526dbc469"
                    }
                  }
                ]
              },
              {
                "id": "57072a73-5a86-403d-8c95-053f659abdfe",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d659fe0b-c25e-4a06-8dad-285d79cb4c87",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "08744f7d-ae81-462d-8f99-2ae5f3a793b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b90f914c-9c55-4501-ab64-92419d1a4647",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b15f3487-1221-48f8-a44f-f2c77f93a8f3"
                    }
                  }
                ]
              },
              {
                "id": "e7fc753f-1c2c-4bd3-86d0-e1c3d49c92d4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa51006c-08a4-47a8-ad3a-95c2d0ba53c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f84d23e-7170-4ec6-ae47-2f97a7bacc03"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "305ca678-f8ad-44ec-be21-1fa0ce50806d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e8eb3d9f-a35b-4b89-aa1a-31c7e6105f11"
                    }
                  }
                ]
              },
              {
                "id": "0066df3d-1b01-4150-93ac-42a630024a4a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "37209fb4-a88e-4882-b2fe-a9ad222002ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f851ee17-27fd-4dcf-a40b-c00624a59612"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06af847d-4737-4196-821e-453e5ee6081f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "bbfbfd1c-b500-4466-b8a6-805576dd08c5"
                    }
                  }
                ]
              },
              {
                "id": "2ef6a23b-fc3e-417e-90f7-141064ade369",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6450f317-ba69-4e63-ab3f-c55dbf62ea70",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "513293ce-87ac-4ac2-8f1b-58f0c913b544"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d9cfadb-8d39-4504-be33-46a9c9be7b81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "554fcc53-b57d-4846-9f30-348435c412ea"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e86e047e-81d9-451b-9af7-e03042817182",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "31469d51-3836-4e7f-8fc8-28a475f103f3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ca36a335-ca52-49f4-b2f0-af42f46795ad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9438b6b3-3fb3-4a69-99b3-444db472cfa7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4eb9c8d9-992e-40b3-a431-fd1bb31d5387",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0a4ea94f-2980-4057-b3e7-3db6aab8bdbb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7456f073-10c0-4559-b6e7-cfd3d7c13f2f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "904818ab-a6c5-48ab-bd7c-b9a42113ecc6"
            }
          }
        ]
      },
      {
        "id": "11f16d18-dd37-4454-8606-0527d61849cc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3cf268d4-80dc-4dbc-a7c6-eeb8e3271bb7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf43756e-654e-4511-8216-a943944d008f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9391d6ec-e20a-4c30-a9eb-09d4cabd2ed3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c079ab-141b-4466-97bc-e6645184acfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa07d80-ffd0-475d-8468-8b420fb62c38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c139c7d-aec1-42e9-8980-08189131167d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "11b53b0f-99dc-4924-928a-267d5f11b8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "205a7864-afb1-4274-bd83-f31cc7f4760b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20f3dd1-715e-4488-a0fc-f57a2e07b3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "729fd6ab-fcdb-4068-a0ea-37671e27edca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557fbadc-c806-4d64-9f74-a09a3a7c410a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "73bf6f55-c364-417b-a79d-8245f1dfa60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c05044-1abf-424b-87b4-ead8b6034c9f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04bfe85a-ccf1-4212-8e3d-dd2671cce45b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916a3d1c-0cf2-4e6b-8294-271361302c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24eae107-c72b-4d95-ba9b-a0e5890a44f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd6f838e-02d8-4fd9-b622-815f0d5c8c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e304b7-54a9-499b-9447-e2253b173dfb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36226298-7b38-4ad9-8742-0575f5a6860c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7830d177-a1f1-4185-a582-be6fb10acb3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85c3173-06e4-422b-aba5-6f0b03e57c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "31e00ad3-0c1a-4bc8-9d1b-0a49a245f79f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bda3613-bf83-4722-aa4e-0ddfcc471db7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "186f93c8-e488-40d3-abed-48e1067b66df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff09d31-d13e-4191-990c-d1d7756d5732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da21ee8b-ef19-46bd-9916-8a01886bc2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de8f113b-b4bd-438f-9e01-530137637633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670fdfe0-dda8-4894-93a6-48d011d14f9e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ea9894-ac64-493c-a0ca-8814eab66326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff3cd54f-3a96-412c-827f-1d9a73f1f85b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71cacea3-a5f3-4c2e-a77e-a33ec738f83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bcf0e5ea-12f5-448e-992e-9308914d9ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd426477-97c9-4822-9917-8e130ab0bcbd",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dcf1409-b6ab-4732-a7e7-2f4a6bf96064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70dd0e1e-e036-4545-b1a8-3375ebd7cd1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fadf4d2f-baa9-4ba3-8332-70a4f89b0eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "96e9e3d5-9b3b-4f99-98b1-445c87bdbf1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ba9d1f-a0d4-4da5-b348-2b7c4460dab0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0159ef25-3738-495d-a0b6-eff98f02f2c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c28d2d9e-d831-473e-ba08-03a0a0192206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14556518-b873-405d-9a1b-3b80b7d5b9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "493c2b13-d62d-491a-a7f0-517f3fb18088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba145968-e9f7-4c77-985d-db1f776e9050",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19521cbd-5e32-4672-9bbb-d25a71559ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d3a7eca-69fe-4a46-9a6c-7e72581e9b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c436a1b-5438-42ea-9f8c-24550d201003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e8503e-b021-413a-b101-bc9c741bd088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a47145c-79ff-45c5-b58a-5112b227a1b7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af18683-49c4-4b7e-b311-4cfdf5adffb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "102d8089-ccc8-4fd4-afb5-f8714686dc68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d91fe25-7e24-474d-b024-33940ee641f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4df430a-9052-4c5b-99b7-32116ce84326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0ea2e5-e096-48b9-8bd8-194b31b0610d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70de0616-b64d-4415-8b8a-3af77b2b2e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e0326d2-80c0-4251-bead-bd8adb6f879e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc558cf-9357-43de-8704-54bf5da595c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fef5601c-3ea5-4215-a635-790434827b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d5137e-5d37-423e-bf4b-260a1046c99f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20285a97-1260-42ac-958a-9cf7d840fcd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ffff54b-5ac1-4146-9a1b-0dc26f1809a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd28d196-6b0f-4076-9b84-8fa88c352a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a1124dd4-4906-458c-b52c-e9bbbd6e7b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74e42f5-3542-4418-b745-9fdebb12fcd6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "637d1927-47d2-461a-b689-783adac65b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64182d7d-a354-4e79-8180-9bfcd846db18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df671297-874f-44f9-813e-869ee47669cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f8c83d7-0566-4b0f-bd27-fe1d38b224d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc46cab5-d6e6-44ab-8151-1728f8549f41",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e7b2e0-92d7-4fbb-9dc6-29ccb1566ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e581bb11-642e-46dd-8d00-e45b87e6778e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb625c9-f28b-4018-8261-52a1e7862dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0bbdb6-a066-4fca-a983-41a1fc1f0e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c288890-22cb-4ad7-ab15-8187feb52818",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb31fc6-6d65-48e5-bd69-e11860309625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea8363f-39a1-4b10-be97-8b3e0196a970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60dfb3a0-0823-4585-a7f8-f4c27c661263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c74898af-af09-4f56-90f1-e31c7101ed06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd690247-88c8-491c-b7ed-33e15eada293",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13a3f82-c15f-45a4-8933-eda88a560e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aadbe8d0-38e7-41e8-abc6-598569db249e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65183334-dcb9-44cc-ae55-0a7b1a20d311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "67c664bc-6f34-4f7f-8229-6f29e24b5c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7fa3f2-3fc9-4e10-97f0-14fdae193802",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003a120f-1a03-4c5e-a220-8b6c2bd48be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f6a492-a03e-43c7-b41d-c9fcab673fb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51a8f30-5eaa-42ff-bf13-eada198c668e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d6109d2-1dc6-47f5-941e-7b2e0a2aeb1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf81b427-4f05-4c36-8594-b590fdb544ab",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84de01a-ada8-44eb-b2b7-b59f6aba30df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "508a8c1c-e0f2-427d-8459-8ea791c8485b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61c7f0a-e1a7-4eeb-8239-b65ff0c07a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "62524080-ccfe-4a7a-9a7c-78b88f53760b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b2372a9-1ad7-4a39-b6ca-6145a4ee9f3e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "032af129-f916-4187-987e-283a0c0ac3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b8e9a96-6397-4ed8-8e6b-4fd35eec3f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515beccf-7b5b-46f6-8795-b043f7d5abec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f97c201-707e-49c9-a936-f9081e7c2db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92bb5eb4-e09a-482c-807e-136ac53c590a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7646fe48-f23a-4b86-bd47-cdca9b1af71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc298c8c-5c05-49ed-97d7-83be46392394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfb2687-b607-4a60-b3e9-37688cc875a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5ed7e17-03ee-4dce-8c20-d2b7e74d6d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3f24ce-f913-42c5-8760-a0f81878c707",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "584710aa-41f2-454e-981d-ad9435b6fcc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93bf51a9-abba-4782-82ae-c8b3cd6ce8a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5036fc6d-9677-4840-ae11-59878499d090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0690044d-530d-4559-a87d-e83207b4a5b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909af8ff-cb1e-43ae-94d4-49a742d26247",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3622f3de-0f75-4c11-9373-e9527afb9785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20393a55-7e25-4d5e-8816-33976f65c49a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7af3cb-e198-4878-ac2d-13a2b1576bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96b22a44-d515-4d77-ad97-140bdc565cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff81b6f9-27af-4cb6-b971-59d06fd88789",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3869cde1-15f1-4224-bbbf-f181a0b5ee7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88b9c6cd-bb73-42a2-b260-be33ff8a6ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68263b44-eb88-4b0e-a922-f7ef654b46a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7365286-9f7c-4f23-bd4b-8ba7e4b9d522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430e3f70-cb2e-494b-92b7-d3de8336e2d1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eab67d9-7409-4eaf-8895-62c93eb69de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be23520-01f6-48ce-9479-74680fdf46b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4943fdd4-1f70-437d-8ca7-0a9eef8eef37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c340ee4e-4924-41c7-8697-eb7f9ecd30c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cb3b65-92f4-414c-b91f-646ddbb0acd4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c3c76a-744b-4e0b-88e2-09684880e050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14c4ec24-5f9d-4678-b9c5-4b358144d125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304c39f5-d344-4222-b523-29b3cc768fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa6adc6-0e18-46f2-a8a2-1028410e32be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a82d715-6d9d-431c-b741-440aa015b25a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9659d20-3576-4063-97be-2ebd782fe86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "501d1cfd-3f76-46fe-b423-bbf2b6242b71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07e9d6b-106e-498d-8a68-7761656cee43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3018f4d3-e419-43ff-b3dc-cd5e7f6cd152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4669fcf6-583d-42e4-b87f-2c0fc22d5a63",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97547a30-fee5-4675-ada6-a0c1f8a16d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7439f69a-60ca-483e-bf03-a047533f8bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557c87fd-273a-445a-b48f-2d2ba173446e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe66022-8169-4c20-a55f-97d1346a26a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e6a785-9beb-41ab-9507-762c886b36d0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2909dde4-2ce9-4e67-af2d-372b51f67d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f03536ff-8bf1-4e14-a3a3-55ff17d721aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82cca55-78e5-4d35-abf7-49fc0ec7f84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26d77d61-9371-4221-b708-f5124fbc1ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838cd68c-c4c9-47aa-9f77-b49498558f2a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8806e2-acf8-4478-91f4-b10de8daf3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c79a7f67-918c-4570-a272-f7b5d4690449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70a3fca-b826-4c13-902b-5052538a6603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13d6bec1-c39b-46fb-8ba9-9c5a671b5456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b06b2a5-0d55-47c6-b4f0-a65139f4b53a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d7c8e4-b95e-4c90-979d-c4fb5f47120e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa39b10c-e701-4b96-9c83-769670d7dcca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2316e5a-527c-425e-98ce-cb91d419ddb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "551ec2e7-fd1f-4902-81cc-5a6210015ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb71d24-840d-4764-8f1e-9cba2794edbd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b33cc63-3a0a-4f47-82df-291d3c1dd51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46154792-678a-4884-9dc7-c33be6414f63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12461ad-ffa6-49cd-a6d3-9f5c9428551a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0432842f-feaf-4e72-b994-dc723a62eba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb6c0ab-7b47-4bda-9444-dcca4af0e8bb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e777a65f-8783-4ef8-9f09-31894fddbf22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ee8b98-8f9f-495e-8b26-19d529fda9ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b5c48b-cdf6-4b36-8091-097b0e2d8af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19b09f25-aa0c-46fc-8a54-e7827bce73be"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5be06af4-c7c7-4f4c-82f7-e92d4699cf82",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1898ef38-f085-43da-950e-e01351e525a2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e8fae1-300a-4046-b770-da6dec2309ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0401bd78-8406-4705-99ae-33d6298255ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cda2308-0cc9-4405-ae72-ce247b23359a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a263bcb3-8db3-45bb-956c-12fd15a2cf81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b2f42a-35f0-48e4-963c-8d39806e9f46",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce37172f-7834-48f6-9411-84df59b830de",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "aaf6a445-3eca-470a-b423-244da47b85ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bedcfc1-56ba-40bc-9311-1efcef52598b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3a0a39f-24b2-441f-8802-937e3692e281"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3bd41a2b-ffa1-4837-8038-d0731a7aafcf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3879014-84f3-4e06-a590-b0d7e589c1ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87f73651-ec42-4980-b0d2-fa2365db74ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7355f03a-eb89-4f07-8a5a-fb40b5f09b7d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44b7ff0e-0364-4872-aaa3-da3c4712bcd9",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c42cc06c-c806-4391-b61b-76dc1cf99963"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ae01ceb-2b43-49af-94e1-5254d9c60c6d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6aaa49b9-fd46-46de-882a-682e7a074985"
            }
          }
        ]
      },
      {
        "id": "10bf6c2d-8d36-43fc-813f-ca5642eb42b5",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "695bd992-de02-4415-ab76-0530c2795826",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4d92b278-fa37-4e1a-a4b6-8756d0486ace",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3698c678-491b-4477-b2f4-a44f5c6bcd0f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834aa4cf-2892-42de-b8f2-93ff39e62436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25802b7-6dd7-4902-a016-6ff8e2264b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "299e95b4-5b93-4583-8f5d-384b34b7ff65",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc168715-a1b0-440e-8dc8-8cdb397716f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eeef0b7-a927-431b-bf54-05a5e3465668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc57dbc-3602-447c-90eb-f79d8e515ece",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a7093c9-1069-4ca8-b01e-36b9a275061a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bf0a929-2a37-4310-af4b-f3e5d48548ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4090ead4-379a-45fa-80a9-8a2cbd3fd6cb",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2196654-27fc-47f8-b2d5-7b8d126081b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "815174cf-2d24-4387-9c6c-5b2ec715ca63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c267934a-5ab4-4373-a88f-00a58682d453",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e036c9b-0db4-4df8-9524-34d803fe67d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf1106b8-9961-487c-b333-8ff6a4a01eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bacbdea-0ceb-41e7-aa69-ced87abfab3f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71773669-05cb-4136-873c-82b561ac29a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a77ca0a8-aebc-471a-82c2-3bbec80b2659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626ad745-bb55-4ffe-a398-95d57718c48e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d66596-aefe-44e0-b8bc-3db3114ad713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b47b461f-3e6e-4df2-adb3-b7dbe6e3565e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28653d52-5665-4f58-a950-fa276c5859a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b857a0-ef60-4dd3-a01e-eeacd1d54d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0287737-d5b3-4cf9-b7bb-78b0cee4dc96",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af3b05d8-1b92-4fd3-b8b6-7c5b5fae90a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93b12dc4-246f-4d2b-9234-353ad38889ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6afeabe8-21f5-4d45-9635-b06ab897e2c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d12839-c308-46e0-b4eb-93135360eb50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70867157-1902-4233-84b3-b61d781c8530",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4914c4-3645-4b76-ae00-30e3676a5fe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba9bec0c-d99c-412d-aa88-1f67674ee4ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15e7f7c-3c66-49ae-b5b9-f7125b0e64df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f526ffd0-b0b8-4064-8980-0386d371e92b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba343e77-f10d-4176-9481-9e1b70ba37c4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17583e20-e457-4796-a51a-0412b164dc0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec3578cf-2167-4681-875f-06771f3eb3fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f34c8b-2d7a-4f5c-b73f-5ab81ec825f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ece4cc1d-57ba-45c8-94e9-d9a99d4759b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474a9bcf-22f9-40e2-b2ba-f82d91305e4a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1ddcc1-6217-47a0-a09f-5157c9f12e6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad57b14-0be5-49fc-81ef-60b4ef3b9a71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8e3aa5-4f5e-42b1-a35c-ba15d0ccd208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0ceebba-b5a1-4db5-bc46-89607c89af73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b49449d-cae6-46f9-b7c8-762bc2a8a107",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92baa1c-cf0d-4a2c-8210-572ffa1cb264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e3ccdd8-7727-4fb3-95a1-1a5d761e50f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed15648-df2c-4ab1-80dd-df0dbc7368ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bff0c1ee-6032-45d5-8431-b6336d3f0649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffcbaec9-afca-4d56-aaa6-a597eb6bead1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67fa56d-9253-41a2-8e7d-5edd4b0d4fde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b6b7c03-6bb4-4c06-b98a-6035db3102a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08449cae-67fe-45a0-a407-7f20f2a4ab43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae901e14-b07d-4242-9e35-f32d11b0f96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd29e18-2b83-464c-aed8-ca6d2410a3fb",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d5887a-244d-4ec5-88f3-8e9abd71ec78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30b76a1b-5003-4dd2-a4d7-ec4595f71f0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2063391-fd09-4842-b395-09f9d978286b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57af9397-7f6b-4974-9ad5-cd2677fb9d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5f2ced-b873-4d17-8997-0f59f18a38ab",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742f7866-dd28-41d4-be59-4e7f4d56451b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10f362c1-490a-4a7d-8225-9e3ed1c58370"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55d7dda-c755-427d-989c-ee870a599cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07915ce2-01c9-4398-b8b2-401b3347f9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4dcaa0a-21b0-4105-b871-8311b09a0bb5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a530cbda-8267-46ab-9e7f-8a365390399f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7175fec2-2616-4dfa-b267-996e25d523b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "970f0db8-2ba6-4aeb-87e0-b54baad2034d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0428d8ff-f513-4152-8419-5601fee09831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06bb9aab-66b3-4c37-8c74-02dcc34cecac",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd1e2ad-47a5-4955-9b4b-d3b52894400b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2f3baab-baa3-40c4-89cf-2008cd023c29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f5a8eb-3a72-48dc-a689-d54f362d104e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e21cde-3437-43fa-b5ec-94dfd392252c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72dcbcbd-1c3a-460f-92c3-eaf50b6532ec",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbaf5e31-edb7-4e27-ab89-71e37a61b71e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf9d5c33-9aa3-4aba-8caa-eeb9c57974c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa2e57a-f02a-47e0-b025-ede6cb075702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a851fed3-8f4a-4957-a486-09ebdb356a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9130ab-e1b9-4ef5-901f-8410ff135657",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eee5134-b686-46f1-a1d5-65af9bd096d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32b9250-9010-467d-8753-ea72263f41c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9930f717-63f6-444d-94a7-d78fd5503d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "073348ea-31fd-4a81-b926-9ff59900d484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f5b567-9e65-4df4-8fdc-f1c9447e36cb",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e825ae7-27b8-42b2-8909-9b395d4b9fe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f706d4b-9bb1-45f7-b2b8-9401817c722d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d65ac38-0013-4d33-a401-9b6d8d8bf973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb80db98-08b5-4359-9d3c-d838636f1091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86bb069e-2f80-44de-a650-b8f0dfe4f6a5",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf07c4de-090e-4e28-ab83-a4eba8df7384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa7a5115-29af-4a34-b258-085f494f3a37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea69ed87-3cdf-4881-8a00-3897a630f864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2377c0a7-50d0-4fa6-98c9-a6291c10b52a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29513d8-1aff-404b-ac5d-0fa6cc8a135b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0aa88b-491b-4297-949b-d5e2c0d71e0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea1b5dc1-4905-4fae-8b38-2e6bea21a959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9fda663-0205-4799-b0bf-0323602f179c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "824799a1-e9a2-4352-8ee3-b3c82e93c6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aca9073-c718-4c1b-8b2f-f3f49ae83a32",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9627de84-6934-42da-baff-bf0e8c148736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f6368d-9fae-462f-aa2c-66c6daedc1b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3faad62-0490-4da3-9705-522c8f819e9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f9ea3a-8fa7-424e-9526-3cd131398116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d34ba6d-9f7e-4c92-8b87-39021453db3c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8b687b-d25d-4358-8d07-bda97f042e98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6da0c8f5-2897-42f6-8f63-70686ea8e7a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e63643-f585-4aea-8801-c7e090f4ad8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6172136-ec4b-4b77-9c61-7643b4865afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca0cfe5-111f-4447-b663-7a9fa44e429e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6e3cb6-0f3f-4efe-873c-0ba412dada76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0606957b-f27b-4ab8-b700-48bf34b3a77c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbbc2970-a880-4158-83c0-4115e9a6ed77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "726b79ea-6058-42da-ae36-8d0db4f89ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94eec915-4abf-4c9c-b750-bc494ba31c11",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ecad9a-337d-4939-9dcd-e082eaa04253",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ac05b5a-532c-4bbb-b7fe-f912cd6b1ad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0d0148-def2-4673-9700-6e1c85eb6854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d620c4f0-a35e-4884-afab-d6dc13c319dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be3e6c5-3a7f-4ea2-833b-68209a41e785",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbe747a-08af-4ffb-8fd7-39dd196a9ce6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a342515d-70a7-4651-8082-a6bf5cedcac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "454bc530-5399-4b02-8542-985f7a39522d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ee260d0-6f5b-441d-b300-2b78daeb6ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b79de59-36df-46a4-84a0-2b6666914f42",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8844adc7-86f8-450e-b86b-79b17fee3bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2b8223b-8576-4883-907b-a9e0f1c319b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16d4487-8b6c-409d-b839-426951f93786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24cd196-8917-4f61-95dc-cba33d1deb37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b6dc95-2670-4fe7-bda2-beb7000b157f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e44c995-84b9-44ce-b807-a7bb320e5a99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b79c4050-1e27-47b3-8e17-a3f35d802e35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b18020c-a476-43ae-8ef3-b4ce0d4002a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dee9ed5-ea0e-4d1d-a3e6-5c041eed8f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e5cab2-6667-4871-9053-a9f1550d0b1e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0982c438-8f39-461e-abeb-08da240bf160",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a6397b5-8839-407d-9090-731d52a7c086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff124b32-2f07-40ee-9a57-7b212e5a2490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4875321c-95f0-43d8-8531-288bbdf25354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00806523-f864-4c60-ac9d-c53639f845c9",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3dcae3-f35b-421e-a9a5-0651d75046a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b7e29f2-df01-4c43-a158-48f27265c5da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0065c90d-8ff6-48d0-9333-2f4c0c8f4676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ca96fa-31f2-43bd-99fd-a3d0b799c873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971ccccc-8bd2-4b4d-ad44-0066e52cbdcb",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93e4a1c-6fcb-4613-88ad-80391dfd30c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c664e93-5f21-4ad9-95bb-3a6d52904543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1680e9e5-b33c-49d6-a14a-0b76992c72d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc7730f7-63ff-4de4-b705-a6d02ab78077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0934834d-afb0-474d-aed2-4359b0b91f4c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e41020f-6835-4bd6-a82d-820dc83da773",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53f173fe-2712-420a-bc09-8a5923df2243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1677ea-a0fa-461d-b97f-1af0e11e7f7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e862a584-70aa-40fc-970a-02b40b53b6ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a75e781-93c2-4e58-a1f5-376a465e8c92",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1a3a66-cab9-47c9-a404-b0fbfd07e3a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a6a7d43-dde5-4b81-99ce-d5f75057348e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddd735e-802f-41de-9231-812069a2a700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "079328c5-59e1-455f-bd16-7b21bb7623df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4113b5-2325-44e3-b717-e1cefc65ec37",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dacf322-612e-429c-9dd3-07ac4952856c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed3f1f8-29c1-4bdf-8d4f-c10eeeabf76c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "518d27c7-227b-4c12-8320-4d09e5f7cb36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4885f7-5cf7-41ab-852c-460f5269e192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863d2d24-e49b-4f0b-9fd0-dd1013f1e2a6",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975f3b0a-3f8e-4cb4-a6b0-b517c455e73e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40028cfa-2517-45bf-b84d-e5f924cf45d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90eb80f0-54df-40ae-8fd5-f0bb3ded27ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "644e3092-36ba-407f-be94-514bfc25f258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5766cfe-603e-4487-b214-e974aeb6527f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd8fe5a-00dc-43b4-8394-b390da06f41e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d6757b-32ea-4f9d-8d3f-cfe5e2616cdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ccde5f-2ddd-4090-850c-57ef5f72dd39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae564eb5-cace-4fe6-89d7-31f18b0471db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a136b0-c3bc-4250-bbb4-9127a67d801a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7073a1-4644-44ce-9cda-e6139d55c63d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1a74cb4-40a1-4e98-9799-c1909f1563eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51cbba28-4dfd-437d-8551-fd4a457a5f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd42681c-e685-4a77-9ce6-af7bb0d5f1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1c0ae2-68d7-4ae1-ae0d-e4e5833479dc",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c322107-2ff4-4864-ba5d-d50d18285be4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc26d4af-dd27-4664-800f-a89e07acea2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6176c81-a59b-4a6a-9a77-962a8d69189c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb7278f-c260-4ec9-96a3-3d05c66136fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9400619-0078-464f-8c4d-68d9c298262c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4648c5b-8bc5-4c1c-ab23-b85b49f707b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c2a184-191a-4e82-97de-8cc22c2cb728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3baca435-0e1e-4801-9a81-b679cff0b536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "846a6c62-4958-4244-8be3-c3315f84c2b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee07d943-bbd7-4fa4-9e31-6871bd39b804",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b43002-ccf7-4c6b-ab0e-3a98dd554cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca818424-c4a2-4fff-8387-929b0bc98825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "945f9ccb-7c4c-4101-aab1-5e6e1e5173b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb94690-2dc2-4e20-8805-4777729ed09e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5800703d-9c57-4458-a71d-530da9dd95a5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67f4e44-cfab-4e37-825e-88e86c345dc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872f5573-62be-4fc4-b669-734a0fd90345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f07eb9-751a-4a7a-95d7-bda8c4ef6f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7542119b-5e12-4bf4-ad40-97f7c8b0cad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "692cf706-bbc0-4704-a994-5e740812b651",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efcf372-8d57-4b72-a192-b8dbf5c8ea54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a922b60b-bda7-496a-a927-ffae9a809edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "254623a5-407e-495a-81a4-1fe454f3e9bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebf6694a-7ac3-4b48-b608-43cfe74a5234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb999944-45d3-4216-9c6f-407b7e2d577e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85a4f16-79b7-4dd2-becb-ff4a35e6fbc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddfb09ae-09a6-48ba-b6d1-db150dc5d61d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "336afd6b-ec64-4a7c-b858-49c66690b1f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4074553-701e-4941-a103-cf5af3979642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a519a5-3768-406e-b53b-755a4e65e534",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f6070d-466a-4337-b333-1a0ff944c5d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f97b755-a54c-4e18-a80e-817c8fc33278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "303795b9-bd67-4f59-9a4b-3abe32a4551a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d75aec-e097-48b8-8ce0-0f12376a4a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d655380d-fe54-415e-84a0-d8728906ff35",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94efbd0-780b-4052-9ddc-3c49442a15f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4136f64-8cce-466b-8e44-ab67c0272dab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6685af5-08c0-431e-a9f0-bfac7a09b88a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d1dc37c-3985-46fe-99a3-61e894f7babd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ad1977-3095-4ae8-a594-2fdec8b7beec",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5eb94f-961b-4a53-814a-787277e631b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9169e602-6ac7-4685-a6e5-8d3094e63af9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a0514f9-1b37-4576-9ca5-66d6c182cdb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "917e867c-730d-4785-aaaf-928512b31210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f8589b-febd-458c-94ae-329fc421bb55",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618e7db6-3480-40a3-ab0c-7794059b7a43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d4e7726-31dd-4c64-b2ce-150e2effb823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd96fbb2-7e8a-4759-8b3c-d818425bc564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da1c7360-323b-489f-84a9-fa63be99f201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fefae3-b40d-4877-bc73-b07a02d96ea9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df203294-3a3d-49e9-a5a3-6c8945d8d7c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5f06b09-2c71-4098-a3c3-5d09874925f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a03021-b94a-4052-bc07-0793bd58ea25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18f171b-6efb-434b-bf18-70cfbc90810c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf66157f-c03b-4156-aa40-712b17c6f102",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92673c60-f73c-4b67-9043-31d6235d25fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f801aff8-8aa2-4442-8225-d1664bdc466c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd731906-dea0-45cc-a298-1dfe4f03e072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c532ce7b-f43c-4491-a3c5-95a9beb7ba39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e709ce-52d4-4df7-994b-f781f00f9e83",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776fba0c-81ab-47bd-a312-b3f4f6db7375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e061751b-5769-485b-804a-dc90c5594fdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4678286-828a-4d3b-b91f-c6b00ab73555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec4cce87-8205-4c02-90de-f898a4ac8e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1249a7a-5d8c-482c-8a16-a93ac651c6a0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415aed0a-5e89-425c-9dde-c1b1f28e54f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd4ae17-b44b-4840-92be-b1d225a2e0f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae50743-5ff4-4832-9712-bf41c6194477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0221ab8-6f14-4d03-938c-1e6dd75e37dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ace975-28ff-44db-96b7-4a2d301dc40b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ddd921-a44e-40d7-bf11-18c8784d8b9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a788df66-323f-4955-96bd-4c6e486e04e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f835c3fc-fbde-40a8-ba3f-025fd2ce29c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfaf1500-4e81-47c3-b72b-023995309375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b11846-19bc-423c-9306-53cfa4ff66a2",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0d70e8-6476-45f6-88fd-2193e2c51f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45b3b9e-8c22-4bff-bbc6-3f8199912254"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "691d458e-2b4b-4ce2-afb5-54cc99cca314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e9a1f2d-3f68-477b-93f9-a36a07a1bc06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3db8149-3de7-476b-aa70-a417ffed08e5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836553af-f38f-494d-912e-24a8b633b648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72033496-61c1-44a0-ad81-b771a6c70e54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ca83ea-bd1a-4d7c-a4e4-2d63e87602de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dadb614b-7365-4179-baae-d0ce8a18d1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc768555-3fb3-4a1d-ada4-85283b1ec00b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05099807-c0f1-447f-aad2-65a12dde091b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf92eee-0857-424d-aef2-a52238d17be2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a68107-a6e6-4b44-ae57-a20bf9f7cac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "792ce3e5-b55b-47dd-ba89-37f6fee4bcd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929f346b-4001-4107-9446-5a1f548b393c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d714a104-ac00-4f5b-8064-ab93b78d2e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e735c0f-321d-4173-9151-12d11f77e65f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8b4347-ea28-466c-9bdc-e93b2ab78810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0b3d151-e5ce-4c64-855b-bf17c82ca97d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aacaff39-fbf5-4feb-af7e-fb41cdab9519",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d78e4edb-ea4f-4f15-ae1b-249fc94856e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2150e326-7960-4280-9bd4-13949a18c16b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6566190b-9852-4237-8fd2-7863bb7b0196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52767dab-a392-4f23-a86c-eb40fe7ebb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc6418e-8f82-4618-9e6c-628edcd862c3",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1aa9d6-1a27-4db7-b6dd-13a5b1e83192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd7ef49a-f852-4065-8170-b3b145e3e12d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9972bb2-042c-47c3-b8df-4bb351dfbde3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "465de3a8-b8cc-4a05-a603-5f14f1c7cf6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ac8ea4-122f-4090-9b72-3cd818dfe2bf",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de09bb35-bdeb-4915-bf62-b4671e09de72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37462fa9-d83e-4547-8410-96bdda13feb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8749cc76-0297-479a-b34e-5d7886bd8396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "600f16fc-112f-4263-a58a-c25ccaf6f69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0087849b-9a3d-42bd-83c9-6546b0f14e2d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659a50a2-a33d-4456-ac10-dfe28480ed5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5449f86c-eaa0-49d2-bbf3-bf7ece7fab89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e66e4f2-661e-4b28-b267-b3b9aed31df6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5e21fd6-c5d7-40b8-9956-6881d90dffca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c04b4191-626a-4ca6-b5c2-1fed01684dc9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6811fe-b100-493b-b096-1ee06634487e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d017d01-0021-4e48-b781-cec8547677f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a85309-eea0-4f38-92f6-46e68adf78e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51b51fad-5069-46e6-9789-201db4aab991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86f2e29-122a-458a-aa50-689e4a97363f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ad984d-83aa-4e8e-9a13-a76fd4d27916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81f1aaa-ebf1-4b49-8a90-8380a0e5aa64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3ee928-bae0-4e85-8ce0-f7627b941553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c32131f1-acd2-44f5-979b-0c5fb5ebcbf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f89a4af-aebc-470a-9b1d-aa87f06b250f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24542e37-02eb-4716-be8a-e07b23718da8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d35d213-f91f-4a97-b02d-7adfea521116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea921ed2-12cd-4a7a-8b66-6ff6564103ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd3e90b9-0369-4b6f-accd-c2adf901005a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28e2616-b466-4151-b65f-0b38d1d606c7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c46238-0571-427a-a40b-89d96c1b106e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bd679ad-202c-4a78-ad56-82e480ddd2ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7206d2-c0d2-45ec-99f1-85933fd6d0c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f0a725-8a17-4c2e-9716-b1e5e754afeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd00675-4df5-4335-b808-3a58724ca7e6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64706c22-336d-4049-8530-04034150eeb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "616d0c6d-605f-4dd2-8a35-9cccb0f70df2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4816895b-226a-4eed-94e4-77d2bed95818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de37eab-77ba-4eff-aae5-67eab36cb393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c590773-be7b-4f3c-b418-d7210364899e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52dc0394-4f0d-492e-a4f2-12b04c099315",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a887117e-7b06-443d-aea9-6d2068a93981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f21b4163-08e0-4425-b610-319ff772ff10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f2e03df-1e3b-4118-982b-c3cceaff3043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49fa77ad-c2b9-4ef5-9201-dfe54d35b42d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55eb03c0-b7a5-46f3-8a7e-8ac5bd87dcf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8373ec9a-8169-49f1-89eb-1a6a101996d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c09a627-3ea0-499c-84f8-9e9fe0d50392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae7999f-6bae-4ad4-92ca-c19a889602c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d8455d-7697-4a8f-b20c-478944824919",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105957f1-674c-41ae-b9e1-71b55ce0fd37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "963c1a9e-d16b-4300-8713-385d85b6199e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9396c75d-c630-44fd-b14d-9382c236b025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aff94d5f-c341-4886-8056-bf9981ed8cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102ac12f-b1d4-4e92-8e8f-cbc9e18a1461",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b0e6a31-eb09-4c85-9bd7-1fbabd536451",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27647dee-5f0b-4dfe-8c87-c91446ec1c78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00bc7e7-ddbb-486a-99ee-540fe73192b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97dca977-f01b-49b2-995e-72713187410c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe15b28e-7367-467c-b40f-3a7ffd3c8bcd",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b868d5-edbd-451e-8c0a-54588bbcb826",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ff0d1ad-f83f-4146-8082-c5f3fd97c6e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fc7eda-be82-4155-b069-f416e5f4f376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b377752b-746e-4dfa-ac58-3cf33f015a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e94c3a-5434-445f-8f6c-baf54f901a03",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f794b3a-0fd7-4b41-8ccb-35f3fccee58d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18bdd4df-f757-44c4-b947-b1c28a32c645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05adddb-5a4e-4c76-a683-4da62ab4fa34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922d1200-0835-4c6d-b3df-e75fd19a8f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f202b1a8-d7a6-4bad-8ee6-c545b7e33e6c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36af14c-5d82-4cc9-8016-1fdf84fb9061",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49a623c2-b920-4ac4-ac67-2a5c465bc9b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afebe94d-a4a9-42bd-9b4a-b391d38e296b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c80a7f-8c7e-4d0f-8b63-c2c3ef62c929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de58305-421d-4a3a-8d34-f39b0c23479c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f7dc9f0-47f4-4a24-b51f-569033f5df00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "752b1363-be8c-43a6-9fad-44b6e25e67e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcba0713-36db-404d-ae64-277d5680d831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63ba6dd-9d48-439d-bd52-0131472b36bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848ace5c-777b-49c9-8bda-581faeec7022",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f26c77-9256-4902-92c7-3e08338930d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7f73b9b-98f9-4b51-b9c2-7b3d187e0301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3806976b-3fa8-4900-b850-82de6faef875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b500a0-6fae-41dc-9584-2889b591b90c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283aa6a6-e139-4803-a983-f2857eb1c4aa",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae792f3b-5d07-4933-8c3e-960dc1b2a38e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "189c9843-029c-4d46-8923-69eabce1c541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0e66b4-83f7-4742-b4b5-b21423ad8e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "186b09bc-aff0-4256-a50f-96dbfbbd1854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad64e44-3493-49ff-92f6-a175dbcd4b8b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2880ad6f-9ad5-4d24-8188-8aab6de94591",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4e9092b-bc77-4d90-a3d8-15dfe44fb3c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3967566e-a7ae-4f64-befa-d2ce056abb26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374c02cc-6df7-4617-aad1-26ea43273370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de29d7f6-3a9f-4344-acb2-a717e695fbeb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491bf9be-c42a-468e-bfe2-58262fa1cfaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb5c8e46-ba41-4670-948c-91cc832fd3c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "137c6a2a-f591-432a-bba0-2a263504ec3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120ddc78-a458-4ee1-b89b-e4593cf05b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0476eb7a-c75b-4b51-b40f-4e41a8557d13",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b370a5c-3e68-4114-8a56-83ce344a3bf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bc405b4-066c-4439-8b5d-6bf1653e6302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d570eb-ae4a-4e3e-83c5-0acb9682ad03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e26662-6930-4f11-8c62-e24f56f9dc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2067932-bbee-4226-a5af-0c0b6ebd5384",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b9eb80-b176-4739-852c-2d2868a9ab35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0841316e-4778-4154-8de9-a807b7b09230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b59221ff-83c7-4182-809c-a028e7ff3797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5363a542-43d4-47ee-a5c7-89fb971a2780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75f0610-a969-42f1-a999-792e81998f55",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e002c5f-aaad-4969-94c1-2358e5436620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84b4121b-5c79-4cfa-90a2-3e32e25fe1ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4c1624-530d-49f7-bc88-a6524a5480ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8a0b531-20fc-4629-94bd-4e0e22cd77ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fee9ee3-f599-40c0-942e-c00a43b21367",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7880a4-3bbd-4903-a5e8-e31393ad945b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64277a58-6440-4363-b9b9-77e425d62459"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c8b4a6-e56d-4971-8004-6a49c1d4b494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9614b6b6-62a4-4bb8-a200-999608fa5a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb7de3c-399e-4da6-b1b6-bf7ef3f7030a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74832801-c30d-4467-8183-f91a33ae8e86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab650cab-0048-4d01-9991-d252e65a1867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c41bfca-3c15-4327-8119-fd4be8c62a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89654891-4ac1-4cb9-a413-964acdaa4997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1da6427-bcd2-42ce-80f8-a9d5f1408855",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3afe31-125e-4005-8219-588821a516cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d7a952a-9cca-42ae-a36d-f552aa4b5253"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f761a98-6396-4e07-a996-db6775924caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "407f244f-c652-4d33-973b-f9a598fa8909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94cae520-bc59-49dc-8cfb-860985224fe7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca6cf62-8132-4ec1-b7a6-ca8f191cb8b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "273dcc65-87f4-4c98-8c4e-83bb4530f450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cbb77df-cfdd-47cf-97d2-49b0f88319f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0725f73b-2879-42ad-b04c-ea78151801b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f1198b-033f-45a1-b5d6-7308db60267e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340f10c5-4511-4da4-b734-916c4502c4be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c72c210c-0645-491c-8bc3-017aacef4ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2734b7-afd1-4493-a347-c782d1206f67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a853df3-929c-457d-89c3-754212035659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69983379-ba49-4da1-98b8-0d0fb9330a4e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa24a779-cff3-43a0-aa28-ead2286561e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c768289-d0f7-427a-a6eb-eac16cdcea4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a2e6091-6b52-4c61-829b-65e64a8bbcc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a7f1078-1eb0-4364-9248-b6848d4b0a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5af7893-2494-45f2-a901-d5ad7f005733",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc225b6-7a9b-48aa-9aab-ff8ce7a9a1cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c92a800d-612c-44c2-8d15-fc606ca3f5b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a23684-f851-48cc-b982-30be4fc8b2e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3dcb38c-61e2-4c43-a6ac-4067dd2b2016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90579caf-9f51-448d-88de-599b21e2a201",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5214fbb-e4c7-4dfd-a3ef-e20a4a65688f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d897820f-9fce-4108-88cc-4ea8dc566871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43cec9f7-1651-46aa-a802-c299314dce5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "044ea1be-170b-416a-bc77-4ad7ee1cac89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d2244e-b861-423a-893c-86fee6b4d516",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a612d59-1140-4d3d-8f8e-844516b39dae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "216c6bad-0bab-43d0-962b-160efbb7f403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e64f7c5-1400-441a-8898-4d99f9f420af",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31a1caf-c2f1-450a-a31f-880f581da7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17b46c1-a6fd-43da-b16b-7c9c130f4cd6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ad4277-1b38-4ed9-822a-a41e5e657fd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba22e514-a3a8-47a8-9c01-bd51811140ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87465ba8-c6bd-42b8-95cf-9a25eff1abd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "836995f8-82a7-4238-b04d-81dc88f9b0cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea88caa0-126e-4414-ad2d-c11733a5c122",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fbac23c-6123-445a-aaf9-af8c8b5a8d1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2887a39c-75eb-48be-b64e-72a8946e7bb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d5313d-336e-4eb3-95b6-f60dc349c4f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d89d45-d44b-4902-a4ce-477b9ff0b10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2566b588-a947-4481-b671-e9bdd31110ff",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b6f0a9-4ff3-4671-8260-cdae221176e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7b6259c-6ff4-45a8-8834-3a5cfe6527dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ee30f5-ec9e-487c-a396-7a1c525a9a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c3ae679-5e2e-4114-be1d-2d1b8f57de71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b001d80-88c9-425b-b4ed-c73614414c90",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1f712f-4474-4547-a66b-7d8864c28939",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a055148f-b5d8-4b2a-bb1e-071ccee294e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffd6289-5197-4d38-80d7-2d48555b9a6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3057815a-3465-4acc-a3ab-56fb265cbc1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e1a91d9-2b0e-460d-90d8-29b0315583b2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "864f76ae-eb48-46e9-b13e-235f1b254a6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c9d2eeb-271e-4198-a41e-c728a15d6b1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8cc3b6-28f1-4f55-9b5d-3c4a7a448f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00d16b4e-11ce-47a5-bd9e-32fd0a8c9b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798627e8-ba85-4dbe-b1e5-d2dc3c886460",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be5c0c1-01d6-4f27-8b01-15172244bd8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20dcb133-ea64-4611-b2fc-7f13e249a9b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ded6c5-98d1-4786-8f33-ff4c10438985",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e854e7-4930-46cd-9822-bfbc68ec6708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ca212f-f85b-40d9-a11d-42082017d007",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4a1b5d-b049-4c4a-95a0-4db0921ca6b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9ec8109-9a68-424a-93a7-700e66ba0b97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67dabb1-de48-4565-94e9-8baa7488495c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2abde8c4-6b35-4f87-ac81-6c5402cd5b8a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ace6ebc8-ede9-4aaf-bf7b-0d38ed6afefc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3be5f8c3-ef27-4c2f-9b88-7f9f4b850a33"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d599152-6b5b-4023-8c66-a952274ccb8e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "63ef8e67-8191-4cd2-96ab-8247d40f2897"
                    }
                  }
                ]
              },
              {
                "id": "e31dd643-7abf-407f-b09b-31b73a33de3f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "335b570e-afd1-4eeb-a347-3befc9e1c876",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca35aec8-c8f7-4885-b675-8dc2cd92a415",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0c206a19-d355-4c93-8211-d3c600ea42f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f602dd-5e5f-4ab0-ac9b-85472a501fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26b3a3c4-4445-4b26-b2cf-7079c6ea113e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c368f9cc-f98d-44c2-adf8-0702d2755418",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6daf2d52-0fc3-4f5c-a0dd-d8447c4a8eaa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "dd3b08b9-90f7-461c-bafd-a832c7c5cd0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75ec28a-90d1-456a-920a-7f9f37a225ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c99ed1d6-3d51-400d-ab42-55cb92e9536b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9304ddf1-8278-4208-9003-ea33f95e29c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4a03fad-96f0-4564-a5a8-e73a131824af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b8ba8c3-fe2e-491f-80cb-9919668823f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea7a8fd0-4e2b-4bd1-9105-d1a005a18a39"
                    }
                  }
                ]
              },
              {
                "id": "a5b5b0a0-cb21-497a-8107-82aff0b10522",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e9a76284-fbda-48ae-93eb-0f1e8bba2794",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df19f51-13fb-411e-8751-63b4647e5872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "feee7d68-7f9a-4de3-a369-1cabe1c3532d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a06f9f-d560-4d83-938e-2bf3b4dd759c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31667340-78d3-4978-96fa-e77b5be46a49"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6d81287f-f430-42bf-8881-2d283ce72599",
            "name": "Positive Testing",
            "item": [
              {
                "id": "58052a08-7d4e-4e2d-b3a0-106630f8d9e6",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e777f464-8536-412b-ae7c-c3e33d6faa09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3446019d-75b3-4603-b04b-cf091ca4278c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9927884-83f5-42e1-819c-8cfa6033bc80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98f720c5-1446-4f52-a143-48a6dfe9ae7a"
                    }
                  }
                ]
              },
              {
                "id": "ff403926-772f-4f7e-bd19-28b86977a098",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5adb10e9-00c1-4497-a79a-1ae574db57c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "271a2fb4-12ba-4f05-9a99-728cfaa7e705"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67da800b-c3a7-4317-8c59-26081c967e43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11643553-fd7b-4889-a8af-c0274dec97fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4506a9c-52f9-4699-8d33-78ab45af5e2e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6eaaaac8-9d03-4b82-84d6-10f2c622dd2a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d3a698d1-d78f-49bf-bcfd-290db67c3e58",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1d78a779-73e1-42d6-9e36-c714a09adb3c"
            }
          }
        ]
      },
      {
        "id": "5ff1b3db-0495-41bd-ac0a-e9a2e71b4061",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0d146aa5-610f-44a1-a513-e89db5b4a828",
            "name": "Negative Testing",
            "item": [
              {
                "id": "42875b54-3209-462c-ade9-125c4840775a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f9ab5e1-ecdd-4f21-bd72-73bddb750ce9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b1798c-0f88-47a5-9c3c-54f3116605a9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9b0b91e7-44c1-4f20-908b-049a5602ddf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2a8f92-97b8-4fbd-b093-46838ea989eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb95bdad-de6b-46f6-b73d-ad61dd44a64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ade91f9-60f6-4ae0-8cad-7c2a297594a6",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45a99f7-3f92-488e-9576-652aabdc724f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "420b367e-d481-472e-a0f0-0ef7eca9ed1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f2a479-ba54-4f28-a87e-63e8ee9db5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7889d6af-205f-4b3f-9e9d-d88655c8be41"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44932068-e3b9-4b73-888d-dc697fb16287",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de903800-037f-4f56-bef4-b43e7a931e86"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cec33c5f-5e33-479c-a092-c762affd7fd5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1fc9a309-fc4c-4fc2-b98e-1bc1e4d5c301"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b01ae369-d6b4-4049-8a9b-7fa9e095cb37",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9b922877-3938-4162-ae79-88a48f150770"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83fdbad7-11bc-45f3-938f-d85dc945bed6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e99ebf36-c11e-4d7a-9920-09797b8f6aa2"
            }
          }
        ]
      },
      {
        "id": "efda4f49-a1ca-4c6c-b643-25cea1b03293",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "142a84af-d97c-4093-96aa-a4a1490369c3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "64bb91c5-5004-4c63-ab28-5de7af237810",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1aac26d8-3c24-4364-8b47-e20a74658abd",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e828ad9-eb9e-469a-bf82-75b9cc4a7f31",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "11bbb932-6379-4104-888b-1c808cc34c3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "501173ee-4711-4a26-a972-2cfbfa10f9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98f45bd3-b389-40dd-ae27-5a6b2eb1490e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca74f963-54bd-4269-8157-dac4242179d2",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78455814-6c1d-48e1-933b-cbaf202b570e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "64b40b44-8b62-43aa-aa92-9013994e9690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04155049-0e7f-4174-ba4a-c8e2e1790af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2579ac3-c397-406a-92cb-14f23352db9b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53078b1f-38f3-4ffa-bf0d-2d08a3e7dbc7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "caee2504-0c0e-49e5-8d36-ba9818c3f4ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a6a9325-2f4b-4241-ae14-2839ce3fac18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afecc9b3-f2bb-40fa-b6b2-ad414ce93c34"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9327fa9b-f8e8-432a-8387-8a52e5c5c2d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b621c7d7-073b-4ad1-a3cf-3c3cd080fa8a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b51b3e0a-4f36-4377-92d6-e90479689a16",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d91e2a0-91ca-4a2d-a663-7a588d05aa2a"
            }
          }
        ]
      },
      {
        "id": "63d46b5b-2998-4dc3-8fd8-7ec6b34a94ed",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b4a99edb-722b-426a-a488-a47e85be7484",
            "name": "Negative Testing",
            "item": [
              {
                "id": "acd9a8a9-ace1-491f-9bca-41e142a6874b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "09c27d0a-c56a-4525-ae45-34301d2759f9",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c95f46-d4ca-476d-8822-f6878048e220",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d01ffb65-cc7f-407e-8351-daa98fc7cab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2f507d-e2b1-4a77-bb20-f82e23072f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e24c4fc-bbbd-4802-8966-b47fe8abf7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323fe24f-59d4-4b84-86eb-146ec5712410",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2054de38-a018-4240-842f-65730e39eafc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2eed3de1-03c0-461b-9296-aa459ef95877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "510e123b-c487-4df8-a3ac-029c4121abc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aace77fc-75b6-4d49-b752-30071130e200"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64861e4c-50ef-4b26-9b00-5a9e8c6a0b63",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10a6bbdb-b0bc-4a33-b074-08beb9ef6c45"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "97cff060-0737-4705-8989-9aa6a6e2645e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e505b06-777a-45c2-874d-8b3a9f59eb56"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3764b2dc-0cf8-41f8-8ad3-2013dcce7f40",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b0ac9e3f-aef3-4fce-b130-3e20678e90a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5970a293-4f9d-4a18-a881-34ca9dc29172",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "28d15176-d851-4c91-b43f-81b9d745d242"
            }
          }
        ]
      },
      {
        "id": "850cb3a6-cd45-446a-acd0-212e725654a8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf42dd85-658e-483a-b031-334c352b1842",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0eec1040-b47d-4b98-b51e-3a04c20373d4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "19448db3-8428-44f6-a254-e2448613d8c0",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ebbf066-ba51-4a25-8497-64d3e7309f0a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d065e3a-a050-4e6a-847f-1f8c79601e1b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 35
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 18.35907335907337,
      "responseMin": 6,
      "responseMax": 273,
      "responseSd": 37.314876709588106,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677285665952,
      "completed": 1677285681391
    },
    "executions": [
      {
        "id": "e4acdad3-3f2f-4516-8cd7-06bc1a908280",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ab4ccf5b-7fbb-423b-b41d-706b393d8119",
          "httpRequestId": "97e113d0-7351-49f6-ab67-67637d9cb4e7"
        },
        "item": {
          "id": "e4acdad3-3f2f-4516-8cd7-06bc1a908280",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "13405ca0-0761-44aa-8fba-24c6d632124c",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 0
        }
      },
      {
        "id": "103721b4-eb09-4371-8488-a0a013e9b366",
        "cursor": {
          "ref": "89af3348-1073-43ed-9095-84d7e697e858",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4c3a8e3a-1f26-4b15-995c-cf45981063bf"
        },
        "item": {
          "id": "103721b4-eb09-4371-8488-a0a013e9b366",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "166805b3-e3ee-4fc7-8818-579d338628a7",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "e50f484b-991b-4087-b654-1ec5b42ae416",
        "cursor": {
          "ref": "f2a67733-6618-46dd-9dea-2ef3c780add2",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "26c582e1-f871-40fa-874a-0e9e1dc48aa7"
        },
        "item": {
          "id": "e50f484b-991b-4087-b654-1ec5b42ae416",
          "name": "did_json"
        },
        "response": {
          "id": "ce963d77-f2d9-4287-862c-300507e8170d",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898c5976-3379-44c0-9634-5df4fce707e2",
        "cursor": {
          "ref": "52a0794a-a1e9-44b6-b614-80717bd763f1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3131fbea-7876-446c-92a9-f18e1819d7e8"
        },
        "item": {
          "id": "898c5976-3379-44c0-9634-5df4fce707e2",
          "name": "did:invalid"
        },
        "response": {
          "id": "f16b0843-f521-47e4-b830-72b3c1143006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "898c5976-3379-44c0-9634-5df4fce707e2",
        "cursor": {
          "ref": "52a0794a-a1e9-44b6-b614-80717bd763f1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3131fbea-7876-446c-92a9-f18e1819d7e8"
        },
        "item": {
          "id": "898c5976-3379-44c0-9634-5df4fce707e2",
          "name": "did:invalid"
        },
        "response": {
          "id": "f16b0843-f521-47e4-b830-72b3c1143006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "cbf74f2a-672f-4139-b8ed-ac520d55c2c1",
        "cursor": {
          "ref": "8355f63c-9d96-4eaf-820a-b80696c95e96",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2573e26c-ac29-4aec-9fd0-6cf0e401715f"
        },
        "item": {
          "id": "cbf74f2a-672f-4139-b8ed-ac520d55c2c1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8d0d489a-7dd3-4c3f-aac5-2b8d45e9269d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 109,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959413dc-ebc2-41a1-a81c-55c0058cb713",
        "cursor": {
          "ref": "a79ee2d7-8eed-462b-8a43-4c9e577384bf",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0261f0f1-4715-4440-9ca9-b9a149707edf"
        },
        "item": {
          "id": "959413dc-ebc2-41a1-a81c-55c0058cb713",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f7bcb2ea-53f6-4c80-8867-0e8ab1f292b6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c75d86-3ebe-4a53-bea4-e90d1c327765",
        "cursor": {
          "ref": "aaaf94e9-a687-45cc-b2a9-4aebf95b7a58",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cebcb411-c40b-40fe-a28b-4aef2a82c1fe"
        },
        "item": {
          "id": "05c75d86-3ebe-4a53-bea4-e90d1c327765",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "88b24531-f3d5-44fd-bbdb-3dc9fd09f973",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "121c3926-2686-4294-bce6-7198ffbe15ec",
        "cursor": {
          "ref": "6e113043-719a-44d1-9fef-08f4cfba153b",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c8862af9-1325-4cf0-92f0-14319589d022"
        },
        "item": {
          "id": "121c3926-2686-4294-bce6-7198ffbe15ec",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "34b2b169-f398-459a-8dd1-8555f7392e1a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "121c3926-2686-4294-bce6-7198ffbe15ec",
        "cursor": {
          "ref": "6e113043-719a-44d1-9fef-08f4cfba153b",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c8862af9-1325-4cf0-92f0-14319589d022"
        },
        "item": {
          "id": "121c3926-2686-4294-bce6-7198ffbe15ec",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "34b2b169-f398-459a-8dd1-8555f7392e1a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3015944c-6c4f-4a5a-a3bb-efd78691967f",
        "cursor": {
          "ref": "87d63c50-7cfa-4dec-a408-7a200186e881",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2ebbbedb-ec6e-490f-b520-075435f2a581"
        },
        "item": {
          "id": "3015944c-6c4f-4a5a-a3bb-efd78691967f",
          "name": "identifiers"
        },
        "response": {
          "id": "fcd52b60-3e76-4c5b-812e-a5648099251a",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487b59d5-863c-4daa-8009-2c009d72c2c4",
        "cursor": {
          "ref": "bc532884-8425-467b-b80b-31cfe877904f",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "52b75d56-0faf-4015-ae6c-43e1a0979eef"
        },
        "item": {
          "id": "487b59d5-863c-4daa-8009-2c009d72c2c4",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d4656934-63ec-47c5-94d0-992ac3d3b6f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487b59d5-863c-4daa-8009-2c009d72c2c4",
        "cursor": {
          "ref": "bc532884-8425-467b-b80b-31cfe877904f",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "52b75d56-0faf-4015-ae6c-43e1a0979eef"
        },
        "item": {
          "id": "487b59d5-863c-4daa-8009-2c009d72c2c4",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d4656934-63ec-47c5-94d0-992ac3d3b6f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab686a70-8b1d-48a2-93ee-0b1d07b36d02",
        "cursor": {
          "ref": "d0c156cb-bb37-4b08-99b9-c5cd7b99765c",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "396b2140-9630-467a-be68-88524edc081d"
        },
        "item": {
          "id": "ab686a70-8b1d-48a2-93ee-0b1d07b36d02",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2b2f948b-982d-4780-a465-1294d28a3494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b70a570-3cb3-4e89-9517-de993384ad40",
        "cursor": {
          "ref": "0287954e-a41f-48fc-b8cf-ed14105a92a3",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f4bc8219-3cd0-4c28-96af-9d2408b0b899"
        },
        "item": {
          "id": "7b70a570-3cb3-4e89-9517-de993384ad40",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c9b1656e-5374-4133-b1a1-2a59786a94dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f18e2b1-716e-4266-bb7b-e1d16a32053a",
        "cursor": {
          "ref": "8629f913-4095-4a46-82d5-7d49c1d0548f",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4d31f5f5-4c37-4a92-8605-df8fe08f555b"
        },
        "item": {
          "id": "7f18e2b1-716e-4266-bb7b-e1d16a32053a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f48341aa-92d9-42f3-be1d-4534c4cb0fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da7bd5d8-cedc-437c-969d-ddbaaaff9e10",
        "cursor": {
          "ref": "13bb2862-51e9-4506-9b34-e7a3b4b6d466",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9ab0829f-13a3-4278-a77a-26e46670603b"
        },
        "item": {
          "id": "da7bd5d8-cedc-437c-969d-ddbaaaff9e10",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "483ade22-1b9d-4aeb-aaa9-8f0c8550c2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6f02f1-3fbe-47a0-ab86-cfc1da1f0d4e",
        "cursor": {
          "ref": "0e7f650b-a1be-4302-be96-1516d54737a0",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ea74bc2a-c339-4c86-9ca6-d1d13b9856c5"
        },
        "item": {
          "id": "9f6f02f1-3fbe-47a0-ab86-cfc1da1f0d4e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2d438f7d-1a0f-40e8-9d0f-580bc15e16e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7bdbcf-b229-4f5b-ac25-3d8a1ff50445",
        "cursor": {
          "ref": "7b275808-a89d-432f-a468-4cc47ccf9b87",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "278a3134-adea-457f-ab4d-9cd88969bf59"
        },
        "item": {
          "id": "2a7bdbcf-b229-4f5b-ac25-3d8a1ff50445",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "bef598a1-1fbb-4620-9408-5c3805c37d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60dadf4d-c240-46db-b30d-5f05ecd1d9e8",
        "cursor": {
          "ref": "ccfaba29-034b-4b29-b357-0fa2a613ef86",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f037cf8a-d907-4840-b85b-c5764341606b"
        },
        "item": {
          "id": "60dadf4d-c240-46db-b30d-5f05ecd1d9e8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ebed2ba7-f8a7-4420-8a72-41a93c77b3ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b431a9-075b-4914-800e-56574dfe68d1",
        "cursor": {
          "ref": "f3c3f435-379f-437e-ba92-d67cc9a1cb53",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "cd2047d2-1751-40ca-849c-bc6817b735d0"
        },
        "item": {
          "id": "63b431a9-075b-4914-800e-56574dfe68d1",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "95e19dac-1a12-4026-a23d-c6b76d1edcb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec0b455-c0d6-4509-9ca2-651246f9301d",
        "cursor": {
          "ref": "a7e1a92c-f1fa-4b62-8e8a-af9752fd603b",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a2fbdd8e-e5c9-4635-b36b-ca83549f85af"
        },
        "item": {
          "id": "0ec0b455-c0d6-4509-9ca2-651246f9301d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f63fbd2b-9c4b-4d52-a2d4-dc6f097368a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "917292ba-7634-473e-8dcb-3bc8aaeaeb4c",
        "cursor": {
          "ref": "848b1334-d114-4b08-8e2e-aec13a51c04a",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "80a9d5f5-10eb-491d-b3b0-2183a5da3edd"
        },
        "item": {
          "id": "917292ba-7634-473e-8dcb-3bc8aaeaeb4c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "15eef231-c943-421f-a152-bd24d26f2068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca9dcff-0425-47dd-be16-4ad149a7b791",
        "cursor": {
          "ref": "f710b56e-492d-4444-9db6-04cd64bd19b6",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8aa538c5-44b4-49fa-a6ce-5eb9badd1313"
        },
        "item": {
          "id": "8ca9dcff-0425-47dd-be16-4ad149a7b791",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "afa14950-8e2c-4458-a19d-808941a6e6dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41bdce8-1d4a-44c0-b352-dccf1860c38f",
        "cursor": {
          "ref": "ad1f0de9-8231-479c-ba81-eb65c31c9698",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "db8a010b-792d-47a9-871b-16dda3ba4f85"
        },
        "item": {
          "id": "a41bdce8-1d4a-44c0-b352-dccf1860c38f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0189d164-ec80-4c65-868d-6724168bff0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f355b84e-fff6-4242-8647-9d7ec52e786b",
        "cursor": {
          "ref": "e00be947-0543-42d2-9c4c-bcbdd04261ed",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3a300e94-55e6-4a1f-9dbc-db957a103017"
        },
        "item": {
          "id": "f355b84e-fff6-4242-8647-9d7ec52e786b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3f5da460-ff8f-487b-967a-83ae9a4e2f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44c39ca-fb71-4e59-a9db-dcb24c905b1c",
        "cursor": {
          "ref": "155356e3-3ae0-433f-be9e-f6b626f98f43",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "75723998-4e21-4aa3-9799-57d7a4670406"
        },
        "item": {
          "id": "b44c39ca-fb71-4e59-a9db-dcb24c905b1c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a7296fda-fa17-458a-af46-75af762ed595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c63b9e-e8ae-407f-a6ee-fe8279296b3f",
        "cursor": {
          "ref": "b0c3e49f-7822-45d8-9ea7-f2403f476458",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b29ccc56-59c7-41fe-8d6f-a31447bcc969"
        },
        "item": {
          "id": "c6c63b9e-e8ae-407f-a6ee-fe8279296b3f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "8d1f92bf-590e-4229-abed-6c468c0b3ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5ffdb4-d825-4a9b-b7e4-cdcb123f9446",
        "cursor": {
          "ref": "5243323a-082c-4b88-b58f-bf94e5724f71",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3fbc8819-7178-493b-9782-bc2568ca0f26"
        },
        "item": {
          "id": "df5ffdb4-d825-4a9b-b7e4-cdcb123f9446",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2edb7f59-9d61-4877-a7db-d9f2329bffc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b569e6d-23c5-42bd-9e09-135e05465f9f",
        "cursor": {
          "ref": "41edc4d0-27e8-4a16-a476-949513ef77b6",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3fe39cf5-149a-48c2-9422-4993fa0465c2"
        },
        "item": {
          "id": "8b569e6d-23c5-42bd-9e09-135e05465f9f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3dd677c2-3467-4ef2-bc56-03c0c8ed75dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2745f920-6203-4627-9532-499ab9ab9d1a",
        "cursor": {
          "ref": "b5458fee-948b-4913-a687-b0f350d08c9d",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "13c2b5de-2a21-4006-bfbb-9e1cab3a315f"
        },
        "item": {
          "id": "2745f920-6203-4627-9532-499ab9ab9d1a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "960b4792-3f92-476f-9157-886f520b5e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72082b99-3dd1-477d-8d25-0f0785fbadb8",
        "cursor": {
          "ref": "12c5d138-baff-4656-a9bf-abe119b79885",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4648cea5-114d-4bd5-a113-c899f0d9dc2f"
        },
        "item": {
          "id": "72082b99-3dd1-477d-8d25-0f0785fbadb8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "20e5beb4-9d1f-4ab8-9cdb-57f4db520b52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c7a5eb-0d6d-4050-ac94-33dc752ec0f0",
        "cursor": {
          "ref": "b26ea749-766a-4b4d-9af0-db87d8e0293f",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c5489d2b-d9ad-406c-9075-3d2635f669b7"
        },
        "item": {
          "id": "59c7a5eb-0d6d-4050-ac94-33dc752ec0f0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e2b5756a-df89-4851-89d9-2fbead12e317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5cfd52f-5187-4268-bd22-4972633e2a8f",
        "cursor": {
          "ref": "6322c45d-1f19-4652-8543-a22de114b791",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "39bfd8ab-ead8-474a-b9a6-25fbbe7d4f6f"
        },
        "item": {
          "id": "e5cfd52f-5187-4268-bd22-4972633e2a8f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c3edd537-4923-4957-ad5a-d388b368771a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3845c75-1c5a-457b-b9f1-55f8b2b98ed7",
        "cursor": {
          "ref": "9ce116f2-0580-422f-99c2-fce64ffb1865",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "868ee8bc-cad7-4d26-8d3c-a43da6cfcc4e"
        },
        "item": {
          "id": "c3845c75-1c5a-457b-b9f1-55f8b2b98ed7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "fd31b6ff-6927-40ad-bc7a-bbefd8108b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b73ede4e-0dd7-4e99-b992-d58540b190e8",
        "cursor": {
          "ref": "369f2127-c3fe-4cd3-9e83-f1b21aee7413",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "68e6e448-7a81-4c45-8684-f85de00fef04"
        },
        "item": {
          "id": "b73ede4e-0dd7-4e99-b992-d58540b190e8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0c42689a-663d-4d7d-9116-e14b5fb562c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ec9ec0-c32a-400b-a528-db65ef6143e4",
        "cursor": {
          "ref": "9f22b58d-4b3e-4d58-bf48-ca35c4be407c",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "dd009709-835e-4064-9211-e418d38f6eba"
        },
        "item": {
          "id": "30ec9ec0-c32a-400b-a528-db65ef6143e4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b80b7aa8-9729-4081-beff-536130306766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96706e1d-1081-41aa-9294-d37416e548e8",
        "cursor": {
          "ref": "e79c6168-3930-40a0-9e59-52f7cb009cff",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c99196ff-2a7c-4c00-87fd-ad64b82d38d3"
        },
        "item": {
          "id": "96706e1d-1081-41aa-9294-d37416e548e8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c9427ca7-eb43-4ecd-af7f-60c9cd8e91a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb7dfa2-d75e-4713-a44f-adff5de391ae",
        "cursor": {
          "ref": "cd025f09-e084-4517-b0ff-a0f8785b9195",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "65a06280-d71c-4c75-9297-c7bc66a7f197"
        },
        "item": {
          "id": "9cb7dfa2-d75e-4713-a44f-adff5de391ae",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ed8842b7-348c-4e3e-a326-8890ae2d295b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09a41b7-e91b-4566-8929-2751859cfc58",
        "cursor": {
          "ref": "c183fddd-905f-4e63-8553-5aba3e43dee1",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "fe92e62e-c939-418e-9e64-65c770a1e797"
        },
        "item": {
          "id": "a09a41b7-e91b-4566-8929-2751859cfc58",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "cf81d06f-1851-4899-91df-139b22bba3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e04d6513-0a39-4e94-8f10-60764af3e832",
        "cursor": {
          "ref": "ab200901-f3fc-44d3-b2bf-d4f2b22eb09a",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "488b905b-82a0-4685-be96-b3cc00fceb3a"
        },
        "item": {
          "id": "e04d6513-0a39-4e94-8f10-60764af3e832",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b7ab72c7-8cb5-49d2-9e76-8efc1853b47d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7235db-ebff-4e73-8122-dbb714b6b349",
        "cursor": {
          "ref": "35fcad89-d8f6-4916-9090-e26a3b21ac2e",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5fe5ae35-8eb5-4c5b-b984-38ea2d748297"
        },
        "item": {
          "id": "dd7235db-ebff-4e73-8122-dbb714b6b349",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5f5a38c4-7359-4a53-8a94-b4b961f0e873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b1620eb-05fd-41aa-ade6-8c14d187a41b",
        "cursor": {
          "ref": "b23f8909-498d-4ece-a759-e4115fa4bf49",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d5ff37eb-1f17-48ed-9841-af346eadd6f0"
        },
        "item": {
          "id": "8b1620eb-05fd-41aa-ade6-8c14d187a41b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "aeaf621e-a6ca-4680-a3a4-bb9f4b894dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fcf84db-461d-49e1-be0b-03585496548c",
        "cursor": {
          "ref": "ec44e875-1dd0-415f-b0fd-f77af1726232",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "43434984-49f1-4e5f-bb96-1299e939885f"
        },
        "item": {
          "id": "7fcf84db-461d-49e1-be0b-03585496548c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7f88ebb1-603a-4278-b03d-a5b871e5df22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64bbbfbe-d2fe-47e9-a4ea-c0d832140b8f",
        "cursor": {
          "ref": "b25d4c5a-5d12-4310-bf82-5e96307ee126",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "78e12d39-ce75-434a-ae50-6f526ed54d72"
        },
        "item": {
          "id": "64bbbfbe-d2fe-47e9-a4ea-c0d832140b8f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "619a9ac5-f002-4ba1-8e19-457c35b0fbd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f67a4aa-33c0-4312-a3cf-280fc337c24f",
        "cursor": {
          "ref": "23d9f53d-6b85-4f0f-82f3-f28b54a01db7",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "98de55be-5dbf-4bdd-b442-5f43272bef3e"
        },
        "item": {
          "id": "6f67a4aa-33c0-4312-a3cf-280fc337c24f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e08670ac-2dfe-4bf8-b9d9-b5470dac3a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c10b507-0724-4ee8-9478-c28287b9c2d2",
        "cursor": {
          "ref": "afc84e76-cfff-4e68-b896-67b3a67b3345",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e2d3d7b3-63d5-472a-877e-3fb57dae0356"
        },
        "item": {
          "id": "4c10b507-0724-4ee8-9478-c28287b9c2d2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f0ae80bc-1663-4f23-b89b-46695a0b2e6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1477163-2c1a-481a-9087-cbfdcee166cd",
        "cursor": {
          "ref": "ba317424-a142-4e4f-b61c-315bcbdea3b1",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "0d8ae49b-d22c-412c-8eb0-2925d97d75d3"
        },
        "item": {
          "id": "c1477163-2c1a-481a-9087-cbfdcee166cd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e4b98288-f302-4731-943e-4618b1fd3116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "220b319e-77ab-4b5d-8b3a-9c344fcb023f",
        "cursor": {
          "ref": "7f88c5f8-50c3-4905-a74b-347e3c68c9d0",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ea49efff-1bd2-4eff-9ad1-946a88289767"
        },
        "item": {
          "id": "220b319e-77ab-4b5d-8b3a-9c344fcb023f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3c031de9-16fe-4148-800e-0c5320308183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea1099bd-9e96-4936-a2c1-17969c58c2a0",
        "cursor": {
          "ref": "6c8624cb-4c07-4fb8-9765-eb9476867ac9",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5e5e7aa4-a803-454a-a1a9-47f08c52844e"
        },
        "item": {
          "id": "ea1099bd-9e96-4936-a2c1-17969c58c2a0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "cf8378ed-d4ed-4b0d-969d-e34d36f9d891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d505eb0-34ea-467f-886c-88bb9bef2d1f",
        "cursor": {
          "ref": "e9a21775-42aa-4fa1-a826-f5f991ccab34",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5ad37d3d-538e-4d16-87a7-4f23ae9935a4"
        },
        "item": {
          "id": "2d505eb0-34ea-467f-886c-88bb9bef2d1f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "71dbe10f-89ac-4fd8-a0c4-b5430f869666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d33b2c-612b-4c66-8078-8d443faf85a7",
        "cursor": {
          "ref": "c22be140-8f7b-4749-a6f4-6481c4ca6215",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3aa394df-5b99-4ce3-96b5-0a1be9e60362"
        },
        "item": {
          "id": "c1d33b2c-612b-4c66-8078-8d443faf85a7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "26817dca-a2f9-4901-a244-088ed73e49d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdca405-29f4-431c-aea8-e7abae8a2f84",
        "cursor": {
          "ref": "8ccf0e35-8b14-43d5-9558-799bcb6e20b8",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "85835c15-751b-47cd-9af9-1bedfc249e31"
        },
        "item": {
          "id": "1fdca405-29f4-431c-aea8-e7abae8a2f84",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "34821a72-da9b-41b7-bee4-09e53457c3bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4077fd2c-ddad-4733-9541-27671b0a09dc",
        "cursor": {
          "ref": "6d7b1821-8ffe-4f7d-91d2-6717ae28bcf3",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e7f2f571-cd17-49f1-8d03-d0729fb151d4"
        },
        "item": {
          "id": "4077fd2c-ddad-4733-9541-27671b0a09dc",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4e918bb4-8a12-459c-9c7c-dab898154b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbcc47d2-9612-4b49-a57d-cf52468ca5e3",
        "cursor": {
          "ref": "0ce8931d-0300-4dfc-9333-eccfa6beb85d",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "06053444-8ec2-48d2-9e85-16be684d298c"
        },
        "item": {
          "id": "fbcc47d2-9612-4b49-a57d-cf52468ca5e3",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e3734d47-d2e6-46b6-9c99-aef355e2f9b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "d8eb4424-121a-4879-b5a4-1fe5d06acddc",
        "cursor": {
          "ref": "89c79684-cfc9-4cf6-8ae2-1508b376889a",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "18091ad6-cd01-457f-9564-37c24d171051"
        },
        "item": {
          "id": "d8eb4424-121a-4879-b5a4-1fe5d06acddc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2e022915-8f81-4551-b9da-d91831e6a4cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7566730b-2706-4c49-81c8-be11ff409dfc",
        "cursor": {
          "ref": "74bdb496-3fed-4026-813b-d38c91097f7c",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9c7a4a22-3134-45df-a654-d34528149dcf"
        },
        "item": {
          "id": "7566730b-2706-4c49-81c8-be11ff409dfc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "dd951e1d-62b1-4e72-bef8-16a4a8fdcdc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f198ac-483d-49fb-9ea0-dbe3c645f72d",
        "cursor": {
          "ref": "d2d8641a-05b4-4e7a-8aa5-3c5572fe3738",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "904655bd-9fda-409e-94c3-8a443a7df9b1"
        },
        "item": {
          "id": "22f198ac-483d-49fb-9ea0-dbe3c645f72d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "97545fdb-1531-4019-9e3e-d1fb39a420a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3319fbca-75b0-4169-84e3-1e21b25e30d7",
        "cursor": {
          "ref": "661372f6-b86f-4f40-9751-ebe990a4938e",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e3582813-38dc-4c87-83cd-19d83eff92ae"
        },
        "item": {
          "id": "3319fbca-75b0-4169-84e3-1e21b25e30d7",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c691c39a-0b89-4154-96e1-a7c1a266623c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf43b842-c59d-4031-b037-fd8deac20f85",
        "cursor": {
          "ref": "e7d344fc-0ea4-4ccf-9df8-74c4895dea76",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0fe870c4-629f-4d89-99b8-0b20888b3e1b"
        },
        "item": {
          "id": "bf43b842-c59d-4031-b037-fd8deac20f85",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "44830f31-6390-408a-bb3a-cc94405414bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c379ab-0aa1-47a4-9141-d2ad416915fd",
        "cursor": {
          "ref": "8c7327ab-96a7-41cd-9e9c-d6bbcb745800",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "13fa6157-348b-456b-82cc-8718b7e24758"
        },
        "item": {
          "id": "d0c379ab-0aa1-47a4-9141-d2ad416915fd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7a2ab5e7-93d4-45f5-a5e3-ada1249cc6c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91cb93f3-3d1b-4ee8-a845-9900002e76f6",
        "cursor": {
          "ref": "630c49cf-8f35-4095-8f11-4e9453f09c8b",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0c457129-5f0c-4561-99ae-4ae0f023b974"
        },
        "item": {
          "id": "91cb93f3-3d1b-4ee8-a845-9900002e76f6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "99d42f49-1364-4879-9e63-73b471c428be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23615629-6ad2-4771-b38d-88ba0ed801f2",
        "cursor": {
          "ref": "df489d94-b4bd-4090-8daf-6fff0505a731",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "991a5be6-46ad-4cbe-b7c4-8da6a2d80037"
        },
        "item": {
          "id": "23615629-6ad2-4771-b38d-88ba0ed801f2",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9299c758-2fd0-4c74-ae2e-fbeb405b3b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fdb2a8-80bf-4f3f-b378-ba1f05585fc5",
        "cursor": {
          "ref": "35a866ff-fe7a-466f-97a3-aeb83c3b5b57",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "992af346-6317-4992-807d-d9a6cd647369"
        },
        "item": {
          "id": "97fdb2a8-80bf-4f3f-b378-ba1f05585fc5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "129978c3-95c8-42ef-a686-cf515c8eb098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2f81f6-9ab6-461b-8f75-abc0051ae9ea",
        "cursor": {
          "ref": "28fb88b2-1fd4-420d-9205-4b829c86ce60",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ce361965-9186-4b6b-8783-a792d389d43b"
        },
        "item": {
          "id": "6a2f81f6-9ab6-461b-8f75-abc0051ae9ea",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e0c715c5-17a6-4953-ac42-625f09f68b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17254eb8-d3d9-4cc8-99d8-3fd4f92bd92e",
        "cursor": {
          "ref": "0533f6b8-f2dc-4fe4-8676-9234726250e8",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ebeae545-1a32-477a-b451-26fb2dc0f528"
        },
        "item": {
          "id": "17254eb8-d3d9-4cc8-99d8-3fd4f92bd92e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "76b28a6a-1359-4318-b7a7-35704aafe5d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d32255-c39f-458e-a37b-31ecc4515c4d",
        "cursor": {
          "ref": "a6fa56c2-3d98-4902-a609-f41e47fae974",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "1e189a8e-015f-419c-b88a-9277f670d333"
        },
        "item": {
          "id": "92d32255-c39f-458e-a37b-31ecc4515c4d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ef6ff431-8598-413f-9791-8afb042b5226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6abfdba8-472e-4750-ab35-dec7651b0028",
        "cursor": {
          "ref": "62c163dd-d106-4fbd-99e8-4318970bbd6e",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "dca57060-add2-4917-b757-e412173b05bd"
        },
        "item": {
          "id": "6abfdba8-472e-4750-ab35-dec7651b0028",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "61d5258b-ad1d-4cbd-8238-e4bfff29ed04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced57854-ffae-41a0-b532-19cebeeefb39",
        "cursor": {
          "ref": "3d069b4e-eff1-4225-84a3-9e764f2a3c71",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ed06d0ea-d5a7-4a70-83fd-c2916357c42b"
        },
        "item": {
          "id": "ced57854-ffae-41a0-b532-19cebeeefb39",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "32455c54-e8cd-4ad1-bf28-b0dcda3e3cac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f59fe2-faf7-4a9f-8c81-df8c42136694",
        "cursor": {
          "ref": "7ad3d630-aba9-4497-87e0-2d0f08467e59",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "0db3197d-3de3-41d0-b40a-afdba5712307"
        },
        "item": {
          "id": "c4f59fe2-faf7-4a9f-8c81-df8c42136694",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "860fa93e-96a4-4b51-95d4-abe936f2ffe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccdbd522-90d7-4962-8b87-8b1fe6ebae67",
        "cursor": {
          "ref": "5689d738-2ff3-418e-a274-231a308ecdc8",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3047ea74-42ea-4643-aa45-34ef085687fa"
        },
        "item": {
          "id": "ccdbd522-90d7-4962-8b87-8b1fe6ebae67",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "97f2789f-f21c-447f-b3f1-dddbae7534b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46539b74-ebdc-48df-bd8d-ec05ab17615f",
        "cursor": {
          "ref": "3d82318b-7557-46ea-abe4-317d6923ba65",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7d5ac60f-ce78-478f-8b2f-bae81c797bc4"
        },
        "item": {
          "id": "46539b74-ebdc-48df-bd8d-ec05ab17615f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c987e656-ebd7-4b39-89eb-1996dfe32122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4643d79b-58c4-48be-98d0-2d127824daf1",
        "cursor": {
          "ref": "8d34d660-aa12-42c0-ab7c-bf209537a11c",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "217679ab-e379-402a-822d-a12971b627ae"
        },
        "item": {
          "id": "4643d79b-58c4-48be-98d0-2d127824daf1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ee279a40-cf9d-4f20-8fee-72ba80012a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9382b347-c4c9-4f4d-b0bb-4adb5fee35cb",
        "cursor": {
          "ref": "b1ceb367-902a-4e0e-bb0f-e33a85742205",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "bf93af3b-2725-4161-9ed9-145710176fbf"
        },
        "item": {
          "id": "9382b347-c4c9-4f4d-b0bb-4adb5fee35cb",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "196299d0-6f09-4585-90c6-fa85c1e7c0f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec28af4e-67e2-4232-8574-9efd92e4cc66",
        "cursor": {
          "ref": "60f7c3a4-fa91-44e2-9f91-09b9c4e450b8",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f437438a-05cf-4d2d-a60e-e741b9997351"
        },
        "item": {
          "id": "ec28af4e-67e2-4232-8574-9efd92e4cc66",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3c23d2d6-ea06-4f4f-b33a-d38bff72eaf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f6fab0-0e85-45a9-b627-d415f175c6bb",
        "cursor": {
          "ref": "09f59efb-2546-44f7-868d-1236b4728233",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "133767a4-97cd-40ba-9904-4a75e264f8fd"
        },
        "item": {
          "id": "66f6fab0-0e85-45a9-b627-d415f175c6bb",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8eb5590f-7815-435f-ab34-b98698068cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3e93fc-8620-449a-9f8b-ea7d8bfb7b6e",
        "cursor": {
          "ref": "def50092-472f-462a-87ea-a1019bd1873d",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "13cb4cf1-8e00-43cc-b846-877bbf29c12f"
        },
        "item": {
          "id": "cc3e93fc-8620-449a-9f8b-ea7d8bfb7b6e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "42ffb7bb-98cc-445b-a7b1-6e47c9cb70d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f791b50-dbef-424b-b7fa-779bd773f837",
        "cursor": {
          "ref": "447bde9c-7432-487b-92af-02e79db97685",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2b9fe543-8dfa-4a3e-b017-42ccf2642034"
        },
        "item": {
          "id": "4f791b50-dbef-424b-b7fa-779bd773f837",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8642f0e5-c6c1-45e0-98ce-e626f184b563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21250e15-918b-473e-8f50-8ae2bb70ecc9",
        "cursor": {
          "ref": "20ed1bcf-2a8b-4ca1-9bdd-0a173d10c83d",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5efec3d9-05e9-43b2-a23b-5a17ef300be4"
        },
        "item": {
          "id": "21250e15-918b-473e-8f50-8ae2bb70ecc9",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6262330a-c894-4f6c-a800-f966a0707866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c6acfe-d0db-40bf-9fd1-123525a9fbe5",
        "cursor": {
          "ref": "7bce6280-cac3-4b53-a592-ef9df71216a4",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "71769745-8a41-4d9d-ad52-19f4b0a988ab"
        },
        "item": {
          "id": "99c6acfe-d0db-40bf-9fd1-123525a9fbe5",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7caa6980-3436-4374-a44b-8c5283499ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79eca976-e6a2-46a4-acd6-5baec2fac9ed",
        "cursor": {
          "ref": "8237e92d-7fd5-4ade-b9e2-a6dcb7ca4886",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f1e6dd0a-4685-4122-abb1-2ba9362aa6a3"
        },
        "item": {
          "id": "79eca976-e6a2-46a4-acd6-5baec2fac9ed",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "911b1390-ac05-49b6-aff5-8cfa7d85c6b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d6f28a-c444-425e-983c-cc9a57b79734",
        "cursor": {
          "ref": "37ef1177-a87b-4cf9-a01b-aab02a47f2e3",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e8657113-4909-4333-a4d9-fd1ad60d8641"
        },
        "item": {
          "id": "d5d6f28a-c444-425e-983c-cc9a57b79734",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "60c53261-cb29-4a6f-9ac4-a53ad8f831c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f0a42fb-cdc4-4c61-bf1d-a999bbe17f0b",
        "cursor": {
          "ref": "35d91de9-ef1b-4b4d-9a6f-0357cfaf4409",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "19a4adcb-ad08-42c2-bddf-233aa11ec1d2"
        },
        "item": {
          "id": "7f0a42fb-cdc4-4c61-bf1d-a999bbe17f0b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "505a8e19-d010-488f-b36a-79e6fc1728e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789be3f4-d74a-4465-b0d3-62e3078d9d74",
        "cursor": {
          "ref": "aec19cb3-6c74-4e57-b580-1c600091f678",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b584c923-c4ae-4a88-90f1-ab7c03c7b95c"
        },
        "item": {
          "id": "789be3f4-d74a-4465-b0d3-62e3078d9d74",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5c885bf6-7924-43ac-90d8-ae92f0879b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5183c1-c855-47b8-84ff-8ee4868bec7d",
        "cursor": {
          "ref": "46f3f60d-c068-4d36-97c6-a0736208b6bf",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6d5470aa-4620-40dd-a38e-cead718d12d0"
        },
        "item": {
          "id": "8a5183c1-c855-47b8-84ff-8ee4868bec7d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "59ee871e-2000-4351-a8c4-bfc3661952b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7610531e-5efa-4c18-ac8f-3b51197efcac",
        "cursor": {
          "ref": "d24bc970-33cc-463b-85b6-64ebde1d4845",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "31b0031d-e546-41f9-970c-7fcbc52793d4"
        },
        "item": {
          "id": "7610531e-5efa-4c18-ac8f-3b51197efcac",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c3b149a5-0787-471c-a204-97c254fa95a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea1c550-ab50-430b-84bf-cef79040cab4",
        "cursor": {
          "ref": "f25c0e53-a4e4-4ee9-988e-f3e368aece01",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "43b21ec2-57f3-4bc5-844d-f444eac8c5d6"
        },
        "item": {
          "id": "3ea1c550-ab50-430b-84bf-cef79040cab4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6b0054c4-ea0b-4754-8dcb-e5c518acab3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72599390-6469-49b5-888f-09daab263525",
        "cursor": {
          "ref": "41274cdb-df4d-4225-b596-065937d597d6",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a844d264-cc7c-475c-93ab-f4cc9b4aecc1"
        },
        "item": {
          "id": "72599390-6469-49b5-888f-09daab263525",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cb6b5320-e39d-4449-a363-56a06c4effe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bccc0c65-b8cc-4949-8c2b-0f2ad5f07f31",
        "cursor": {
          "ref": "a46dac64-c186-4523-8cb0-80b4824f8ca6",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "14c8a537-ff00-462f-9d5a-622a851f3878"
        },
        "item": {
          "id": "bccc0c65-b8cc-4949-8c2b-0f2ad5f07f31",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "34a6565b-df82-47ee-be20-3fc285f90872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d71448-2164-417c-85da-e7938fc2d32a",
        "cursor": {
          "ref": "e47465fe-64f8-4342-9440-408a77d48ca6",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "13a01d86-727d-4cc7-8e88-cd9ebf178318"
        },
        "item": {
          "id": "36d71448-2164-417c-85da-e7938fc2d32a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ded60c39-5f1e-417f-b74a-7daeffe35225",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 860
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "a971ea98-3455-46b9-a876-6ddf4303741d",
        "cursor": {
          "ref": "22394fec-03d0-4369-b498-53035f286245",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "90a7551c-2f04-4325-8a9d-229bd3843dea"
        },
        "item": {
          "id": "a971ea98-3455-46b9-a876-6ddf4303741d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "839f7dbb-0a50-4a95-a4cc-141eee6aedec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b816cb8c-f53d-42df-bdb7-03dbd05523bb",
        "cursor": {
          "ref": "40ce5b88-853c-4433-b0f3-d142c445bce2",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "251e21b1-0b61-4d94-9320-54280efd94e5"
        },
        "item": {
          "id": "b816cb8c-f53d-42df-bdb7-03dbd05523bb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a4da10e7-383b-4357-ac48-fb2af921048b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c53e37f-b7f4-4038-aad8-cb249292bde0",
        "cursor": {
          "ref": "a5241ed2-afea-4b8b-8843-d52038113968",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5f74c325-6e34-4734-b9ba-ad55212f2a7a"
        },
        "item": {
          "id": "8c53e37f-b7f4-4038-aad8-cb249292bde0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "15321017-7de9-4ccf-8be2-d952a763177a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e568cb4-0e61-45cc-845d-b02b328aa2d2",
        "cursor": {
          "ref": "ea928451-1288-48b9-bcff-6e678e0c5b26",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7940b352-b94a-4a08-bc4f-1fb1b8d11385"
        },
        "item": {
          "id": "2e568cb4-0e61-45cc-845d-b02b328aa2d2",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "bb6ad298-d699-4b17-bb4d-187e7970438b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1731276d-f2c2-4256-ad50-aa51e3b47d3d",
        "cursor": {
          "ref": "e05481f6-f5aa-489c-85d8-205b1481cfc5",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ba6bf820-5e74-49d7-963c-5da32fc3626c"
        },
        "item": {
          "id": "1731276d-f2c2-4256-ad50-aa51e3b47d3d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6e0049bb-944b-4f15-981e-c57bc39d706c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13217c53-4d11-4f8c-badf-440790bcc412",
        "cursor": {
          "ref": "23447dde-37f5-421f-ab28-33b653cc24bd",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "89e29de8-4af0-4d52-9843-6839c1be362d"
        },
        "item": {
          "id": "13217c53-4d11-4f8c-badf-440790bcc412",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2f358e06-b155-46f4-81bf-de1df87aa643",
          "status": "Created",
          "code": 201,
          "responseTime": 26,
          "responseSize": 860
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "ecdeaf33-8aa8-44f9-99b0-409c6fb39262",
        "cursor": {
          "ref": "e0a07aef-d8cf-4d8c-a513-86edba05e695",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6bcfa110-1211-4f82-a372-9373153afb95"
        },
        "item": {
          "id": "ecdeaf33-8aa8-44f9-99b0-409c6fb39262",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "93c0743a-daa8-4295-8af1-cd1c8dedaa03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad33bd98-ba51-46f4-8654-36cb2b94d676",
        "cursor": {
          "ref": "40e80ded-910b-4825-b221-6a98aa51f9ed",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4f0d5788-df2d-4ad0-bfbf-bed6be0b3a98"
        },
        "item": {
          "id": "ad33bd98-ba51-46f4-8654-36cb2b94d676",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "797ba813-93d5-4792-8e45-881b4bb60cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f23af5-8f12-43d1-ba48-0d21f4ed03d8",
        "cursor": {
          "ref": "d386d692-b0b8-4851-86e1-65d195ed6e1d",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ecac9f69-87c8-4081-bd0a-574eb6ec6753"
        },
        "item": {
          "id": "b6f23af5-8f12-43d1-ba48-0d21f4ed03d8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "810584bb-5e52-40ea-864a-b18763fd7680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dcca016-a4c9-44da-a62a-163845495f8f",
        "cursor": {
          "ref": "d3a6b054-da32-4bc6-aa4b-e0accb76faa6",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3ea2f29a-34a4-418f-b57f-00e33b7bc140"
        },
        "item": {
          "id": "7dcca016-a4c9-44da-a62a-163845495f8f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6f6fb20b-eee2-462d-9335-83ffbbc49015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89db43c4-44ed-4bb5-a285-2c06131489ce",
        "cursor": {
          "ref": "5ce5a4b5-6f59-4cd3-9243-190ea34d8aef",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f6e60d92-fa14-46ba-be3d-7aaa63f80e7b"
        },
        "item": {
          "id": "89db43c4-44ed-4bb5-a285-2c06131489ce",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1e083c9b-1f48-49d9-9ab3-f1ba8580e0e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0cdc727-f224-45d9-a898-89c2887ef0cc",
        "cursor": {
          "ref": "152042ab-8531-4af2-ba8f-4a340d101ef1",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "664affae-9676-4ea6-b9e2-6e041cd4f7f7"
        },
        "item": {
          "id": "c0cdc727-f224-45d9-a898-89c2887ef0cc",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "45d53226-daa6-4d34-ae90-edebf0b9372f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f428fa-262b-4da9-8d41-798936153d4d",
        "cursor": {
          "ref": "94126802-dadf-485d-a340-b489a509e880",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "412cc6c6-19b9-4a73-9c64-2d01fdbe61f0"
        },
        "item": {
          "id": "e2f428fa-262b-4da9-8d41-798936153d4d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "50f35f06-38c1-460c-a34c-e1dd8e3d71c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f62454-a509-4a28-a880-3abf0426f5eb",
        "cursor": {
          "ref": "318617aa-6d6c-47e8-a4ca-a026c5965a9c",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a60d6f53-3680-4af2-beb3-a5d1168311c8"
        },
        "item": {
          "id": "70f62454-a509-4a28-a880-3abf0426f5eb",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "03a611d8-8dcb-481e-b38d-dfc77827147c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "960602a5-c1e1-4f9a-bf21-2928f811a5be",
        "cursor": {
          "ref": "dd1d023a-6c44-4918-a529-95c9485dd5b7",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1a28fe73-0ed4-4b90-b1b2-2d26ecee96fe"
        },
        "item": {
          "id": "960602a5-c1e1-4f9a-bf21-2928f811a5be",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0453ce55-6303-478b-8c46-8aadc330dd68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "6f6a43a9-f6a4-4943-901a-05360ef6b832",
        "cursor": {
          "ref": "dc9e1baf-87ec-4417-bd1e-a2fad9e71505",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5ecb1f9b-1037-4a72-82f6-1347afb83ee0"
        },
        "item": {
          "id": "6f6a43a9-f6a4-4943-901a-05360ef6b832",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "dcfd1c9e-cdfb-4d44-a7c9-5c6edff37509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "82f521c4-584e-49a4-b91b-6406ddd4f8d2",
        "cursor": {
          "ref": "aeb0d62f-7129-4b0a-bc6e-dbeae1573d17",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5375780f-9b31-48f0-9508-f6983972c9eb"
        },
        "item": {
          "id": "82f521c4-584e-49a4-b91b-6406ddd4f8d2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0ad06209-efcb-4ee0-9a61-a29a1094c96a",
          "status": "Created",
          "code": 201,
          "responseTime": 47,
          "responseSize": 860
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "57072a73-5a86-403d-8c95-053f659abdfe",
        "cursor": {
          "ref": "2d485052-e4a3-4fd9-8231-8efad9ee7f09",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "be3d1ec3-c296-4360-87aa-37ab277953b7"
        },
        "item": {
          "id": "57072a73-5a86-403d-8c95-053f659abdfe",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b3bcadce-ea51-4ddd-9b50-9b94436cabb7",
          "status": "Created",
          "code": 201,
          "responseTime": 27,
          "responseSize": 860
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7fc753f-1c2c-4bd3-86d0-e1c3d49c92d4",
        "cursor": {
          "ref": "dcf0d8d9-721c-41a9-82cb-a66c7bcac14e",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "38ea78c8-12fb-4935-bcb1-c3cda85373e4"
        },
        "item": {
          "id": "e7fc753f-1c2c-4bd3-86d0-e1c3d49c92d4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f0e7cf70-8f53-4c46-b78b-a2bc5236800f",
          "status": "Created",
          "code": 201,
          "responseTime": 27,
          "responseSize": 882
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0066df3d-1b01-4150-93ac-42a630024a4a",
        "cursor": {
          "ref": "5315b505-97c1-4350-bc34-3805b966088f",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2686fa5c-9674-479d-a8c6-bedc407daf49"
        },
        "item": {
          "id": "0066df3d-1b01-4150-93ac-42a630024a4a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f3146713-af1a-4557-9d79-1c9f4ab09a14",
          "status": "Created",
          "code": 201,
          "responseTime": 27,
          "responseSize": 850
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef6a23b-fc3e-417e-90f7-141064ade369",
        "cursor": {
          "ref": "8603f8c2-e75d-414f-a1ed-70f0654d8207",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "31558b81-ea7d-445e-a0a9-bfa4d781e0ed"
        },
        "item": {
          "id": "2ef6a23b-fc3e-417e-90f7-141064ade369",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c9f7a561-4c97-4a8b-8133-626679824cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "9391d6ec-e20a-4c30-a9eb-09d4cabd2ed3",
        "cursor": {
          "ref": "cd58b84a-c605-42ed-82e8-b635dc3f0815",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ee85ae46-ec82-4413-8747-d0560cf3fd55"
        },
        "item": {
          "id": "9391d6ec-e20a-4c30-a9eb-09d4cabd2ed3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0220103a-4ae7-4834-8304-0371059b3455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9391d6ec-e20a-4c30-a9eb-09d4cabd2ed3",
        "cursor": {
          "ref": "cd58b84a-c605-42ed-82e8-b635dc3f0815",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ee85ae46-ec82-4413-8747-d0560cf3fd55"
        },
        "item": {
          "id": "9391d6ec-e20a-4c30-a9eb-09d4cabd2ed3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0220103a-4ae7-4834-8304-0371059b3455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "205a7864-afb1-4274-bd83-f31cc7f4760b",
        "cursor": {
          "ref": "46edc2a2-1f27-4aa7-8de7-e669748f1f42",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7cd09aa1-708d-44e1-b059-b50de3d30c7f"
        },
        "item": {
          "id": "205a7864-afb1-4274-bd83-f31cc7f4760b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9b833407-15ce-4dad-b30b-cca34c0f4617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c05044-1abf-424b-87b4-ead8b6034c9f",
        "cursor": {
          "ref": "5cc293aa-2d1a-4eed-8d1e-592b4b87118a",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "efac13d3-5df7-4277-a90c-7f9389cd1239"
        },
        "item": {
          "id": "04c05044-1abf-424b-87b4-ead8b6034c9f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "fd4aaaa2-0f86-40d3-825d-1d1b1e513ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50e304b7-54a9-499b-9447-e2253b173dfb",
        "cursor": {
          "ref": "7e767378-6638-4089-82c6-faf65d04ee0c",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c61d25ff-b8fb-4f22-a730-c043d66ca802"
        },
        "item": {
          "id": "50e304b7-54a9-499b-9447-e2253b173dfb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8c14e1d2-af85-41d8-ba47-60c6a5748443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bda3613-bf83-4722-aa4e-0ddfcc471db7",
        "cursor": {
          "ref": "4a99761d-eb4f-4076-bc4a-a154f2c8c024",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "777d658b-1ffc-4755-b402-f303964a28c5"
        },
        "item": {
          "id": "3bda3613-bf83-4722-aa4e-0ddfcc471db7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1dd5bfe8-eb97-4f73-b55e-bbe4f7e5e4c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670fdfe0-dda8-4894-93a6-48d011d14f9e",
        "cursor": {
          "ref": "39bf5eaf-5b16-4395-8dc0-97e26a239a80",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5e31b772-3abe-4aa7-9d6c-09a744c00b44"
        },
        "item": {
          "id": "670fdfe0-dda8-4894-93a6-48d011d14f9e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d860a0d9-b3e5-4c17-84a4-afce992b52ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd426477-97c9-4822-9917-8e130ab0bcbd",
        "cursor": {
          "ref": "5cbc7607-82d1-4a39-a326-1166cfe0e384",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "24c3c553-c2bf-4beb-b716-877633f1e33f"
        },
        "item": {
          "id": "cd426477-97c9-4822-9917-8e130ab0bcbd",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "665ac46e-c041-4f79-af4e-c4f6410dc7cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "66ba9d1f-a0d4-4da5-b348-2b7c4460dab0",
        "cursor": {
          "ref": "7645e5e7-24f7-4c38-a476-6358639a38dc",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "71cd4bd1-d916-4a04-b817-65d1b7e4a398"
        },
        "item": {
          "id": "66ba9d1f-a0d4-4da5-b348-2b7c4460dab0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9d5e5bf9-4520-4f19-8e99-af9de5b2d8ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba145968-e9f7-4c77-985d-db1f776e9050",
        "cursor": {
          "ref": "15fd42ea-60be-44c8-9ea9-765ebc4cdebe",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3309d9c4-5202-495b-9451-dd5d50868d5a"
        },
        "item": {
          "id": "ba145968-e9f7-4c77-985d-db1f776e9050",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e57f0d57-c99b-4804-b832-cb8b0a61e9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a47145c-79ff-45c5-b58a-5112b227a1b7",
        "cursor": {
          "ref": "5e0467df-5cfb-4d9e-8df3-c5d7da07d6b8",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "df741b83-38ee-4cbf-b660-ed28b1f1d65e"
        },
        "item": {
          "id": "4a47145c-79ff-45c5-b58a-5112b227a1b7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b9aef6cc-84b3-4397-a4ab-693a220c14d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0ea2e5-e096-48b9-8bd8-194b31b0610d",
        "cursor": {
          "ref": "e4f9004d-fd2a-4267-b06b-3fd81ff86985",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "59aaaa0c-1515-4896-a9b9-9ddf8a888878"
        },
        "item": {
          "id": "be0ea2e5-e096-48b9-8bd8-194b31b0610d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ccf308f2-bdcf-4073-af0c-4cf8edfb59fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d5137e-5d37-423e-bf4b-260a1046c99f",
        "cursor": {
          "ref": "3eebac07-703b-4243-bbc0-4045aed8a589",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "172d9b77-c1bf-46d0-803b-7c4d6431d7e6"
        },
        "item": {
          "id": "a7d5137e-5d37-423e-bf4b-260a1046c99f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "04922e72-23aa-4d3f-8748-2aafd0905478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b74e42f5-3542-4418-b745-9fdebb12fcd6",
        "cursor": {
          "ref": "00e523c3-b85d-4550-afeb-b3050055dd51",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2fdaac2c-9a98-4497-b3da-669d2590e657"
        },
        "item": {
          "id": "b74e42f5-3542-4418-b745-9fdebb12fcd6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e7331b6a-3508-42f6-b172-f1ff3dd9efa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc46cab5-d6e6-44ab-8151-1728f8549f41",
        "cursor": {
          "ref": "fbe7a807-71ee-48b4-936a-87cece6a7d1e",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "eb7c8bbf-43ea-4059-bcca-b18474eaf1eb"
        },
        "item": {
          "id": "dc46cab5-d6e6-44ab-8151-1728f8549f41",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8600c725-70b9-460e-ab20-966cdb8ebad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c288890-22cb-4ad7-ab15-8187feb52818",
        "cursor": {
          "ref": "960d5b72-38c9-453f-8673-977ad8b8f13f",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "688d4c31-8644-455d-b4e6-507ec67ea45d"
        },
        "item": {
          "id": "8c288890-22cb-4ad7-ab15-8187feb52818",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f452e7b6-c91e-4bd6-8be7-6b60a47e8bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd690247-88c8-491c-b7ed-33e15eada293",
        "cursor": {
          "ref": "e1e7c394-3022-42cc-8a5d-8b6ff02865b0",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5897a2fc-264e-4792-9818-79013c3b500d"
        },
        "item": {
          "id": "cd690247-88c8-491c-b7ed-33e15eada293",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "742ed4db-0659-40f3-8ad1-a17761ba6bb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7fa3f2-3fc9-4e10-97f0-14fdae193802",
        "cursor": {
          "ref": "9697cdb4-baa3-46fb-8c60-3d1ad84fa9c3",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e3b9f1a1-597c-4637-a1cb-2db072396cd2"
        },
        "item": {
          "id": "4d7fa3f2-3fc9-4e10-97f0-14fdae193802",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2368e06a-210b-4735-a27b-d39e51fc17ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf81b427-4f05-4c36-8594-b590fdb544ab",
        "cursor": {
          "ref": "f735f1ee-e421-4c9a-a91d-c1806ed93182",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0d3e89f3-81a0-4312-89c7-2190fae973e2"
        },
        "item": {
          "id": "cf81b427-4f05-4c36-8594-b590fdb544ab",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1b9d4f89-e777-47e0-9612-6b3b50daceb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b2372a9-1ad7-4a39-b6ca-6145a4ee9f3e",
        "cursor": {
          "ref": "5edc890e-82c2-42c3-a253-a4d2538f3337",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a0ff6b2c-3930-4d24-a3b0-fc73b3f6a84d"
        },
        "item": {
          "id": "6b2372a9-1ad7-4a39-b6ca-6145a4ee9f3e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bc453b25-cd8b-4c3f-addd-78169069d64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92bb5eb4-e09a-482c-807e-136ac53c590a",
        "cursor": {
          "ref": "c7fc7a1b-2096-401b-91cc-0582e6785445",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0f67a8a2-edee-48bf-ac4c-caef68ead0a2"
        },
        "item": {
          "id": "92bb5eb4-e09a-482c-807e-136ac53c590a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "35d167fe-c2ea-459a-a0a2-2a0834e41f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3f24ce-f913-42c5-8760-a0f81878c707",
        "cursor": {
          "ref": "30a52809-7479-4cb2-945e-2376d08abd50",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7fac10dd-08ad-4533-8502-278ff5c1f2f9"
        },
        "item": {
          "id": "cd3f24ce-f913-42c5-8760-a0f81878c707",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d0f6c603-1101-4104-8862-fec0cbfe1490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909af8ff-cb1e-43ae-94d4-49a742d26247",
        "cursor": {
          "ref": "c45e51c5-d3eb-493c-8656-81152d1b6ae8",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ed180473-d582-4e0a-8d7d-bd77eae3e866"
        },
        "item": {
          "id": "909af8ff-cb1e-43ae-94d4-49a742d26247",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7f4bf1c4-dee9-44fd-913d-e151b9914e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff81b6f9-27af-4cb6-b971-59d06fd88789",
        "cursor": {
          "ref": "8795a854-cc5a-4208-aa0a-d19bc4ba0d74",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "55c51040-1a1d-4012-bb51-fdf3bdb4481b"
        },
        "item": {
          "id": "ff81b6f9-27af-4cb6-b971-59d06fd88789",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "33f4d479-698a-4635-bfe9-3d08df732af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430e3f70-cb2e-494b-92b7-d3de8336e2d1",
        "cursor": {
          "ref": "34f0092a-1aad-4122-9a9f-c1d95492bb93",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f4864431-e20e-4166-ae5f-7c608b52818e"
        },
        "item": {
          "id": "430e3f70-cb2e-494b-92b7-d3de8336e2d1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a4c0a27b-02c0-4a0d-8d58-60bee682dde9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85cb3b65-92f4-414c-b91f-646ddbb0acd4",
        "cursor": {
          "ref": "4c766883-bca1-446a-a387-4690c47a68b6",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "774b2bb6-7a9a-4f56-8bfc-bb478e2a2a97"
        },
        "item": {
          "id": "85cb3b65-92f4-414c-b91f-646ddbb0acd4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "75892f6e-5ead-4078-b679-90bb3785d590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a82d715-6d9d-431c-b741-440aa015b25a",
        "cursor": {
          "ref": "db6f34d5-2bd1-4d64-81d3-256de36820c4",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "24063168-7aca-448e-b686-3b8394361718"
        },
        "item": {
          "id": "2a82d715-6d9d-431c-b741-440aa015b25a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d18fd228-84ee-4709-a71c-6349a90290a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4669fcf6-583d-42e4-b87f-2c0fc22d5a63",
        "cursor": {
          "ref": "103a0c02-9bb5-4ff1-a40d-1b158704312b",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "93308f82-14b4-43d0-afa5-9a557ecf01b7"
        },
        "item": {
          "id": "4669fcf6-583d-42e4-b87f-2c0fc22d5a63",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0fad3b1a-2378-4f83-b607-089298e8d66e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81e6a785-9beb-41ab-9507-762c886b36d0",
        "cursor": {
          "ref": "2cb87943-3f2f-4275-ad3c-a19200c62afc",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "0bae247f-9a76-488b-9603-f13396c1825d"
        },
        "item": {
          "id": "81e6a785-9beb-41ab-9507-762c886b36d0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7c3c83e8-0a0a-4775-83bf-5421ff14c26b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838cd68c-c4c9-47aa-9f77-b49498558f2a",
        "cursor": {
          "ref": "e9b315b4-4b59-4d36-aed0-294f2cd3b053",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0db20dfe-ffaa-401e-9c6b-4dce8f461d90"
        },
        "item": {
          "id": "838cd68c-c4c9-47aa-9f77-b49498558f2a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "30143cc5-3820-435d-bd5c-c265c54d6543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b06b2a5-0d55-47c6-b4f0-a65139f4b53a",
        "cursor": {
          "ref": "fda37736-9a19-4ad0-901c-12d557f36d26",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5a7999eb-aa29-4b9e-8eb5-bafebe86de12"
        },
        "item": {
          "id": "2b06b2a5-0d55-47c6-b4f0-a65139f4b53a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e2296c86-0d36-4163-9f6e-2c23324da7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb71d24-840d-4764-8f1e-9cba2794edbd",
        "cursor": {
          "ref": "e10ecd30-731c-4d17-a1a5-385766e4fdcd",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "07594300-2fe7-48b4-9060-c35fdeda4af6"
        },
        "item": {
          "id": "fcb71d24-840d-4764-8f1e-9cba2794edbd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "69bac221-5acf-4560-a538-4581c96744b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb6c0ab-7b47-4bda-9444-dcca4af0e8bb",
        "cursor": {
          "ref": "9de77019-ae7c-45f4-9f45-68fb904f6ab0",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "fb4092be-fed4-4c9c-a7c1-34dd790f08ca"
        },
        "item": {
          "id": "0fb6c0ab-7b47-4bda-9444-dcca4af0e8bb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "94d73170-eb22-46ef-8b8f-8b8b55c231ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1898ef38-f085-43da-950e-e01351e525a2",
        "cursor": {
          "ref": "b72ef521-c0a1-4fe4-aab7-9f6936aa23d0",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "cb164354-c519-4f85-a218-432fe1d2440d"
        },
        "item": {
          "id": "1898ef38-f085-43da-950e-e01351e525a2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "81c24d7d-502f-4397-b3da-593526f918fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "b6b2f42a-35f0-48e4-963c-8d39806e9f46",
        "cursor": {
          "ref": "5643e631-93e6-4521-9b12-5fb163c00a7d",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3adb13fd-2305-435c-a32e-e5ec58a5b29e"
        },
        "item": {
          "id": "b6b2f42a-35f0-48e4-963c-8d39806e9f46",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "80f341e0-fd67-4767-8e03-70e19fca27ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "3698c678-491b-4477-b2f4-a44f5c6bcd0f",
        "cursor": {
          "ref": "6e0b0bd0-b4d6-4c09-850a-631697723175",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8ad3f3ae-18dc-46dc-9930-2343bd1f7fc4"
        },
        "item": {
          "id": "3698c678-491b-4477-b2f4-a44f5c6bcd0f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "bd1f12c4-a3ca-43e9-a390-e4c98db6c473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3698c678-491b-4477-b2f4-a44f5c6bcd0f",
        "cursor": {
          "ref": "6e0b0bd0-b4d6-4c09-850a-631697723175",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8ad3f3ae-18dc-46dc-9930-2343bd1f7fc4"
        },
        "item": {
          "id": "3698c678-491b-4477-b2f4-a44f5c6bcd0f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "bd1f12c4-a3ca-43e9-a390-e4c98db6c473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "299e95b4-5b93-4583-8f5d-384b34b7ff65",
        "cursor": {
          "ref": "a7870fc8-3fd4-4776-b880-3e89e088f595",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a84d41a7-9b5a-49d3-8645-1f2b53ac3141"
        },
        "item": {
          "id": "299e95b4-5b93-4583-8f5d-384b34b7ff65",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "8f21589d-9771-477a-9bb3-3f38ea8c66f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc57dbc-3602-447c-90eb-f79d8e515ece",
        "cursor": {
          "ref": "563ba692-55bd-45e1-b9d4-c3b94e3284ca",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a3ba7cdf-2cda-416b-9f17-4055a135a875"
        },
        "item": {
          "id": "ddc57dbc-3602-447c-90eb-f79d8e515ece",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0380313b-c357-44bb-b3ee-2895ce2216b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4090ead4-379a-45fa-80a9-8a2cbd3fd6cb",
        "cursor": {
          "ref": "9f66aed8-2586-438e-9b4d-ed17423617d6",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "10e284b0-414b-403f-aeb5-236b066c5b5c"
        },
        "item": {
          "id": "4090ead4-379a-45fa-80a9-8a2cbd3fd6cb",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9d346ebc-1568-4c99-8de8-9d2c6796b45e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c267934a-5ab4-4373-a88f-00a58682d453",
        "cursor": {
          "ref": "b3892a1d-84cc-41e9-9689-6625f429763f",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "072cc37f-8769-4ca0-bf46-213dbcbb9cb4"
        },
        "item": {
          "id": "c267934a-5ab4-4373-a88f-00a58682d453",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f466a2b0-eed5-43fb-aded-2392f8c6f1e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bacbdea-0ceb-41e7-aa69-ced87abfab3f",
        "cursor": {
          "ref": "73fc8263-c52e-4d5d-b1c2-c55f16807d01",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "72a7949f-b6e3-44ee-b4ae-b5a2fe43e2c8"
        },
        "item": {
          "id": "3bacbdea-0ceb-41e7-aa69-ced87abfab3f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4043cc82-14af-4da7-bbe9-a10eb8a2cf79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626ad745-bb55-4ffe-a398-95d57718c48e",
        "cursor": {
          "ref": "4a48732b-7b15-4e34-8fe5-a22207194ea8",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "87a42f89-8469-4079-a6db-a0ad4353f55e"
        },
        "item": {
          "id": "626ad745-bb55-4ffe-a398-95d57718c48e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fb4b46f3-d3d2-4e08-aee2-0ac7e42a26ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0287737-d5b3-4cf9-b7bb-78b0cee4dc96",
        "cursor": {
          "ref": "d0ba260e-1450-4450-8e4c-af39fe1bb9a5",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "090d6ec8-1e3c-4a5f-b1f3-dddcb3ea84e7"
        },
        "item": {
          "id": "e0287737-d5b3-4cf9-b7bb-78b0cee4dc96",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "26e5f91a-5505-4322-8f62-9a565c39e147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70867157-1902-4233-84b3-b61d781c8530",
        "cursor": {
          "ref": "31e3efcd-db9f-4baa-a73e-bb429831da73",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "fe407711-b0d2-417b-b15e-01b0472e6335"
        },
        "item": {
          "id": "70867157-1902-4233-84b3-b61d781c8530",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ef168542-0265-4c13-afdd-a0bc06138c82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba343e77-f10d-4176-9481-9e1b70ba37c4",
        "cursor": {
          "ref": "10ce3af5-03e9-4c72-acce-8ee90bdeb626",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "20652d19-c98a-4ea7-90e9-c6a1946c9c5f"
        },
        "item": {
          "id": "ba343e77-f10d-4176-9481-9e1b70ba37c4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "cf8803ea-e2e6-4108-85be-7cdda85d4857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474a9bcf-22f9-40e2-b2ba-f82d91305e4a",
        "cursor": {
          "ref": "0e324fca-d2be-4060-aad5-99ba50d4b7c3",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "dba80e03-f3be-4649-8062-084542302e8f"
        },
        "item": {
          "id": "474a9bcf-22f9-40e2-b2ba-f82d91305e4a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "24997627-34e6-432b-8911-d7f2a4704af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b49449d-cae6-46f9-b7c8-762bc2a8a107",
        "cursor": {
          "ref": "5dcded75-1f3c-4f0c-9cb5-16527725772d",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "96e9aef5-81c0-4fe6-8b3c-b9ecc836a9b4"
        },
        "item": {
          "id": "3b49449d-cae6-46f9-b7c8-762bc2a8a107",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6cf76c41-d915-4f27-bc5c-8cb993bb31a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffcbaec9-afca-4d56-aaa6-a597eb6bead1",
        "cursor": {
          "ref": "9aa3c0ee-4c54-4d7c-bbdd-71ca3ddd32da",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e7dc5ff9-5782-4af5-86c6-1796bb785b95"
        },
        "item": {
          "id": "ffcbaec9-afca-4d56-aaa6-a597eb6bead1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a806df2d-8215-4250-a8cd-f2c8e492285f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd29e18-2b83-464c-aed8-ca6d2410a3fb",
        "cursor": {
          "ref": "4a767144-e7c1-4cd1-8384-d40fb9c877b3",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "595e35b2-13ed-46b8-a75f-85a38f984a89"
        },
        "item": {
          "id": "9dd29e18-2b83-464c-aed8-ca6d2410a3fb",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bb5834fa-b2d4-4d48-b564-9dd4f8342bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb5f2ced-b873-4d17-8997-0f59f18a38ab",
        "cursor": {
          "ref": "c8ab76aa-ee49-42e2-83f7-7fcd02e4d8fd",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e0d7fec1-28de-4384-96b3-9dfdff408541"
        },
        "item": {
          "id": "cb5f2ced-b873-4d17-8997-0f59f18a38ab",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1a50726c-43e9-4fae-ab83-804bffecc25a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4dcaa0a-21b0-4105-b871-8311b09a0bb5",
        "cursor": {
          "ref": "d2d0f55a-2dda-452b-b516-cae78a6655c3",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c3c792c5-d70b-47f2-a924-a5ee049d26a6"
        },
        "item": {
          "id": "a4dcaa0a-21b0-4105-b871-8311b09a0bb5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7447dd0b-e70f-4773-85ec-db543fe01dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06bb9aab-66b3-4c37-8c74-02dcc34cecac",
        "cursor": {
          "ref": "4b071c6a-5eee-4126-8f47-dcdacee5789c",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "13e51e86-eeed-47f8-9e94-cc44d4f30041"
        },
        "item": {
          "id": "06bb9aab-66b3-4c37-8c74-02dcc34cecac",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ed2d5144-05ec-4572-8003-80dd8c829c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72dcbcbd-1c3a-460f-92c3-eaf50b6532ec",
        "cursor": {
          "ref": "eb45c140-2aab-4678-81ee-f0733d401003",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "986b67ae-bf94-47c6-8239-d3508f4485f3"
        },
        "item": {
          "id": "72dcbcbd-1c3a-460f-92c3-eaf50b6532ec",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a613ef3e-d181-4d8e-9d5e-9c9300256e58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9130ab-e1b9-4ef5-901f-8410ff135657",
        "cursor": {
          "ref": "9a3ba56f-eeb2-436f-82c9-8ef763cd5b94",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fa778925-62a2-4747-b62c-4781b02bdfc2"
        },
        "item": {
          "id": "ba9130ab-e1b9-4ef5-901f-8410ff135657",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f7b51466-b7ab-4abe-b92c-e3004decaa95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f5b567-9e65-4df4-8fdc-f1c9447e36cb",
        "cursor": {
          "ref": "4c3d2ced-8728-4278-b8d7-fa0fe32558d2",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "30cec1f6-c93c-4dc0-b174-72f533a6cf13"
        },
        "item": {
          "id": "c2f5b567-9e65-4df4-8fdc-f1c9447e36cb",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "81d11123-e548-45eb-b885-b724518d436a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86bb069e-2f80-44de-a650-b8f0dfe4f6a5",
        "cursor": {
          "ref": "167c5447-aee7-483a-8766-7528f8a939bd",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d7843ee5-4f5d-4c6e-b9be-5bc1a5d25aff"
        },
        "item": {
          "id": "86bb069e-2f80-44de-a650-b8f0dfe4f6a5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9ca93c5e-2a74-431e-a685-e4fec0546326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d29513d8-1aff-404b-ac5d-0fa6cc8a135b",
        "cursor": {
          "ref": "fad1bf9c-6ce4-4c34-9f4b-7f210ab9cd81",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "12fd33ec-0327-4b82-9f4c-5e1427a6cdc7"
        },
        "item": {
          "id": "d29513d8-1aff-404b-ac5d-0fa6cc8a135b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5f8856f5-a4f5-49ac-b139-1dbfe43ec683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aca9073-c718-4c1b-8b2f-f3f49ae83a32",
        "cursor": {
          "ref": "935234a4-0d25-4fb5-84b4-f94c43dd6370",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3c59e1c0-3d71-4bdd-8e25-afa58a907b48"
        },
        "item": {
          "id": "5aca9073-c718-4c1b-8b2f-f3f49ae83a32",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "746d397e-6b27-41a0-87e1-41482dcca05c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d34ba6d-9f7e-4c92-8b87-39021453db3c",
        "cursor": {
          "ref": "d10abc80-02bc-4c22-8d68-cc7f78de86c0",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "cbf79d79-0c9a-4d6a-b58c-42a99e327eb3"
        },
        "item": {
          "id": "0d34ba6d-9f7e-4c92-8b87-39021453db3c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f3830181-54d2-4ef8-af3c-bd4c67b1827b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca0cfe5-111f-4447-b663-7a9fa44e429e",
        "cursor": {
          "ref": "b04b28ac-6fae-4a5a-af76-4f4af192d24e",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c7adad68-6333-4158-a027-60672720d2f6"
        },
        "item": {
          "id": "9ca0cfe5-111f-4447-b663-7a9fa44e429e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7b1ef1fa-cafc-4083-b8b0-0795048c65cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94eec915-4abf-4c9c-b750-bc494ba31c11",
        "cursor": {
          "ref": "05562c4c-d6b2-47a6-9194-7e750388dea7",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "167ce50f-2248-4f2a-bd76-c025cdf38a68"
        },
        "item": {
          "id": "94eec915-4abf-4c9c-b750-bc494ba31c11",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5bbe543a-fa05-41b7-b0e9-1a44749d3028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be3e6c5-3a7f-4ea2-833b-68209a41e785",
        "cursor": {
          "ref": "b71af8a3-81d8-4234-bbe5-6040cec94216",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e5947233-61f7-4b9c-a412-6ee1508a2d8a"
        },
        "item": {
          "id": "8be3e6c5-3a7f-4ea2-833b-68209a41e785",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "fac61318-d4d3-4f55-97c3-998f06dab61b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b79de59-36df-46a4-84a0-2b6666914f42",
        "cursor": {
          "ref": "77a35f82-5848-4665-9bb0-92e78061e166",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "edb32c36-6533-4993-b17c-309cb3c04a4b"
        },
        "item": {
          "id": "9b79de59-36df-46a4-84a0-2b6666914f42",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "54334f82-44ad-4458-934a-fdea825ecddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b6dc95-2670-4fe7-bda2-beb7000b157f",
        "cursor": {
          "ref": "67dadd3f-f689-4318-8f60-0bd1365dfff5",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c2db71f1-375e-4294-b153-b42035ecb473"
        },
        "item": {
          "id": "a1b6dc95-2670-4fe7-bda2-beb7000b157f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "47f2f922-08f2-491f-8611-c65961c8e6c4",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "a7e5cab2-6667-4871-9053-a9f1550d0b1e",
        "cursor": {
          "ref": "9b7f3916-d950-4752-af7a-a4e41cda34a4",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e83f23b0-eab9-494e-8173-a8672da9d191"
        },
        "item": {
          "id": "a7e5cab2-6667-4871-9053-a9f1550d0b1e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "22040aa0-fc33-4ddb-a55b-725ec35182fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00806523-f864-4c60-ac9d-c53639f845c9",
        "cursor": {
          "ref": "31388b10-8cb4-40b9-b0de-31b5d6c74ab1",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "04afd470-8c5a-4d35-868b-2c2c2213038a"
        },
        "item": {
          "id": "00806523-f864-4c60-ac9d-c53639f845c9",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "800713b9-c795-4cb9-b485-36f7fc8b4b4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971ccccc-8bd2-4b4d-ad44-0066e52cbdcb",
        "cursor": {
          "ref": "ebf3f3e7-5763-4788-b06e-11b61dfcfea2",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0ebbb0f5-309c-4f14-a6d1-da182096fa93"
        },
        "item": {
          "id": "971ccccc-8bd2-4b4d-ad44-0066e52cbdcb",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9c778907-3294-4ecf-b03c-cae96bae0e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0934834d-afb0-474d-aed2-4359b0b91f4c",
        "cursor": {
          "ref": "c05eafb5-33bd-4a00-a784-0c930c129c1e",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "afc0cb57-cffe-4f7a-881f-28259859ff09"
        },
        "item": {
          "id": "0934834d-afb0-474d-aed2-4359b0b91f4c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f047260a-4448-4313-903e-608f1727981a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a75e781-93c2-4e58-a1f5-376a465e8c92",
        "cursor": {
          "ref": "4da61c82-53f1-402f-9f36-6184c4e480fc",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3d273882-9e06-478f-bc01-01df1fb4ae90"
        },
        "item": {
          "id": "1a75e781-93c2-4e58-a1f5-376a465e8c92",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "593c803f-c5a9-4d85-9961-81f353910b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a4113b5-2325-44e3-b717-e1cefc65ec37",
        "cursor": {
          "ref": "f4d8096d-7f9b-41bb-9bce-085195830d87",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "072090ff-8a7b-4a24-bd25-ccacb191d619"
        },
        "item": {
          "id": "2a4113b5-2325-44e3-b717-e1cefc65ec37",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8f509dc1-60ab-43e6-995d-87c11de00086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863d2d24-e49b-4f0b-9fd0-dd1013f1e2a6",
        "cursor": {
          "ref": "3a454d72-54f6-4226-a083-8de26cc6d425",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7b9b6225-b033-4115-8d94-5cc40f69a31d"
        },
        "item": {
          "id": "863d2d24-e49b-4f0b-9fd0-dd1013f1e2a6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c6c8ed0d-8f03-4155-bc73-c360356695f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5766cfe-603e-4487-b214-e974aeb6527f",
        "cursor": {
          "ref": "4035fbf9-f30e-427a-8c01-1e2c6cdcd56e",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e50892c0-0daf-457a-a599-719a21161ba1"
        },
        "item": {
          "id": "c5766cfe-603e-4487-b214-e974aeb6527f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b7f8a9ef-6cc2-46f5-8398-0dd6e91f27da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a136b0-c3bc-4250-bbb4-9127a67d801a",
        "cursor": {
          "ref": "9f8d6d86-d832-40cb-aa37-60efc983b98b",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "40a273a7-b400-4e61-ab58-0ddd79838a0a"
        },
        "item": {
          "id": "42a136b0-c3bc-4250-bbb4-9127a67d801a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "75d30b1f-bba0-456b-9f69-aa3e577c454b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1c0ae2-68d7-4ae1-ae0d-e4e5833479dc",
        "cursor": {
          "ref": "27de3a19-c90c-467e-865f-5eeef2deef8a",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a6326fb1-37cd-44b5-abda-5b5afeb5c02b"
        },
        "item": {
          "id": "3c1c0ae2-68d7-4ae1-ae0d-e4e5833479dc",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "aee7f06f-c619-4cf2-99c7-39dde9cf3897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9400619-0078-464f-8c4d-68d9c298262c",
        "cursor": {
          "ref": "a22da91b-85af-4bdb-9ea1-24f9a2728288",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "46de8b61-85f4-4123-8517-6beb3eb21289"
        },
        "item": {
          "id": "c9400619-0078-464f-8c4d-68d9c298262c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c48072b1-ed1d-4ace-958e-0c117049ff93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee07d943-bbd7-4fa4-9e31-6871bd39b804",
        "cursor": {
          "ref": "7d478599-636f-4f8b-a8aa-f2bc5bb35348",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "674644aa-8d15-435d-8549-c18f4f71d56e"
        },
        "item": {
          "id": "ee07d943-bbd7-4fa4-9e31-6871bd39b804",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "19a8ac11-c970-4ef2-ae27-f66ccda50117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5800703d-9c57-4458-a71d-530da9dd95a5",
        "cursor": {
          "ref": "ad8c380c-c585-4d03-8c29-0223af97e2ee",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b77b0c69-5425-4e6d-9729-e950a0d391b0"
        },
        "item": {
          "id": "5800703d-9c57-4458-a71d-530da9dd95a5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e194ab3d-4f39-4b2a-a891-df991b9e0a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692cf706-bbc0-4704-a994-5e740812b651",
        "cursor": {
          "ref": "cadb6ded-d46a-47a1-959b-e82d7e918476",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "61332de8-fd7c-4127-8a1d-966c9e99c0ef"
        },
        "item": {
          "id": "692cf706-bbc0-4704-a994-5e740812b651",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3f43f5d9-58af-4f76-b058-d7e7d1ee93f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb999944-45d3-4216-9c6f-407b7e2d577e",
        "cursor": {
          "ref": "0d25a5aa-2bcd-4377-ab03-44e92998fbd8",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "123093fa-0a05-4039-8a0e-e723b3d52a1d"
        },
        "item": {
          "id": "eb999944-45d3-4216-9c6f-407b7e2d577e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a8c6c4f7-07bf-491e-aaad-e6e7588a8834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a519a5-3768-406e-b53b-755a4e65e534",
        "cursor": {
          "ref": "fe7d9a68-9b51-480b-8001-3b7631b900b7",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "61207714-6d2d-4e41-99b7-a50255ae93e7"
        },
        "item": {
          "id": "20a519a5-3768-406e-b53b-755a4e65e534",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9b277101-22cc-4cb9-bb9c-d40e2d6e8b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d655380d-fe54-415e-84a0-d8728906ff35",
        "cursor": {
          "ref": "108c4a27-61ce-4f9d-8b3b-10106048b3ad",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7215fc95-a7b6-41ca-ae84-4817269c371e"
        },
        "item": {
          "id": "d655380d-fe54-415e-84a0-d8728906ff35",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "32492faa-bbc7-4d5f-a15f-44094eb01762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27ad1977-3095-4ae8-a594-2fdec8b7beec",
        "cursor": {
          "ref": "215446d2-4540-47fe-99b4-07f16a352319",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9508c24f-b7d1-4013-a392-f3cd14d3d24a"
        },
        "item": {
          "id": "27ad1977-3095-4ae8-a594-2fdec8b7beec",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4512c606-1f1b-4712-a043-529891922635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f8589b-febd-458c-94ae-329fc421bb55",
        "cursor": {
          "ref": "a8679197-d2bd-4212-8a29-b51626bc1c04",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e8f88cdf-9b87-428c-8779-11ad29528e3d"
        },
        "item": {
          "id": "50f8589b-febd-458c-94ae-329fc421bb55",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b58cf5c6-e5cb-43b9-be12-8c34baa477ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0fefae3-b40d-4877-bc73-b07a02d96ea9",
        "cursor": {
          "ref": "115bcfc5-abfe-4c2a-967a-438c11eee187",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "40961c81-a1b7-4533-b6c6-383e828f884f"
        },
        "item": {
          "id": "b0fefae3-b40d-4877-bc73-b07a02d96ea9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "05af65af-772f-437d-85c0-68627c44c142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf66157f-c03b-4156-aa40-712b17c6f102",
        "cursor": {
          "ref": "e19bc60d-5ea2-415d-a156-6b2caa1db73b",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "af0c6ca5-5db3-4fd1-ab74-fec798abf2d3"
        },
        "item": {
          "id": "bf66157f-c03b-4156-aa40-712b17c6f102",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ddb66443-3950-40d7-9dad-a85417beb7e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e709ce-52d4-4df7-994b-f781f00f9e83",
        "cursor": {
          "ref": "9ffe6e7f-c5d8-4391-aefa-6f13e59abbb8",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9b7f436e-5dca-4daa-a3e7-eff8464e2005"
        },
        "item": {
          "id": "d5e709ce-52d4-4df7-994b-f781f00f9e83",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "50125625-0db3-4a8f-9c71-510486093a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1249a7a-5d8c-482c-8a16-a93ac651c6a0",
        "cursor": {
          "ref": "cccc03c6-40c3-4077-9dbc-b624add398d8",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "52c28b6e-6987-429b-8b42-a02ce48c77d8"
        },
        "item": {
          "id": "f1249a7a-5d8c-482c-8a16-a93ac651c6a0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "dc6a87be-cb9a-4f3d-a266-7e3b5c16c13f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ace975-28ff-44db-96b7-4a2d301dc40b",
        "cursor": {
          "ref": "3909cfe7-21e4-4a86-8fcc-9f76cf00607f",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6bb9c2f5-04e4-4622-af54-263fda320b92"
        },
        "item": {
          "id": "96ace975-28ff-44db-96b7-4a2d301dc40b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e11a9da9-8016-466c-86c9-58d5438fb365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b11846-19bc-423c-9306-53cfa4ff66a2",
        "cursor": {
          "ref": "f5f7f73e-53ef-4df7-907d-f25e5a3a8593",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5f7b8933-c50c-4318-be58-1f114b04fb84"
        },
        "item": {
          "id": "19b11846-19bc-423c-9306-53cfa4ff66a2",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "70827d38-f936-4cf4-8794-67c8c5f002e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3db8149-3de7-476b-aa70-a417ffed08e5",
        "cursor": {
          "ref": "0310013b-7204-4a64-a227-ae84315dd52e",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d908ef6f-694a-400d-b454-3a845834c1d0"
        },
        "item": {
          "id": "e3db8149-3de7-476b-aa70-a417ffed08e5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "eaba0396-569d-4cda-9de2-717e61a4c342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc768555-3fb3-4a1d-ada4-85283b1ec00b",
        "cursor": {
          "ref": "c317a450-8620-4981-b6ed-1be6744d3ce2",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1c5f18d7-65f9-4b8a-b1f8-ab41a78c594b"
        },
        "item": {
          "id": "fc768555-3fb3-4a1d-ada4-85283b1ec00b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f0d1ea39-9d24-4e12-bf8f-0d92118756d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929f346b-4001-4107-9446-5a1f548b393c",
        "cursor": {
          "ref": "8bfc12f9-173e-41c5-9b65-7de9e1f5cd29",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "65c59b13-e6c8-4f3d-9471-44acd3dc22ed"
        },
        "item": {
          "id": "929f346b-4001-4107-9446-5a1f548b393c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ca6f62e7-e89c-4379-80a5-e9aa35749853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aacaff39-fbf5-4feb-af7e-fb41cdab9519",
        "cursor": {
          "ref": "37c24b58-fffd-4efc-b60e-2c66de804427",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a6e1dce6-8d94-458c-822a-604af31033a3"
        },
        "item": {
          "id": "aacaff39-fbf5-4feb-af7e-fb41cdab9519",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "eaa962c3-d6aa-463d-a530-93a2c3a931f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc6418e-8f82-4618-9e6c-628edcd862c3",
        "cursor": {
          "ref": "ae706e94-b21a-4386-8e90-e961f86e3224",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "482ee7c9-6be5-43be-a69d-50dc05e7ee5d"
        },
        "item": {
          "id": "fdc6418e-8f82-4618-9e6c-628edcd862c3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "54dda8b7-813b-4c12-af39-9ea6f805f15d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ac8ea4-122f-4090-9b72-3cd818dfe2bf",
        "cursor": {
          "ref": "9fe003c6-e18e-45eb-be6c-e467f144536a",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "02e02239-a95a-47cf-8c90-e451a8198431"
        },
        "item": {
          "id": "40ac8ea4-122f-4090-9b72-3cd818dfe2bf",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "30a90213-cd37-4951-ad95-3217844404f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0087849b-9a3d-42bd-83c9-6546b0f14e2d",
        "cursor": {
          "ref": "24b0e731-a9d8-49a8-863f-9126062cced8",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d3c7b08f-2264-48ab-96d2-48fbcc708b1a"
        },
        "item": {
          "id": "0087849b-9a3d-42bd-83c9-6546b0f14e2d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d08c0fd0-7047-4f23-994a-cccc08afd836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c04b4191-626a-4ca6-b5c2-1fed01684dc9",
        "cursor": {
          "ref": "9ad48ded-8685-43fc-bd42-d1afbce43925",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9c44c700-889d-4bcc-b3b2-381748210a27"
        },
        "item": {
          "id": "c04b4191-626a-4ca6-b5c2-1fed01684dc9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1567c5b4-11ab-4a06-9101-71f342e010e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d86f2e29-122a-458a-aa50-689e4a97363f",
        "cursor": {
          "ref": "daecbab9-c093-4805-a4fb-6d70c3f31c55",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0b747b8e-57a9-4857-8b7d-a58fcecfc418"
        },
        "item": {
          "id": "d86f2e29-122a-458a-aa50-689e4a97363f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "24f5db9b-7c27-46b0-9d0a-672b4756faba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f89a4af-aebc-470a-9b1d-aa87f06b250f",
        "cursor": {
          "ref": "0876b393-49cd-4c3f-84cd-4b9ddbb8a480",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9339d0c7-700f-4800-9e84-db29959de61d"
        },
        "item": {
          "id": "3f89a4af-aebc-470a-9b1d-aa87f06b250f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c9617546-e5ec-4d0f-8007-675d46e9b471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28e2616-b466-4151-b65f-0b38d1d606c7",
        "cursor": {
          "ref": "01a080ec-614d-4562-aeef-a7ab0a893fed",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b51c16a7-e074-46b8-a9bb-3b91295ec187"
        },
        "item": {
          "id": "e28e2616-b466-4151-b65f-0b38d1d606c7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e2e83f26-fd40-409c-a1ff-4f1de068b22a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd00675-4df5-4335-b808-3a58724ca7e6",
        "cursor": {
          "ref": "9b6626d9-a732-408e-951c-b4311d6b4995",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "660543ba-b887-4bf1-92eb-a7f43cc82c27"
        },
        "item": {
          "id": "6dd00675-4df5-4335-b808-3a58724ca7e6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1744f556-991e-40d5-8e31-9daad70862b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c590773-be7b-4f3c-b418-d7210364899e",
        "cursor": {
          "ref": "d2c9af2e-9b0b-4370-9a49-acbeef35be50",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "beaaa608-4493-4a75-b998-4b81f1bba6c6"
        },
        "item": {
          "id": "8c590773-be7b-4f3c-b418-d7210364899e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b4bcbc00-645e-475c-9aaa-e23cae70e9aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49fa77ad-c2b9-4ef5-9201-dfe54d35b42d",
        "cursor": {
          "ref": "cb9d6855-8501-4847-8f0d-ceffde9d3b23",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "33bf1b59-cf0f-4ef7-a7ec-37953f7e1d30"
        },
        "item": {
          "id": "49fa77ad-c2b9-4ef5-9201-dfe54d35b42d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1197bdcf-9008-4a77-b336-762809770d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d8455d-7697-4a8f-b20c-478944824919",
        "cursor": {
          "ref": "2f5a8745-b4be-4d9c-8cad-76cdf45469cb",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "52e4f5bd-d164-4e50-835b-ec818e6bb484"
        },
        "item": {
          "id": "a8d8455d-7697-4a8f-b20c-478944824919",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e69c92b7-daf4-4631-907a-bf8d69a5aad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102ac12f-b1d4-4e92-8e8f-cbc9e18a1461",
        "cursor": {
          "ref": "db60b5ac-47c0-4780-99f0-e67ba3980dee",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "513d1d58-ecb5-4198-9d9d-aaa6a4bdad26"
        },
        "item": {
          "id": "102ac12f-b1d4-4e92-8e8f-cbc9e18a1461",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "a7237366-0831-4d78-a732-b0228422c9c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe15b28e-7367-467c-b40f-3a7ffd3c8bcd",
        "cursor": {
          "ref": "e24bf298-d46d-4ae6-b550-266644ad47c8",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a46b375c-a5f7-439b-a51b-73f4f16fd3ff"
        },
        "item": {
          "id": "fe15b28e-7367-467c-b40f-3a7ffd3c8bcd",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d4108b9e-3d5d-4b6a-96e8-59fd1f5cd4df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e94c3a-5434-445f-8f6c-baf54f901a03",
        "cursor": {
          "ref": "b6194ce0-55b3-4993-bf0f-8a78a1fc0cdc",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2909e36b-40d4-4ad0-aa61-2509fcf3e8c7"
        },
        "item": {
          "id": "72e94c3a-5434-445f-8f6c-baf54f901a03",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "943f7292-c3d7-48dd-a004-93e6471feeb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f202b1a8-d7a6-4bad-8ee6-c545b7e33e6c",
        "cursor": {
          "ref": "4a61dde8-31f9-4e7e-a8ac-6b793ea67f2c",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "35b0bf10-aca4-4f35-9437-c5523aba99f2"
        },
        "item": {
          "id": "f202b1a8-d7a6-4bad-8ee6-c545b7e33e6c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "48b875d5-71eb-4766-8275-3063bb81732a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de58305-421d-4a3a-8d34-f39b0c23479c",
        "cursor": {
          "ref": "8a35912a-2851-45ab-8038-e6ecbdcfc4b3",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e9edfaaf-d6ec-45d5-a8fe-53b996e6b1ad"
        },
        "item": {
          "id": "0de58305-421d-4a3a-8d34-f39b0c23479c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "0796ab7f-a1bd-4af3-8ad8-b98c134062c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848ace5c-777b-49c9-8bda-581faeec7022",
        "cursor": {
          "ref": "07d838ff-d2c6-40e3-9512-223600d0e964",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a2a53ea1-9c7c-4519-818e-f92852e15a1c"
        },
        "item": {
          "id": "848ace5c-777b-49c9-8bda-581faeec7022",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3e42bc94-4019-4a14-a8d5-0b1b6c8c1b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "283aa6a6-e139-4803-a983-f2857eb1c4aa",
        "cursor": {
          "ref": "5427051f-42d0-4f45-9529-0d3da64514c3",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "466ee053-f57c-4e4b-a18f-c6640b1aa2f9"
        },
        "item": {
          "id": "283aa6a6-e139-4803-a983-f2857eb1c4aa",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "80d50b53-5b27-4445-9042-301ca851efb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad64e44-3493-49ff-92f6-a175dbcd4b8b",
        "cursor": {
          "ref": "8da0c5f2-7ae6-46dd-9fc6-636770d22460",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "03a6a639-a397-49b0-94f4-3ce0d656f652"
        },
        "item": {
          "id": "aad64e44-3493-49ff-92f6-a175dbcd4b8b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "5de959fa-fec7-4b10-b161-31cb0dc9a6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de29d7f6-3a9f-4344-acb2-a717e695fbeb",
        "cursor": {
          "ref": "28929db5-7f7f-43f2-b153-26dd40ced396",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b4323300-d7c1-426d-a826-0ec7a020e58a"
        },
        "item": {
          "id": "de29d7f6-3a9f-4344-acb2-a717e695fbeb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6bdcfaa9-dfcf-4379-b3a8-e2b1b7decb69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0476eb7a-c75b-4b51-b40f-4e41a8557d13",
        "cursor": {
          "ref": "0eee9ff9-5134-4bb2-aa66-85d53b2638cf",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "71ad24af-55c4-41a9-abf3-7627675c8a7d"
        },
        "item": {
          "id": "0476eb7a-c75b-4b51-b40f-4e41a8557d13",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "65e36807-d95a-49e3-a371-172d5d5c9ff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2067932-bbee-4226-a5af-0c0b6ebd5384",
        "cursor": {
          "ref": "2b5bbe83-c3b4-4828-ac6c-a34d35b1fde8",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "75df5efd-b946-4154-81aa-31338aa7bd6d"
        },
        "item": {
          "id": "f2067932-bbee-4226-a5af-0c0b6ebd5384",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d6583424-bf47-49ba-892d-fa1182526398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75f0610-a969-42f1-a999-792e81998f55",
        "cursor": {
          "ref": "ab8eccfb-4f7c-421f-b70a-8a714f6dc629",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c775e6be-8a2c-407c-8e1b-825d142b64e6"
        },
        "item": {
          "id": "b75f0610-a969-42f1-a999-792e81998f55",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1ca68392-1a47-4c68-9d16-463d6f3737c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fee9ee3-f599-40c0-942e-c00a43b21367",
        "cursor": {
          "ref": "cfa9be89-b1c0-4a44-876e-349af8060a98",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c9d2288a-4743-410e-8ae6-45e1598d2cae"
        },
        "item": {
          "id": "9fee9ee3-f599-40c0-942e-c00a43b21367",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c0b8b621-c405-45d8-9b0f-374179b70e99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb7de3c-399e-4da6-b1b6-bf7ef3f7030a",
        "cursor": {
          "ref": "3870fd10-2080-48bd-aa8e-da57ca75ce26",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "faa1700c-fb6b-4c2e-bd3e-3305256577d9"
        },
        "item": {
          "id": "ebb7de3c-399e-4da6-b1b6-bf7ef3f7030a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0c150310-6d15-4286-aa2f-d4eaa0b581b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1da6427-bcd2-42ce-80f8-a9d5f1408855",
        "cursor": {
          "ref": "0c20c3ab-9f4c-4b53-97a2-516c79b58b76",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f8485819-ffee-485a-9ece-d12b1b98c6f5"
        },
        "item": {
          "id": "d1da6427-bcd2-42ce-80f8-a9d5f1408855",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "36a38207-d234-4afd-825b-0600e5bea82c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94cae520-bc59-49dc-8cfb-860985224fe7",
        "cursor": {
          "ref": "a91f3851-d3df-479a-bb52-777f5db6164f",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f0547879-5aec-48fa-921e-404a3a5aadc2"
        },
        "item": {
          "id": "94cae520-bc59-49dc-8cfb-860985224fe7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3e1ae9bf-8482-4298-b5ab-d1a1b1e05044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f1198b-033f-45a1-b5d6-7308db60267e",
        "cursor": {
          "ref": "2ffb4200-73ce-4f62-9464-7f6870398989",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "838a247b-7e18-4ccf-aebf-773a4806a372"
        },
        "item": {
          "id": "68f1198b-033f-45a1-b5d6-7308db60267e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e6e0ded8-e3eb-4574-a78d-feeee6adfa61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69983379-ba49-4da1-98b8-0d0fb9330a4e",
        "cursor": {
          "ref": "3e18bb6b-fd7b-4881-81b9-88e7c73d0a26",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bb923427-a27e-4b7b-b59d-4821e446c425"
        },
        "item": {
          "id": "69983379-ba49-4da1-98b8-0d0fb9330a4e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f1f573be-af34-4657-9fd0-f36bf988e5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5af7893-2494-45f2-a901-d5ad7f005733",
        "cursor": {
          "ref": "355f5421-2d71-48fa-a089-cec2d6bafe27",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1cac7323-bc1e-4657-8fb9-7c82c4c3846c"
        },
        "item": {
          "id": "e5af7893-2494-45f2-a901-d5ad7f005733",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6569f911-f090-4100-a294-9e58ddf17266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90579caf-9f51-448d-88de-599b21e2a201",
        "cursor": {
          "ref": "f50d8a88-e680-4344-b5a0-6f6ed2e0d1a1",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "37d71ad1-3b98-445b-b578-8e96854e9dcf"
        },
        "item": {
          "id": "90579caf-9f51-448d-88de-599b21e2a201",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7a9c62b5-9e72-4dca-986e-3d061ed86094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d2244e-b861-423a-893c-86fee6b4d516",
        "cursor": {
          "ref": "788f0e08-c083-457a-b410-1ff50a037644",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9ae9a367-ade3-4bb9-b58f-779d672e96a4"
        },
        "item": {
          "id": "b4d2244e-b861-423a-893c-86fee6b4d516",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2e4b7826-e8d4-4d41-a931-d3cfaa68ca34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17b46c1-a6fd-43da-b16b-7c9c130f4cd6",
        "cursor": {
          "ref": "b41e19b6-3a57-449a-b912-4c4841875984",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0b56d1f6-9f5f-483e-aad4-8b4df777fc10"
        },
        "item": {
          "id": "a17b46c1-a6fd-43da-b16b-7c9c130f4cd6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "744ea94f-a387-425e-b859-b3468e4250e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea88caa0-126e-4414-ad2d-c11733a5c122",
        "cursor": {
          "ref": "ea1ebd79-b5ed-442d-a16e-9aa28c59fc25",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "491dfd96-6f59-421e-ab3c-2df6f2bede8d"
        },
        "item": {
          "id": "ea88caa0-126e-4414-ad2d-c11733a5c122",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7a93f1de-b085-420b-8e94-2e898a96ef2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2566b588-a947-4481-b671-e9bdd31110ff",
        "cursor": {
          "ref": "2b03dd5b-1d2f-4d00-8059-12826cb168c8",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6ba50865-c143-4979-b628-812dc18eeab7"
        },
        "item": {
          "id": "2566b588-a947-4481-b671-e9bdd31110ff",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "43a78b23-8cb0-4cf6-92b9-bc9d2f42afd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b001d80-88c9-425b-b4ed-c73614414c90",
        "cursor": {
          "ref": "00efcb65-1db7-43d7-8d07-9066a0ff8690",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4c793ebe-cdb9-40df-b71d-101101948e47"
        },
        "item": {
          "id": "3b001d80-88c9-425b-b4ed-c73614414c90",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "667b08ae-ea00-4ac3-97ed-7720aa1228fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e1a91d9-2b0e-460d-90d8-29b0315583b2",
        "cursor": {
          "ref": "02d76a52-7e0f-4365-8026-5c746fec1b51",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "69794622-5c78-4d1f-9fcc-69102e9b3290"
        },
        "item": {
          "id": "3e1a91d9-2b0e-460d-90d8-29b0315583b2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d8fddf15-abcb-4d75-a157-55f0375cd9ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "798627e8-ba85-4dbe-b1e5-d2dc3c886460",
        "cursor": {
          "ref": "f1e4bfd8-c3b7-40bd-9311-6b22090d2a43",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "91e984d3-a55e-4d85-8b0a-ffb26e688cad"
        },
        "item": {
          "id": "798627e8-ba85-4dbe-b1e5-d2dc3c886460",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "39f9303e-9e9c-47da-913e-e71db22dcb0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ca212f-f85b-40d9-a11d-42082017d007",
        "cursor": {
          "ref": "c1592024-3863-437c-9e6b-6ad602d2e3f6",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "adaadb64-039b-4237-91c1-d34dcd36e282"
        },
        "item": {
          "id": "b5ca212f-f85b-40d9-a11d-42082017d007",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fd12ec5f-cc00-4ce4-aa9c-41b645f4fcab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335b570e-afd1-4eeb-a347-3befc9e1c876",
        "cursor": {
          "ref": "1b744c55-dd74-4da9-831f-3a0b2fca5dcb",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "bb8ed716-9d89-4a81-b173-aab6a7b64ac9"
        },
        "item": {
          "id": "335b570e-afd1-4eeb-a347-3befc9e1c876",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2b673e72-41f8-4c7b-805f-4e280c4b3b85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c368f9cc-f98d-44c2-adf8-0702d2755418",
        "cursor": {
          "ref": "97742b93-2f48-46db-914a-b8e35c7a3162",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "688caeb8-6570-4327-9dc4-7c3ac3876556"
        },
        "item": {
          "id": "c368f9cc-f98d-44c2-adf8-0702d2755418",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "83e7a7a7-f3da-4887-afe6-69bf3754128f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a76284-fbda-48ae-93eb-0f1e8bba2794",
        "cursor": {
          "ref": "fa61ca78-11b5-4e33-a0f7-11815403726e",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "44cffd6a-7b73-48fb-b417-990479fe4e99"
        },
        "item": {
          "id": "e9a76284-fbda-48ae-93eb-0f1e8bba2794",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "4c36ebaf-e0ea-4889-bfb4-8826a3f59262",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "58052a08-7d4e-4e2d-b3a0-106630f8d9e6",
        "cursor": {
          "ref": "dbf18bf7-1e33-46e6-9b4a-cedefda3616b",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2215fdcf-4391-4e63-a92b-2c77dbafa964"
        },
        "item": {
          "id": "58052a08-7d4e-4e2d-b3a0-106630f8d9e6",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f439773a-525d-4f7a-b307-1c715ef4b11a",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff403926-772f-4f7e-bd19-28b86977a098",
        "cursor": {
          "ref": "aae0b717-a9e2-4717-8f55-d2d0ab673e9a",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a5ae830c-1d25-4884-a97c-8f3d6f6fd088"
        },
        "item": {
          "id": "ff403926-772f-4f7e-bd19-28b86977a098",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2d10e833-3634-4e8c-862e-7068a9f1b9f4",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9ab5e1-ecdd-4f21-bd72-73bddb750ce9",
        "cursor": {
          "ref": "caa2f044-6d65-453a-be13-628cd0677ceb",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b83912e2-c740-4078-940c-bbf86a982ee9"
        },
        "item": {
          "id": "1f9ab5e1-ecdd-4f21-bd72-73bddb750ce9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2825d522-e057-4954-a382-4b3738bd45c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9ab5e1-ecdd-4f21-bd72-73bddb750ce9",
        "cursor": {
          "ref": "caa2f044-6d65-453a-be13-628cd0677ceb",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b83912e2-c740-4078-940c-bbf86a982ee9"
        },
        "item": {
          "id": "1f9ab5e1-ecdd-4f21-bd72-73bddb750ce9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2825d522-e057-4954-a382-4b3738bd45c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9ab5e1-ecdd-4f21-bd72-73bddb750ce9",
        "cursor": {
          "ref": "caa2f044-6d65-453a-be13-628cd0677ceb",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b83912e2-c740-4078-940c-bbf86a982ee9"
        },
        "item": {
          "id": "1f9ab5e1-ecdd-4f21-bd72-73bddb750ce9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2825d522-e057-4954-a382-4b3738bd45c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ade91f9-60f6-4ae0-8cad-7c2a297594a6",
        "cursor": {
          "ref": "8e37314e-19c6-4a4c-97a2-035ae0ccbd6f",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ed650c15-9ecb-405d-8dab-116732525801"
        },
        "item": {
          "id": "9ade91f9-60f6-4ae0-8cad-7c2a297594a6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "1d202f39-4cfb-4ef1-b9d3-aa12df735b2c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aac26d8-3c24-4364-8b47-e20a74658abd",
        "cursor": {
          "ref": "fa513949-2d6f-49f8-96f2-557e903a9e3a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "816027a9-9091-4864-ac0a-86b93111a829"
        },
        "item": {
          "id": "1aac26d8-3c24-4364-8b47-e20a74658abd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6d915214-5c3d-457f-acd1-f06fcb68ec73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "1aac26d8-3c24-4364-8b47-e20a74658abd",
        "cursor": {
          "ref": "fa513949-2d6f-49f8-96f2-557e903a9e3a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "816027a9-9091-4864-ac0a-86b93111a829"
        },
        "item": {
          "id": "1aac26d8-3c24-4364-8b47-e20a74658abd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6d915214-5c3d-457f-acd1-f06fcb68ec73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "ca74f963-54bd-4269-8157-dac4242179d2",
        "cursor": {
          "ref": "cd9491e1-b119-4dd3-a4e4-6aad93c80fc3",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1d3fa466-1cb1-46fd-b11d-6371c4fae26e"
        },
        "item": {
          "id": "ca74f963-54bd-4269-8157-dac4242179d2",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "b64c28ec-63c3-4dc8-9f47-703675454036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "09c27d0a-c56a-4525-ae45-34301d2759f9",
        "cursor": {
          "ref": "3ef1a3de-e001-4e73-a694-38f969fa281e",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3b961ae0-5a9b-45bc-90cc-50cf484bf28c"
        },
        "item": {
          "id": "09c27d0a-c56a-4525-ae45-34301d2759f9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ed03a404-53ea-46fa-9dff-08684e4e4e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "09c27d0a-c56a-4525-ae45-34301d2759f9",
        "cursor": {
          "ref": "3ef1a3de-e001-4e73-a694-38f969fa281e",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3b961ae0-5a9b-45bc-90cc-50cf484bf28c"
        },
        "item": {
          "id": "09c27d0a-c56a-4525-ae45-34301d2759f9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ed03a404-53ea-46fa-9dff-08684e4e4e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "323fe24f-59d4-4b84-86eb-146ec5712410",
        "cursor": {
          "ref": "2d431ccb-2d79-4bfb-825d-d9979cfdcd51",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5ebb681f-5f19-47a9-b626-c70bada8cb65"
        },
        "item": {
          "id": "323fe24f-59d4-4b84-86eb-146ec5712410",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "76f1d5bc-5b29-4f84-9bd6-fc70ac4e6355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}