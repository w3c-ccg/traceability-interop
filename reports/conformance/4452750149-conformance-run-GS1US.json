{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "dc940e25-2c35-42c2-afa4-7406bff1cf2d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2cebdacd-e203-43e1-8972-b20750b1fa22",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1a83f0d6-c0c2-43c2-bfe5-8f0c70f3aa86",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5d21a7cd-ba47-4ec3-b744-d458ca043423"
                }
              }
            ]
          },
          {
            "id": "cccd6f78-937b-4c4e-a331-6212ca3e9cbc",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3d8dde61-ec1a-4aed-8c05-1c4b3c10c1c7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "49fb7ac9-9308-4bcc-838b-89cf87883e0e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4124e7b8-83fd-4c3d-8e29-72ff1917546e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "84aca099-f836-47f2-8ac8-d3096ffa6a08",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d99bd24b-891f-4bff-b155-e878e9dbf1fa",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d323f30-d9a1-4671-a0ad-9e15f9ef0250",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "45900bc7-f2e7-4ce7-a047-99ef8fc02347"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "96307a36-756c-4873-b084-0c43b53bce68",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "05395501-85f2-407f-a36e-9fc4d09c00a3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0d9397bc-8cf2-4100-8871-ac166b9c8966",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2f0a4808-e446-46c3-b12b-f3d07d19d0dc"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1745b7a5-b939-4f0b-afeb-f125e50ec229",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ead5735c-5dea-4de4-b3d0-395b07069c54"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4cd3fa2-0d86-4a58-978f-aa47a4454077",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "22ac6209-788c-4863-878a-dc6daca0338b"
            }
          }
        ]
      },
      {
        "id": "0736612b-3912-43cc-96f7-08a82eadacca",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "beb5868d-d6c9-4bd4-8baa-996ccf237b7e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b7b8f263-138e-44fb-b296-807c8bfa4b2c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "78459748-c9ae-418f-92c9-243ff4b0fa8c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e74a8f4-ec0a-4020-a429-120172c1225b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9392ee5-c132-448a-9bc0-738133429da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dfb73b6-0b08-4441-a4c6-13493f497007",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d49a42-a9b9-42f0-8c0d-c66cf1360749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46974f06-9997-4ea2-810b-045be7516ea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa24cde-b08d-4cde-8cb7-3502ab7c8e00",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "135937c4-560b-41b2-a5f6-c9ab27834e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f48c937e-9d0b-48ce-ae6a-359322396ade"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c7853d3c-f6f1-4c3a-97a7-b6e385a1b6dc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "53a61e7c-dfad-4bb7-ad2c-c50627d7b09e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb41dd4-3804-4c79-9bdf-5f5a5a61359a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1fe66dec-8bc1-4fd3-9460-896507d120fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df31777-ddec-4e6e-80c4-7c2bb49c078b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8399096d-5544-4efd-8f19-8ab14e97a7ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe00acd-cdf5-4acb-92c5-3a8cadffcaf5",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec09340-7979-430c-b820-266dfe011a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76b53c9c-00ec-47b1-8c90-81a9d27a1917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfd1771-6b2e-4b07-8845-ff7b25ea40d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c102d75f-fd59-447e-af7a-3f58c94d8671"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9f8f0d92-71b8-4e01-b401-f630a92d2b90",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f219cea6-e7e4-41a7-91e0-f76e62f10b06",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "046bc802-0648-4838-8c41-b2fb7ec404c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "fe8f28c5-0f68-49f6-b0cd-02f801842bef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80bb8fe8-2ebe-4e41-82ff-02161007d8da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "70664a46-770c-40ae-9346-e011bf2d4869"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a3108d1a-8c82-4347-9b25-a88d6c5ff89e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "35031885-993d-4369-95e0-9d98b5ebdd4c"
            }
          }
        ]
      },
      {
        "id": "36c719cf-5695-498d-ae50-0ebfcaf8cd1d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "06938d18-a92d-423e-a8e2-65079cffc9dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a14fe94f-1ed5-418c-9a6f-3971aeac61fa",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "56bb9a4c-73c7-4552-a184-2517789dda55",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdf6aa2-679f-4cda-815a-be3e5e31310a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e2b93e9-c1a3-4cf8-b3b3-0130063a71cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ec7bd3-da9e-4d5f-a9bf-adfa4cfd2f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f7ef957-5667-4ead-be67-e256435ef008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2121f18-acff-407b-b374-dfc393a11850",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88907ae1-5e89-4998-9ad9-5cb2d95fa90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28db15da-316d-4228-993d-ef20e0a5be0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4dd08a-6135-4a00-a0cf-688a7e8470d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "037208db-b53c-4194-87a9-cc0b1a745180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b425e197-876d-4c47-9470-bf749100e255",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec38e56-9917-4e97-803a-af71937ff105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb671a22-7d86-4bf3-a774-37f6875dcab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b89919-3468-46af-be47-0f7fec9e6f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6f3d69a-404a-41fc-ac3c-ecc91d8c3d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f205b63-945b-4111-b2ac-c1cd789607ce",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65bc3f70-d1eb-4476-8108-3689c9a143f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bfbc9ed-d1c7-4cea-9f6e-2d1643ff57db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebd42a2-053a-48d6-b85c-efb523c4fe87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2f0fa82-680b-4f43-b55b-c249f4796a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc67a469-2f93-40a0-bf34-bad848746dcb",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa890536-979b-4645-90c5-48e23e8ac722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "003697ad-5661-4507-bf4b-da013995055c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d703c92a-3c1f-4973-9963-2ac6f1d304bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b1b3f58-1abe-41b4-959e-fb8c32a423e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761be21a-6985-487d-8e80-5d71689c4414",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3564b20c-6f09-4c39-922f-e80880904d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dee45a8-99ce-407e-8b3c-fa44a364f878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09fa1066-f327-4396-b97f-e479560b289d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee8327b3-0784-4ab4-8c78-e4493f342bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8256e7f-17f5-4842-b3ab-7cc162c90a3b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3902b30-1a9a-4a2d-8e6e-f854b83f7bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713594d7-af72-4284-ac9a-c464c363acba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56388bc3-cafb-4a08-9503-f2ead988c577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dbfcf21f-7cc0-4b90-992d-a822ab2b79d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c65024-d129-4d6b-a7c0-b24b1b156feb",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "496ea7af-6b79-4eda-8b74-02cc428bdd9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe21ffc-02d3-4003-9f48-88bd9bba8c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32e789f-70d1-4a76-afdc-c2681a9598ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4feccdb-caa2-4a67-b035-eaf276a967f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a76d327-b9e1-432d-93ab-808742b3642a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7ff186-4326-4b5e-93e3-a4daffb3f912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ac62ce-c634-4a25-9cdb-fe73bb8669ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12e7369-1107-44bc-8fb9-ab91fd6663a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5691fedd-a8ea-4668-8304-78066a05093c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696b1345-c912-42a9-a186-cd8527d3483e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "833bd50c-f530-45cc-81b2-0c2abd4f2715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5039880f-94da-4649-ac6e-168c36cf4bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f27e083-a3d3-4990-a7cd-b5609c86f4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b752523e-db71-4fe1-9a5b-32bf5ca0ff86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5a99f8-258b-4387-a270-6465f3145bd3",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c7295d-530c-4906-af72-567c600f3410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0e0b3d0-3225-4771-8666-65b4c89aae69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da61cab4-6c28-4d4e-b079-318f0ee39298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47e81133-7bfb-4be1-863d-0701dd79c446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3aff0f-dd8f-4480-b4dd-4a6e075c2417",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be55ea4-1a3c-4a8d-b28e-a8dbf440840d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e3a8ced-efa7-4770-aab0-24fc6c23426a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a356bdd-c019-4e7d-875b-7f4bf3a1e87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5a46cf8-fa72-4534-8fb3-ae7b8cc175fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b2fa3f-892e-4019-8ec5-a4674a0cacd3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eaa0a95-d9a9-4901-b2ac-ba063155b8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10bd291b-6327-4a47-b47f-3efe2c98bfd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f229963-5f65-4c49-984d-11e5b1218f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63e4324d-47ad-4a17-a0bd-79f5546a27bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e499661-71dd-45ac-9528-827c4970e29f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18fde811-3e06-4289-95a4-9c3131709bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b18692ba-ba4c-443e-a957-511ca742fb85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec6f714-8bf5-4bfe-b4e2-3bb95b433847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd18d00c-f0c6-4bd7-abb6-b32dcabf5a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2517781d-663d-4478-a716-cbe6d8575f04",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d901a21-b192-4662-a412-e231c00e5644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31f20aa-ced5-4320-8bfc-46b6797aa594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45272a39-847a-421d-b107-c8be2b76ca51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0b04b8e-5bf4-4279-9cb7-a92ba52d4e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de92ae12-a06c-455f-9ebb-08b2e54603d7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb8e2c1d-86f0-4748-9993-89b1e8c5f1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "116dc0da-ffb0-405e-8ba5-306ac62e999c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63623f03-51e6-4649-aec5-f4bb3becee02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ecd6955b-2e86-47ba-a527-032a5405d421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76b8ee5-87df-439b-8b4b-62bcbf4019d5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d6d884-ed6f-4578-9a5d-7173d4ad025b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2da6e61-2f75-4e48-b457-526b0a039311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e6195c-48eb-4569-9ca7-2bb4326f5a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4a09cc4-0eb8-4f9a-8b2c-3cd0f445a2a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8347d152-1907-42ed-8c35-845eb32eb089",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e0e9af-655b-4b33-b9d9-f6c35c1ad1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24395a07-39e2-4ba6-8f51-654076c48e91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f4f4d8-1617-47eb-beee-cd8389ee616e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba20da53-8eef-4b24-980b-f134a2ebccd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c239d80-1bc5-42cf-9b60-1aa21400bbc6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83063798-17b6-4e22-a6e7-649ac406ebc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d8eb4b3-d505-43d3-9b24-7c94731ad43c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913f663d-49f5-42e3-baf8-dd835605e288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ac2e366-f575-4e2f-9d5d-cd723a51b8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac35aca9-b86c-4b44-af9f-3a9f0afcf182",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5a962e-d69b-4ff1-9173-f57399b23843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94a0b39a-4728-40d9-a743-38a492f47cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99cc795b-bb45-4e4b-b40c-e3d36a025b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac22fe49-fe2a-46fe-96f1-6a586b0e0e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25015096-d01c-42cb-9539-ffc831740da0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e39ee6-6116-4053-8f85-a0ab0b6368f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed1fe6b-f756-4991-94c7-f864625699ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c88a493-cf72-4595-9e68-f4d366c0811e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "156a582f-6696-43f6-9504-8521de4e5287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c792e467-3ef2-4aff-a87b-38acf3c52c98",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4556d2ba-128d-43c6-953f-906b6b5ef2c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "588c8329-3718-4a66-baa9-90933f60b734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0710031f-b923-4f5c-9b11-93d1b7afa087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef028f45-0128-4db1-8929-28b62ab72599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd123d80-ae7b-4176-acfc-f41e10279999",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a8e073-5575-4816-af41-206c5257eb89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aecd19e-6012-48bb-9216-edb7eaa4038d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38aa38b6-27b1-491f-b634-61878b1a1890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c915c35-c83e-46c9-bf67-24a37b7fbab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfbe0c97-e267-4e7f-b5bb-f93b18c29bce",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71cb3ad6-ce89-43ca-ba7e-9f97ee834a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f9c0aa2-88ab-459c-83c2-d82adf287e40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5e74dd-e96e-4050-8be4-8ec5bef49feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7abcf1b8-7e7f-4001-9eb5-9f06533a85c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32426ed1-7919-410b-927d-a50081e2b32c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8265143-c41d-44a7-9d57-ddd843d144d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59e61b30-7f10-404c-95af-080a2753ba0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2406e7e-dc37-4441-a057-ae3489f8dd19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "78b42f11-0abd-470c-a8fd-08cb86a97be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "233818a0-dbdf-45f0-80ab-3933c67ea627",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f902e0-d59d-4f3a-8e58-e9a1af53bf54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a5655a9-2a2c-4810-b708-22ec2270d992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a0d6c0-4aee-4c56-b5d2-3c2e42110105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f9ff754-e1b0-44a8-8de4-764195ca5d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f810f5-ed01-40f2-ae69-c78f0dc958b5",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44739a82-eb76-4144-a76e-750878c02e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a08bce96-6b0a-4463-9974-206653c7f2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29296a45-7bdb-4de5-a78a-45803bd02233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b29c4ed2-85e9-48cb-bc7c-b1606e40cb93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0544db51-45cf-45c3-85d8-9b0382184e65",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01dbcf0a-1444-4eb8-a378-a8e2fd349e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b68c45a2-e924-45b0-9a76-636e98a0b208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4d2d69-7381-457b-89ab-7ad9ffccda4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f44d7af-d68e-4a59-9e78-f31c480c39f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97205fc7-382a-4424-bc2d-447f9baea26e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a644629-b572-4cd6-807e-eff63bd950ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4937a45-cfa9-4cd6-bcc1-a63743346d00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc42106-301e-402c-9d21-8e9467d3f9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b20fffc-80f5-41d4-ad72-68c1aec09da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8517829-30e8-4b17-aaec-522c8d6edf03",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b54f8f-5d95-45d5-acae-124ffd7c1bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb89faed-4a43-4d00-942b-63c2a4c16217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efaa036-7e68-4d78-9e50-900ed86f3c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "469b5d12-4642-4512-be3a-33afffb8d35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9558d8c-8e93-4315-a718-b6e5b107a3ea",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41bc1a60-6285-4f5a-b2dd-c819669b631a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d3cf318-4a2f-4dec-bdde-e0252c754075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e05309-2c8e-4f99-ad36-3d74acbd9cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3bc16f8-8165-4b68-ac16-ec4431fd00b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b503a77b-a76d-4b4f-a225-66b86ad43a44",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "685c9212-1664-44bd-9785-357ca2076bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5a786e6-9243-4c03-9093-ff10b89181bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a45e490-89c8-4fc5-9610-ccdf66e39474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae65fb95-66fc-4e65-8931-94be0dfa2078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9033a4a5-6748-4a97-8298-9930f2bb75ec",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9b6512-6fe8-4b0b-8d92-53afe840acfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f815763-a5f8-49cf-a723-3f57746183d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ffbea1-a83f-471c-a009-bd8995a3e6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbd21715-947c-47c7-952d-bc1914ee13fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2174c704-5ecd-4b4a-a0cd-f82643043eb7",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10698b9d-078c-4b53-888c-6301745326fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d0a04c-769a-4950-903d-d8f4e1584f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0441e950-20fb-4bd2-96b9-6e91858e5938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4bba52d-0e02-4d78-b814-763fd2d4c4e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb066d6-e671-4abc-acec-ed5a33fddf01",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc3373e-b752-4ac1-9b83-14d991d2344c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "910ea499-6bcc-4390-9369-e60120a05786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dccda552-a438-4b29-a57b-7c3562dba34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7c4509e5-8b0e-44a0-b2b3-1db148444818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84a7e8a-a4b4-401c-8318-671ec7522915",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "875d8aa4-48f5-439c-b06c-f43d9e76905f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd20834c-301b-4250-8b4e-6311088690f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14080b13-f084-427e-a392-96cdefd81411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b626bbd3-0f3a-405c-9547-17c6542dcbbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23c0e6d-9af8-4683-93b9-973b2d136c69",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c4c9d2e-fa70-4a11-a5b7-9d497557a8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c5e044-5b0c-4547-b408-c00892fbb8c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9df149a-60cb-4b9d-95fc-f2c28a851cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3474075-5904-49bf-a27c-8c98e9d59297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305d811b-83d8-4a8b-8d49-8d2c4010713e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0443411-5d9f-4cab-b33f-800a02b4f63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d51b2020-9ef2-4eb5-91e8-db9c2ac21444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714d4153-6d2a-4f2c-888d-56356bad024c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e104ef27-e1c5-4f1e-9d2f-eb0bfe66beb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a7412e-1023-4a23-ba0d-6e187e72f610",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a500d991-e6a8-4c11-8aab-9d5af171660c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b9bb092-fa52-4f7c-8cdd-9b686c04ec89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da98458-406e-4375-af4d-ca1cbaa89bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b6e8f8-066d-469b-b453-0271f8ddd553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7469fe2d-157d-4153-8af8-0142e4101453",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95087198-5738-48a3-95a0-5f04d125921d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea7c6a72-c6ee-4e4d-916e-374c18165fa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9c6be3-b545-4723-a32e-2c0604b09083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "485cc6ae-d7cd-4138-b641-1dd998ea9fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f60426-1ec7-4a8b-8306-7643db85b8c7",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f401bea0-4452-4972-bfb8-c37ac7ac00b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e3f2057-0218-4785-9939-9739ac771403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052bfbaf-1685-4af0-856a-f0424ebeab7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bad0e8c2-05d4-40ba-829a-90eb26e83c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c195318-3852-4057-9a3d-ef22449199a4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abf7217-1384-44a0-a248-29582b870368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "267cc041-8a4a-4201-8b86-18119e1fc24f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe4159e-134a-4af1-9d74-e84a4f44cf52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2ef4d480-7a96-4b85-bedf-5dd3d5c0db83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11e62b3-48d8-4fc2-bb62-3f2cfeb105dc",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0baadb18-e352-49ef-90f6-e296aadd42a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2409a816-004f-497f-a9bd-dc1478c2c805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db50a16-3e38-4f17-b6fb-160ff4d49a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0d56d02-25bd-453f-819c-21b137d2c741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989f4008-77f8-476d-ac9d-c16574087c8d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c7834a-364a-49d2-9da5-61f67d7c4c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de0bab4f-e444-4c6d-9f59-bb22868d3dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cb3cf5-7863-4491-8c37-ded81594f249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f4a397c-279e-463d-9aa3-a73807ef7a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f4e15d-7701-433d-a04b-792c9b01d96b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a224c8a-d5ae-44cb-9d0f-54dc7caa1d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c55f8b6-a35a-48bb-85fb-6c585c8476fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c9c3b7-8f2c-498c-acb5-4a23991a69b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b97c17c-f1a0-4ac4-ab6e-7daadc1ef1f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507aea56-e9c6-4130-8523-045b92a931ff",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0ee9c0-ca24-4351-ba14-6bdf02fff63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14e2445d-7c34-4f82-bc0f-abc1f2c60e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3234463-83ae-424d-98b7-65ed290e3eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f42557ef-e276-478a-8110-e7dfef728a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b67e98-02d3-409e-8c36-1480c2ecb035",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f2e45d-c3f1-4205-b473-1092b2662a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "774c99af-84f3-4c10-bf77-01970b0e39b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf99533-b5bf-4a24-939a-65934c533929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d25f6a45-54bd-42be-ad24-8cca04913ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6678dfe7-b89e-44d5-9e3f-95e1a9450e67",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "866423f8-adbe-4267-a5e4-a3cdafd9b7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b5793b6-7982-4f0f-b657-2bb8e6068bf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6693b8-ec4e-4963-8e39-b969c736d4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "29acda59-1f4b-43d5-8ce2-d349bc85ff68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03535ad-58e9-4537-ad1e-571d651546f8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcde6faa-3ac2-4ecf-a518-14b0d4a74fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080afe7f-b313-4d3d-b5d8-86b9133d74b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb319d3a-57d6-483b-b047-9eacb762c733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ce91f71-f39e-400d-a4e7-d5cff5d2780a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1343906e-a115-43b0-9ad8-172133cb1d28",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6454a5fe-4655-4be5-b875-359dfee3b1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95481fc3-9c26-4411-b847-073a71cf7f4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ca1c24-464a-43f8-bed4-f53bcf7e8d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "84e92240-2919-4f75-866f-cce2fc5476fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b64a6edb-8a96-443f-81f1-7ddb310466d4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b6b7abd-ae6d-4dd0-87a9-8132a38df5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c14cf5b3-6f0a-431e-abac-943d8d206c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8420595-000d-4369-a91d-373032ea4e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b6f24d8-c0e1-43c4-9118-bc144a5e2798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e51371-2ba9-41e5-a704-26ee01ff756b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd7ea49-9125-456f-b0db-6617b9531461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13984050-1575-456c-a91d-13cd01600052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28961c43-1689-4334-9788-69dd9f9e591b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c8de784-6ac6-4ab5-b0ac-5db7bf9a5652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae1d6196-ce53-4f4b-ab0e-97a9f30cf362",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99e1be5-437d-4962-a91e-d7c77dea0c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d74c397d-d333-4398-af37-bd7dd6daf005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9188d1-604d-4f42-857b-1a4c21b46d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a319a5-a424-44ca-bb8e-74bfdd89798d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "350a7f89-8a3e-4327-b1a9-9ed4ee85a1cd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce5f5f6-c0f5-4561-83d7-bd95dfa77d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34843cc9-51b5-4025-b48c-3c17da8626d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921e7a80-9530-4b8f-849e-34813eb75012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d560b66b-06b2-4857-9eac-9f7a2a03c6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3df189-37b4-440c-84a1-f7c0dbdbb62c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "264ede9d-66cd-488b-aaec-d281a2f69668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce15aa4c-2a0d-4efd-81ce-09c83b0856ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f578961-5b91-4924-bf5c-33f08c3a0ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e866654c-b1b2-4bf0-9886-c5d842fb52dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4412d2b1-ef14-487d-bccd-87ac24e345c7",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc8122d-117f-4e4d-b9e0-58ff85c0333c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3eade5-5e3c-4a65-8e47-c0f4faee9161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80662388-555a-4abf-8a24-52d058afcf76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "cb353ffb-2ea9-4025-8e84-2081f2b4012d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e2ad07-cd21-4085-9437-6347eab15074",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeeb93a5-ddc6-4044-94c6-cbd4d91cb47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c99fd9-bd60-4164-a599-f62a371d1c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc2d067-9b8d-4397-85cf-6c84682b2158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "54404b27-9a25-4973-926f-fa918285f801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b875468-e98f-4724-86b6-fb339b2e12b3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae85e9f-2e21-4967-85aa-ae9ca1d89f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f284f70c-9aac-4147-8231-9eb63b8464f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37bad5d8-19fb-4780-93bf-213b4e443a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2880d30b-91f9-4d12-9b12-dddfce903887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8e27e7-1296-4718-85fa-89dff6e721de",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39af24b5-8552-4419-b28a-994a8c9b6a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73010478-0312-42f6-8382-c3289e3526d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f39a158-98ef-46b5-9064-7fdeab809b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9f7932-cdf0-4add-b630-e22a7eadc15c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9f22ea-6e76-4867-a209-927bef3eaebc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d352b1-1347-4369-8cfd-5dc220569e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cd0f163-372f-40ca-b23d-681c6b98936a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9b13b0-02d3-4436-bc99-5e2c68044e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "db07c72d-4404-486d-a8f5-de1d687d37a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be63d852-fb0f-4f6f-bc89-720ba10719cd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc6ea0c-f665-488b-946b-ccab1206771a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7b7dc1-dd07-42be-b1f2-877ad7ffeb1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719e43cf-6ae4-47a7-b3e5-104fa1543912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "643eaecc-050d-470a-9029-cdef60537e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e99390c-ee32-41d2-8a56-cfff47e3d08b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b38d91b-87f7-48d1-ac87-a54204a89747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2965b37d-d872-4e65-b904-a23c86b2ba52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52fdee32-94c6-4479-9d44-b46c9a3bd960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "92df150f-7280-4089-82d9-2fdb7d14a934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0053db06-647a-4e10-b1bd-3df5d8e8e148",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e7ea76-5e67-4d3a-b1b1-2976b819ff1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2209332-0925-4717-99fd-473dfed71c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2290bb-7dda-4447-b78f-5dd27f5f7cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d6e7d16-4ed9-41ce-be77-63454ed41d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee81245-f1f5-4541-b6ea-90816c619d70",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "219b6d77-5f90-4f6d-959b-ebf395c1522a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae3de9ed-145a-4239-9d90-c0b64c7680df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65cdfddd-2942-4c6f-8518-04a11b4d5353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "377983ea-7568-4aa0-9651-e642c9cea940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d58ae8fe-cc64-4d51-a5e5-b34af6167a10",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67184c1e-d907-4aa5-92f8-9b06a05914aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ddf1485-de5f-45ee-8df3-62654a17c01c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304fb6af-d7b1-4698-8b9f-608c581108fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5b5ca5a-e6a2-4080-a53e-9ce9bd4235b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdc5eb0-6b76-4705-b9fe-6a9b32a221d4",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "511309f7-3d35-4371-8b0b-7a1cd5fcd1da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b405d49e-eaa9-456b-b3bd-dd9423427790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04a8ab4-e3d0-4ff6-929d-59d61304b9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63f494e4-f9ce-4b28-abff-4aa4354ce79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e897ce2-7dbe-4db6-aa5d-8f55322790f8",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca85d326-14cd-424c-929b-26bc494f5c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f16eaf0-e7f7-4c9e-8624-25a3f5970241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c462bf-4d5a-43a3-a7d0-bcedb5d44bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "63f4b9c6-c479-497c-930b-56c2f3f93c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da5cf5f-f34d-4bb3-b996-1f8e17369f92",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8861b9d0-6a0c-4920-8e39-0daa0f99b85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c5ba5b9-23f7-4e44-9210-f2059fc86d87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa206019-b0a6-46ba-aa26-ecb6750dcecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6505c57-2eeb-4c4a-b717-2d885223b61d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a4cc98-4604-47f3-ad45-2f26b4f2eebe",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10db7159-2905-4f78-b96d-97deea16c3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab994ad5-e3cd-4e62-9be2-f318cba0cf46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e45830-a15a-4baa-877c-073c2b214522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8338e779-5abe-4108-bbce-08a513e3da28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3d7bcc-7cde-40dd-acac-9ab54423c08b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d859d3-cc87-4539-8903-a6f0dfa2e167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14c94663-87f2-4922-948f-8981c5f4dcf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac8d11d-2c78-4778-be18-a67e6f6bf631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "062e1222-0948-4912-91c2-5f09c8ff4ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1404eb57-aa83-4765-8ae8-9ac7bf63f969",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d93319-bb4d-4f46-bbc0-9340099fc924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4e1b74-3f9f-484d-a4f8-90555d0fb413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633f9458-be6b-40c8-b157-ef931cb38d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f11b3fd1-d5f3-4b25-9d4d-f0bfac80df0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b11b8b-4e2c-42cc-9c73-6f78a48517c3",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3676b8b0-1756-47cc-b148-51ea3ad87a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cb3cb1b-5339-4d18-a8eb-7f9cd64b4ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de567345-a15f-434e-a1d5-ccb53819b0f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a940e067-de9a-4766-a43c-333a8d37772d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4cd2b0-84da-44d0-9dc9-30f518bac727",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "823a07ec-4ba8-4cc8-b8fe-cf4228689dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58502f2f-bea1-4af9-ad37-8010f349d77a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a534c1-948a-49fd-8514-3e4526342a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a53cc78c-e7ef-45b7-8fe8-f6adca62fcc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc19889a-466f-4d8f-b5dc-65a917b67451",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6023b73-211e-4fa4-91ac-40f1803f08fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37ac847b-73f5-431b-b99d-569a6dfd42c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8873066c-b455-4f6d-8df5-c04d0021ef66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc8af97-bd9e-4d42-81f7-647f7b9a531e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6366cd68-bbc8-4cb3-b398-c99866566aed",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23fd3d0e-2e14-4099-8b87-aa196abce2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c049a91-fa8e-439f-95c5-26266a5f55db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11ad604-224e-4d6e-bbcc-e1d16380eb51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e6081aa-7a62-41d9-a38f-5e877b2fd088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827bad70-01a7-4c2c-a444-9ea8ed68e76c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a6ac07-63a8-4637-aa11-0d5b2a91f9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e83ede89-97d9-480c-ada1-7ba1eb8b8de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde8b620-0daa-4348-b219-252162714cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4d5fa05-68c0-41a3-861a-6e33e7e43d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706124a1-6b90-4f70-b334-77975afae968",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f0e294-273f-4b2b-9280-947f10335603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d9dabc8-ffe6-4ec9-b658-ad77ecc07749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca0ec1e-be42-4ce8-8edf-f48b3c3a5ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8e99909-1701-453a-a883-9cc4f17e9977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e799071-68e7-42ba-b5ca-e3ff530ae520",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b376389d-2522-4047-8cce-05d92521de66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdcb38ec-4f89-4a85-99ff-4cd13ca88f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf6a360-1dab-4f5d-b16a-52da15acd647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74e6004b-d9b7-485f-9e3e-d3252a57f0fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8fd220-b9ee-41a8-95be-ffd0e7d34b12",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c442567-135c-49da-9256-db527356b1cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e1f8de-2ead-47b3-b6f0-b6bf988b783d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce88295f-de98-4e6e-be8a-a09207a17676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c683ce5-697a-443d-84bf-3bd3000713a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e98726-84fc-4025-b9da-aa4da03a2a71",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955d5bbc-870d-4c48-a052-f9433ca4e631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc0ce67-b6c8-409a-98c2-07f0cc1e1e98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e726d97-f978-48f7-9aeb-bec50df71ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ccec84ca-0d14-40e4-9c03-e974bd5fc274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd1593d-10fa-4b78-91ab-8beee1f2394e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e08f56c-8a91-400d-8dbd-45ef61c9ad37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a48eef1-463c-4153-86b9-a70099a9a2d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e0517d8-3f24-4de9-8ca8-7050241a96a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "94898eaf-8b83-4bca-bb45-3c3644bc5613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78f7507-3354-4e82-a441-6dbe46e52dc7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d2ad60-3888-4c1d-a830-d6f92f606338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b160c3-51db-40f9-8ed4-ce34785f004c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424c9890-4bb6-4b16-9e35-89f34f26069b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6068a5bb-04ac-488e-bbee-6cd67292a026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed81f948-a36a-4b8c-b3f3-7b9dfe3e7bc8",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1e5b64-7ddb-444e-820b-7fe66c78c256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e1a2210-86b4-4e2d-af36-62922e16442f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340baaa9-75c0-4762-82fe-1b0116c212fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "533d31e0-fe88-4963-8e55-a1fcef10af66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be9fbfb-073b-45d3-8a02-1ed5847f0638",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc990b3-db55-4b63-aa86-6c43582b1963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "236c40c8-2b24-49c7-a66d-8da883ac650d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22f9d53-ddf3-4295-8b6e-74cac1807881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "236eb2c0-1e3c-4a67-b62a-1291858e58c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371fa334-0a85-4bf6-8580-5e7de95c5ba4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e9fcb2-0004-49a0-95bc-117dc6b54da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c23470d2-d65a-4aaf-8b41-5971bef0b845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b90620-3886-43e8-a853-d724e041d715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9a96dd74-9b76-43b9-834d-f2ce9ac75b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099b6859-0696-4fa6-8fe2-73832c26de4a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "712e2c89-c186-43dd-91c7-210cf2feb007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd6bc97d-c442-4cc7-81a1-2516fb314fd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336f841b-e308-4a7d-8ea8-94e1b25aa16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb61fe05-cabd-404f-b5eb-9cd6b782188f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c633bec-7523-4920-94f4-a816f91c2b29",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a7dd4c-74e7-4ddd-9bda-fa288c360aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e4c9cf1-5c9c-4531-9bc0-a238ee0e5e44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4013f1-80f4-454b-bf55-e3d0a070108e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "28650f70-56f3-4a51-9dc3-bbcbc426b5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85265ab5-d738-415f-8bdb-164ca0d304f8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04fca913-51d1-4aba-a216-c1d0c06499fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2997bf6c-5232-4f57-83b8-7e43a19ae4de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e463fb1-768c-4446-80dc-7f26f92f8b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5957c7a-dd21-4e14-ac8b-ccc854f050a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ff66cb-ef52-4b48-815b-06b18f2eaa4c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31450c20-3f2f-41a3-a7d6-25e4acb61e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8a80a9e-0ba6-4cf3-bd86-d2bdc3290309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd05dad-71de-4c8f-a587-6b1d9c056523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "745860ba-9614-4b24-a795-7def23a876b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91181176-6e63-4533-897e-9c917d641179",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2e466e-6d91-465a-978d-dc6363b29011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7d265c0-6f40-479c-a1c7-fc881d6d8d32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b26417-7dab-4227-9efb-d392f4f2aa58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "db759a61-3961-4b33-a194-98587f91c19f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e394c401-6823-4d6a-a7e9-7cfa8cb3937a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0a5ce3-35c1-4d67-9cfb-866214369c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b88d53b2-f1a5-4a70-9e6a-3e755be495f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a310c51-bb58-4c7a-abed-95982f3277a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd70ed85-9b2f-41f5-8313-b3c2aeec3034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a63374-01f0-41f6-aa04-c39fd9ba9935",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd39034-9c00-4af6-8c87-52d554790eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d445de61-a86e-49f5-bdf5-e26f76b1be39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15ee886-8c84-4030-b6c5-dabffa8933e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "69cbad8d-cb5e-49a8-8a05-c092b6963532"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "83cdcf93-1e25-4b3c-92cb-60713b5cf9bc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3ae60ffe-9f93-4d58-97ac-0396afc5e357",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d838ec7d-459d-4ae2-9a84-dc027c879bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87601355-6101-4555-b24f-603f3b16b5c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17300563-6daa-4f61-84d1-02adc8c0b53a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ac3bd86-bf65-41e4-ad9b-e7c03b668ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31fe1740-573d-436d-8cc7-af66f2d77a4b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91f11f9-1bc0-4201-9fb6-88cf9c1610ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5a51125-aa57-4d7a-838e-aa003d89f133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730acc4c-2666-4ebc-bb7e-90da8bbf22a1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b9a1ac7-cea9-4155-963f-e9b8a848b93d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b7a8514-b686-4444-b28a-4690bdbdc462",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9dcf930c-ade6-4fe3-b5ec-04ac646ef2e4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b768f9ef-a945-46ff-8fa0-d36ef2173bf7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44a1abca-e6eb-4aab-a5b0-e775544db299"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fb4d23d3-6de3-47fe-959b-b64f1551fcdf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b36e8e33-0791-4aab-b9e1-538798eb51e8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b6e77b8a-6541-4c10-b1fe-07882c7542e1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9240db99-898a-4c56-b05b-f60e3f934851"
                }
              }
            ]
          },
          {
            "id": "afb7a7ce-ee5f-43f9-b314-ad700aa66f07",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d1b9b26c-dba6-47c0-a087-283898bd208d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "136f7b2d-0d40-47ba-b280-775ca1ef7e6a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a0ec3284-e4ab-479f-bf65-94f93aeb1003"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa8aa8c6-e931-48be-b5cd-af1744f325b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d96b4487-a1af-41bc-90df-e83cd9d0dbee"
                    }
                  }
                ]
              },
              {
                "id": "f7c660a5-6f63-4afd-8a30-df925da6dd8f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44b15860-df15-4012-8bc6-b2603eb3215e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb4a410c-f846-4e66-882d-6904506b352a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "760aacda-04a8-4f39-85cf-841d34423858",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a06615bd-7de4-49ca-aac9-4e7d51e9b3c5"
                    }
                  }
                ]
              },
              {
                "id": "16f1dd10-0b7b-4aca-acb5-50d54f989d46",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf64b2de-b631-41e8-bdb9-6bf55c354cbe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d0f2eae7-86f8-4876-85fb-47b63b56efe6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6bfdeb7d-9b31-43e7-8110-2b0dd9111169",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b0f2581a-162b-4e59-83b8-041d65e40ef3"
                    }
                  }
                ]
              },
              {
                "id": "31722aa3-a77d-4d9e-9ccd-4db3e67c7958",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f65fa337-41b8-45c9-be01-b74c96906e1e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eec97fda-31c0-4cdd-855a-a5626ccd25d0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac38f7b5-64b6-494c-8682-8be29915d527",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "28a41351-4e28-48cd-a6d6-f1d9303e1b09"
                    }
                  }
                ]
              },
              {
                "id": "255349fc-c642-4ff7-ab22-bbba19723e3e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b7065b2-8cd9-4c9f-9b14-a880e370edbc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b8ec4e5-b44e-4baa-b5ac-284a08a2cf71"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59255ea6-b18d-4076-a3de-128633adca40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "aaef676a-c504-4120-8bff-2ffc24c26131"
                    }
                  }
                ]
              },
              {
                "id": "105f9c22-d31f-4b44-aa36-17e8e483865d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae1c79af-1af3-4bd5-840f-5bd3c60ddb4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7672c300-deea-41a7-8466-e523454d1a2e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6ce645e-89a8-425a-bac6-370183a347cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e4f7354d-699a-4237-8c41-7eff65113158"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "69e64708-7d1d-4aba-a3c4-1b97afe7c668",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bb5d5e0e-1d5c-4fa8-9121-2da40fd6449f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "32771039-13a3-4516-8dd5-43205a7327f5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9ac7f04b-edbf-4fd1-a8ab-cf456c0f4089"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "751ee874-83da-46f9-a330-610408e884d9",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4bd74cb2-41cf-4596-8cd3-5b0b813a66f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "907fd82c-713a-4c05-b786-6d702c7070ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "596f744d-5289-4f3a-ace9-4c29007a1f19"
            }
          }
        ]
      },
      {
        "id": "c4a5d819-e6e2-4f13-8da6-e6f0f3efdc10",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6b43591b-d2f9-4495-b822-7671d54ffae3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0a0fb685-49cc-4872-b032-9c6bfa35bb49",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "69baee6a-581d-4dcb-90dd-5f4148c16acd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d911647f-8177-4800-9b75-b1c54d0569f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "345b8a24-ec00-4b6a-9fc9-7ccc2fbea3f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4166e707-89ad-451d-8ed0-b26897277971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb2fc38-3145-40bc-994b-527508672ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db91500-ef13-480e-b125-6d87ddfa95b6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5640a90c-a673-4fb1-bce4-f63cbe708406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74dbe132-1455-49ea-aedc-e549aca5c4d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b3d9a3-64e6-47e0-acb8-eb96a1079e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed4d46e6-be2f-4d33-9e80-3325630bc1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6af60e3-40e4-4f2f-a451-7194d8188dbc",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85638648-5666-4cf8-9a60-96b3a3dce6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27be2491-cb66-48fa-8b74-c9fc5849f378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0262bfbc-323c-42a0-9d8a-db8991034a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c72f9268-b259-45ac-9166-a58fab77c8fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df49d1ca-6dc5-4a7e-9a9d-2d350db65710",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e291f97a-7d8b-419f-8f0e-aaddfed0847d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba7536f0-c3fd-4890-9cf8-8839d7dc4409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39b138a-c564-4347-b253-05b87168ce72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c66ec317-671b-4b92-870f-c406be7c3c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ddd4d5-f8f0-4b06-86b9-1417aee09056",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14687fb-f260-4d2c-a945-a878b1cf84e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c1685fa-35ca-494a-8849-c7066791391d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f8efab-fd23-4b96-ac5c-2c6ccfd00f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "392c5c67-fc0f-4806-b1d2-5192753c24af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "646fbb68-da97-4abb-b735-446c7d97d2e0",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f9c1ec-722b-423b-86eb-7b606b22b423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3956639-a727-4d13-aa06-6b9f440778b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343f1b17-02bd-4bf4-a5bd-561594526702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "77b0173c-b1ce-4477-8c62-fb593e3d84a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9970f245-5bad-4e93-959f-3d1e1c74fe42",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f729120-f3b7-4061-976a-9469ce728a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "677af475-96db-41fe-acc0-189f67694aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ab17f8-0d98-40ec-b25c-16d5c3482899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "207e7b7e-073f-499f-bd41-0c44153db7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f1aab3-ae3b-4b1e-be1c-8a33256b2335",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a752a94-5a12-4bfe-84b1-f1b92d30ca41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f40c6297-7e3c-4d08-b83d-1d2c74e888f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7df9f1b-6406-43f7-8392-370d03b9cb24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e02c399-452a-4575-8c74-e56d94858895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e53d6ca-da07-4419-a7db-cabdb6610343",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b6da73-c6df-4047-9724-fea8af9c2935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2fe2c0f-40e1-4932-93e0-70e7c1641cc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d4202e-3b62-4c04-a79f-7b8bd31a8b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6962b925-975c-42c0-8447-40f940f6af10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b047c719-eda1-45d4-8fd9-c999fbe3f955",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "944269b8-9307-4861-b755-b490d457b7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd9adb4c-69c3-4b57-9ddb-08c2a3a2eef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af76858a-6ef0-4c8b-8dab-43f552d524fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60ad0945-cd64-4553-bdf4-eab9aaed75e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1eefaf5-f2fc-45a5-9d5d-33f2e52d30f5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3bca6b-5d52-4ce7-b51d-c0b0a82b686b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a840bc66-2232-45e0-b43a-5a1e80875239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c9ebc8-2064-41e6-b313-ecff016ec539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "23a13a7c-bca2-4177-88e5-53b27a1a6789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60664bf5-7a24-4885-b3f8-b6f06e46cdb8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3768d80a-72e6-474a-909d-54c9a200f635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f7fd6a0-fdb4-4cd1-a431-d62521eaac0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18519e4-8e6a-42d8-96d3-03ef3aca4868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67090272-29cd-41cb-84f0-513f28b08420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c89c4e-0e3a-4aa5-987a-3343ee54dc37",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f94759f-15b8-43c6-8825-fedda56bbf5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63063759-8af7-4091-8363-eca45fb403b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b87046a9-a3f1-4204-a6e2-f55d71e5ea34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0e506c1-a707-49fd-9ec8-d19dd9f02b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25898e00-148b-42d2-8011-a1dd4843c429",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6fd52e-cdb9-499f-86c4-50d2f90ca827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f518c4-3a76-4c05-bf88-2b1928ff833b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8e58db-78f7-4d17-abfc-df20bd4d0df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0bd2050-b272-42e0-9b78-2984b310a850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55872274-7e2b-4b7c-b498-e7cf62f3f26c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e55cc9e-e88f-45c4-9a48-a55a09e0f3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "052a22d5-f890-479c-a7f9-836e92d054ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66c294e-e705-4d0e-862f-e433e54aca4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2546e1c5-0618-4e44-b6ff-6b8d1c5f8c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1727ba-2406-4cae-9742-c59835f4a95e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b643ca-caae-478f-9cee-73db87730d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4858aef8-16d9-4733-b757-29fd8b239604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709ce535-47ca-42f7-bf40-da630a9cbe61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3ea8375-893c-4f60-8fea-0dc2481e73f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd98a188-ffee-4bc3-a120-27cb85e020f9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f25b353-2a44-4720-9001-344f8aa2670c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a46504-036d-4015-b572-1ea75b4addfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231e4efb-8fa6-473c-9b3d-e6fcb4e1dc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c5dab8-a60a-4168-8d52-a55645c06486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b753cc-29e0-47d2-8e6f-c0adbb3dde8c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2089ad43-2c4d-463b-839f-cfaefb425c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adec269c-db22-4151-a807-42137c82c498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a80511-d75d-44bc-9087-a84a5cbc0f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "45c7a3f0-8db3-4dd8-be1d-294957bcfad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16981cba-d66a-46d3-9c95-d7b0ae7f7ac5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab48701e-07dd-482f-80de-b836a092bff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e548af16-4c26-4803-899f-de989a167ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a04b137-588f-4fe2-9e8a-bda244c18b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27a96ec1-3912-46bb-ab4d-d0bad5a1b9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092ac7b3-9a2c-48eb-bc27-d90a43d01e84",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c44510-bf20-4001-a40f-5e05294e1e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5076159-df64-4f53-8385-f89c87fae069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c5c929-83ff-4a03-ac2c-1371b0565ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14d71082-8ab0-4a59-a1e1-4c26e50b3860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ac8754-04bb-452a-8d27-53a5fe59a035",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9451dbad-d794-4d41-aefd-4e361eb914cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "529c9076-f1e6-4bd2-b461-a00d49b1ce19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5307aff-f04f-4bc4-b1c1-5d6825100349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a8e3703-bc92-4250-80c8-d081007fd1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9437c42d-bd0e-4084-8976-67444f9b091a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c4a8fa-26f0-4f94-a5dc-d1b65d3dc295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "406b7597-1cc2-471f-8672-5f92b321fea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ad907e-056d-43fd-8b53-0ae2870da73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4649c50f-8c61-4cd6-ac1a-43a9d23cbe2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28580b9d-f66b-47c2-a565-5522a884b30d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c1535a-b2f7-4143-8e61-5c57336f8bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78f37ed7-152c-4840-bbee-ab57e5b7e69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff4ac22-1ef0-4be6-b2a8-4b3ac9e7cc9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1d3aa7b-e9e1-41a9-8dc8-1e73923d45d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c73d8e-48c7-4f62-bf11-dfe6f903dfcc",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41294e6a-1026-4905-aa11-43bca8e87ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3109500a-4c3a-471e-a965-fadf18459bcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417e34e9-037b-4ae7-8196-90aaf4a009dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c79d56b-c2d0-4017-9a20-26ed765d1990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a62ee7bf-d0ea-4653-b6c4-df705359ae83",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7898ce94-8d5d-46f8-b408-64654ee14ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e4f0942-c37e-4e06-8926-98cf7b44a26a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e62a745-5563-465b-b4a6-f1f0d0a7788e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2c12243-f5f0-4b3e-9cd8-17394aecf5d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d725e9-c79b-43f7-aaf6-b27e9596225c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a130c911-b8f2-49ac-85bd-3ac1beb92278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcdfe352-55eb-4057-a374-d64f49fa18b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c18121cc-296e-47e9-9567-5c37bc9d204a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3263e5c1-ff7d-40b7-b6bc-7d0f19ada99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc6f97e-cb46-4e8a-b42b-8fd8f21d2792",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f579b788-d0a4-4cbd-84e7-4a5b8d423564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8adbe74-0a0c-49d9-b28a-0725b13180a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38ec42e-cb78-4149-9af1-53b0c23a7bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8539b01-5237-4ad4-9e30-c9529348a9e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e07fc30-4e9e-4948-85a1-4724dbb9e247",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83db30b3-b2da-43de-bcac-2422a296e026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce2675fa-2f6f-40a6-92fe-767ed1a7caf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780cd1b7-ec30-444a-a3ab-232631864f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7b8582f-3b86-46ca-84fa-af9cf050baf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404fc80b-a4e0-4379-b0ac-fe2cbca9b725",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1347a7ad-39d4-45ea-9f8d-2772e1ce0f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c094fc7-4d47-4937-8354-9dd2691b5660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e3369b-dd8d-48a9-a7c4-a575dbff93b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "697929ae-4441-4bf7-b64a-5ac99c35df43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6397c2-8e66-49ca-835f-4886d0cc573d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be539e47-fb24-4a0a-abc7-8a03182c1a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1644d34c-81b8-4c92-85be-795357aa2693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d90755-48fc-4f42-8ec0-275cfa778c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17772668-8077-43ca-9306-d1ec4adacc81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213dea15-c3c8-47cd-927e-de2b91ef8b72",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b44365-c6e4-4ba9-9dbd-d6cf8bf94f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5804ac-6892-47f4-b7a7-2455f01923f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28828567-3c4b-4e3d-8e31-e509661b3087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01a91a9b-4ba5-46b5-a8a5-07ff7bcd799f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cded047c-9d05-4b69-b382-5d3f6068c53b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3887f88-8310-4160-9c38-3810f0756183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b0c2c2f-52e5-4c88-ab0b-92eb7c38cc82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c480cbb-0ac4-4602-88a2-352a570eaef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "adbca7c0-242b-46e7-b317-afcd3ddcd620"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7efc8538-eda3-41fe-9cca-70a1d1a385b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "78475626-6298-43d3-a297-e1b4dc69854b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73b53aa-4d07-4852-9f21-0d8e37dacdb0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7e6e740b-ec57-4b42-93ad-dc72bf44d4a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c91949c-c620-4bbf-b512-1c121276f2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7576d6a-5cfb-4a5e-91e8-d445dcc60e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006e7655-8104-4ff0-81d7-e4bf76daeac4",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba382ed1-6702-4275-a89e-211f86ae0638",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4895ba36-9f82-4840-80bc-789aff13ba7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87a61ad-0d6b-4070-ad81-760c0ec18fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5fb6998-43db-4bca-b8a9-eab331480599"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe365375-2bf8-4bf6-8036-3d532ad99994",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a02e3722-ad03-48b2-8617-aac9848952e1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "358bb652-72c6-4086-8e80-f6cb5ff991c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a227883-3186-4f49-8580-aeb0f9540f88"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0babb0f-a858-493f-8bce-6811f6c0b7c3",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4209a81d-80ac-4699-89d4-a9875306946d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "64569a53-e08d-4fa9-8011-1292b886620c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0091b490-255d-4e50-84dc-3eb261f8e635"
            }
          }
        ]
      },
      {
        "id": "7e259310-dec7-42b8-9ba7-c600a6a037d0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4e6e1ab9-c35f-4e63-bcfc-69cd5a5b2cd7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0bb89945-5646-46b1-ac7a-91a62ce94405",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1849c1a4-f988-4381-9ef6-29e2d6e3e480",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5608dc-b4ce-4017-acbc-c0e7fba08b81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9532878-0d13-4c28-9d75-a2aa2b5d5811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8aa4fc-8653-449c-aaf0-0c74a9e90888",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c30305-3007-44fb-b9b2-36438787f948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd4fe3dc-96a6-4d56-9fca-3fec02769ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b13b414d-774f-4d60-8452-409db700c626",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ed1403-0f7d-42d4-93cb-72cba7ce64f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "268329f0-182f-4da7-8a38-94ccb6890498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33d1e76-4864-47a3-9014-dfea2923f0cb",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95214aaa-d985-48b2-a373-9e4edb0d8850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8523555f-963e-4978-b219-7d21fc0eecb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6cb9008-8a37-4484-8920-ed1f68340cdc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b88a82-5991-4ff8-b29a-8fd594adfada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e64f2b54-6bc1-45d2-b3d5-2fde6fb1880b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b46f7c-d947-4c96-9273-72c7c3526a33",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a67109de-f963-4aa3-b44c-f16582b58065",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffface53-23ca-49fe-b5b8-f5d8e40b8c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924bd3ba-fdc1-462f-940c-d85281067060",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f780f616-3b17-40ca-9401-cf0dabbf333f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a31d4f88-4782-47b3-900a-236798ed1c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92cacc8-8413-4d4d-a711-557cc62d9161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "203932da-df7b-48fc-b8fb-b3c6ea8cba97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ffc172-bd8c-4878-8820-c8947d3144aa",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363b3823-13dc-4b81-8968-1398dee7f389",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec6d3ad0-98d0-40eb-a0c7-fa4d2bb3d479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "515507f9-874f-46cb-9d45-2fb4df248c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c09bab1-332a-429b-8669-3afae91b3029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6975cd10-c2ff-401c-a60c-ab996e0c62b2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9f794a-0557-4065-889b-37f2398c2653",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e865e86e-4253-4ed6-b116-edca43dc0385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3465728b-bef8-49b8-b365-fed1c53e35fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b95c41a4-f6e0-48db-8ce2-926359e88ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1d9edc-ef09-429e-befa-80780ec16549",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e350cc72-3860-4586-b09b-a497ba080a25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf367304-ff99-4c3e-8aac-59fb00348e86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ef444c-480d-4667-a6df-f6e31952c3dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "003369a9-8f60-44f9-9014-92bf3a3c7696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40da1f3d-594d-41dd-95c3-e6a15aa406ec",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9ba264-4763-4976-af89-5e394d6a0171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14409924-31e2-4245-9da8-fcad2d5dbc3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78114cba-02c4-4447-b849-8b929b4e05b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e69d3b-235e-4a51-b9de-d326f44adf63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64ef99e-da7d-4248-a021-abc497c6a3e3",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9601a7ff-7c7c-4285-a4e3-38a67f1935dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82ec4c5-eae5-4fa6-9a26-f15302ab3735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "350ba226-2cc4-4ba4-8df9-827260881d30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65bd7e1-f56f-4582-bfcb-9a43e13dabd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4394d6ae-e656-4dc3-9e40-25102c1e74e2",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1907cd-c9d9-43b3-b952-2456f60e1119",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff94c389-14db-4341-aa70-bf93710fa6bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc08d94-1f38-4a27-b8be-3ec2ff5e70f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00621d74-52e4-4e6e-9142-5ccd00446865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adfe8f2b-88a1-4183-a299-df07f94936da",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e69479a0-cd69-4b4a-ba2f-c0958f3642a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bf1c9d2-ea67-46f9-8cae-b3f62569f89f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c28ac6-55dc-4706-9071-64d111341f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e8398e2-dfbc-47db-8109-52eeeff9ab4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56065c0c-3512-4424-821b-e836042760e6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e0137a-897b-4a2b-a323-91f27d9b159a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "305b1b6f-24b5-4397-b6c4-bc31a65c4932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c432fdf-71d8-43e2-8df9-c1ee30133bc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bec752e-50fa-4844-8b76-3fcd2159ef4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f28b795-04ea-45a3-9b72-b1b1d2bd8402",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611adb94-fe77-4d87-a956-2923314b5320",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9dce1fc-ac15-4f83-933c-b26b4d45f14f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f77f90e-f7ab-413f-8253-4392cfc8f875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb9459b4-ac0b-499f-9a26-c47c4e42a45f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e84eb4-ff8d-4802-8768-fe02e4b06314",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ccf6cb2-b878-44bc-94ad-d68f8d7272be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "369a7e7d-9a16-4a2e-93fd-abbe3b98a844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd6d9d61-f4b3-479b-b0ba-f18dc78e1976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc5b433b-2691-46a3-a4c0-a122506ca993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b91e1b8-a85e-4c32-9d34-f5e81a34037d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d523df53-46f3-4537-b704-a8982ff12ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdc29029-f7ae-4139-9f85-2f47a86ec740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5da181-d8f3-4c93-b443-0c4a6c120dc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a9b478d-4dce-4f99-b688-1f3bc2695c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86f681a-73f2-408c-a63f-ca7cd8acf6f8",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867af2e8-28ea-49d2-bffe-24243cb78503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce2fee58-3e4a-4bc1-8945-8737820a839b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1646f94-51b9-4c6c-8c8c-6459e2b2a1a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dee416f4-7dd3-4389-a0d7-04c2cdccf4de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900578f2-60b7-4601-ba48-6e6a99697495",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b5d0b9-9b19-49ef-ae2d-2f241f348414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d496c7c-40eb-4116-b871-ee204dbb7087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c5fff6-a1d0-4697-90d5-d7f68ba24d42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "145d5fef-2375-482c-8f7e-e3330a74cf36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4977a994-3ac8-4f4c-9575-27c142799117",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1173e4c8-5ca1-433b-b4c8-3de5bdc62ecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2195ebad-894a-474c-9252-a56d2de1bdb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ea7a6d-d01b-4b59-9c0b-4d68777ea19a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65bc258f-742b-4d20-af09-d0aae235e2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1d736f-3d4e-4c11-841c-c26bf9c6d1a1",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bafb66d1-3ddd-4653-9029-63e54b5030f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ab07a1-6771-4f62-8eeb-4b6fbf57f87a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52dbe314-5e99-4a25-b7e6-953cbca5a716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a22d65a6-f4e1-43ae-a561-2fcf2ced5e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e310c5b1-de22-4728-aa91-ce190322f965",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab188d96-0175-401b-9d24-56789d11a851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9607ffa-f365-4dee-83ec-e26513d0320e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5164fa-1d8b-4deb-81ae-d20bc9cbfd8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a226b9dd-d546-4108-ad00-0121072c15b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd55b5aa-0584-4471-87fd-b7d1434c22f6",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d74a3a-f3f3-4e46-ae24-84c3a03f6ee2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ad24a4d-1cf0-484f-9a28-e7f43d6dc4dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd22a815-faa3-4aa9-a66a-1583719d5d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52f3facf-5733-47e0-8d1c-16bcb9239a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9578b632-a641-4562-8d11-e529e97ec38c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0526ce-4a9c-4ea5-9d47-6a092f622ebb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf3466c4-dd15-4ac4-bcd6-46fea0c3ae48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff3a65d-91b6-4688-baf5-84a276c8c020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed2b4654-253b-4cb7-a514-e075a63de4f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc717fe5-ba5a-4288-a955-81d935865fd7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd613b6e-4393-4dcb-bdf1-72b3265c34cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05a00dff-9857-433c-af21-7ebfe15c037f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "652cfc2d-e851-4aa1-9a5c-73624e00718a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1b8373-6bb7-4b28-a4da-6e3f39f496a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6b1f9e-ddf7-44c3-989b-e63e8dda436a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4beb664-02df-42e2-9c5c-bb59059a2f7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab7cd167-c722-4e05-bd89-71ec2e9f2eec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1585e1b8-4579-4128-8a2d-f4e59feca365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34531460-41c5-4d58-b81c-e26f61ab2720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7d9b59-f038-4ff1-bd17-400fc0c43269",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8e1858-7368-41da-aa75-6b9e45502c57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd49f7c-f2c9-42c7-8e7e-a54cbc2fc1d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd664ec0-b1b8-493d-9bab-4384b4c341be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46e36be-03d6-4a2f-bb1b-ac97090a9675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd75a22-55e1-4f2f-aabd-2f18b6a00605",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd82e98-4553-48c3-8271-5d51c80092fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4179a90-5863-47ab-a678-edccb23a785c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8638c890-c99f-4147-a78d-5e0c51bb1b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e342f90-7630-49a3-93d4-9e60e1452fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8938e5-6d25-4aed-ae76-fdeef9f2ae9f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "545d231a-dfbd-4861-bbb1-3116f647ce9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4aa561ab-4b8a-45c5-9ca0-1087f0c70a72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c15a706-37db-4e8b-8349-c8136f75d5a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be6fe172-fabd-4855-b86f-01c878868054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b177e5c-55d7-4718-b326-b48c7d1a0f21",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5343b166-26f9-4d7c-ab7e-87177d578e3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "287247a6-6bae-4280-9467-c5ac2b256690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8653c0cb-f110-4c87-a86f-3feecfa568c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2e40e09-4cf5-4964-a1b3-d424e8300b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5718062-808b-4b90-a7ea-2849740ebce8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0e02e8-25b3-4245-add6-ae056f32f2f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "267b8899-415b-4a95-a9d8-58c9aee0da50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "432b58fa-10ca-4ceb-9178-95cf57f3785c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1681a569-c7e2-49ce-af08-c751b2988134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7626c4f-cfb2-484c-8a7d-b8591020c458",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a24da8-58c5-439b-a6c9-41d451c38e44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0e9ee56-470f-478e-95bf-683acdb99ead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37f0169-cdc1-45f8-8885-711865ef97b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc5f6609-a33e-41c2-8dab-97b9f61b4575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84456e27-d19f-4ad5-9098-41881a5e5a94",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e72128-bc1b-4b33-9271-4d54a4dd9baa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d13ccaa-450e-4486-a54c-a6b2ec250375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e1b291-4701-4275-b278-8ea6ad06ffd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f85ad66d-f774-4317-b6d6-7abe2fedfe09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861ef8e1-5948-478b-a90a-c7e7ef0af3a3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53bd82b7-3251-4ca4-8137-883dc98a0515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e67eaf15-b2b1-47ac-86bd-ca36be73dc23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b5b308-35f1-4563-822a-f4fe2729f030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16afd9ce-1c6f-4140-8bed-10ef57b90321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9baf18-9bd7-4872-9c06-1ef126d383c0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4cfaee9-ed2e-48a3-b9e5-8850df520e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d287fcf8-59e4-4f38-9009-9f1901f6fcab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0daaa478-1c93-4026-a4fb-131ac75559fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb4a3c60-8723-41da-8649-be847b651b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9911cb8-0557-42e9-b897-e422414b3e6d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc67196-1e7b-4ed8-8fbd-31804b691aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c4d4372-ddce-469d-907a-450f5e851f09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1609bc14-dd7d-42ab-b68a-29688490914a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ec6c2b-34d3-45d5-845c-c9877c0fc935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c967279a-25a5-47f5-bb1b-ba7ad7616ec0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff1ee34-436e-4178-9cd1-33bb7adf1101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7ed2c4e-e410-46c8-bb4d-9a6b72f4fde4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9b0b79-41dd-4260-9c90-a97a7fce4911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "affaa4f3-7cb7-4906-9ca2-7296f552f841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7ab60f-c3a0-4021-8f55-70dc65666fb7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b689912-79c0-428d-bf00-08e427c7d733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5eb9755-dff5-49f5-850c-e38000dd8fcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de356a7-6453-45ed-acfa-a18c57c67f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f11bea22-2ee0-4b5e-9164-726865720e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6494d78d-de42-40bf-b5e2-42e1e8a82394",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb60654d-5bf1-46d0-a9e9-88d86f6d7450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21f2615-aa33-42ae-952d-0a4a6746eba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f02ce6-49f9-4544-9ea8-a5de52104305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a159073-864c-4fd7-8fab-4b7e30b086a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf2f208-8702-40ba-8e47-575a79d49a8e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffa0452-4492-4366-a020-272d4b1b26bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2350d3ad-f8e1-4cb9-a94f-f2c1040d22d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "171fd3cb-e7e0-4fff-bd46-750640e89697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40be30df-bb87-4ed1-98be-f9237d3dfc64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25d1f6d-2173-40a3-a28f-5ab019b08537",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02361b2-9553-4b0f-805b-55391bab1306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec8ac7ca-5d65-440c-b228-640e046dbd0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07ef6c0-c4af-4738-8a27-929813704177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ac150b-bc56-41af-a66c-729746e00c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe392a7-b685-45aa-8f70-8626efb39131",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09f599f-e575-4520-9966-113474858c0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c95a38bf-2335-4dd1-91be-1b7643e042a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d44f11-dced-4152-b1c9-3d462a511098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "011f07f7-332f-49f9-8e6b-7d6f9d8a04a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3783602f-2a1f-482f-a437-eb52abb9046b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f75bf7-0df7-4aa3-a570-6b985c3f75a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bf12917-3294-4b7b-b1ca-4136b0bce42c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95531db2-1183-4825-831e-201556d0e4ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "885d267a-e4e3-42bf-88d5-3b11b1745b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b121bf4-66d5-4ea6-a7d0-105b0bf09d5b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffaedec0-159f-4fe9-894f-88d94b512946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d93bdeeb-f239-4e74-ae58-6db4c3120632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f49f030-d6e9-41ec-8295-2b52bbb07b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c00369-9e1b-4c65-9021-435a4f6f4b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33594675-45f5-47e6-b068-a8b857734ca6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77bff464-e192-42c0-a8a5-75feec23aa71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "715356ed-5012-4ddb-a051-f8ffd1648d75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8d2e2d-b2d8-40f4-9d7b-807c31398943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b71c1be-4a01-48e8-a0bb-76cc79edb680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a13ae7-6c56-42d4-bef8-8738a2d3b3f7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1892be84-ca06-4a27-badc-6922606e0183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dff0c4f-3146-4fdb-83d8-266ef12535d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0425a5fb-d0cd-42b6-9332-00d65654b7d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c44b13d-a120-4d03-9c03-a8f57ef87dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986ab290-497e-4436-a372-ba453ad1820b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a43ee8d1-fa73-403d-bab3-3405ba574dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a0b6f7f-376f-4541-b6b9-46dd76b2f2b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10acf079-9219-4c1f-b4c9-fb2407d4211a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c4c570-b066-408b-93f5-837ca491aef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f825a629-7890-417c-9843-12eb1c594e23",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0fcc4f-4a7d-41ee-9a60-b9cf415f7b8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a09715-7487-4f77-aa98-656bf45575e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8547ae-30f4-4735-8fc4-b73588196598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c8bd2a-ae22-47d8-8adf-45f08ec08e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf81478-f39f-4c45-ad4a-05f06c824143",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884ef6d3-56bd-4fc3-b93e-1fa02719d282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dee8abb8-dc18-4dcc-b127-6b704aa26592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1cbf6f0-29c4-41ac-899e-863fcdcfc460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "509d5f20-5d66-434a-8979-958e2ae0c1e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf8e2224-f565-40f5-8789-8491a2afb004",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec5c407-563e-4ec8-a177-c605fe0ed944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4596280-cf06-4367-be41-2062ad23f23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "353b5c48-9d06-4df0-998c-8b6c2c67a74f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74588df6-a96b-4323-be18-70b14d6b883b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0c35d4-a690-4d47-89be-01e5b3106bb8",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d25f38d-15ad-45e7-872a-93201d2af423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0402a204-ee23-41d9-9e41-cc948be0f6c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb4e72d-d88d-48f3-b73c-657dd6d65d23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "114343a6-5711-4c76-b679-904d5d719642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d7d1e2-4478-49ca-b2a9-806dd080c7da",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a786e02d-ff87-4293-b107-57442d1b100c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c580c3-6d46-490a-acdf-fa9d24a8d865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45665852-6cfa-44b7-bbc3-8771277c8368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99a3d74-aff0-4d59-aedc-77e8e3f128ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377696de-2ee3-411c-925a-166853240fbc",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f221b100-29a5-4d18-aefa-e0bb0441c967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ce583fb-3cb2-4b8e-b416-4b1315995778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5664d5d4-05c9-49e9-8f8e-28777591c030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97389005-e608-4009-a30b-9f0d7e2e2cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7b6ea6-a76c-4c44-9f13-caf399d099cd",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2a22bf-09aa-40cf-b96d-768293eeb929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c97018-7699-448e-a1e5-cf90ff576de1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d710403-ea42-4cde-9ad3-5c9d4a5cf45b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c3dcd8c-7083-4f04-9a95-431f598bb050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d09215d-87dd-441a-b156-80be05e0dd64",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5ad10e-5b24-45af-9104-dfbbc140cd73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45272c68-b487-4e5d-8adc-3e895e21d406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5cc242-4fce-435b-bb0e-a3ffd9e6ff5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33983a61-af57-4c56-a3f5-416a8d40bec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da446aa-57c8-489c-a9a8-3a04f2bf523b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c20b18-74fc-4009-9075-7ced30d7d16d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b31111-b30e-47a3-82d6-72518c8893ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c26b3d-2dea-41bc-b288-9de7e321d0fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad26f38-32fa-4c28-a7dc-cdbe2db7f86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1999966f-f97c-4a7d-82ff-7aa1190104e7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6297ba0-5c61-4ecc-88be-545696898a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a59035-9000-44af-923a-2657b7edb931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "652fb161-168e-4fe3-88e2-4f6d306c7e2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a5fd649-efe8-4702-aa96-da75b5179456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f621e5-f2d4-4ffd-9e60-08c05439ad74",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7ba302-1305-4cd7-a19c-a645c089c24b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31cc071d-5df1-40bc-ac58-9de2f96ee66e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72912ff-3b2e-4049-aee0-bb8e09bacafa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca66edf-d59f-41e6-af45-06469c6bd700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be4f7e2-79b7-4602-8e88-91f1c1a87153",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0cf4b2-5d33-448e-8760-97079c4ff26c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a11530ce-e669-4489-a335-b17d8ae2c22e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8af83a3-a80d-45d5-9525-49e7ed3a8051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eca6200e-a7a8-4dcd-a989-48d8fa46a94c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d057ad7b-5c67-4cb7-82d9-eabed845d0f4",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f03f967-77c9-44bb-a6fb-22c8e8ce1ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b9b49b-55a3-48d8-8730-982dd4f3ce5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2602ad7-7f90-46e8-b078-b6b5bcda4ea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7addb363-e8ee-49cc-9111-f123d9db9c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ddcd1d-2c7a-4e32-ab85-33d9423ba95f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a130ffa0-f7c3-4d74-8367-84122a1b4638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1716d9e9-5d15-40f2-b583-59ed759bd093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c5f649-aa72-4211-87c7-e37291bf9d0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b6f9a0-10fc-4a60-8f28-f249651c6ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827f3fb0-eabc-4db7-b548-0ace4545f3c5",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3bda1d-b115-4b3f-b890-e3a577afb8ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7faafd9-7beb-4356-be55-7caed1cb4184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17935478-9354-45e9-b726-7455e8a410a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba085b3-5481-447e-b6ab-d628cedfbeda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0149535b-7258-4e62-99bf-3aea1b08023c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8d4d12-400a-44fc-8e2d-ca5ba25950b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "affcf6be-c2cf-47f2-8043-c87bdcfc8173"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14dd83f2-327d-4457-9aea-871ae529b9b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46d4462e-2c9b-4b2a-9f6c-74e4300949ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aced99d5-8882-4306-bb18-2fd594e31e75",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1fb4a8c-f461-4dc5-a7d4-9b9fb716ad95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c80b0ce7-2325-4224-b0b6-6aa3b4160117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0e098d-1e4e-49b6-9845-5a90dcc81c46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00614acd-6855-4044-8447-f665af4ea7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f77663-07fd-4875-a101-2cf72dc7b2e5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0d7d4d-e47d-4fbd-9b48-984f266b06ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0950a969-adca-4f87-93dd-2770b5cb4768"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b10f0c9-e223-4a25-9657-9f6d252aec36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60a9a7b5-f70a-45ac-90d6-086646c0b8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6791225e-0a76-4e8f-b6c3-68899fc79753",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4688a742-2aff-45e3-b70a-66ed0f1615ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9bcfdf2-b914-40c0-b59a-cb7c2a8a9bf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99a0783-9f6d-47cf-b546-dfb3de6c1039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1535d69f-369c-4ed5-a374-3eeac83b8457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea42ff35-bd92-4087-8c97-d7e886251461",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7705d0fb-2159-4532-9818-3793e5b45bce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d098c0f-0cf5-4956-9e9c-6ae904990412"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1769b5e3-5afa-4e0f-bf02-0b88b16f5276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb306b0-a6b9-4d2b-88a0-f77f78d37aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b99b6ff-cddc-446c-a59a-ee68337ffb70",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c343e2-19ed-430c-a275-8e75ff95b4d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37edd271-368f-43a5-9fa3-6a97728867d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f3cd87-94b3-4bad-b04f-235e0a116991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d675dd21-a042-4c91-9803-8c53dae7d19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513c34ef-cecc-4470-87b5-26290359881c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577e2b2d-06de-4839-b48f-99649166f5f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4120b5a-7413-4cd8-b0f6-58a2a256380f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9e9173-17dd-4068-857c-54a45232b197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe896e4a-7638-4c4c-8bb8-ff61c1194ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b444bab-339d-406c-b33f-362428540186",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212c03ce-6f72-4f6b-94f6-37ae598e0112",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cea1ff6-0439-4747-81cd-63f776c9b0aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c21329-88f7-4bfd-b2ef-1f45f5e0ae90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a87f2e6-8171-4390-ba51-ae3277c22171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc69216-8b69-4382-bcac-f35882474256",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12001e4e-017b-4f3c-9a5a-f41554f0394f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57fe39ff-2a65-44f6-9590-4cd54280647f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "555d6687-36eb-4b21-8cf8-dbd092e9d2a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20093a90-cb60-4323-b46a-59cc61f16e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c63cd3-be87-4d15-9059-d87a8f43eb75",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17c3ff7-8dae-48a6-a0b7-52395f5a612e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e298938-c4c1-49fb-b8af-b07bdbb96bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3099db55-7a07-486d-bac4-e15890226380",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7774aa58-79b0-4852-8002-88f9f1eddb4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133f285a-0949-42ba-8b34-45b21c1a306d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93db75b9-9d49-4fe5-a1bc-82b468ba2c32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d709123-a873-4f6a-bff5-dc4ab3c95b14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a227e7-4778-4634-a99f-6ad2e8a980e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad5f2732-1f61-47fd-815b-936b87422cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33bf7447-bc85-4a24-aca7-33111149eff4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751b03fc-2724-46f9-94f0-e534cb2d4088",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7b6f914-f095-44b1-a5c5-f4bcb93b3fec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57bdb457-88da-46ce-8a43-32560983b566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8bd76f9-bd05-452c-a73f-1aa7460e0496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1994d16-b52b-4200-bb3e-9da3e44fecd0",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5391e1e7-02fa-4f39-8b95-1280686de604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05e84a1e-b48b-4f85-8525-310e63fe1003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4510141-84f5-436c-ba79-2298abfbef35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea7cef9-7faa-453a-971b-3b5afb862766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c20bedc-8ea1-4128-8dd1-81e84eecb624",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb5e22a-bf4f-421f-8603-f383dadb9e81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a493d1f-9ad9-485a-aacb-4d1e38fbfd99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a01581-9fc9-4da6-8160-e8c45f3ebb0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f3af507-1c1c-4f58-ac80-77f410e5da45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a783c4-0388-4fa0-9670-c4e1d4e0ce1a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d45b22-a9da-44f8-ae19-4653b472e305",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44e7f3cc-3daa-4f88-9514-443d2f917c49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be87ab63-9339-40aa-8895-7ce017f7da4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "427cad1a-c575-4209-b1e1-36503837b9ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4bbb5b-4d19-4a97-8ec5-cb884c01deea",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e535bb-bd20-4da4-92ef-245fe415aa5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1324e5fa-3a98-4c1f-9dc8-ed7136492177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89dc2f9-3930-4743-97d2-bcc7a563000c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5785497-d66b-415e-9253-2ee0a0815a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c329c185-78bb-4ef8-8e3b-3f4ff3c22a70",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61742b86-c06a-4624-bda6-64b30212cba2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efdbb5e1-f097-44a8-8858-ee95dd9550d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b22582-d497-4b66-ad69-720bbe3e8b8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c19cde-b882-45dc-be92-67e875591859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f265dfb1-1059-4f1b-b0b3-43afc04c7f17",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09cce473-b5eb-4324-a10c-6b8fa9d1dac4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf228d15-b7b0-4315-a418-cbce9582a3ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea0d3e71-c5e6-47f2-b79b-02125c862ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d73933-24f3-4f9e-a1e4-0166127ba38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09697c5b-8134-4cf7-afd8-72ba16527fd8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e913ef1-2a03-4fc1-976e-95e9cdbf8c0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "055b9a1a-a8b3-4ba3-9228-0f0dfc913aec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9173dce0-b4c7-4691-aa09-5acb51c780f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7b92113-f03a-464a-b4d1-c8636f4bef43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84dd3220-ec2a-42a7-b85e-a6d11ac6d64e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82bc3d57-411d-4dd4-a7c1-01a9aefac2e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3758c72-6903-42d2-8c02-18bef11df075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5892f7de-445f-49a2-9e4c-5035de4904cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c7400d2-4d01-4c88-a13b-303742d802a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407a0a3e-fadc-4f87-b74f-db1a84b4a67b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0120d3b-7121-49f3-9802-e4090d1d18de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ba4a918-bdb8-4be8-80e4-8fc6119c8f88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d0c4d1-20ad-405f-93b0-ffb1c30de14f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f9a743-0846-46c2-900e-2aef06090c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82f4220-ac63-475a-8332-dc2e7ed46633",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31da362a-8810-4a25-a308-a585cc680520",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a3852e4-e935-4eba-a38c-0e806d95628b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8940665-f648-43c6-a65e-fc08af556dbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d37b6c8d-5aa1-494f-b1d5-11c006b465b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d97722a-df5b-4276-bd0c-d9bd4fa83b49",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee49fed5-99ab-4bbe-ac95-9f03bc14e9e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3746b322-1cff-41ea-965e-f77663d7398c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d17e8d6-8bb4-447c-b0d7-885f5d743293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545d95f9-b3f9-4d50-bc5e-979cbe45a85c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39ecabc-f8b6-4c0a-9408-98da13de5174",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c03824-61fb-4b67-905d-f3c5624733e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00238c0d-5c4e-46f3-b4ac-7a6e389b8bc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b0d412-4bb2-4f4f-8c5a-f8a8bc030240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a20461-186f-4f2f-8b4f-a7b281ffc1dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a1d086-4274-4159-af5a-c70dfce119f5",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e23b3ce-f973-44ef-96f9-bc93ad75eb1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "215a6bde-7b96-4068-bbf7-4b3deb0de62e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c5153f-d559-4b35-b28c-7334ff49c8a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79f560ad-d533-4c00-9e8c-b0c3ad2e0715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44cf4dc-a503-4a61-a0f0-a8fb1587c694",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b691b1e-d9a8-4f77-9b7b-d8ee8d309a5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc8066f3-e20b-4f3c-bff5-b81bf7cca980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2924b0df-7dc6-40cd-97c8-901bca08e030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77857311-8609-41ad-ab27-fbf205e51367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4304dbc-3257-45e7-9848-77fcf5be13fd",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c53e8390-e16e-4076-bb2b-c6e0689cbf61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48410e70-4a66-4e05-9b8e-936c6e5256fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2502d8-71c4-494d-b549-24d850d70eb2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4e5daa-d1bf-4648-bb1c-20b9d16e276e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88e6c8f-72ec-49d2-869b-a3105937b4ec",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6292388-49bb-4a81-bc1e-e6bacf2b05f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61fa6480-8f1d-4640-9792-51b56884b536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fedb04df-d519-491a-b6df-e7291d4e0851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d5415a9-2c9b-4101-8497-ab5bcbe5dd27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e3ca3e-1d80-4798-9926-e11057ab559b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6263f127-bc45-4198-abb1-16bccc5a162e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b43f5e6-f7d7-44ec-a348-cacbc17c134a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafad363-bd91-4e72-902a-22d14f2a0388",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f223896-e971-49a9-8322-4dc09228be36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af12d6c5-db34-48ae-bf7d-4655d30b1f61",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d7056de-1a70-406d-95e5-9313472677c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc12106c-21fa-4ed2-b173-455d63ff743e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18830a6e-3ffb-4f57-9577-52930ea6308a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a6e1831-4994-4d75-9ac2-5877276544c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20eec9c1-0be7-4910-a544-87af7b61535e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8aebf6-f7bf-4f5e-b2b8-2487bcffdcd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc8585a0-589c-48d3-a70d-4264c3fe8e80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8afa3a-6945-4c4e-9e4b-0d5f89cff384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c531b9-69b2-45de-8185-a39b03512a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f16af63-02e8-4703-80bc-fad377700747",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7a96df-5bc6-41a2-ab6a-dc5093c6b1d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b985d71b-34f7-452b-8b0d-98e01b147501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad79ae3-f9d8-4b7f-a3a2-53aa50bee82c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6818bce5-537c-4c71-ae97-408e25396901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f93cc1-b162-4c8b-8918-d5ce439ff86b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f63aa6-2562-4185-8db8-da4798224003",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b75012ea-1eb5-448e-9866-db4434bd050a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73842189-9093-4ded-97f0-41f5f5273e96",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ecc05f3-dc94-4e09-899e-96e6bdae173f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a81b0a1-f43c-468a-b604-b2a1bf17585e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b55f9f8-daac-49a0-8443-f99ed62536b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6acd1871-b33d-4ab0-a974-9283019ec3c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e09dd67-9eb5-4f25-8172-d7632dc99ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4a1a5f3-4f7e-4d39-a499-4c87e93625ca"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ece2b321-54a8-4e2c-9746-c8125c325e33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f5109b4-7462-46a4-ad3f-4f67cfb5c3e2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "61075439-1f43-46d3-bec6-df07e309dd60",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b80a34a7-b3bf-4bbe-b130-1cfcda17fd94"
                    }
                  }
                ]
              },
              {
                "id": "9ff14017-03d8-4453-a860-f7ba3dc433f9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b6fb0f68-9f86-4985-bc13-e3833f0c98c3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b18eee-a2dc-4101-b77f-96cadf62de29",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "82f827cc-264f-440b-b394-0c401cc94479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "204dae6e-d623-45be-a60a-e9135ef4f45b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bfff1c0f-35e2-4cea-8c5a-c59720a22981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05d1c51-898d-4d83-921b-9ede87948e58",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2116e47-f962-4293-bf5c-d10d0e8c34af",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "86fdea3d-98d0-418e-bd2e-482c9094fe5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f7e342-1793-4c28-89ec-cace21b9d6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac730126-1a40-4d1b-8f78-8f1606c8899b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "061ced42-79cb-4a0b-a77e-4e1392cafaaf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46a82f51-862d-4bc1-bc93-cab3a1df0302"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b36d553-0c6b-4f6b-8b65-a26e63711125",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "920adaa4-4156-4436-9c68-2d95e6917a88"
                    }
                  }
                ]
              },
              {
                "id": "35194362-7868-4c49-9866-d71965987bc1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d3205ecb-7e71-4b94-915e-da8007c83ddc",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f316c9d3-8d27-4fa9-bc7c-f004457d1278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c3bd033a-e407-462b-9112-efdc8572b510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6eab49-d2df-4aed-8bfc-673cccd6f129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c9f344f-d204-4ff0-8ce5-587963114fcf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e65ad10f-614e-4322-89cf-640bf9c547e6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bbdfe4a3-cd28-48f2-86f0-32a868e61c2f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e6ed64d-d625-4204-8a1f-53a0bd994673",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ea9afe81-fba3-4287-97e9-c7f68388927e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "800f4e12-e89a-4265-8938-c6c14d84c4e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87a6c814-68d1-41ba-9393-ad5f064b0b98"
                    }
                  }
                ]
              },
              {
                "id": "b4ac23e2-7c31-4cae-9207-acb7f36fadb7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "35be383d-26b5-435a-9e2c-b18de8dec5fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "988adc0f-403a-4b74-af1a-066e34aa16e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b71740c-b17d-4430-84e6-285456532079",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "efbfbd13-a960-4bf0-89cc-479fc3f2e6bc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34d19d73-83d4-42f5-8fdf-908e3630fa21",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2d079bbc-0099-4c34-a7af-9adb92b6a1a6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3c6e548-9ff4-4602-907e-2007196ab15e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cf0c4bc6-4f08-44b1-85ca-6db95e7256fc"
            }
          }
        ]
      },
      {
        "id": "0a736e58-9283-40fd-976d-87bb249162fa",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "54a98015-1236-44de-9b88-e72c368e3a57",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4e5a44db-d0e1-41ee-895c-f047c3ccc166",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "da568d46-e041-407f-aa56-eabdaf8faf25",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9269fa20-fc4e-4639-a5bf-e4edb796f993",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e9392cb8-ba5d-47e2-831a-601849bc8be2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad03997a-908c-49ab-8a32-01de8d14af11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6c68b5e-efc5-4057-9620-7cadd8ae3ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef2768b-46ef-47b3-81ff-4f31063bdc96",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73aeb1ca-ca82-4048-82c6-cc0db318c7a6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "41ce076c-132b-493b-81c2-9e6a9353416d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72ed5e4-519f-4f0d-a094-239119020e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12bbb31d-9e79-4e54-852d-83d670a90577"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae49756c-62bf-4964-9862-b2876b98cc1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1053426f-6db9-4daa-ae6b-1d62ee891404"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "798d57ca-5d25-4d5e-805c-5dff8f9eb7d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fa5d2a4-39a7-4c24-a34a-e184f065a3dc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "824061d8-3cf9-4057-a6ed-837fe5ce26e7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "791ca397-d9eb-4f8c-9ec5-7626476abb5a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad4866bf-5dbc-4c67-b7d7-9bc136cb6156",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92e8fe0e-892a-4ad5-9fdf-2ab2ab10054d"
            }
          }
        ]
      },
      {
        "id": "02754eba-612b-4930-a085-1c6e2ae24ed3",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "25f32e61-0b7a-46de-a2bc-04e3cbff56e9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cbcd6eb3-8535-4812-a295-aa32330ce351",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d3cf36a-1062-477b-8478-d4a3fd9ee66c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be223349-55e6-4886-8a9b-ee9407348cea",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8d59b06-3190-4217-a6ef-006f776d1643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d2b3b2-0192-4c24-ac71-848f32cf2653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92a2dd07-b693-41b2-adea-58d61abccc0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7bdb26-0b3b-4239-bf80-d77bd430f2f2",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2219fb-a4a7-4c5a-899b-a2897c2df175",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "156bff9b-21ab-4e96-8f08-59f07bc59ceb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36fa266a-1767-4395-88b6-6039351df3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ad02132-0cfd-41f9-9f8b-ca384378967f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2073dfb-621d-4b9b-8a08-10f7be67cb56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c94f523-dd7d-4d64-b3d9-0eff7083ba43"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d21e2389-73d2-4ec0-be2b-1c91d3727c4e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c342122-4ae4-42ae-ad1b-5eae85270219"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e7b644ef-04ed-456b-81d2-3a45b9e51201",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cf00a0b9-33ea-47bd-9974-313c586ceed8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "801e1a78-9799-41cb-b720-027e3cf0f74a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "be9e33e7-adf2-4440-aad3-eaa170d6c333"
            }
          }
        ]
      },
      {
        "id": "d599eb1b-c677-4644-bcae-97f4fd742538",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "36752812-cd8b-40cd-bf53-266c58be733e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "778f635a-9bcc-4209-8dc4-cd28ed6b9d77",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1bf030c8-6206-4b57-aaf7-fbd535803821",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5095264c-b473-4255-9715-ec930a64bca8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a1ca445-e6e0-4493-bb6b-7922d2384302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1770d9c9-cba8-46df-a525-89c1dbbff7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "634d33aa-5e5d-47cd-a806-f025c7107890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af7a21a-61f3-4e3c-8b3d-8536c66a6a73",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eea4261-362f-436f-9682-6fffad76dee7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3c6c94c3-33e1-472b-94d3-d0063a3e48b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07fb7b3b-6d73-4960-be8d-3f87ef18f737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c31cbb6-a4c4-4ea2-a3c2-21f593d9f3dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b84473da-3dcc-492d-9cf5-f5c54fa2f21d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ce01bb2-4fdc-4440-a589-195a7767dfec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "104c8a08-ea28-4f5f-8a93-a3d71ca53698",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e901318d-b1d5-406e-b32e-f8ea730999a4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "69f34316-2ebd-45cc-96ae-eb6acb6d4bd2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3cd4e8ce-e702-49a4-aea6-c40f24f717e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0459c794-6fb2-4436-ab98-298753568151",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cea29eea-b70a-4869-8923-86b17ab5baa1"
            }
          }
        ]
      },
      {
        "id": "1cfe7161-ed55-4127-b2ad-cb27fbfa7892",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "783d2e67-2a0b-4fcd-9486-be4117505e41",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01902b67-ce7b-418d-ba33-0772dc93f87d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "47c020a1-ecaf-4289-a9aa-f469996b663f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48a181fa-e86e-4781-8aff-9264e43807f1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6249df63-e369-41e7-9fd9-c2fb35e0d0a6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 260.63076923076915,
      "responseMin": 9,
      "responseMax": 5167,
      "responseSd": 743.1946544734235,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1679099915672,
      "completed": 1679099994183
    },
    "executions": [
      {
        "id": "2cebdacd-e203-43e1-8972-b20750b1fa22",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "db67b380-db40-450c-a6f5-68784195263c",
          "httpRequestId": "bb8e92d3-d699-4912-92ff-9ae5ca3d8941"
        },
        "item": {
          "id": "2cebdacd-e203-43e1-8972-b20750b1fa22",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1da42c6e-0646-402d-bfa8-7cc680fa7157",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 0
        }
      },
      {
        "id": "cccd6f78-937b-4c4e-a331-6212ca3e9cbc",
        "cursor": {
          "ref": "20f4bea9-021c-41ec-81a6-0f919b711f34",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ac0a1574-db6d-4fd6-8be1-2ed1e2da59a9"
        },
        "item": {
          "id": "cccd6f78-937b-4c4e-a331-6212ca3e9cbc",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9fa514ee-27b8-4aa5-a1aa-fc86f4e5d546",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "d99bd24b-891f-4bff-b155-e878e9dbf1fa",
        "cursor": {
          "ref": "88d7d0d9-62d7-4ab5-8ab2-14de56f7cda5",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8263fccb-beae-4748-8cea-89711781b67c"
        },
        "item": {
          "id": "d99bd24b-891f-4bff-b155-e878e9dbf1fa",
          "name": "did_json"
        },
        "response": {
          "id": "fb9f8152-3a57-41bb-bc3f-0a16ccbaaf51",
          "status": "OK",
          "code": 200,
          "responseTime": 238,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78459748-c9ae-418f-92c9-243ff4b0fa8c",
        "cursor": {
          "ref": "d16e60b3-124b-4d8d-a173-2a5d355475a3",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "95a72670-0202-41ee-97b0-f0670d6ea9a0"
        },
        "item": {
          "id": "78459748-c9ae-418f-92c9-243ff4b0fa8c",
          "name": "did:invalid"
        },
        "response": {
          "id": "01a5c8d4-341b-4bae-bb6e-b715bca541b9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2320,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "78459748-c9ae-418f-92c9-243ff4b0fa8c",
        "cursor": {
          "ref": "d16e60b3-124b-4d8d-a173-2a5d355475a3",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "95a72670-0202-41ee-97b0-f0670d6ea9a0"
        },
        "item": {
          "id": "78459748-c9ae-418f-92c9-243ff4b0fa8c",
          "name": "did:invalid"
        },
        "response": {
          "id": "01a5c8d4-341b-4bae-bb6e-b715bca541b9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2320,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2dfb73b6-0b08-4441-a4c6-13493f497007",
        "cursor": {
          "ref": "b7b97487-b661-4b4e-99b7-bd13799bad8e",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e59467a4-bb2c-41f6-9e15-98d94de4bb95"
        },
        "item": {
          "id": "2dfb73b6-0b08-4441-a4c6-13493f497007",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "14e7e3d7-ff8e-4af9-8289-13f0a0a36614",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa24cde-b08d-4cde-8cb7-3502ab7c8e00",
        "cursor": {
          "ref": "5746c7ad-aadd-4b70-b039-fc734e2ad766",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a5721128-fb7e-481a-8e5d-7f2ceb925921"
        },
        "item": {
          "id": "aaa24cde-b08d-4cde-8cb7-3502ab7c8e00",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0c1552bb-b86c-4b44-91b6-ce37a711bae7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 72,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a61e7c-dfad-4bb7-ad2c-c50627d7b09e",
        "cursor": {
          "ref": "12fa5d83-faea-4388-9a8a-79a11b5c6329",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c75641d6-9aa8-42cd-a737-8412b2f2f7dc"
        },
        "item": {
          "id": "53a61e7c-dfad-4bb7-ad2c-c50627d7b09e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e332670e-7e12-4bb7-bb79-b307a3708a0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "dfe00acd-cdf5-4acb-92c5-3a8cadffcaf5",
        "cursor": {
          "ref": "4472a24d-fc68-47dc-b4c8-c2ffb56a3ab3",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "068995fe-a502-43b7-865b-0a287b2312a9"
        },
        "item": {
          "id": "dfe00acd-cdf5-4acb-92c5-3a8cadffcaf5",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e2124aa7-a73e-43db-b775-8bae2120cd47",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "dfe00acd-cdf5-4acb-92c5-3a8cadffcaf5",
        "cursor": {
          "ref": "4472a24d-fc68-47dc-b4c8-c2ffb56a3ab3",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "068995fe-a502-43b7-865b-0a287b2312a9"
        },
        "item": {
          "id": "dfe00acd-cdf5-4acb-92c5-3a8cadffcaf5",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e2124aa7-a73e-43db-b775-8bae2120cd47",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f219cea6-e7e4-41a7-91e0-f76e62f10b06",
        "cursor": {
          "ref": "5697ebb4-4016-4bb6-af9e-f79161751159",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "bfdaf047-e1df-4918-bf62-796727c16903"
        },
        "item": {
          "id": "f219cea6-e7e4-41a7-91e0-f76e62f10b06",
          "name": "identifiers"
        },
        "response": {
          "id": "f1e01883-e681-41cd-8d06-90b348e1c86b",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56bb9a4c-73c7-4552-a184-2517789dda55",
        "cursor": {
          "ref": "d7805917-97e0-46f5-8de8-351ee6206bef",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "85acf4de-3b86-4821-a36a-60bce72f5dbb"
        },
        "item": {
          "id": "56bb9a4c-73c7-4552-a184-2517789dda55",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0fb8d4c4-7996-4bd8-8670-2ba794498f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56bb9a4c-73c7-4552-a184-2517789dda55",
        "cursor": {
          "ref": "d7805917-97e0-46f5-8de8-351ee6206bef",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "85acf4de-3b86-4821-a36a-60bce72f5dbb"
        },
        "item": {
          "id": "56bb9a4c-73c7-4552-a184-2517789dda55",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0fb8d4c4-7996-4bd8-8670-2ba794498f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2121f18-acff-407b-b374-dfc393a11850",
        "cursor": {
          "ref": "0d2c37c2-a106-4120-baca-9363e8d18121",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c95efb5e-fe78-4cd1-a2f2-38632e740845"
        },
        "item": {
          "id": "d2121f18-acff-407b-b374-dfc393a11850",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "203073c4-3d21-433f-be59-444b84c59ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b425e197-876d-4c47-9470-bf749100e255",
        "cursor": {
          "ref": "ed5cc3c4-3963-4436-a1bd-d42dc6eaaff2",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "45dd051d-bf17-447f-bbcf-788c67ce5616"
        },
        "item": {
          "id": "b425e197-876d-4c47-9470-bf749100e255",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c548a867-cbb3-4a6e-b7b0-aa644e29363d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1062,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f205b63-945b-4111-b2ac-c1cd789607ce",
        "cursor": {
          "ref": "476d8143-5c5e-480b-8244-31f7c22452d9",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b8728ab0-bf07-4348-b01f-5244c30a6756"
        },
        "item": {
          "id": "2f205b63-945b-4111-b2ac-c1cd789607ce",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c9701f5d-9620-4f28-87f0-7e7ae6335e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc67a469-2f93-40a0-bf34-bad848746dcb",
        "cursor": {
          "ref": "3233cf26-bad8-48e3-9f8b-2e8b5412bdc5",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "12c6d934-6957-4f5c-a5a1-81c8efe57c0c"
        },
        "item": {
          "id": "bc67a469-2f93-40a0-bf34-bad848746dcb",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9cf999f5-a5d4-4b9d-b880-67252ccf7552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "761be21a-6985-487d-8e80-5d71689c4414",
        "cursor": {
          "ref": "ed2cc640-5563-4a74-be18-a20dacdd5261",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "db720c3d-5cf3-4a8a-a471-cabaaa45d72b"
        },
        "item": {
          "id": "761be21a-6985-487d-8e80-5d71689c4414",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "29057fc9-26a3-46bc-8334-a3e7d7fc8570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8256e7f-17f5-4842-b3ab-7cc162c90a3b",
        "cursor": {
          "ref": "1f3b0f08-9793-4908-9740-719edd8f5217",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "cbaa046b-45e3-482d-9393-f9d771c7afa3"
        },
        "item": {
          "id": "e8256e7f-17f5-4842-b3ab-7cc162c90a3b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3e7b5169-8488-4d4c-858e-557ccbb38d0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c65024-d129-4d6b-a7c0-b24b1b156feb",
        "cursor": {
          "ref": "e8162411-a453-4e57-a8db-21724ef70e19",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cd310455-9780-4830-9ad3-0f0b4ea7c6ae"
        },
        "item": {
          "id": "06c65024-d129-4d6b-a7c0-b24b1b156feb",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d96625d4-f0a7-4117-99b8-95a02f841af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a76d327-b9e1-432d-93ab-808742b3642a",
        "cursor": {
          "ref": "261e2f42-f311-4edb-b971-6c9f1347003e",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a22a6e2b-0173-40cb-9543-72842516b8f7"
        },
        "item": {
          "id": "3a76d327-b9e1-432d-93ab-808742b3642a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b2c81cec-3dec-4406-8d12-30bb97a93431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696b1345-c912-42a9-a186-cd8527d3483e",
        "cursor": {
          "ref": "27cedbb5-bb64-4360-bc00-a14543acebeb",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ea55488d-cfef-4ac1-a3c4-5b48e3f63fed"
        },
        "item": {
          "id": "696b1345-c912-42a9-a186-cd8527d3483e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c7d1da9b-5c20-4de7-8dbc-80b8dd3bf143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5a99f8-258b-4387-a270-6465f3145bd3",
        "cursor": {
          "ref": "e1b40800-73aa-4b17-a2d9-5cd0405a9fe4",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d651f5c0-f67b-4713-8712-080a336a8be9"
        },
        "item": {
          "id": "7f5a99f8-258b-4387-a270-6465f3145bd3",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "3b4ae16e-39b9-464f-8067-8c914f85462a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3aff0f-dd8f-4480-b4dd-4a6e075c2417",
        "cursor": {
          "ref": "15a3cff2-3744-470c-a1e9-6cb1dc45a651",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f5751ae8-f35a-4946-a4aa-2cbaf999a774"
        },
        "item": {
          "id": "ce3aff0f-dd8f-4480-b4dd-4a6e075c2417",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9e334b9f-76c9-4f57-a2ed-fb9277227c81",
          "status": "Created",
          "code": 201,
          "responseTime": 1020,
          "responseSize": 983
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "c8b2fa3f-892e-4019-8ec5-a4674a0cacd3",
        "cursor": {
          "ref": "7549c360-286d-4d0f-ae62-b811e05754fa",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "733b5531-1173-4c7c-9bd5-2ce01a2c1d63"
        },
        "item": {
          "id": "c8b2fa3f-892e-4019-8ec5-a4674a0cacd3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b3ef141a-8c51-4717-8ae3-17a40a54e0e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e499661-71dd-45ac-9528-827c4970e29f",
        "cursor": {
          "ref": "978e1268-e056-4861-8098-b07a80ad7313",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d0ac4318-05ba-4cd5-889d-55f77cd002af"
        },
        "item": {
          "id": "9e499661-71dd-45ac-9528-827c4970e29f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "16302474-4979-4ee2-8168-eb0ce20d2270",
          "status": "Created",
          "code": 201,
          "responseTime": 5167,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "2517781d-663d-4478-a716-cbe6d8575f04",
        "cursor": {
          "ref": "7a9dabab-f4f8-4f06-9a76-0a98950a1b10",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d371b39f-ca81-4e2c-b5b2-58e3726843ff"
        },
        "item": {
          "id": "2517781d-663d-4478-a716-cbe6d8575f04",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c35d7974-85c5-4d10-b1e2-e2745de04c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de92ae12-a06c-455f-9ebb-08b2e54603d7",
        "cursor": {
          "ref": "b62c610f-1520-451c-96ee-f9df47e8edc8",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5ec9f361-8e78-4188-95ef-1e34638efa33"
        },
        "item": {
          "id": "de92ae12-a06c-455f-9ebb-08b2e54603d7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "cd4f2eba-8bbc-4c92-9559-05e153844ba1",
          "status": "Created",
          "code": 201,
          "responseTime": 3702,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "b76b8ee5-87df-439b-8b4b-62bcbf4019d5",
        "cursor": {
          "ref": "4ed13eca-499b-4c36-be7b-2757e9260a05",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3a3e86d5-26ab-457c-b7ef-ae8f9c011446"
        },
        "item": {
          "id": "b76b8ee5-87df-439b-8b4b-62bcbf4019d5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ececd8a4-ab65-4a3f-8e55-2729be52690d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8347d152-1907-42ed-8c35-845eb32eb089",
        "cursor": {
          "ref": "1d5fa90a-f753-4923-98fc-3faf17120934",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "86faba3d-d1e4-417e-8def-07e802a10774"
        },
        "item": {
          "id": "8347d152-1907-42ed-8c35-845eb32eb089",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ffe0f7ff-1701-42cf-8b04-3528a608b635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c239d80-1bc5-42cf-9b60-1aa21400bbc6",
        "cursor": {
          "ref": "382c7fd6-20f6-447e-90c4-4fe20246db88",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6d59e87e-0790-4514-bb26-9250dbde5606"
        },
        "item": {
          "id": "0c239d80-1bc5-42cf-9b60-1aa21400bbc6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "acbb122b-39fe-42f7-b518-35365d30f5f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac35aca9-b86c-4b44-af9f-3a9f0afcf182",
        "cursor": {
          "ref": "9ca2a697-6726-42af-8293-297dabb312a2",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1c792abf-ac30-4a63-bdfd-4cf31c7a039d"
        },
        "item": {
          "id": "ac35aca9-b86c-4b44-af9f-3a9f0afcf182",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d412ef32-caac-4377-9671-84917abd4bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25015096-d01c-42cb-9539-ffc831740da0",
        "cursor": {
          "ref": "aeb8a7ca-0fe1-4ff8-b9d2-ceed0ff41f61",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "69bc1528-55ed-4b97-9386-28c6aa7dbb2f"
        },
        "item": {
          "id": "25015096-d01c-42cb-9539-ffc831740da0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5f086aed-2758-428d-99fd-9b8393e319f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c792e467-3ef2-4aff-a87b-38acf3c52c98",
        "cursor": {
          "ref": "65507921-ad28-4c1f-8398-2febb472bb60",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a1c139bb-f98d-4563-a0be-a7a045279047"
        },
        "item": {
          "id": "c792e467-3ef2-4aff-a87b-38acf3c52c98",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "24ec3fff-9431-4d99-8900-caf2cede385e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd123d80-ae7b-4176-acfc-f41e10279999",
        "cursor": {
          "ref": "223f3455-e19b-40ff-accb-843b88822e32",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3e588138-bedc-4143-a30d-c3c706c69423"
        },
        "item": {
          "id": "bd123d80-ae7b-4176-acfc-f41e10279999",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "8169c4a7-b0b8-4f24-8bdf-0b06b6623618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfbe0c97-e267-4e7f-b5bb-f93b18c29bce",
        "cursor": {
          "ref": "d2e47280-40ba-469b-84ec-ee532c080ce1",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "94d5e15c-6f57-4297-ba41-c851ca2bec53"
        },
        "item": {
          "id": "bfbe0c97-e267-4e7f-b5bb-f93b18c29bce",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "856130db-4a16-4d85-aa3b-33cc74467e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32426ed1-7919-410b-927d-a50081e2b32c",
        "cursor": {
          "ref": "39258439-39bd-4c0b-bb73-2ab2ae441bb5",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b8b08174-8e08-4d3d-8147-2fd1dc534fc6"
        },
        "item": {
          "id": "32426ed1-7919-410b-927d-a50081e2b32c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "add6a911-87fb-4aae-aa58-6da71789d6ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "233818a0-dbdf-45f0-80ab-3933c67ea627",
        "cursor": {
          "ref": "03760c81-466e-4b56-965d-cbf0b481d5ef",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "06ae7f90-b223-48af-aa55-689414f2f275"
        },
        "item": {
          "id": "233818a0-dbdf-45f0-80ab-3933c67ea627",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "176db647-931e-4ff5-92e4-83eb71140d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f810f5-ed01-40f2-ae69-c78f0dc958b5",
        "cursor": {
          "ref": "720b02b4-8f85-4004-90d0-6792c1db1c62",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6bc254d1-7294-4c2e-89a4-6a4c4838eebd"
        },
        "item": {
          "id": "70f810f5-ed01-40f2-ae69-c78f0dc958b5",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "de69cf1b-df2f-4f73-99f7-6f3d7d6a6fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0544db51-45cf-45c3-85d8-9b0382184e65",
        "cursor": {
          "ref": "8311a862-57a8-4a7f-bdb2-6751a087bea7",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8e50ebd3-9ee6-43cd-b78e-3911ca96f77a"
        },
        "item": {
          "id": "0544db51-45cf-45c3-85d8-9b0382184e65",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fd31e3d1-0191-4694-abf3-b8d4952fedf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97205fc7-382a-4424-bc2d-447f9baea26e",
        "cursor": {
          "ref": "cdeedf4d-0e3a-47dd-9fa0-a6dbce4ec7fb",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "17e96406-8f94-4dae-87e6-3dc32e01a526"
        },
        "item": {
          "id": "97205fc7-382a-4424-bc2d-447f9baea26e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "82d58150-03e9-4e2b-a635-346357f8f9d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8517829-30e8-4b17-aaec-522c8d6edf03",
        "cursor": {
          "ref": "54b4f057-b503-4875-a85f-3fd285f56aa7",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "abd82876-0afe-41f8-884a-64861f453642"
        },
        "item": {
          "id": "c8517829-30e8-4b17-aaec-522c8d6edf03",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0a5a4196-9603-43b6-9f52-0e9f44dc5f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9558d8c-8e93-4315-a718-b6e5b107a3ea",
        "cursor": {
          "ref": "d13da5ab-17bd-4212-956f-8416cd596d04",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ee2ef2be-df79-4f40-befb-4247649cbc7d"
        },
        "item": {
          "id": "a9558d8c-8e93-4315-a718-b6e5b107a3ea",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "40efaef9-6fd6-4661-9530-ab63c8093419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b503a77b-a76d-4b4f-a225-66b86ad43a44",
        "cursor": {
          "ref": "891e4800-10ae-455b-9d75-89d52d5690b9",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5a8bd575-64ab-44b4-837a-70781e279f1a"
        },
        "item": {
          "id": "b503a77b-a76d-4b4f-a225-66b86ad43a44",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "fab13603-af88-406e-8105-8bf143769b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9033a4a5-6748-4a97-8298-9930f2bb75ec",
        "cursor": {
          "ref": "6ff54d90-083b-43fe-8807-53c78f18f2c1",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cc13e94d-e044-4a4c-9f23-8b7f29c98615"
        },
        "item": {
          "id": "9033a4a5-6748-4a97-8298-9930f2bb75ec",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4b769e24-cd60-4e0d-a677-da6b14ded10f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2174c704-5ecd-4b4a-a0cd-f82643043eb7",
        "cursor": {
          "ref": "f6626ef9-b239-4634-a133-34cacd1d4661",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a661bccb-145f-4d54-b9c8-95a0134069a5"
        },
        "item": {
          "id": "2174c704-5ecd-4b4a-a0cd-f82643043eb7",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d01ae54f-f079-4b71-bfcf-5e50d7b15570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb066d6-e671-4abc-acec-ed5a33fddf01",
        "cursor": {
          "ref": "fe0a49b3-a086-4b52-9c53-489293c29dd4",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "69568560-3db8-4d37-b392-afd6cc3f6ad8"
        },
        "item": {
          "id": "ecb066d6-e671-4abc-acec-ed5a33fddf01",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b334f04a-aa91-4341-ac69-d89fa8aae993",
          "status": "Created",
          "code": 201,
          "responseTime": 2796,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b84a7e8a-a4b4-401c-8318-671ec7522915",
        "cursor": {
          "ref": "8379c047-0440-4335-abd5-b413eb848c23",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "260f86f2-a728-4ef3-af71-2c1ee29a7c67"
        },
        "item": {
          "id": "b84a7e8a-a4b4-401c-8318-671ec7522915",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e20c94a8-d691-43ae-9919-a69db2af5cf1",
          "status": "Created",
          "code": 201,
          "responseTime": 2554,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d23c0e6d-9af8-4683-93b9-973b2d136c69",
        "cursor": {
          "ref": "df3b9d93-5a8a-498b-afbc-615d1ad00fd1",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "145f142e-7efd-4cfd-a7bd-995eabac00a3"
        },
        "item": {
          "id": "d23c0e6d-9af8-4683-93b9-973b2d136c69",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cca76962-fee4-4c2d-be5f-417ee7f48c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305d811b-83d8-4a8b-8d49-8d2c4010713e",
        "cursor": {
          "ref": "d9bfb194-e30a-4a5a-abc7-2a9b8f7b50ac",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "be87d79a-3da7-46e6-81bc-a7cc232909aa"
        },
        "item": {
          "id": "305d811b-83d8-4a8b-8d49-8d2c4010713e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "acc4e014-f794-4884-8de1-c1119a761727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a7412e-1023-4a23-ba0d-6e187e72f610",
        "cursor": {
          "ref": "8854116f-6095-4585-8d15-c97784b24133",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a61294d2-d8db-45c6-bcce-9a847888c139"
        },
        "item": {
          "id": "03a7412e-1023-4a23-ba0d-6e187e72f610",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9523d00a-79a4-4874-b130-57df2867ff19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7469fe2d-157d-4153-8af8-0142e4101453",
        "cursor": {
          "ref": "cd6600f2-b221-4143-bb56-8fd2f9f1606e",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b3304ca1-6bad-4abe-bf9a-795e121e7bc7"
        },
        "item": {
          "id": "7469fe2d-157d-4153-8af8-0142e4101453",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4f2be20e-bb38-479a-bb0f-111faa5ebf4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f60426-1ec7-4a8b-8306-7643db85b8c7",
        "cursor": {
          "ref": "2f62e1fa-745a-4b8c-9fb2-06e5a4a3aa96",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ac09870f-4056-4046-bb4e-18ef5222a464"
        },
        "item": {
          "id": "f4f60426-1ec7-4a8b-8306-7643db85b8c7",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c5d1a245-efe4-4799-b3fb-f95b3955b10f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c195318-3852-4057-9a3d-ef22449199a4",
        "cursor": {
          "ref": "4c6d320b-1917-4e25-b5e7-2e3e9c54824f",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "eaef9027-39a2-4903-b511-eb8b9f6441d3"
        },
        "item": {
          "id": "2c195318-3852-4057-9a3d-ef22449199a4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a50dc086-f4a0-493e-931c-46013d9bafd7",
          "status": "Created",
          "code": 201,
          "responseTime": 3756,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b11e62b3-48d8-4fc2-bb62-3f2cfeb105dc",
        "cursor": {
          "ref": "c0c1c983-3eae-483a-8fd0-1e72b2a85f9d",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "05267a9f-4a16-48a6-8cf9-03c61c0b63ea"
        },
        "item": {
          "id": "b11e62b3-48d8-4fc2-bb62-3f2cfeb105dc",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "940ca323-5043-401c-98f0-6d1ab8eaae36",
          "status": "Created",
          "code": 201,
          "responseTime": 2638,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "989f4008-77f8-476d-ac9d-c16574087c8d",
        "cursor": {
          "ref": "f248103b-6f90-4941-8b65-d87b9cab6ee1",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "07d25fb6-b0bc-4418-89fb-2ed7d093652b"
        },
        "item": {
          "id": "989f4008-77f8-476d-ac9d-c16574087c8d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b2e62b2e-0e4a-49c5-b437-657b649598c3",
          "status": "Created",
          "code": 201,
          "responseTime": 3517,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "d9f4e15d-7701-433d-a04b-792c9b01d96b",
        "cursor": {
          "ref": "9445b77d-f9b4-4a0a-9a08-e1c4ae2203ec",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "fa36af6d-17fe-468f-920e-00409553549a"
        },
        "item": {
          "id": "d9f4e15d-7701-433d-a04b-792c9b01d96b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "77895f03-4dc5-48f2-9f3d-3b3499fce789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507aea56-e9c6-4130-8523-045b92a931ff",
        "cursor": {
          "ref": "214bf03e-038b-4b9e-be0c-2909ce8b8b44",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "48dee659-d54e-45e6-986e-7290b196d74c"
        },
        "item": {
          "id": "507aea56-e9c6-4130-8523-045b92a931ff",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "add741ff-330c-445d-a9c2-d5777495c0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b67e98-02d3-409e-8c36-1480c2ecb035",
        "cursor": {
          "ref": "0a1b2264-3dac-4bfb-9267-35ba5f5b22d0",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1d659f9f-17b3-4a2a-a71f-7c4b3c185872"
        },
        "item": {
          "id": "a3b67e98-02d3-409e-8c36-1480c2ecb035",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "feb0c5d9-afaa-422b-84fd-310db7872de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6678dfe7-b89e-44d5-9e3f-95e1a9450e67",
        "cursor": {
          "ref": "9c8f4cf2-e38a-49a6-8b7c-9522f939a5f5",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "57054c72-5123-49ba-95f2-8201191e5103"
        },
        "item": {
          "id": "6678dfe7-b89e-44d5-9e3f-95e1a9450e67",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e0772b59-da5d-42c7-8e3c-902a37b4b0cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f03535ad-58e9-4537-ad1e-571d651546f8",
        "cursor": {
          "ref": "e2ceddcd-76f1-4653-ae88-488a185a7f40",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f058d22b-6fbe-4806-9794-ae6771b7e997"
        },
        "item": {
          "id": "f03535ad-58e9-4537-ad1e-571d651546f8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "05c33b55-939a-421d-9e5e-d2418a5337e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1343906e-a115-43b0-9ad8-172133cb1d28",
        "cursor": {
          "ref": "86b527cb-3c26-4518-af12-4a9b5c815c94",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f6df2623-f033-4303-8f46-6981e3cbe1ad"
        },
        "item": {
          "id": "1343906e-a115-43b0-9ad8-172133cb1d28",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9f054b84-4bd2-4b95-8eac-1e56e0dc0327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b64a6edb-8a96-443f-81f1-7ddb310466d4",
        "cursor": {
          "ref": "845432c7-83b0-462d-97bb-155222be78b4",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a5655b0a-c7b7-4f1f-a827-35add49c980e"
        },
        "item": {
          "id": "b64a6edb-8a96-443f-81f1-7ddb310466d4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7973727a-6c70-4fc8-affb-f7265d382412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e51371-2ba9-41e5-a704-26ee01ff756b",
        "cursor": {
          "ref": "bdece409-9fe3-4080-bdf4-a4c9aa311931",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "80ac6a5a-0dd6-4bab-a59a-6836a7114e1b"
        },
        "item": {
          "id": "e2e51371-2ba9-41e5-a704-26ee01ff756b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "80cabdcb-6525-4bd9-9765-9df27eabfd17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae1d6196-ce53-4f4b-ab0e-97a9f30cf362",
        "cursor": {
          "ref": "ed02c3b5-f59a-4488-bd38-5de56539703a",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f3e92e93-a0ba-4150-9c10-493f4bb917fb"
        },
        "item": {
          "id": "ae1d6196-ce53-4f4b-ab0e-97a9f30cf362",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a22a94c9-2f46-4399-8984-44d03016f51f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "350a7f89-8a3e-4327-b1a9-9ed4ee85a1cd",
        "cursor": {
          "ref": "d734d891-4a9e-4e74-a1e4-f4e0198d009f",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8d202b44-bea9-4e80-b521-39faab9480f9"
        },
        "item": {
          "id": "350a7f89-8a3e-4327-b1a9-9ed4ee85a1cd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "566f0d9d-0b4c-4760-a5e9-011a101745ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf3df189-37b4-440c-84a1-f7c0dbdbb62c",
        "cursor": {
          "ref": "057274fe-fd59-40bc-81b2-d7586031b6bb",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cf925de1-b49d-42e1-a074-3069196c7e1d"
        },
        "item": {
          "id": "cf3df189-37b4-440c-84a1-f7c0dbdbb62c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ab677618-6c87-4f46-9d5f-f11e4642b1c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4412d2b1-ef14-487d-bccd-87ac24e345c7",
        "cursor": {
          "ref": "29008fc5-53bc-4803-95d2-1751bd423493",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e02c8086-e2fd-4198-be34-6a5ca699af31"
        },
        "item": {
          "id": "4412d2b1-ef14-487d-bccd-87ac24e345c7",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "87f0bb76-d258-4fd9-934f-4651425bb3fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e2ad07-cd21-4085-9437-6347eab15074",
        "cursor": {
          "ref": "d2ae3381-b314-4313-9622-b6ecd9025aec",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0dbb5187-54ea-4e5d-860b-57adaea090f5"
        },
        "item": {
          "id": "d3e2ad07-cd21-4085-9437-6347eab15074",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "180c08f4-9614-488f-847f-de164f86a9d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b875468-e98f-4724-86b6-fb339b2e12b3",
        "cursor": {
          "ref": "2be6810e-3d55-4071-bc7c-d3e17be2f075",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "47acff2d-8dbc-463b-b4fe-006c2b902acc"
        },
        "item": {
          "id": "3b875468-e98f-4724-86b6-fb339b2e12b3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2803f150-0a3a-4f93-a331-d18465be1cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8e27e7-1296-4718-85fa-89dff6e721de",
        "cursor": {
          "ref": "b54def55-59a8-4c57-afbb-77f65587a0cb",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "85812071-ce1e-4e6f-b5b8-08a8a96f10fe"
        },
        "item": {
          "id": "2a8e27e7-1296-4718-85fa-89dff6e721de",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b1314160-2c98-4d22-aab0-51fca8704453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9f22ea-6e76-4867-a209-927bef3eaebc",
        "cursor": {
          "ref": "7ca6d138-1c2c-4f9b-a03a-bf1adabdc7b6",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6fa393cf-4047-447c-af6e-b96f65fef122"
        },
        "item": {
          "id": "ab9f22ea-6e76-4867-a209-927bef3eaebc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a253fa19-14f9-42bd-b4d7-a4f448caea3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be63d852-fb0f-4f6f-bc89-720ba10719cd",
        "cursor": {
          "ref": "db11eba4-e55f-4147-b2bf-13695f3b24c9",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "86ad786c-97d2-49b7-8150-33e3fc18626f"
        },
        "item": {
          "id": "be63d852-fb0f-4f6f-bc89-720ba10719cd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "12655cc9-0fd7-49e3-a56e-c62a789f68c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e99390c-ee32-41d2-8a56-cfff47e3d08b",
        "cursor": {
          "ref": "f14bef3a-9e35-46dc-9a0c-fce610adf6dd",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d8073114-19ac-453a-91d8-50384a2e663b"
        },
        "item": {
          "id": "9e99390c-ee32-41d2-8a56-cfff47e3d08b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "13a2f160-51e1-4307-9edd-fcb4b77d7b1d",
          "status": "Created",
          "code": 201,
          "responseTime": 2989,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "0053db06-647a-4e10-b1bd-3df5d8e8e148",
        "cursor": {
          "ref": "e8313aef-6506-433e-b5de-9abffa8fcb4c",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ae4bc723-dd07-48d3-a5f9-3c9ae0efada3"
        },
        "item": {
          "id": "0053db06-647a-4e10-b1bd-3df5d8e8e148",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3af51895-3fc5-4ed4-ae00-6dafbb7e2620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ee81245-f1f5-4541-b6ea-90816c619d70",
        "cursor": {
          "ref": "6b920805-eeab-44d2-8697-07f30cc496d5",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "89c02589-f57d-4505-a72d-6b34e185eae6"
        },
        "item": {
          "id": "2ee81245-f1f5-4541-b6ea-90816c619d70",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "46a37b06-2457-4dda-ac0b-c7044d8bf24a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d58ae8fe-cc64-4d51-a5e5-b34af6167a10",
        "cursor": {
          "ref": "b79f17c5-37fe-47f5-b07c-ae60b1d7a6b2",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5599e266-da2a-44ae-8e9b-3027ffed53eb"
        },
        "item": {
          "id": "d58ae8fe-cc64-4d51-a5e5-b34af6167a10",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "cc8bdc94-8507-4fee-915b-2944dfbdce64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdc5eb0-6b76-4705-b9fe-6a9b32a221d4",
        "cursor": {
          "ref": "31d73708-e66f-4b62-be94-da52bec0a136",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8643654b-2ef2-4a33-af9a-efd455f74479"
        },
        "item": {
          "id": "bfdc5eb0-6b76-4705-b9fe-6a9b32a221d4",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1eaee1ba-802d-4e89-a86a-4865d520d4f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e897ce2-7dbe-4db6-aa5d-8f55322790f8",
        "cursor": {
          "ref": "212460f5-a8f2-4137-888c-7093491519a6",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cc0c4c55-de1e-4fb0-ba36-64f5ff4c0067"
        },
        "item": {
          "id": "5e897ce2-7dbe-4db6-aa5d-8f55322790f8",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ece5aeb7-d130-42e2-bbd1-c17e0a144e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da5cf5f-f34d-4bb3-b996-1f8e17369f92",
        "cursor": {
          "ref": "7fc96abf-587d-4d5e-9349-65ab0b772bc2",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7fe8427d-831e-4ca4-9a7c-797a359f5bd2"
        },
        "item": {
          "id": "9da5cf5f-f34d-4bb3-b996-1f8e17369f92",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "cc70fac2-f255-4d25-b646-018ef611fb32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a4cc98-4604-47f3-ad45-2f26b4f2eebe",
        "cursor": {
          "ref": "faadf146-6521-463e-b04d-b6105c4c451c",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b57773d2-921d-4cdf-b281-47c0f7b689c2"
        },
        "item": {
          "id": "f6a4cc98-4604-47f3-ad45-2f26b4f2eebe",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c4e19eed-755e-4e74-abbf-e097f22c3e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3d7bcc-7cde-40dd-acac-9ab54423c08b",
        "cursor": {
          "ref": "64992458-10a2-4c48-a12c-75dbdc0f7f2c",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "39d18200-8198-4bcc-b282-9251ca840bfc"
        },
        "item": {
          "id": "4d3d7bcc-7cde-40dd-acac-9ab54423c08b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b776214d-5036-461f-b42f-2f554f81ac53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1404eb57-aa83-4765-8ae8-9ac7bf63f969",
        "cursor": {
          "ref": "56287bc5-9a12-4952-8a5d-fa3f2c961bf3",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9e4f465e-4460-42f4-936e-8fec6f79dd6c"
        },
        "item": {
          "id": "1404eb57-aa83-4765-8ae8-9ac7bf63f969",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "00e20bfc-c83f-4006-8b3f-a2248f88e3ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b11b8b-4e2c-42cc-9c73-6f78a48517c3",
        "cursor": {
          "ref": "22f9003b-6184-461b-8f24-8fcec7cc71a4",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "48fc2030-c2e3-4d30-8c53-ca8fb12f3fda"
        },
        "item": {
          "id": "62b11b8b-4e2c-42cc-9c73-6f78a48517c3",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3569aaed-ab2a-4bd8-96c5-f1b3087afe6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4cd2b0-84da-44d0-9dc9-30f518bac727",
        "cursor": {
          "ref": "364d6ac8-b647-4b4c-b431-8db725718beb",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "41316577-78e3-4823-85d9-e4753adc16e5"
        },
        "item": {
          "id": "4b4cd2b0-84da-44d0-9dc9-30f518bac727",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a5e4cb13-a0b8-4ba7-b9c6-9fbfa10f0874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc19889a-466f-4d8f-b5dc-65a917b67451",
        "cursor": {
          "ref": "b45a2bd8-5356-4792-a731-12b1d4ee09e6",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b5319342-c023-40e3-99d9-fe12b60b95e7"
        },
        "item": {
          "id": "fc19889a-466f-4d8f-b5dc-65a917b67451",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "47f52bf3-c258-4828-bac0-5661e7e972d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6366cd68-bbc8-4cb3-b398-c99866566aed",
        "cursor": {
          "ref": "926c551c-4072-4865-88e9-36c2fed770c9",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "62f6de6b-52dc-489b-9c50-0f0a44761bc0"
        },
        "item": {
          "id": "6366cd68-bbc8-4cb3-b398-c99866566aed",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "70602099-6194-47ea-8547-f432b8fdc733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827bad70-01a7-4c2c-a444-9ea8ed68e76c",
        "cursor": {
          "ref": "92782c34-f646-476c-9285-9692a185c131",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a66b6bef-ab04-4ae9-a159-1c9aa92c53a1"
        },
        "item": {
          "id": "827bad70-01a7-4c2c-a444-9ea8ed68e76c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5a78d65e-4de5-48aa-8900-585a7094bcbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706124a1-6b90-4f70-b334-77975afae968",
        "cursor": {
          "ref": "0ae4bdcd-3b30-45af-ace0-26d51d5c129b",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8660360b-898a-4f5b-996d-f20c4f6e2cbb"
        },
        "item": {
          "id": "706124a1-6b90-4f70-b334-77975afae968",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3de6c13a-c682-4fd7-8e47-a12bacdff247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e799071-68e7-42ba-b5ca-e3ff530ae520",
        "cursor": {
          "ref": "a6c5e366-d605-4169-b9d9-bb66f6745dcc",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f9208a68-2353-457f-b768-c9ef53338ae5"
        },
        "item": {
          "id": "5e799071-68e7-42ba-b5ca-e3ff530ae520",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "27affa8e-384c-48b0-a921-13b385f912dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8fd220-b9ee-41a8-95be-ffd0e7d34b12",
        "cursor": {
          "ref": "383f15da-7ffe-4afe-9398-3d325c3c23a2",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0ac3ff38-e013-4a79-9401-899c6bcbd491"
        },
        "item": {
          "id": "7b8fd220-b9ee-41a8-95be-ffd0e7d34b12",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "50c5033a-b6d3-4ffd-b2cd-c26c3b8a2d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e98726-84fc-4025-b9da-aa4da03a2a71",
        "cursor": {
          "ref": "09e14ebd-ec2f-40cc-8616-763f82d35a30",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0e7588d6-743c-476b-b3cc-ef58234dff2b"
        },
        "item": {
          "id": "b4e98726-84fc-4025-b9da-aa4da03a2a71",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b55036bb-29fa-45f5-9898-df1e60d88053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd1593d-10fa-4b78-91ab-8beee1f2394e",
        "cursor": {
          "ref": "6fe934cd-3388-4862-9fda-13198b541052",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f77b6515-d24a-40d5-bc58-fccb3c34f3e5"
        },
        "item": {
          "id": "9dd1593d-10fa-4b78-91ab-8beee1f2394e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4029a67d-a91f-4a92-b2fb-8d2423a19248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f78f7507-3354-4e82-a441-6dbe46e52dc7",
        "cursor": {
          "ref": "cab09076-d697-488f-9286-da68bd9d7a59",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "00433870-6aaa-48f6-85f6-4b19e1745fe6"
        },
        "item": {
          "id": "f78f7507-3354-4e82-a441-6dbe46e52dc7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6581e2ec-386d-4b14-8779-0c544a46d3bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed81f948-a36a-4b8c-b3f3-7b9dfe3e7bc8",
        "cursor": {
          "ref": "e1581d8b-9e1f-4e7e-98e3-59553749f117",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "851fbb9c-d610-4fc1-8279-ecfff17054ea"
        },
        "item": {
          "id": "ed81f948-a36a-4b8c-b3f3-7b9dfe3e7bc8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "37c47863-83c9-4482-be0c-f722d2baea14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be9fbfb-073b-45d3-8a02-1ed5847f0638",
        "cursor": {
          "ref": "6f4345a4-ec6c-460b-a9a2-573fc4bce22f",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f8031722-b9c4-4a26-8117-d171ff8368fe"
        },
        "item": {
          "id": "4be9fbfb-073b-45d3-8a02-1ed5847f0638",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9115319d-a98c-4602-80d6-426c701e507e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371fa334-0a85-4bf6-8580-5e7de95c5ba4",
        "cursor": {
          "ref": "a227069d-a822-45ab-8d87-a18a4be586a1",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c2322f99-cecc-4221-b6d4-cc39ffadfe2e"
        },
        "item": {
          "id": "371fa334-0a85-4bf6-8580-5e7de95c5ba4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "673d6820-6e53-4706-9126-638b618fa5d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099b6859-0696-4fa6-8fe2-73832c26de4a",
        "cursor": {
          "ref": "2cb2a262-1def-4303-a2cd-d62293731332",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "25883ed5-f5df-40f2-90d8-5ed6b66a0572"
        },
        "item": {
          "id": "099b6859-0696-4fa6-8fe2-73832c26de4a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "35ff217d-343a-4000-bbd2-e6c83928adfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c633bec-7523-4920-94f4-a816f91c2b29",
        "cursor": {
          "ref": "79ce7e3f-07ba-4779-8c9e-978c027beae3",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "472b3d76-f200-4726-a230-f2d4ad125bda"
        },
        "item": {
          "id": "4c633bec-7523-4920-94f4-a816f91c2b29",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8e45261b-9c3a-4832-be50-f292ab588f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85265ab5-d738-415f-8bdb-164ca0d304f8",
        "cursor": {
          "ref": "8aa92f76-e1df-4889-bbc4-c905a8c8f0e7",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1a0f9568-05dc-44f7-8251-d1d85920ace3"
        },
        "item": {
          "id": "85265ab5-d738-415f-8bdb-164ca0d304f8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "cd81eae2-76e2-474c-aff3-5f1d3e93f607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ff66cb-ef52-4b48-815b-06b18f2eaa4c",
        "cursor": {
          "ref": "37ec3f71-4957-4edb-b299-503c03a37a4d",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "df8ce17b-11e5-41d5-8ac3-4e1a56488e99"
        },
        "item": {
          "id": "f7ff66cb-ef52-4b48-815b-06b18f2eaa4c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "38d9a09b-8cd9-41bc-a34a-ef59005c86db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91181176-6e63-4533-897e-9c917d641179",
        "cursor": {
          "ref": "0368d65d-c072-478d-86a8-3e35ef3768e4",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "030a2b84-1419-4233-80c0-b5aac6904415"
        },
        "item": {
          "id": "91181176-6e63-4533-897e-9c917d641179",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0225f2a2-5dff-4056-ba07-8ac24ad4a0b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e394c401-6823-4d6a-a7e9-7cfa8cb3937a",
        "cursor": {
          "ref": "97a4db2c-405e-4f71-9405-596ede7383b6",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a729dae4-57e2-49c2-9cc7-0b0be86eae58"
        },
        "item": {
          "id": "e394c401-6823-4d6a-a7e9-7cfa8cb3937a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b3096d4e-9232-4d98-84bd-1aa3068f1ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a63374-01f0-41f6-aa04-c39fd9ba9935",
        "cursor": {
          "ref": "f07ac77b-f131-4fa8-b5d5-4614dda12123",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "cc5b5e0f-be7b-43b5-bfd3-8b4f96f8795d"
        },
        "item": {
          "id": "27a63374-01f0-41f6-aa04-c39fd9ba9935",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "76e1ab80-0004-43cd-bcb9-d18ee7c3d3df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae60ffe-9f93-4d58-97ac-0396afc5e357",
        "cursor": {
          "ref": "f532d9dc-9f92-43ef-8c2a-375e638849c6",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3e5f2ee4-87bc-4abf-ab0a-2d7f96504b56"
        },
        "item": {
          "id": "3ae60ffe-9f93-4d58-97ac-0396afc5e357",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1b45edb5-f283-4de0-8800-45fe7b425ba6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "31fe1740-573d-436d-8cc7-af66f2d77a4b",
        "cursor": {
          "ref": "0c360f02-caa6-4e99-bec4-af9e2924208d",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "01e2b78b-9a1f-4972-9373-1afb98999c54"
        },
        "item": {
          "id": "31fe1740-573d-436d-8cc7-af66f2d77a4b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "ccb4bb46-2915-43c9-8aaf-691b6b1eae41",
          "status": "Created",
          "code": 201,
          "responseTime": 2004,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "d1b9b26c-dba6-47c0-a087-283898bd208d",
        "cursor": {
          "ref": "b04de749-e5ba-4087-8b8e-4f2a78c39c63",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "12320c7e-4d5e-4a88-a40c-69642d9d4ea4"
        },
        "item": {
          "id": "d1b9b26c-dba6-47c0-a087-283898bd208d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9dcdf009-bd8b-4abf-9036-b3eebffe9402",
          "status": "Created",
          "code": 201,
          "responseTime": 2347,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c660a5-6f63-4afd-8a30-df925da6dd8f",
        "cursor": {
          "ref": "0faef1aa-203f-459e-b61b-01d959758d0f",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5ecb583f-6765-4c55-acb1-8c267a496713"
        },
        "item": {
          "id": "f7c660a5-6f63-4afd-8a30-df925da6dd8f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "48433ca8-6502-4931-8e88-fde75d1ecba7",
          "status": "Created",
          "code": 201,
          "responseTime": 2636,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f1dd10-0b7b-4aca-acb5-50d54f989d46",
        "cursor": {
          "ref": "a0f3ab61-c6a9-4beb-9632-8bda4929b3fb",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1991521d-368c-4c13-b868-56445912dfb2"
        },
        "item": {
          "id": "16f1dd10-0b7b-4aca-acb5-50d54f989d46",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "332ab0b6-e79a-40a9-9c05-618e5aa79b69",
          "status": "Created",
          "code": 201,
          "responseTime": 2465,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "31722aa3-a77d-4d9e-9ccd-4db3e67c7958",
        "cursor": {
          "ref": "1233c6e4-c494-4c39-b50a-7cb475657254",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9b5d35c1-b99d-4316-8541-b6b980a8081e"
        },
        "item": {
          "id": "31722aa3-a77d-4d9e-9ccd-4db3e67c7958",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "648b189a-83b6-4d07-9ae6-b8f7a3e37b98",
          "status": "Created",
          "code": 201,
          "responseTime": 2866,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "255349fc-c642-4ff7-ab22-bbba19723e3e",
        "cursor": {
          "ref": "a0de0af3-4159-4eed-b0ba-30f491d1769d",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "52e6b19e-7103-4c27-af18-2b75072824c0"
        },
        "item": {
          "id": "255349fc-c642-4ff7-ab22-bbba19723e3e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bdd26003-59f1-4cb7-99a0-c5d7a8453dfe",
          "status": "Created",
          "code": 201,
          "responseTime": 2327,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-18T00:39:32Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-18T00:39:32Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "105f9c22-d31f-4b44-aa36-17e8e483865d",
        "cursor": {
          "ref": "e2f5b68e-27dd-4555-8c10-380cd99513ec",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7aecd9c2-1086-4460-abd1-60e0a6791fde"
        },
        "item": {
          "id": "105f9c22-d31f-4b44-aa36-17e8e483865d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4f13b54d-8a35-4500-b422-d5d87b5ab9d6",
          "status": "Created",
          "code": 201,
          "responseTime": 2657,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69baee6a-581d-4dcb-90dd-5f4148c16acd",
        "cursor": {
          "ref": "5e4d527d-9d38-41d3-b74d-2cdc4979f865",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0a58d320-0ec6-4499-a188-7e43c73c7d1a"
        },
        "item": {
          "id": "69baee6a-581d-4dcb-90dd-5f4148c16acd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f753e9ce-2d45-469f-91f8-1e072e0e0c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69baee6a-581d-4dcb-90dd-5f4148c16acd",
        "cursor": {
          "ref": "5e4d527d-9d38-41d3-b74d-2cdc4979f865",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0a58d320-0ec6-4499-a188-7e43c73c7d1a"
        },
        "item": {
          "id": "69baee6a-581d-4dcb-90dd-5f4148c16acd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f753e9ce-2d45-469f-91f8-1e072e0e0c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db91500-ef13-480e-b125-6d87ddfa95b6",
        "cursor": {
          "ref": "43ecb33c-afde-4157-8a56-30c8ae2ff847",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "128b2a5f-76f2-4636-937f-7f68e8af90aa"
        },
        "item": {
          "id": "6db91500-ef13-480e-b125-6d87ddfa95b6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d5116c8e-bef2-4a48-8285-70aa763bbaeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6af60e3-40e4-4f2f-a451-7194d8188dbc",
        "cursor": {
          "ref": "82e6ef11-370f-4d88-ac7c-6885936cffd4",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "90f1577c-62e8-4d3d-a100-6e6de449fe1c"
        },
        "item": {
          "id": "d6af60e3-40e4-4f2f-a451-7194d8188dbc",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "26eed5e0-fd29-4f72-8aa5-c81068aea762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df49d1ca-6dc5-4a7e-9a9d-2d350db65710",
        "cursor": {
          "ref": "1b14da90-09fb-42e4-a42e-da0beefa7c0b",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8e2dda74-8aed-4f44-a0d1-194c7c64d58d"
        },
        "item": {
          "id": "df49d1ca-6dc5-4a7e-9a9d-2d350db65710",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5b7e8d56-2108-43d2-b275-4035c232a776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ddd4d5-f8f0-4b06-86b9-1417aee09056",
        "cursor": {
          "ref": "e1afd7d5-10c7-45f1-bb6c-4aff347649d2",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "294f1a58-5975-4f2f-b295-f8d71f6da3c9"
        },
        "item": {
          "id": "52ddd4d5-f8f0-4b06-86b9-1417aee09056",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7edfc740-a52a-4592-bbc6-d44ccfd5142e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "646fbb68-da97-4abb-b735-446c7d97d2e0",
        "cursor": {
          "ref": "4d1dd4dc-ddad-490b-b4e2-09fd92c91abc",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e25decbb-0a94-46c6-9b7e-215d602f9a5a"
        },
        "item": {
          "id": "646fbb68-da97-4abb-b735-446c7d97d2e0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e452993d-2c3c-40c9-b8c9-c0bb516a509b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9970f245-5bad-4e93-959f-3d1e1c74fe42",
        "cursor": {
          "ref": "060d9809-dbc0-47bc-b0ef-ad788cf0daaa",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9076c6a3-b469-4cad-b55f-38ff62229fc6"
        },
        "item": {
          "id": "9970f245-5bad-4e93-959f-3d1e1c74fe42",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "56ca00bf-042d-4dbe-a0e5-d3c4d16f040a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f1aab3-ae3b-4b1e-be1c-8a33256b2335",
        "cursor": {
          "ref": "7fea5a49-163f-49af-bdbd-9322fdaec0ea",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "79b71f3b-fdf2-4a55-9c07-e30d374af84d"
        },
        "item": {
          "id": "62f1aab3-ae3b-4b1e-be1c-8a33256b2335",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fa455ab2-3848-4dad-88ab-0b246d7b433b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e53d6ca-da07-4419-a7db-cabdb6610343",
        "cursor": {
          "ref": "73a3aa87-4b2c-4bb4-875d-e95f41a41e96",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "da9168c8-3aa0-4699-a9aa-f8d3cab39b5f"
        },
        "item": {
          "id": "2e53d6ca-da07-4419-a7db-cabdb6610343",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8340cc90-2581-4719-b593-a19eb83f1f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 314,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b047c719-eda1-45d4-8fd9-c999fbe3f955",
        "cursor": {
          "ref": "ad0bc398-ae15-4010-9f21-3ab68796d832",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "257965d3-1ec4-4cdc-bbfb-9734f28b442a"
        },
        "item": {
          "id": "b047c719-eda1-45d4-8fd9-c999fbe3f955",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "74475dc2-7cbc-4974-9b3b-2ee2b38e0b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1eefaf5-f2fc-45a5-9d5d-33f2e52d30f5",
        "cursor": {
          "ref": "e44ab8a8-7c31-4995-9ecc-1b4b41e50fed",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "17dfc296-cb35-46c2-acd3-f4b6f5390f47"
        },
        "item": {
          "id": "d1eefaf5-f2fc-45a5-9d5d-33f2e52d30f5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "772c80e1-85dd-41a9-b2b6-878b23353532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60664bf5-7a24-4885-b3f8-b6f06e46cdb8",
        "cursor": {
          "ref": "92f1fddd-aa16-44fd-bd11-28f9b46c339a",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "521ca5f5-388a-4dec-b997-5a6d2366bede"
        },
        "item": {
          "id": "60664bf5-7a24-4885-b3f8-b6f06e46cdb8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b75d5bf9-07d4-41ed-a9d0-0b5a484cf341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c89c4e-0e3a-4aa5-987a-3343ee54dc37",
        "cursor": {
          "ref": "5beaf5ec-d251-447a-819f-15b0be6765f4",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "51aab64a-8197-45b2-9ae8-cea56fb3c43e"
        },
        "item": {
          "id": "c0c89c4e-0e3a-4aa5-987a-3343ee54dc37",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "14864025-e8ab-4a39-ae72-19155d84293e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25898e00-148b-42d2-8011-a1dd4843c429",
        "cursor": {
          "ref": "9e28d6ef-b68c-4718-836e-e9eea25ad513",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3fdb5d0f-02d0-4408-bfe3-63f57cc4548c"
        },
        "item": {
          "id": "25898e00-148b-42d2-8011-a1dd4843c429",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "094a23ff-aa63-4913-9a9b-3defff6d869c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55872274-7e2b-4b7c-b498-e7cf62f3f26c",
        "cursor": {
          "ref": "1e38afd6-3cb1-4666-94ae-9432dd47a1e4",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "211c91c2-60bd-4f19-83b4-9518ee6af2a4"
        },
        "item": {
          "id": "55872274-7e2b-4b7c-b498-e7cf62f3f26c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bde804dd-24d3-4b70-934a-48832e2560c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1727ba-2406-4cae-9742-c59835f4a95e",
        "cursor": {
          "ref": "a3f790f8-aa28-4cd8-a07d-4ab117619341",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "de278261-c19f-4792-9795-f6b725a52321"
        },
        "item": {
          "id": "3c1727ba-2406-4cae-9742-c59835f4a95e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e88bafee-165d-4f1f-8484-36d0e93be344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd98a188-ffee-4bc3-a120-27cb85e020f9",
        "cursor": {
          "ref": "61023d73-9603-4240-a43c-7447c1555062",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "053a7b1d-07fe-461e-88a7-549aab18bac3"
        },
        "item": {
          "id": "bd98a188-ffee-4bc3-a120-27cb85e020f9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "519b0af7-1967-4c38-baf9-beb892ddb29c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b753cc-29e0-47d2-8e6f-c0adbb3dde8c",
        "cursor": {
          "ref": "f36a3da7-7b42-42f8-93b8-fa53a22fe524",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "dd2bff22-29fb-4418-8ffc-1ec5bcd090b1"
        },
        "item": {
          "id": "d7b753cc-29e0-47d2-8e6f-c0adbb3dde8c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "238296d4-4988-4069-8796-1926dafd8324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16981cba-d66a-46d3-9c95-d7b0ae7f7ac5",
        "cursor": {
          "ref": "77f3a08b-e492-453f-aaa2-28ec5904e60a",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3f51c205-d8b2-4dc0-855e-4a2db2113380"
        },
        "item": {
          "id": "16981cba-d66a-46d3-9c95-d7b0ae7f7ac5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "36351203-d37b-4f8b-ab03-511db93d9d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092ac7b3-9a2c-48eb-bc27-d90a43d01e84",
        "cursor": {
          "ref": "aa1cdff0-809d-4f92-9630-e0af8bd25af0",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "08ab8f13-d995-4b5a-a05c-619b4bf15fc9"
        },
        "item": {
          "id": "092ac7b3-9a2c-48eb-bc27-d90a43d01e84",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8626d777-fc0a-4624-9dc3-04902ce2616a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ac8754-04bb-452a-8d27-53a5fe59a035",
        "cursor": {
          "ref": "86bc50a3-bfa9-4ee0-a472-661dc76a30e7",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "abfd2d6d-e946-4d6e-9a1d-06038d9f3796"
        },
        "item": {
          "id": "d0ac8754-04bb-452a-8d27-53a5fe59a035",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "85ad1912-32c7-48f5-9b12-4f06eecfa344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9437c42d-bd0e-4084-8976-67444f9b091a",
        "cursor": {
          "ref": "398773dd-ead3-43ea-af24-0bb93963e136",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "dadbc0a8-206b-490f-ba40-f3e890dc69cf"
        },
        "item": {
          "id": "9437c42d-bd0e-4084-8976-67444f9b091a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9d0caebb-d483-45ae-8c0b-6f7c486ada01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28580b9d-f66b-47c2-a565-5522a884b30d",
        "cursor": {
          "ref": "2264f2ae-0068-473c-a111-aff91000ecaf",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d6bef17f-6761-4ab1-9428-b2c20890f4c4"
        },
        "item": {
          "id": "28580b9d-f66b-47c2-a565-5522a884b30d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f84bf186-cfce-441a-b162-e45e6ac5efe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c73d8e-48c7-4f62-bf11-dfe6f903dfcc",
        "cursor": {
          "ref": "1f0c3777-0dab-4ae9-ae43-9e920758859d",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f8fbfd90-d4d7-459f-b6b4-0e7a199961e0"
        },
        "item": {
          "id": "f7c73d8e-48c7-4f62-bf11-dfe6f903dfcc",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "60c53e48-9fef-4466-a828-e6dce9812f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a62ee7bf-d0ea-4653-b6c4-df705359ae83",
        "cursor": {
          "ref": "a5ca0e67-ffd8-4266-8ba0-cb26c7172ab9",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "51f63c5e-5595-445e-a978-90d287d0abf0"
        },
        "item": {
          "id": "a62ee7bf-d0ea-4653-b6c4-df705359ae83",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0e05ecbc-d727-4179-9bf2-cef89c82fdad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d725e9-c79b-43f7-aaf6-b27e9596225c",
        "cursor": {
          "ref": "3ea0279d-0576-49bb-bc4d-e2f44118bb90",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c53f40d4-7d4e-42d2-8a86-2a52872d4ae2"
        },
        "item": {
          "id": "a8d725e9-c79b-43f7-aaf6-b27e9596225c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ddb7f21d-3761-43e2-8510-5b2c8947bf2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc6f97e-cb46-4e8a-b42b-8fd8f21d2792",
        "cursor": {
          "ref": "d82ce064-5fc1-4fdc-a944-a5a90bc55677",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c0c16e67-3553-4be5-bb15-9b68d589dcbb"
        },
        "item": {
          "id": "cdc6f97e-cb46-4e8a-b42b-8fd8f21d2792",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a695797d-a324-4559-a085-78a9bccbb759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e07fc30-4e9e-4948-85a1-4724dbb9e247",
        "cursor": {
          "ref": "a5493a3a-2526-4f51-8579-f7e226478d5e",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "fe378a8c-7b2d-40b5-9512-d941693cc337"
        },
        "item": {
          "id": "8e07fc30-4e9e-4948-85a1-4724dbb9e247",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a020dc7a-751d-4c74-a31d-842c0684b975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404fc80b-a4e0-4379-b0ac-fe2cbca9b725",
        "cursor": {
          "ref": "d8ae6bbd-8646-4ba9-ad88-bd047911a1be",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "600f9ec9-eb60-44f7-afae-e8005d246208"
        },
        "item": {
          "id": "404fc80b-a4e0-4379-b0ac-fe2cbca9b725",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2a69c938-b6fa-4fa0-860e-ca02b898b2a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6397c2-8e66-49ca-835f-4886d0cc573d",
        "cursor": {
          "ref": "4d61f495-6810-4b51-a0c1-6b7a63eaf7a9",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "66355e6a-c4af-49e1-999a-6c174aa1b0d9"
        },
        "item": {
          "id": "ee6397c2-8e66-49ca-835f-4886d0cc573d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "65ae8810-73ed-462b-8081-ee45804b4f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213dea15-c3c8-47cd-927e-de2b91ef8b72",
        "cursor": {
          "ref": "c9edbb9a-bcef-45bf-9937-6b9d6c5a5f6c",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d7acb6bb-028d-4ad6-933a-114257757787"
        },
        "item": {
          "id": "213dea15-c3c8-47cd-927e-de2b91ef8b72",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "38263253-990a-425e-9db0-e6d0054d1bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cded047c-9d05-4b69-b382-5d3f6068c53b",
        "cursor": {
          "ref": "c00b4ecd-0a48-43ba-b5bf-9c49b3fe27cd",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "66afb73a-8830-4af0-b82a-cd564ce8781b"
        },
        "item": {
          "id": "cded047c-9d05-4b69-b382-5d3f6068c53b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "012613d0-056f-4c41-b30f-fa0aee9b77d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78475626-6298-43d3-a297-e1b4dc69854b",
        "cursor": {
          "ref": "b86e605c-cec1-490f-ac11-088c3ddd81fb",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "26db1b31-0bae-4188-95b8-390dd28573bc"
        },
        "item": {
          "id": "78475626-6298-43d3-a297-e1b4dc69854b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0491e13b-9586-4f84-bf6e-ddd09eba3c81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "006e7655-8104-4ff0-81d7-e4bf76daeac4",
        "cursor": {
          "ref": "8c621e00-8039-4721-b00d-469383d7e6cc",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a87b735b-85b6-41ad-9bac-ce4a7cd95718"
        },
        "item": {
          "id": "006e7655-8104-4ff0-81d7-e4bf76daeac4",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f9bea425-77de-4cef-a941-10facab9c7ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "1849c1a4-f988-4381-9ef6-29e2d6e3e480",
        "cursor": {
          "ref": "b171dbe5-de85-4166-aea4-c4011aa699da",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "fe790f20-8249-4193-b862-6d044d8b5a3f"
        },
        "item": {
          "id": "1849c1a4-f988-4381-9ef6-29e2d6e3e480",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5adb4723-c72d-4449-9f4d-6e6cd07e80bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1849c1a4-f988-4381-9ef6-29e2d6e3e480",
        "cursor": {
          "ref": "b171dbe5-de85-4166-aea4-c4011aa699da",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "fe790f20-8249-4193-b862-6d044d8b5a3f"
        },
        "item": {
          "id": "1849c1a4-f988-4381-9ef6-29e2d6e3e480",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5adb4723-c72d-4449-9f4d-6e6cd07e80bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8aa4fc-8653-449c-aaf0-0c74a9e90888",
        "cursor": {
          "ref": "9bbfa764-99d6-44af-84cc-9dc2ab15603f",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ee42c40e-f229-4c43-bca0-a650e2cc006e"
        },
        "item": {
          "id": "5d8aa4fc-8653-449c-aaf0-0c74a9e90888",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5dce7b24-ee16-4bdc-b11a-100e7aae88fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b13b414d-774f-4d60-8452-409db700c626",
        "cursor": {
          "ref": "cd076ec8-84de-47c2-a005-1d2450980346",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0f3eb8c7-ae33-4a6d-8f47-f4137572ef4a"
        },
        "item": {
          "id": "b13b414d-774f-4d60-8452-409db700c626",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9818a0ae-4b52-4c2b-b4d3-8a6b3f38960d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33d1e76-4864-47a3-9014-dfea2923f0cb",
        "cursor": {
          "ref": "8eefdb49-889f-48d8-9f7a-2a6655fd58b3",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3076dc91-4e41-42f8-885b-6a8e1d8ba66e"
        },
        "item": {
          "id": "d33d1e76-4864-47a3-9014-dfea2923f0cb",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9ffd9fe5-5292-4220-bc2a-33573d5da729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6cb9008-8a37-4484-8920-ed1f68340cdc",
        "cursor": {
          "ref": "7f5e70e6-53f8-4d34-8256-764c1eb2d5fc",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "452189f2-0f4f-48be-975f-3d870568594f"
        },
        "item": {
          "id": "c6cb9008-8a37-4484-8920-ed1f68340cdc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0a91d5b9-4620-48f5-b769-912478230db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b46f7c-d947-4c96-9273-72c7c3526a33",
        "cursor": {
          "ref": "5772b09a-5b8f-4f9d-9ce9-08a4edda0642",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ce1d6edf-0d15-434a-a8a2-d96a734c955a"
        },
        "item": {
          "id": "78b46f7c-d947-4c96-9273-72c7c3526a33",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "52a4acb3-6762-4e32-9f8f-7255be978c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924bd3ba-fdc1-462f-940c-d85281067060",
        "cursor": {
          "ref": "cdbdf120-aba4-484f-b221-90df8cd3e2f3",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "dd09a7f6-6c7d-4c0b-a51e-cb0dcdf5b4c6"
        },
        "item": {
          "id": "924bd3ba-fdc1-462f-940c-d85281067060",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6d27df1e-92e6-4603-83df-cf198b586e4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ffc172-bd8c-4878-8820-c8947d3144aa",
        "cursor": {
          "ref": "0c5e7f7b-a525-41a0-bd9b-165cd0ef1828",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ed57d006-7d21-4ed5-961b-46ff79615d21"
        },
        "item": {
          "id": "c9ffc172-bd8c-4878-8820-c8947d3144aa",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9b88792c-e4e1-4311-81a0-b3bcefed74f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6975cd10-c2ff-401c-a60c-ab996e0c62b2",
        "cursor": {
          "ref": "17d903ea-dab6-4b8e-9d00-156f33e27d78",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "86788b55-77a0-47a3-9656-a93434ef25a5"
        },
        "item": {
          "id": "6975cd10-c2ff-401c-a60c-ab996e0c62b2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "df79a26c-821b-4498-a78e-d285dd0b1470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1d9edc-ef09-429e-befa-80780ec16549",
        "cursor": {
          "ref": "ba31775f-6adf-4f9d-a67c-2564edacc57d",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6b83b11d-4f14-43df-a677-85b4ca471d89"
        },
        "item": {
          "id": "cd1d9edc-ef09-429e-befa-80780ec16549",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "75212c43-5905-478d-8937-3be2c0a8a3d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40da1f3d-594d-41dd-95c3-e6a15aa406ec",
        "cursor": {
          "ref": "177c98e8-5b3d-46b2-9c47-7633ad83affd",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "248cb5ac-8ffd-4999-bbd8-9478bb557334"
        },
        "item": {
          "id": "40da1f3d-594d-41dd-95c3-e6a15aa406ec",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d7fd0c29-96b2-4d8e-b88e-0daf54527650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64ef99e-da7d-4248-a021-abc497c6a3e3",
        "cursor": {
          "ref": "f541541d-9820-454a-9338-5d0a16548eeb",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f7fd406a-96c2-4bc1-ad8c-f38663d91325"
        },
        "item": {
          "id": "a64ef99e-da7d-4248-a021-abc497c6a3e3",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "63b45458-70ba-4856-9ddb-79639606fb7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4394d6ae-e656-4dc3-9e40-25102c1e74e2",
        "cursor": {
          "ref": "d596a1f6-08c7-4006-b5f6-ceb22f3231d8",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "267466cb-54b2-4d83-ba41-9215c7653196"
        },
        "item": {
          "id": "4394d6ae-e656-4dc3-9e40-25102c1e74e2",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3d889fd8-fa2a-44d0-b8e3-943cf2a930a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adfe8f2b-88a1-4183-a299-df07f94936da",
        "cursor": {
          "ref": "37a2d783-4150-4ef2-945a-757f9e328f35",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "dc105dcb-c03f-4482-8223-be02027c7320"
        },
        "item": {
          "id": "adfe8f2b-88a1-4183-a299-df07f94936da",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "730f062d-08be-4c8f-bcad-c08d32233dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56065c0c-3512-4424-821b-e836042760e6",
        "cursor": {
          "ref": "523c4bf4-eaae-4ca5-932d-230aa01eb7e1",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "763e72b7-b192-4e7b-8e9c-fa0535580deb"
        },
        "item": {
          "id": "56065c0c-3512-4424-821b-e836042760e6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3bc4eaf4-63fb-4f99-8729-986fc23f8ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f28b795-04ea-45a3-9b72-b1b1d2bd8402",
        "cursor": {
          "ref": "2377624c-93d5-447d-8eb0-51b50ad31ab5",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1a8e51fd-8568-4162-b152-596c59a4d8ee"
        },
        "item": {
          "id": "5f28b795-04ea-45a3-9b72-b1b1d2bd8402",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "82c05266-b7c6-4c64-a3e3-f73e8c9850bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e84eb4-ff8d-4802-8768-fe02e4b06314",
        "cursor": {
          "ref": "151a531f-72e6-40b2-9d41-13cc23cd299f",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "35df7d61-6ce7-4083-a93e-d56335d37fce"
        },
        "item": {
          "id": "22e84eb4-ff8d-4802-8768-fe02e4b06314",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d7035e0d-ef51-4c72-9646-e0fd0e80f2e7",
          "status": "OK",
          "code": 200,
          "responseTime": 265,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "5b91e1b8-a85e-4c32-9d34-f5e81a34037d",
        "cursor": {
          "ref": "e1afe31f-0675-4f8f-89f3-33d436cb0c6c",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d1881287-c287-4f18-b623-fa356a2db9f1"
        },
        "item": {
          "id": "5b91e1b8-a85e-4c32-9d34-f5e81a34037d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "611ca1e6-70c4-4763-9f15-5b98685e3957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d86f681a-73f2-408c-a63f-ca7cd8acf6f8",
        "cursor": {
          "ref": "eff3e592-93c5-47ad-b0ad-446ef582965d",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f9c7eb7b-f907-4a0d-8b62-ce612c0672dc"
        },
        "item": {
          "id": "d86f681a-73f2-408c-a63f-ca7cd8acf6f8",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "11ee1ad2-e941-4dd8-924b-da0651ad8a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "900578f2-60b7-4601-ba48-6e6a99697495",
        "cursor": {
          "ref": "fb483106-7ac9-46a2-842d-cd081ab3847c",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "cc69c6de-a1c8-40ef-8ae0-54ef0d5e7c21"
        },
        "item": {
          "id": "900578f2-60b7-4601-ba48-6e6a99697495",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ed335e2e-700f-4566-9f3f-ef8ec6c880e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4977a994-3ac8-4f4c-9575-27c142799117",
        "cursor": {
          "ref": "24d6f525-f103-489b-ba69-920aa1cd5357",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0bb4e6b2-b7b9-4df4-90bd-7ce50e7432d4"
        },
        "item": {
          "id": "4977a994-3ac8-4f4c-9575-27c142799117",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3027cf34-e736-4b5d-81a1-d880f8c2e950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1d736f-3d4e-4c11-841c-c26bf9c6d1a1",
        "cursor": {
          "ref": "dd877de5-76c9-4226-88f2-e458ff4400e0",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ab011613-82f0-43f9-80ce-f61ddbf15cc8"
        },
        "item": {
          "id": "6d1d736f-3d4e-4c11-841c-c26bf9c6d1a1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2e866e32-5dd7-4faa-a0f3-b5c4515b3898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e310c5b1-de22-4728-aa91-ce190322f965",
        "cursor": {
          "ref": "9c805ad1-f434-4273-9741-a979802086ba",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c3dda2cb-0a8a-47e8-914c-5534bb3f5a16"
        },
        "item": {
          "id": "e310c5b1-de22-4728-aa91-ce190322f965",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7e1962b8-f23b-4a83-9862-b6fb1942960b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd55b5aa-0584-4471-87fd-b7d1434c22f6",
        "cursor": {
          "ref": "939cabc0-3edc-4f0b-b536-c57619a9fc8b",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "60ddd87e-fa85-4dae-8042-446b63eb79ae"
        },
        "item": {
          "id": "cd55b5aa-0584-4471-87fd-b7d1434c22f6",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "690a590c-fc2f-4786-8b0d-86000a0e0883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9578b632-a641-4562-8d11-e529e97ec38c",
        "cursor": {
          "ref": "93e54ddc-09e1-4531-b320-00d18967aea3",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "851e0e29-65c9-4d8a-89ab-8f40dade9cad"
        },
        "item": {
          "id": "9578b632-a641-4562-8d11-e529e97ec38c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b648379f-7fc1-4cc7-9b48-292fdb6cb6db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc717fe5-ba5a-4288-a955-81d935865fd7",
        "cursor": {
          "ref": "f86bc9cc-2001-477e-b184-ebb42f19ed43",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "0be73ad4-3a4d-43ce-b613-3b0c1ec2fb42"
        },
        "item": {
          "id": "bc717fe5-ba5a-4288-a955-81d935865fd7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "389e9e72-33fe-46fd-9be7-95cbe9fc9908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6b1f9e-ddf7-44c3-989b-e63e8dda436a",
        "cursor": {
          "ref": "e8c5af20-7cf0-4b5d-a5e5-67c7ecd5b37d",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f64bc67d-b9e5-4bda-8dc3-4e2e48ad9055"
        },
        "item": {
          "id": "8f6b1f9e-ddf7-44c3-989b-e63e8dda436a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "58b3b830-2051-462c-9617-a117ed94a713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7d9b59-f038-4ff1-bd17-400fc0c43269",
        "cursor": {
          "ref": "4c3659a9-6de6-40e3-abeb-6f74db6bc5a6",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9f7a7879-f070-4f75-98b8-82a283d726e7"
        },
        "item": {
          "id": "7a7d9b59-f038-4ff1-bd17-400fc0c43269",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5aea07cc-0bc9-42db-84a8-dc15dc6eb79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd75a22-55e1-4f2f-aabd-2f18b6a00605",
        "cursor": {
          "ref": "f30f63f3-d4bb-4584-9a29-474e9bea110d",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b0c25fa7-c660-4100-83d8-ed5df14e6a3c"
        },
        "item": {
          "id": "9fd75a22-55e1-4f2f-aabd-2f18b6a00605",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8d441422-52c1-4e22-8b37-b31de38a8d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f8938e5-6d25-4aed-ae76-fdeef9f2ae9f",
        "cursor": {
          "ref": "406dd0c8-1655-47b8-bade-cc39e03e0090",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4ba13b1d-24f8-4425-a3ec-5fdff58bacb2"
        },
        "item": {
          "id": "9f8938e5-6d25-4aed-ae76-fdeef9f2ae9f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6d0c7c91-b078-4008-b3b7-8afac7855c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b177e5c-55d7-4718-b326-b48c7d1a0f21",
        "cursor": {
          "ref": "db7a6c06-3f3b-473d-a7f9-c5d3fcca43c8",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6d68b888-a1e6-44a8-a760-e69696736f55"
        },
        "item": {
          "id": "4b177e5c-55d7-4718-b326-b48c7d1a0f21",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1d5f3edc-3c2b-4372-a6a3-64e55d75ce1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5718062-808b-4b90-a7ea-2849740ebce8",
        "cursor": {
          "ref": "06d377b0-a29e-4e45-acb6-73caacea0387",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "98f1ef15-97ec-43f5-8caf-d38450a47351"
        },
        "item": {
          "id": "c5718062-808b-4b90-a7ea-2849740ebce8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "cf562551-836b-4fc8-a6a4-21251fd40188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7626c4f-cfb2-484c-8a7d-b8591020c458",
        "cursor": {
          "ref": "7dd6ade3-d9cb-4f12-b9cd-0a028689d92d",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "37d23482-d9c2-438b-8d3b-6787d50cfeaa"
        },
        "item": {
          "id": "d7626c4f-cfb2-484c-8a7d-b8591020c458",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7035bbc5-a793-4390-9c24-e216a96f1d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84456e27-d19f-4ad5-9098-41881a5e5a94",
        "cursor": {
          "ref": "90916860-9383-4ecc-9113-d12c467b3ca1",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ddb73508-3c98-4916-9e65-9df96ce6459e"
        },
        "item": {
          "id": "84456e27-d19f-4ad5-9098-41881a5e5a94",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "19468437-1077-4bd7-a03d-fe2012507f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861ef8e1-5948-478b-a90a-c7e7ef0af3a3",
        "cursor": {
          "ref": "bff6bce0-1590-40f9-8c62-bbb5a0355d51",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c88cb25a-6c28-4643-af03-f5353c126f15"
        },
        "item": {
          "id": "861ef8e1-5948-478b-a90a-c7e7ef0af3a3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d3c57b46-129b-4e1c-b31f-09aab896e8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9baf18-9bd7-4872-9c06-1ef126d383c0",
        "cursor": {
          "ref": "3fd0c270-5ea0-44fd-8bb7-07c15563f365",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "80ea1b57-a89e-41be-a947-ad636ba349a7"
        },
        "item": {
          "id": "9f9baf18-9bd7-4872-9c06-1ef126d383c0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "16219849-c7d9-46f9-95c7-2f4c8dc9e816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9911cb8-0557-42e9-b897-e422414b3e6d",
        "cursor": {
          "ref": "eee6f811-037a-48ea-9c7d-5b072465fd76",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "bcbeaca9-420e-4134-a71e-6ad49d212226"
        },
        "item": {
          "id": "a9911cb8-0557-42e9-b897-e422414b3e6d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cd28ba9f-3003-4c59-be4f-5c02081bc195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c967279a-25a5-47f5-bb1b-ba7ad7616ec0",
        "cursor": {
          "ref": "fd07ea43-2a9b-46d9-a47d-7199e4c4ce86",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "efabd8cb-fc16-417c-95c9-ec4f9f3bca82"
        },
        "item": {
          "id": "c967279a-25a5-47f5-bb1b-ba7ad7616ec0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b63488c1-bc67-48cf-9c4b-0f52eb77a25e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7ab60f-c3a0-4021-8f55-70dc65666fb7",
        "cursor": {
          "ref": "0e14059a-adfe-408f-98f3-15de54137c17",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2bd0bedd-225a-4e7b-ac2b-4d12afb460c3"
        },
        "item": {
          "id": "4d7ab60f-c3a0-4021-8f55-70dc65666fb7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0cf41aba-5b77-46d0-9066-2f8160221f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6494d78d-de42-40bf-b5e2-42e1e8a82394",
        "cursor": {
          "ref": "4b26243a-ba9c-497b-bbcf-059fc082a1e6",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "508829e5-099f-4f7a-91ce-ebd002cd335e"
        },
        "item": {
          "id": "6494d78d-de42-40bf-b5e2-42e1e8a82394",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "829b2d0b-1e3d-4a52-bb87-b5eb9249afe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faf2f208-8702-40ba-8e47-575a79d49a8e",
        "cursor": {
          "ref": "d47436c7-e1a3-447c-aee3-2e548cd17943",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "311728fa-651e-4f8c-b09c-e5cb4a2f10a8"
        },
        "item": {
          "id": "faf2f208-8702-40ba-8e47-575a79d49a8e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f86143c6-1442-4246-a133-1fa1db735bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25d1f6d-2173-40a3-a28f-5ab019b08537",
        "cursor": {
          "ref": "6fa33815-0052-4beb-8be9-de154bdfeef0",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ce5c4e33-3961-4631-acb9-94eae8f4f5be"
        },
        "item": {
          "id": "e25d1f6d-2173-40a3-a28f-5ab019b08537",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7068224e-ced7-44cd-be41-fa6d6eb2d71b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe392a7-b685-45aa-8f70-8626efb39131",
        "cursor": {
          "ref": "415bcdd6-374b-4e0c-8ac9-33e5e7287a67",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "15a18585-13d7-4cfa-8ce9-0886cf51c5a8"
        },
        "item": {
          "id": "bfe392a7-b685-45aa-8f70-8626efb39131",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "90317600-b1d6-4dfc-ae56-0d5b4c09aa5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3783602f-2a1f-482f-a437-eb52abb9046b",
        "cursor": {
          "ref": "c34e5cac-2eef-42e7-beb9-1505427e23c4",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d5b2e441-c74e-42bb-9cd4-0b363e6ad5ca"
        },
        "item": {
          "id": "3783602f-2a1f-482f-a437-eb52abb9046b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6648f86c-7eec-4c81-8001-93ff7226fe35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b121bf4-66d5-4ea6-a7d0-105b0bf09d5b",
        "cursor": {
          "ref": "1341075a-89bb-4dac-a387-4bdd8881054b",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1cf80956-3f10-4f1d-8840-76ccb37c0b2b"
        },
        "item": {
          "id": "9b121bf4-66d5-4ea6-a7d0-105b0bf09d5b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "bc2412d1-541b-4a0a-bc5f-bd19b11cf897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33594675-45f5-47e6-b068-a8b857734ca6",
        "cursor": {
          "ref": "405182a8-aae0-4259-ae62-1606586c3155",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2c26fada-07b8-43a2-9ac0-7e23cbd3e13e"
        },
        "item": {
          "id": "33594675-45f5-47e6-b068-a8b857734ca6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6aacb187-6534-4c4a-8180-7c4daf4b57b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a13ae7-6c56-42d4-bef8-8738a2d3b3f7",
        "cursor": {
          "ref": "2ef7675e-dae9-4503-9263-8eb9f4073f9e",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "255fe362-0b52-4c51-9897-85c611b1c29d"
        },
        "item": {
          "id": "64a13ae7-6c56-42d4-bef8-8738a2d3b3f7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "65b69c3e-c393-423d-9eb2-4ceb18eb7abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986ab290-497e-4436-a372-ba453ad1820b",
        "cursor": {
          "ref": "6aaac623-1c9f-4983-b7bd-f80ee6465bc9",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "998d8bd8-feb3-4a25-b1d7-7a21e47ef515"
        },
        "item": {
          "id": "986ab290-497e-4436-a372-ba453ad1820b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3b95238d-068d-4013-b59f-ca4a1866af52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f825a629-7890-417c-9843-12eb1c594e23",
        "cursor": {
          "ref": "ddb7f484-be87-4c68-8e8b-830177f73421",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ba355161-b4d5-4c8a-a9d4-76a08e0846c5"
        },
        "item": {
          "id": "f825a629-7890-417c-9843-12eb1c594e23",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3819c326-7bd0-44a4-9a25-d5946d299d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf81478-f39f-4c45-ad4a-05f06c824143",
        "cursor": {
          "ref": "04563b23-7605-4d86-b888-fca27b89e4eb",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "da39221f-7900-482c-a656-48646329d3f9"
        },
        "item": {
          "id": "2bf81478-f39f-4c45-ad4a-05f06c824143",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ef46ccbc-4770-4c70-ab08-c2286cd931d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf8e2224-f565-40f5-8789-8491a2afb004",
        "cursor": {
          "ref": "979a6125-68c5-40a2-97fe-4bc2d1de9741",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "15b19dd2-de9e-4a78-897c-bb165313576f"
        },
        "item": {
          "id": "bf8e2224-f565-40f5-8789-8491a2afb004",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "200fe686-b178-436e-9988-a5e22c400510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0c35d4-a690-4d47-89be-01e5b3106bb8",
        "cursor": {
          "ref": "a0b5adf5-672d-4e64-933d-5cfafc7f2a7c",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1b8cc5ce-4596-4c98-a0bf-0da1e5d5bda6"
        },
        "item": {
          "id": "6e0c35d4-a690-4d47-89be-01e5b3106bb8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7282e643-6cb1-4b63-bdad-5ac090cdff59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d7d1e2-4478-49ca-b2a9-806dd080c7da",
        "cursor": {
          "ref": "10ee60ba-6a24-4da8-942e-ef18d8795de8",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c33304e9-c999-4b9d-9bbf-b3b1323c04fd"
        },
        "item": {
          "id": "f5d7d1e2-4478-49ca-b2a9-806dd080c7da",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8412c035-03ce-40bd-a477-747583c3f479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377696de-2ee3-411c-925a-166853240fbc",
        "cursor": {
          "ref": "37353eaf-1676-43a6-b6ee-9c549a9711e6",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "72fa6458-a1b2-4731-b389-6edc4ec3e922"
        },
        "item": {
          "id": "377696de-2ee3-411c-925a-166853240fbc",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "19705597-730a-410f-b78b-5e968a9b3a36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7b6ea6-a76c-4c44-9f13-caf399d099cd",
        "cursor": {
          "ref": "c79cc784-9d07-4b45-8ed8-835490e52b75",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "93932ca2-ca47-437c-a217-8424d58b5874"
        },
        "item": {
          "id": "dd7b6ea6-a76c-4c44-9f13-caf399d099cd",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "504110c6-6754-411b-9fe3-e32a0f97c324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d09215d-87dd-441a-b156-80be05e0dd64",
        "cursor": {
          "ref": "c02e12ba-a8ee-44ff-a133-9f5b2aceaf33",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9af093b7-94eb-4a52-9b61-b26996bc66ac"
        },
        "item": {
          "id": "5d09215d-87dd-441a-b156-80be05e0dd64",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "07ffb88e-b14a-4373-aea6-2ea7ec7b751d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da446aa-57c8-489c-a9a8-3a04f2bf523b",
        "cursor": {
          "ref": "ba3c26a0-4d1a-4abd-832f-11f65e99fe49",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f1802cd1-d9fd-4516-8c1b-4474191a5684"
        },
        "item": {
          "id": "4da446aa-57c8-489c-a9a8-3a04f2bf523b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "935c5456-9fb5-491d-8bd7-3f66c1883430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1999966f-f97c-4a7d-82ff-7aa1190104e7",
        "cursor": {
          "ref": "8cb792cf-eef1-477c-b81b-0b14c31398c5",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9a9653d2-7f89-49fd-a97c-0f29f1cc2fa4"
        },
        "item": {
          "id": "1999966f-f97c-4a7d-82ff-7aa1190104e7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "70dab9d7-2ff2-4be8-a33a-0d06582a56ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f621e5-f2d4-4ffd-9e60-08c05439ad74",
        "cursor": {
          "ref": "3c40d8b7-dfa6-4bca-bb73-efbb0a05cc55",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "dc3059bc-8a63-4b06-a813-b6455aba139b"
        },
        "item": {
          "id": "62f621e5-f2d4-4ffd-9e60-08c05439ad74",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "894757e2-61bc-4a27-bb51-a7ab04b00515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be4f7e2-79b7-4602-8e88-91f1c1a87153",
        "cursor": {
          "ref": "3e3194f2-c85b-4648-a6dc-81a05c8ad388",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4a27ba9e-808d-4764-a082-9a5f55cf8cce"
        },
        "item": {
          "id": "1be4f7e2-79b7-4602-8e88-91f1c1a87153",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e5aadaa9-6349-4614-a6e9-7b68ca190e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d057ad7b-5c67-4cb7-82d9-eabed845d0f4",
        "cursor": {
          "ref": "f1886a32-f54b-49c1-9ab1-db29f5f9bcc5",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0b04085c-a939-47bd-b5d0-5172437768d2"
        },
        "item": {
          "id": "d057ad7b-5c67-4cb7-82d9-eabed845d0f4",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "aba70fa2-97d1-4877-ab0f-1b05e84b04e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ddcd1d-2c7a-4e32-ab85-33d9423ba95f",
        "cursor": {
          "ref": "22a1c45f-45bc-4096-9afc-00b3ff389525",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c70b73dd-baeb-4ae2-afc1-b4d322a6b23e"
        },
        "item": {
          "id": "d0ddcd1d-2c7a-4e32-ab85-33d9423ba95f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f10b8061-0462-419b-82b6-30241eddb503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827f3fb0-eabc-4db7-b548-0ace4545f3c5",
        "cursor": {
          "ref": "768db88f-f5d3-4d74-98ef-d12a0cad271d",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c765a566-e55b-4bad-870d-9a56b9baff29"
        },
        "item": {
          "id": "827f3fb0-eabc-4db7-b548-0ace4545f3c5",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "868bcfe8-cc13-4daf-ae2f-8af87e75199e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0149535b-7258-4e62-99bf-3aea1b08023c",
        "cursor": {
          "ref": "354d6b75-5605-4094-afe9-3ac3b93a5d1a",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "01531de5-5c20-4967-869e-692347c10c0b"
        },
        "item": {
          "id": "0149535b-7258-4e62-99bf-3aea1b08023c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e3ff4111-e5f7-451e-8819-d57e46f36ecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aced99d5-8882-4306-bb18-2fd594e31e75",
        "cursor": {
          "ref": "60f80ea0-d9c4-4dcc-96f7-75e10f71ac2f",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "cb6d6fd1-c4cd-4a1a-ad59-55c6c94457cb"
        },
        "item": {
          "id": "aced99d5-8882-4306-bb18-2fd594e31e75",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "557becd8-b6e2-4282-a743-fc11d34b7a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f77663-07fd-4875-a101-2cf72dc7b2e5",
        "cursor": {
          "ref": "ce0bcde4-d55f-4113-a6b4-08352326350b",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "decd79ca-6ab6-4bdd-b7b7-ba07673cb07a"
        },
        "item": {
          "id": "10f77663-07fd-4875-a101-2cf72dc7b2e5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4bbc3f6d-849e-4a77-b3a3-4a9499296c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6791225e-0a76-4e8f-b6c3-68899fc79753",
        "cursor": {
          "ref": "e85483b6-f56f-4e27-b60b-0bda07dc9a3f",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "61e9aee4-42f9-4192-b444-8f752e14cb51"
        },
        "item": {
          "id": "6791225e-0a76-4e8f-b6c3-68899fc79753",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e94be943-fc8e-4756-b7fe-89a4015f4c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea42ff35-bd92-4087-8c97-d7e886251461",
        "cursor": {
          "ref": "cd65cdf7-a988-43fa-83c2-5daa69af3ad8",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b8ae7060-3656-4816-a15c-aacf3bf92d71"
        },
        "item": {
          "id": "ea42ff35-bd92-4087-8c97-d7e886251461",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "77122cd5-dcde-4f8b-adfc-bc1135830b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b99b6ff-cddc-446c-a59a-ee68337ffb70",
        "cursor": {
          "ref": "ef7cb76d-967a-41b2-b160-fd38437c5013",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8d79b663-908d-498e-99e9-981ba33b0e46"
        },
        "item": {
          "id": "0b99b6ff-cddc-446c-a59a-ee68337ffb70",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f945273d-1022-4067-9e85-5bc3f1ed9366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "513c34ef-cecc-4470-87b5-26290359881c",
        "cursor": {
          "ref": "05288946-32f4-4a8e-8bd5-4d7c16c4a201",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "40a1043d-99a3-431d-b48f-1817c147a302"
        },
        "item": {
          "id": "513c34ef-cecc-4470-87b5-26290359881c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0c4174d2-019a-47c0-90f7-065ae444c124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b444bab-339d-406c-b33f-362428540186",
        "cursor": {
          "ref": "edb22188-1201-45f1-bde0-2109791a9044",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a161d645-087a-4b5f-a1bf-b0c993c5c497"
        },
        "item": {
          "id": "3b444bab-339d-406c-b33f-362428540186",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "fab18ed6-06a4-49e9-a025-5409fc5a79c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc69216-8b69-4382-bcac-f35882474256",
        "cursor": {
          "ref": "f653531a-c948-4c30-acc2-8358c0f3b9b7",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ee013027-03c9-4ce3-81e4-aff4cc9ea632"
        },
        "item": {
          "id": "dcc69216-8b69-4382-bcac-f35882474256",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "34cca154-b997-49a7-bcc8-434bfed4ba0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c63cd3-be87-4d15-9059-d87a8f43eb75",
        "cursor": {
          "ref": "e32d57dc-51d6-41e9-9dd1-0718c6f8bc7b",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f43f1fc4-75ac-4e66-8535-274cd0ba1c7a"
        },
        "item": {
          "id": "52c63cd3-be87-4d15-9059-d87a8f43eb75",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "040757b3-c9ee-48c2-867f-f10589e70efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133f285a-0949-42ba-8b34-45b21c1a306d",
        "cursor": {
          "ref": "db44fdb8-cfa6-4ac6-b1d9-e9496b333b34",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f401cb19-1f06-4ca5-a706-c4ce2b7bc822"
        },
        "item": {
          "id": "133f285a-0949-42ba-8b34-45b21c1a306d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e11fc438-3f1c-40c5-ae38-ba8de2f90dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33bf7447-bc85-4a24-aca7-33111149eff4",
        "cursor": {
          "ref": "3e60fd54-2bef-489d-805f-dd8eae9405dc",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "41cc4ea3-8f79-4ceb-96ee-a8a82c9c781f"
        },
        "item": {
          "id": "33bf7447-bc85-4a24-aca7-33111149eff4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "cc0d9e73-c547-435c-889b-028642fc34e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1994d16-b52b-4200-bb3e-9da3e44fecd0",
        "cursor": {
          "ref": "5c65add3-701e-48cd-8201-c4b03b83e504",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e1e85018-582a-4fc2-9f01-f8b5e1a63e79"
        },
        "item": {
          "id": "f1994d16-b52b-4200-bb3e-9da3e44fecd0",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ce0739e0-27cb-4e13-ad0b-9256f6f72fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c20bedc-8ea1-4128-8dd1-81e84eecb624",
        "cursor": {
          "ref": "477f7d64-9bee-4032-8520-33358371c5ee",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "bc3af28b-7ca2-4b73-8725-e77606ebe27c"
        },
        "item": {
          "id": "5c20bedc-8ea1-4128-8dd1-81e84eecb624",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fcd62df4-bd6f-4e85-b46b-a059873cf385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a783c4-0388-4fa0-9670-c4e1d4e0ce1a",
        "cursor": {
          "ref": "1fdf03c9-bb92-4ee3-9d5e-787258d814e4",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9b0f38fd-97f9-4f03-937b-a29f92fa80a7"
        },
        "item": {
          "id": "c7a783c4-0388-4fa0-9670-c4e1d4e0ce1a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "10435ae5-2c90-4d15-82b0-f8bc60b670a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4bbb5b-4d19-4a97-8ec5-cb884c01deea",
        "cursor": {
          "ref": "68c11745-391b-40d6-9967-9110dbe533e1",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "67afeb56-a35e-4d33-9454-a1db472971a4"
        },
        "item": {
          "id": "1c4bbb5b-4d19-4a97-8ec5-cb884c01deea",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c24b7b66-7f4c-4635-a1bf-7ac7c9307227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c329c185-78bb-4ef8-8e3b-3f4ff3c22a70",
        "cursor": {
          "ref": "1139765e-4a2b-4be4-bd66-b4f4cc2508b0",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3da50e2f-9c72-44f0-a21e-fe67adac33c4"
        },
        "item": {
          "id": "c329c185-78bb-4ef8-8e3b-3f4ff3c22a70",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7f2517f1-a5fa-43b7-a628-19d4755e65e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f265dfb1-1059-4f1b-b0b3-43afc04c7f17",
        "cursor": {
          "ref": "27140d59-f65d-4f84-a2d8-7beb2b777087",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d6630ab2-7eef-4d67-ac0f-70347e5b7c0f"
        },
        "item": {
          "id": "f265dfb1-1059-4f1b-b0b3-43afc04c7f17",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ebfe5114-5d73-4391-9d84-884f42a3f3d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09697c5b-8134-4cf7-afd8-72ba16527fd8",
        "cursor": {
          "ref": "0cafc343-3033-4c27-abca-cd74c9709f39",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "28ebe1b9-328d-4b1a-9265-e78fdd439c3e"
        },
        "item": {
          "id": "09697c5b-8134-4cf7-afd8-72ba16527fd8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "256a33a9-a7b7-418a-847c-d160208fe2bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84dd3220-ec2a-42a7-b85e-a6d11ac6d64e",
        "cursor": {
          "ref": "fe1a9f11-48d3-43d7-81de-2915545ca32e",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "483e56de-aad8-44ff-ade9-24c831fabdd4"
        },
        "item": {
          "id": "84dd3220-ec2a-42a7-b85e-a6d11ac6d64e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d15d4117-df40-4824-88d5-a0b30e68d99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "407a0a3e-fadc-4f87-b74f-db1a84b4a67b",
        "cursor": {
          "ref": "2b857fe6-dd1a-4db1-a649-0d6991763869",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "75d1f8e7-b4e0-470d-a7e1-4e2683a934a9"
        },
        "item": {
          "id": "407a0a3e-fadc-4f87-b74f-db1a84b4a67b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8346d1a9-36e2-4518-8599-32955d095b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82f4220-ac63-475a-8332-dc2e7ed46633",
        "cursor": {
          "ref": "b5215bf2-6cc1-468d-a22b-4ce3bbecd4d9",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2b17ddea-8c89-436a-8303-aef0a179f722"
        },
        "item": {
          "id": "f82f4220-ac63-475a-8332-dc2e7ed46633",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b81872e3-658a-4686-a9f5-7307c843eb85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d97722a-df5b-4276-bd0c-d9bd4fa83b49",
        "cursor": {
          "ref": "045eb019-2bd2-4af5-b1ce-32d8dbefb310",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "03b7665b-a3e5-485f-954a-e406d3eb8937"
        },
        "item": {
          "id": "0d97722a-df5b-4276-bd0c-d9bd4fa83b49",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a45b51ea-3248-407a-902a-09456627e33a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b39ecabc-f8b6-4c0a-9408-98da13de5174",
        "cursor": {
          "ref": "7da1cec8-fdfa-40fd-9a9d-0c7ce2f2f614",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e769599f-3892-48f5-a64c-8eab219639a3"
        },
        "item": {
          "id": "b39ecabc-f8b6-4c0a-9408-98da13de5174",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ff10c0eb-3b8d-4cf5-80df-054fd0bf1235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a1d086-4274-4159-af5a-c70dfce119f5",
        "cursor": {
          "ref": "f3b398dd-1acf-4e83-9efa-2579b8ed807c",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6b0d4e31-3bc7-4251-a0a6-b19f9c735b84"
        },
        "item": {
          "id": "15a1d086-4274-4159-af5a-c70dfce119f5",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "55effe00-11db-4af4-8e3f-bfdc82b9f198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44cf4dc-a503-4a61-a0f0-a8fb1587c694",
        "cursor": {
          "ref": "00160fb5-f2ac-4a6f-917f-c6ccba0cf405",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "2cbb4b7c-1f91-42c7-8fd3-3f734612d158"
        },
        "item": {
          "id": "d44cf4dc-a503-4a61-a0f0-a8fb1587c694",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9ba04470-170a-4eda-876e-ed440be8ae3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4304dbc-3257-45e7-9848-77fcf5be13fd",
        "cursor": {
          "ref": "96163fe4-45c8-4c8a-a300-12ac866e0afe",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "243967a7-ad05-4185-bd59-1eace4d455cf"
        },
        "item": {
          "id": "f4304dbc-3257-45e7-9848-77fcf5be13fd",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a8c9f496-3a7c-484d-9288-c71cec9cfed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f88e6c8f-72ec-49d2-869b-a3105937b4ec",
        "cursor": {
          "ref": "a8f470d7-22c0-48b5-b901-f2fdec108b41",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c3e42ebc-578e-4f0d-a640-bae6fb5d7697"
        },
        "item": {
          "id": "f88e6c8f-72ec-49d2-869b-a3105937b4ec",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a22bae6b-e298-4f15-8538-186694637f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e3ca3e-1d80-4798-9926-e11057ab559b",
        "cursor": {
          "ref": "4d9a64ad-12dc-4c43-b9b1-26059369a8ea",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "18c34807-07f6-40e7-93d0-45833ef37e50"
        },
        "item": {
          "id": "f4e3ca3e-1d80-4798-9926-e11057ab559b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "885996f7-50b6-4822-b012-bef78986b28f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af12d6c5-db34-48ae-bf7d-4655d30b1f61",
        "cursor": {
          "ref": "8f7fd5e1-a29e-428a-9508-dfc6b8d4ed8a",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e8b3e7a3-a949-43e2-890b-b225e609afc7"
        },
        "item": {
          "id": "af12d6c5-db34-48ae-bf7d-4655d30b1f61",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e5261d23-3e3f-4404-9efb-f5a843d66b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20eec9c1-0be7-4910-a544-87af7b61535e",
        "cursor": {
          "ref": "efd59cf3-776f-4ee9-9f43-fb5892f7d5b0",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b3f2cd38-745a-491f-8755-b946588230ec"
        },
        "item": {
          "id": "20eec9c1-0be7-4910-a544-87af7b61535e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "59efd919-7122-45ab-942d-bc8e1c572a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f16af63-02e8-4703-80bc-fad377700747",
        "cursor": {
          "ref": "e7a9c8e1-8408-47c2-bc0b-7c70f4ec73f0",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e7d2ad92-3902-4026-bf97-596ad2fb1023"
        },
        "item": {
          "id": "2f16af63-02e8-4703-80bc-fad377700747",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "98180e1b-f0dd-4fd3-b575-a240e949cab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f93cc1-b162-4c8b-8918-d5ce439ff86b",
        "cursor": {
          "ref": "383ce9fa-bf6e-4b79-a44a-57928b4e2505",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8233598f-1dc2-4442-934b-5e6f4db70a9d"
        },
        "item": {
          "id": "70f93cc1-b162-4c8b-8918-d5ce439ff86b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "34826f65-0778-4cb0-a88d-36a56bec6746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a81b0a1-f43c-468a-b604-b2a1bf17585e",
        "cursor": {
          "ref": "928be523-9498-4e25-aade-988f96c9efc6",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "28869206-b068-4b54-a4be-42e1d55c6e59"
        },
        "item": {
          "id": "1a81b0a1-f43c-468a-b604-b2a1bf17585e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5fc35e32-5c0f-468f-b39a-ef143314c5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6fb0f68-9f86-4985-bc13-e3833f0c98c3",
        "cursor": {
          "ref": "9844b35a-c58a-4871-86d3-87b538980b59",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5b89eff4-9b7d-4b45-b845-900f645c250f"
        },
        "item": {
          "id": "b6fb0f68-9f86-4985-bc13-e3833f0c98c3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "69954ec4-4582-4a38-a726-466f76c165fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "b05d1c51-898d-4d83-921b-9ede87948e58",
        "cursor": {
          "ref": "f95e7275-210a-4fd2-a541-8454cfe92a51",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2c221ce5-54a3-4fd0-af57-076816a12fe7"
        },
        "item": {
          "id": "b05d1c51-898d-4d83-921b-9ede87948e58",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "57a8571c-342f-451f-8f22-e16d2f7576d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "d3205ecb-7e71-4b94-915e-da8007c83ddc",
        "cursor": {
          "ref": "72a69a47-c1ad-4464-b9e5-79bdc2541983",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e25ece93-dfbf-4351-8d2f-a5e892fb18f6"
        },
        "item": {
          "id": "d3205ecb-7e71-4b94-915e-da8007c83ddc",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "aee8639a-2970-4448-941d-28006c016279",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbdfe4a3-cd28-48f2-86f0-32a868e61c2f",
        "cursor": {
          "ref": "522d765c-20fb-4ef3-8099-63b8270e79ef",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "358cb5af-2bfb-4012-af49-f43df71f481d"
        },
        "item": {
          "id": "bbdfe4a3-cd28-48f2-86f0-32a868e61c2f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b901acdc-641d-4ac8-95fc-b424ece8d6fe",
          "status": "OK",
          "code": 200,
          "responseTime": 1678,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ac23e2-7c31-4cae-9207-acb7f36fadb7",
        "cursor": {
          "ref": "aeed39ff-1830-4c29-8291-909eac122e66",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "787a6774-db09-46e8-af06-72efef3b1af3"
        },
        "item": {
          "id": "b4ac23e2-7c31-4cae-9207-acb7f36fadb7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9c54e5f3-d73d-4a3b-b0e5-e7ecf9dc5bcc",
          "status": "OK",
          "code": 200,
          "responseTime": 2345,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "da568d46-e041-407f-aa56-eabdaf8faf25",
        "cursor": {
          "ref": "17d72d47-06cc-4e90-9d5b-3f7927c379da",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "031d904e-5ecc-4274-a3bb-6d7ab882e2cf"
        },
        "item": {
          "id": "da568d46-e041-407f-aa56-eabdaf8faf25",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d1cb6228-608f-4a39-b27f-84f28c141e55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "da568d46-e041-407f-aa56-eabdaf8faf25",
        "cursor": {
          "ref": "17d72d47-06cc-4e90-9d5b-3f7927c379da",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "031d904e-5ecc-4274-a3bb-6d7ab882e2cf"
        },
        "item": {
          "id": "da568d46-e041-407f-aa56-eabdaf8faf25",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d1cb6228-608f-4a39-b27f-84f28c141e55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "da568d46-e041-407f-aa56-eabdaf8faf25",
        "cursor": {
          "ref": "17d72d47-06cc-4e90-9d5b-3f7927c379da",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "031d904e-5ecc-4274-a3bb-6d7ab882e2cf"
        },
        "item": {
          "id": "da568d46-e041-407f-aa56-eabdaf8faf25",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d1cb6228-608f-4a39-b27f-84f28c141e55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "1ef2768b-46ef-47b3-81ff-4f31063bdc96",
        "cursor": {
          "ref": "8e863d53-5ff5-4dc2-9c5f-730fc15f4120",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bf7e15e8-853a-4b2f-8c30-e858b660f6ac"
        },
        "item": {
          "id": "1ef2768b-46ef-47b3-81ff-4f31063bdc96",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "0bba1111-0ad7-47cf-a0d3-d9e31836fff0",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "4d3cf36a-1062-477b-8478-d4a3fd9ee66c",
        "cursor": {
          "ref": "3dc04d36-f9fd-4249-8d6c-1cab5de2eb38",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "42c4d0ab-5173-4b7f-8a03-79267bf6b3b0"
        },
        "item": {
          "id": "4d3cf36a-1062-477b-8478-d4a3fd9ee66c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a9f128a1-7a40-4ed7-8299-b3d88b211f36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4d3cf36a-1062-477b-8478-d4a3fd9ee66c",
        "cursor": {
          "ref": "3dc04d36-f9fd-4249-8d6c-1cab5de2eb38",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "42c4d0ab-5173-4b7f-8a03-79267bf6b3b0"
        },
        "item": {
          "id": "4d3cf36a-1062-477b-8478-d4a3fd9ee66c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a9f128a1-7a40-4ed7-8299-b3d88b211f36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "ec7bdb26-0b3b-4239-bf80-d77bd430f2f2",
        "cursor": {
          "ref": "bf3fa21b-2fc6-4aec-872d-9150634d5173",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "25e0c071-fc6f-497f-aa87-66765ab505b0"
        },
        "item": {
          "id": "ec7bdb26-0b3b-4239-bf80-d77bd430f2f2",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "b3efbd39-2860-4a2e-a7a4-3070eb4b90fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 113,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1bf030c8-6206-4b57-aaf7-fbd535803821",
        "cursor": {
          "ref": "d358c6a6-4357-4bdb-9501-9059f0696c13",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2954ea77-5206-4764-b76c-25f3b05f5bf7"
        },
        "item": {
          "id": "1bf030c8-6206-4b57-aaf7-fbd535803821",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d1b8f4a0-b2b3-4238-b249-e535c45e7483",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1bf030c8-6206-4b57-aaf7-fbd535803821",
        "cursor": {
          "ref": "d358c6a6-4357-4bdb-9501-9059f0696c13",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2954ea77-5206-4764-b76c-25f3b05f5bf7"
        },
        "item": {
          "id": "1bf030c8-6206-4b57-aaf7-fbd535803821",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d1b8f4a0-b2b3-4238-b249-e535c45e7483",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2af7a21a-61f3-4e3c-8b3d-8536c66a6a73",
        "cursor": {
          "ref": "3773b475-3106-4c8f-a3a8-571390f94e2b",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ebdd51f7-8e6b-486e-bb02-62f59097b6b4"
        },
        "item": {
          "id": "2af7a21a-61f3-4e3c-8b3d-8536c66a6a73",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f35e8879-3342-4d7d-a29e-3b3778bd8626",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}