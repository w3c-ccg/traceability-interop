{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "30da7b94-6d7a-4466-96c7-580d43bc3a89",
        "name": "Clear Cache",
        "item": [
          {
            "id": "131a4ee2-f73a-4f26-abc6-e11bd11bf545",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "21ad84f0-1569-456b-90d2-312f73bef589",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "17610a49-d9fa-4eda-bc53-a337c493be3e"
                }
              }
            ]
          },
          {
            "id": "b1454261-860c-4c9e-8d5c-be2cfbc38e79",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d2ea15d6-b874-447b-9ce1-e46e3303b3a2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b18f3a72-7d4d-4b60-9b6f-0113101540c3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d4f1f8a0-765d-468b-9d1d-0706f72c4924",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ac260cd7-9202-47cd-92fa-9626c1a3d2f0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "427a612d-3df5-45a8-969a-cc547ee22347",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4662b8cb-8107-4dfd-8196-a763bcaf403c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "df2a62ef-7ddd-48b5-b2c8-e948087db392"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3ee81279-9b11-4863-a9bd-f8187c0e999b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a1a000cc-c793-42a8-93be-5597808fb173"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e6f8fb97-c25e-4c38-bd66-1cd833e58e76",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "24c9b5f3-ec48-4188-a6bc-be9f56bdeb58"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6fbb8854-419b-49d2-871b-50be3a42c0ca",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3c101048-fba9-43f0-8be7-34c72126edac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "deacd13c-f5a8-4fab-a2ba-68d1eebbae54",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e13304ed-0912-493d-864d-e788fe89ec92"
            }
          }
        ]
      },
      {
        "id": "c875a9f7-6668-46b2-91b1-25720889e4cb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "837c8f8b-6251-4368-95b6-6f88c176790a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "658966aa-bab6-460b-ad23-58ac616fbee5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3b49f45d-f46d-4a69-8267-d7be306bae74",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9443d76e-2b4a-4d2f-99f2-0ff83d2b36ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25ad5ab0-2298-452a-9e05-d5e5ba551209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c839a6f5-6341-4bfe-a9d4-c27a2c4a35be",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c39ac8-d352-4dfd-9f48-0d27286f8ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a93701cf-ffef-4463-871c-f1b0d03f5643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a00c7f5-d39e-4793-aac0-d61419953393",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d127669-62b1-421c-96b1-886d8f85e9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ae9c6a4-8e93-45a4-a3fe-d2fc7d8c1769"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7e31295d-3261-4cf5-a701-64772e59c81e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5d11fa5-bc19-44c2-9972-0b2c76f05fa6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d57e04-04d2-486f-9bf5-9f4e06eaf5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1ec0a5f-bd7c-432f-b90d-6da911425d7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46fff5a5-db2c-4142-a1fa-c6e8f338c0a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fbce8a5-bbe9-45ef-a010-cd316b9f6cb5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a882e624-2a9b-4439-b1ab-84bcf121e454",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dbaf4150-49e0-4018-b989-fed444192f5c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6a32997-f7dd-4671-9e8a-8449c2a7ad5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8976ac5a-8675-44b4-800e-4afa095e93ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01ae59ef-dfc2-4f51-93a8-dec5fd44d95d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "797284dd-23b4-42e7-80f1-e6600040dcff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "083ec0da-e507-4344-b609-f1cea7d5bb34",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "821d47a5-ab40-47a9-a042-5757be76cd37"
            }
          }
        ]
      },
      {
        "id": "b6864445-8211-433f-a2ab-099d59e6ea3c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d7e18693-f782-4c65-ae1c-86ed041c50c6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c3c10d8-5dc0-46d1-b225-4037e37550bd",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9c7423be-8c32-4abb-bbee-9153489e2d17",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde8d301-d57b-4241-9071-5fdc914f6217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "691fbbac-f1d2-48cd-b99a-50eeeba18ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ace1ce-82da-430d-ae6b-5b904cec0b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cad9bf49-2488-464e-9bdf-d80894d61ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207ba9fe-0d2f-4e32-afec-9bb6d58b13f8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e36962e-5950-4f0d-bc4f-d7a07ee0af49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37aced4d-c173-4baf-bd9e-88fba166339a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85de811e-a2f0-4671-8d75-70d479a156fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56a2f98f-a3f3-4428-87f0-945e203fea05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e36261d-864b-4275-b721-bca5ed2c6bfa",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a628235-5baa-4d89-aa7e-85978538ae8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd89713-24cd-45d7-9c55-318f7afb6c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0daa10cc-2b82-4d65-a53f-c688e7d2d6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1384416-798c-4242-b07d-aa58ac35ab5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267e1a78-76c5-4f2e-9396-b2061ed75628",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337222bd-d784-4d2a-8c43-fb2dfe752aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c35e6f3d-0983-4c1f-b706-fd9e71d4e831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689d4456-d803-4107-bfd9-b09e6f5b69c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4df6d3fa-4bd5-4ad4-8f02-0143f215e7af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f25f76a-a5aa-451f-8149-25317f04aa36",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76896c84-b2b5-4e00-90ca-253cc75fb927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56590ccd-bef5-4172-a18d-96acd3618ae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07e8099-147c-4bd5-badf-fc0b1652df0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af20cf15-9f88-4d00-8dd7-a6c78f2d7e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7852c60e-da53-43e5-84fc-ca1a5d570a00",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a458caf9-8641-4b9a-a418-1cd2d95e276d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaae27fd-003f-44a8-baf4-c117a2d0c64a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98328be0-5329-4beb-b6f6-b88aebabacc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43931fbc-a523-433f-9f65-4592e58c5c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49982162-fd39-4a77-9b9f-3b173c59bb85",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989c997c-9a3d-4683-b73c-3947883532fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a68f6548-f029-48e2-908f-b2da0fe26ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736cfb4d-2212-447e-a912-5db84c5518b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8862511d-e6d4-40a6-98d8-d15734bea453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "198e4080-1684-4c6b-9013-b3d6da1e44bf",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ccdf34-e672-40bc-9b8a-de967738a87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d5de7ce-7e93-44fa-950b-45606504468c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aced67f8-eb34-46a3-97b8-175d516bcd2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14ac62bf-336b-472b-baf3-183f2e3f7199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb5cbba-ee61-4a0e-864e-4784126ced7c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "999bd769-5800-4121-a59b-39c9b8fc806c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f233e7fd-dd7c-4938-9495-e1919861f755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b7a001-e16c-48eb-a176-5405a78795e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "356e5282-ef0b-4f28-aa4b-b9ab5fc1a6fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e3227d-22f8-455b-a094-5dce9e0b9b25",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2f1370-13db-474f-a77e-501683b70a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "449756da-b455-482e-86bc-8ffe9ed910fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1cf76b-c14d-4d1f-9bf0-9768774f4f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b40e630-6d5b-47fe-b726-ac719baf9106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ea6339-1715-4046-991d-5f6a70cdb7d8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5d88ab-fc3d-49d0-89ec-f0804c07a74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f9bd3e7-24c5-40b6-a5b0-60133edcb333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dbff8f0-3c0b-4895-8546-f925279f6c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00417a75-6f8b-4ca7-a1c7-f96451d5a870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22e4f0f-7645-470b-91bf-c356241c050b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32bcee9b-2eb7-4878-9e1d-cad47c44dd0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f79ef3e-2197-4afd-b3c2-418d4ca1871e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f95d5b-d20f-4550-9b0c-964bfa3264e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d3e2184-2b66-4bbb-bda3-96a367b0b2bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8abbfa51-6a51-47d3-a071-176a4a13b455",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0d5931-a2af-4e68-842c-79982077277f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e50f1012-97d5-4ecd-92a8-f256eaf28826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32b4c65-c5be-48ff-a6d6-515769c56612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0c19c7b-79ba-4b2e-bf19-2e40165fb651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46664462-deeb-4a09-8878-38a8791f7330",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96132073-d0db-4a5e-b73d-c016421b0fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f7c21a-4c0d-49df-8a6f-a7f123cfa8ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10659f7-69cd-4d40-8457-da8567890045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7962d030-e6f6-4d8a-a12a-180803022a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9332f402-0d6b-4dd6-8cc9-a258e2720a58",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3f9f84-7e1d-46f1-9c1a-188e55235060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b7f9c09-5ebc-46e5-939f-96d658995009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7897139c-cb0f-4790-acb4-7eeea76cf7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22e452c9-7fde-48d2-9e5a-9990da70b94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f82bb8-a985-4cb1-b4d3-457416a27f3a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d56ef60-d351-4bcc-9a19-b6b996649996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c51ceaa-1efb-4d0b-866e-01cd8f845f82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b72a353c-d649-496c-bca4-c63b8cfcaec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb3a4b56-6f64-4e15-935d-bd9456bdafe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8875394a-69a4-4451-9fbd-825ad4738e03",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb60ee77-992e-42dd-b7f6-0ca858cd098c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221ebe7f-8bf7-4772-be49-3d6114a04db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceefc9a0-80e6-4875-a9d3-b9561f99f61d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82bf0ab6-d2da-44cc-9a6d-874ded636382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1b619b-fcf4-4032-94c7-acb28648210a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d6057d-06db-4e0b-bbe1-2ed2a84df5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a92b71-651e-4f43-856b-eff8421f82bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7118e7a-7b9f-4f5b-86f0-0a87933a198a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c00335d-9002-4ce3-96f6-1628f6e1fc0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b505e8-7bd4-4098-8acf-7dda128a30a4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4cf8d60-d71d-439c-b75b-5e3da313226a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911d6089-b81a-4388-8bd8-6daa77f56353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c567273-fe96-4edc-82ca-df13db68fb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a272acb-037c-4ec3-9efc-18e7c7625c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5fb282c-a5b5-4c69-983f-2b1bda7dfb0d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99719c7c-bd97-4f9f-91e2-48ede4462a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a99bb038-57bb-4303-90d6-f7253ef206be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1472bcd-adf9-4075-afab-df3a1cf3d6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "38288a41-6137-4e7c-9ab2-4f9e2e2e6265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9199828-7d86-4343-b2d6-b4e5f01d491e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "534eb299-7ce0-4858-b96f-4346c48f994d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d06142e0-7979-42dc-835f-2b3a63670eee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a02dd2c-532a-481e-a8ac-e0f1af099eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53065b80-cf0d-4613-b2d3-bf3664550b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf35d76-4371-410e-860b-a53fd1abaee1",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6d8730-e134-4f51-9740-5fa213e8dda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "352d807f-3c73-49a4-9958-5412cef62766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c9436e-bb72-4dfd-8d70-8f4563591d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "61e78182-018b-45d3-b96c-dec0c0185e01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e969aa-6ed1-4d87-984f-51f8407e50fb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9c8877-28fd-42fc-8ebd-14c8660b4ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfce9ce2-2c89-470f-991e-b4bea674c1c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20fb32dc-426c-4d51-96ce-46e9064cd57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "54fe5f5f-bd2a-43ce-9835-ab11e5ec7c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96bf2689-2008-42b3-9a3c-0ff5c5f58854",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5563cccf-f1bf-4478-970e-9638cb99a04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd1c4b75-7ccc-44ff-83a1-8207e5861517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2a2735-fae8-400c-b3d9-448f3b07c7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "be1886c3-fe6f-4ec7-bd58-f6bf9d336ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fbc9be-9a91-44fd-90d3-3eec3725653f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1e78cc-d57d-4383-9387-4281a34633d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92b41d0e-a05c-4661-b94e-59d797b305dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c25d90c-f851-489f-aa39-423b029c4675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5aec47ae-bd59-494e-a2b2-50b15287c879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439a8229-a71c-4225-9265-74f34ec536da",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "041bcb0c-c517-47a5-8313-171459c060f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263a74d0-cbae-47d0-9121-130ab0d0bf44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b178c13-8625-4b7e-9deb-412d0b60fd3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffb7f3be-f1f1-4fd0-bf5a-0ae19553345e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f9f037-d546-4674-a27f-963ad804fa89",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64835f37-afde-4b6f-9964-e0ed925363f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b356958-8387-41ba-9694-62a53c79d119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f6eef8-958d-46b5-8503-0a79b1b74bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b375a2b-7100-47d5-8e20-4ad6dfda179d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57c553e-a7c0-4f1c-b874-a8074d373979",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bcb5e6d-aa01-481a-a746-4468a0d09744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57b1493-70c2-4497-82d7-f506ed2b839a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e078ff-df49-4789-aeb5-39560c9bd572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a2ea68f-7209-4565-b492-228b80c84e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d44ac86-d4f2-4893-82d3-085c8a380d9a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8186bd0e-7b64-4144-ab6d-eab7d9018788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f535fa6e-53f8-41cd-afcd-c9d999fedbb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77424b0-662c-49a1-a642-a2211d99d272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e61816a-75fb-4f06-bf66-ca17600caa5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fcc471a-a37f-4607-b81a-052c0672cf14",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b71a5c-34d4-4ecc-849d-25a9f8cf6356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "206e5832-8c76-4505-8069-8083ac03468a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283246ec-b8f0-438a-aae6-f94991e1ae93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe4b9893-47c8-41ce-a888-b335fafdd56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2704ef6-50ce-4df9-bca3-5ccc0d3572af",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6dc851-4ed9-4a90-bdde-c4c7869ab5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae97ed5-2191-4b46-80b4-5b49aebffe4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d123b439-53c8-4e22-a779-2cc090190600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4cd8b5b-8669-4a04-aa9e-3fc3609cbf89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23033f7d-0b40-4aea-9f43-a8e891438e12",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ae3d43-b128-4b77-88fb-85446a4db3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6558b63c-73b0-45e9-bed3-68dd249920c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40094f31-c0ee-46a4-9f0b-b69fdf76db74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba948731-1608-4f6c-bccb-e82d2ea99f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68bef0a-57de-499b-8ceb-9c447a8ac7c7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05ecacd-b029-4884-be6f-95b52c79afb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecc61d24-bc3c-48dc-8b57-120840236ac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2497c7a-77f5-4cd3-a05d-7a624116ac63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2864c332-cb79-4db8-a638-163bcb7ffa91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156278fe-03c4-4bd5-9cf7-6bb06cdcceb2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29bde984-d579-4809-b905-46cbc17cf9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba50c01-625a-4863-9383-eb8982869413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f308ffd-c70f-4d0e-8007-7d00eabb715e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3397396-244f-4dc1-8bf0-f99796531cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e5a455-8c3b-4f04-824d-621ec8048fd2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7002c87f-eea6-47bc-bcec-1a72482c4a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b5cae48-ae60-46a0-aaf9-38ec3741e416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb6c936-ea50-4cdc-9743-e8c8f1f38408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7dab9ef2-58c8-4d00-bc7e-38bb9731b347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6634264-71e7-4e7f-9ee0-304b46e47c83",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2718b11b-4ccc-4190-b3ca-b91b2749a6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64687cae-58dc-4482-bd92-0edc27c286b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a837d1-d897-4931-891a-95520fc972a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7096946a-1cb2-4253-9ecb-debd18e87ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb92349-507a-4f51-9153-c0f51f3ab409",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c12badb-a919-4af7-b50a-b680bef9c8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd05769-3c0e-4e51-a839-b05761e50ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9449153a-3066-4e61-bfce-112d01917fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2484625e-6cb1-4c65-8ce9-3cb57547c1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b51e732-4dfa-44e2-9b42-80ea7e9bfdea",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80435d8-810a-4f1c-8903-5640fe702369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cf7f6cc-1eaf-4e8b-a272-b87aea19b0ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d17807-23b6-425a-99bd-2b4d91f95b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "950282b7-30f4-4d84-9682-0a9b80a42395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aca6100-3b50-45d0-a253-57aef3ab9fce",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df126fae-34e9-4bd1-a01d-92a47293f129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c57d5159-5fbc-46d0-aa79-8f668685b887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67d174f-b3e8-4ee2-8002-6f4bf4ff48e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8610563-b3b2-4687-9b54-d6e6931805c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ed87a0-1377-43a3-80ab-81865186bab6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71d56ab-809c-480f-a24f-28f4ce15ff60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0df5228-c36e-484a-b5a8-6cbb47c0793e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7af436-b05a-4a7b-a10f-282b9a253862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f99f6148-274f-464c-beb9-75d4aa990aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ad8454-dd67-4c1b-aff2-5570186ab871",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1e97be-e6be-4525-8650-19863982e1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "244d52fd-3972-4bc3-8a9e-e35d5acafc7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8730fb8b-d3c3-43dc-a41c-618bfa774d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbd713e4-01dc-4fed-b30b-52972c5fb942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b44ca5-d515-4c6f-ae13-a1a6cf626654",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3fc9f3-9198-402a-908f-fab77d23f7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92b26571-9364-48f1-a9ec-eebaa583659b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af3be2d-04bd-4b37-9c53-5bd54ae0d80f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "22812ae6-bda6-4c74-8423-e198d0d52be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47134cbe-cac6-4ef7-add3-886fa80d0b35",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051934e4-67ab-4959-b4db-987fc34b59d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca8e810a-7688-4116-97a7-1554645eab5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb12f4f-f939-474d-bb90-d1438f905263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc1202af-e852-4e6d-adf9-de947061c69b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9652dd-f9ea-413c-905e-cc3b65ce385b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efbfbb5-5ba7-4839-aed5-c1ea01ea0074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "748b6418-3dad-482c-b346-dfbf00689137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51e5d4f-79c6-474c-94f3-e26db04f5cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "64c47e54-6f2d-4bd8-8bd8-908f522f81de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2694781e-fc40-4398-a870-ccc0fb78a543",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e19cd6-79b4-4429-b725-40f918647a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9c7606e-8320-4524-a159-1d505342c091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2ac763-59e9-4acd-afc5-14711148f878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "df9ffb6d-d631-4765-9bd1-0a6c57283290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51ca93f-3056-4aa1-9fcb-eb6790df4e4b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b2588a-d715-44ff-b662-dd54c9c677a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47b5beae-a18e-44ac-b935-94d2dd19aab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec1f610-b079-4062-95c1-ce79496a537d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "203f49b6-401c-443f-bee3-86bec892c125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1aabd3-8202-400d-8568-c9a85c8b03d4",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db42c3ff-a8fe-4d70-b50e-da9067dafd75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceb6f027-342d-4ac5-ac61-e242009ddfe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9ae961-5f46-4d16-b150-9e238d880b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a88f918-eb41-46b6-8afb-f536f961af22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cedbf71-70a1-4807-b4fa-e27d32fa2bfa",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23577254-22cf-4aa4-8da3-bd48922f5174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43fba877-799b-4498-a880-370a3c94fef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eedb9a83-5faa-4138-98db-747db6aef6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c2da5f0-6272-4bf3-a974-54c90a776a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1e9c05-f606-409c-90b3-c2b1512a865d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb470f8-4a9b-4890-a595-92c37e566731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0aaa6c5-3d79-445e-83a0-6110d5ff35f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28638e2-74a3-48c5-9bd2-695ff67caac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "06d47e7d-f3be-4dd6-baf8-e2a469aa4e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af71171e-720e-4b85-b659-48334e7e9664",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85205bf2-bb35-4495-90d9-84da748e7c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f26fbcda-42e4-41b1-8921-e6605d8bd0f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e439732e-788e-4f04-9dbc-4f6bae3f66d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4ba9f8f9-4ee1-466a-aecd-03813d8d913d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20b6272-b533-4f90-84ff-7f823bb52661",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46100026-a936-4600-99c2-a62b508ac1ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4b3af22-9a6b-43dc-bc7f-2ae393ae19e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd53978d-d383-4891-ad19-9ad88f68e68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "174b440c-52e2-4122-a510-4de444023e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca6266a-27d4-46a6-8d27-92abcd0a85a6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8407f4-abc4-4a2c-9f5c-8f7c14752290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42cb1f48-7a0f-4f66-80c6-888da445cbec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e842fed8-067a-4368-83e1-92740f00c401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cfb2d79-b078-4cb6-b30b-4c9afd50ca37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac33118-70e7-4db2-a093-6987904b0dc5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90df20b7-4c83-4b53-9b9f-b858198ad881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6db2bb43-273f-4af3-b57e-34cac04a2ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91691f26-a1c9-4648-8320-af2bdb651dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef86619-9503-4b20-ae19-1d1983e0311d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f3dbee-fa9c-4522-8d3e-daa06afb65e7",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ef6282-b77a-4591-83e9-68ba417c4323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74e1efcf-ecea-4590-89a9-13b48ed96a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871dbf1a-a79f-4e27-b8cf-504e4a41b206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3715ffb3-b30f-4709-97cc-7793bf92d2ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c97542-ee7b-4577-8267-00318700544e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea0c33b1-cd89-4359-b353-633d8ad0ead8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d8142cb-4988-4c66-8a69-4452d7801213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c83a8d2-aba1-4218-8581-9e42cd224e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85f60bd0-9ad3-4ec8-9d81-4647d1ff740e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2579bf2-38e5-49fc-b7c9-340407550231",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd1676f-ff17-439a-9981-434a5377fbd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c0c7e7c-136d-4c30-bff2-49d3bd80c4f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce6b5a20-7f6f-4ed2-b86b-3a486d4a74d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "35269e8a-f97e-49fa-9a0a-0964cf685b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f268f94-8801-452e-9825-4cedd2b660ab",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69affc93-60b6-4ab2-bf3f-6d40c0069195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a1634c-bab6-4fe1-bb2c-305a470e80e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08c3a85-fc69-455b-a410-57d858cf9ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "896f8975-7415-402c-9d15-4beea934cda1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bccb107-afd0-41c8-9c77-efe0e72133a9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06914bb-b3df-4b93-a023-08b98f1766dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "914c3e14-6d76-4c8b-8e75-ddaee207c41c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0616ee-ff8b-42a3-a33e-35e445ddf4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b87867a7-9d57-4f92-94ad-29b0ed32849e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71e163a-e602-429b-8ed7-636ca5c50680",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafea7f3-f77e-4c6f-a4a6-48de7ee274b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af310d5f-ae01-49c1-9234-48a606307368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6968b4ca-c85a-415a-bf2b-a736f0de9e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b64f0fa-e596-41be-a014-d2f80d6a9b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afbfbd2f-4add-4747-9f6b-6a321fd8d5d1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d3cbc1-33ed-4076-ae6f-363d20b06b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ceda726-48be-435b-8ed5-d32b7504ec51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04057e40-e205-454b-9e59-738f5506b1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "46f86852-6a13-4895-8f71-203ba8139383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a81b4d0-d8dc-4964-9bd5-6da22f95f021",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76d59e5-bed3-4c67-8eef-974962c3ea79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c24a0501-f375-48d2-bbe3-25a554769b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94132488-2301-41e0-8f23-6ba7e8181a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1dd10ce5-823e-46cc-ab0d-076d11fb42eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656693e9-8396-433c-baed-5af100aad54e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe68aaea-9842-452f-a1dd-340b421740cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0dca5c1-bd36-4de4-aff7-cecc26b1f51c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f48b08-1b50-4eac-81f2-a20a564967e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9587053f-affa-4a0f-96c7-75a902445f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0f6d54-031c-4e65-931b-17253d401fe8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e436734d-6c7f-4156-886a-fe716bcf7dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76bec8bc-02b1-49f0-8464-6679101d192d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac64e2ba-a5af-46df-a664-e6b4f2090301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed3de12-ca70-495d-bf28-39a309f71da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0cfdd8b-bb30-4342-9b1b-a994b1f5e07c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3b1738-3799-415c-9a45-17d6337eff4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b030313-327b-45ee-9cf0-549d8350fc82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca685179-b983-4701-845d-01427adbe4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3195afcb-e9a3-41ba-a2c5-dc13e702505a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f69985-de02-4953-9010-4447dca757e1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4876538e-cdbf-4f88-98b8-e3a8915695dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e0524a4-a253-49d8-a8c2-7044d85b25b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf875d1-2060-4113-826e-5c5c8d0ec888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44535fff-84b1-4d80-b9c4-ff18c75beee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed763abc-1ddb-4e48-911a-8b1d0437f16e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "843f97fb-3a4b-48e6-b123-b7ff45659507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f2b196-a42e-4ab4-9cf7-a6ecd6d652fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138bd045-b3ad-47d0-8959-2d3d1fc42c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7278f68b-54e1-408a-8c49-8956544924a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2279f768-1085-4715-8644-94ce97071949",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5d013f-4732-4cec-abba-93518eaaa447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d191a8ce-2151-41e3-8e52-3f406dec7edc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca7e1ff-f643-469b-b43a-00505d40d030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b508b4e-ef13-4164-a242-a2238af70557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4ea2d8-7257-4ba6-a511-5455a4546139",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1651d02-1a01-4efe-b2b0-61022ab2e855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ca3526-f475-487e-8272-961bc7b074d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d8e05e-8e1e-40d2-86e2-f4f410ac31b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b92b3400-26e2-410d-8624-d8b52bb9fe7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc104601-192d-4a23-825d-415245878b61",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffbfac8-78c1-4a70-89e4-99dd9115c412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a06731-6709-4092-831e-3158c48ff9d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d9aa9b-a7bc-4468-aaad-e216b36bbdc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "521cfaab-00f3-4341-ab28-60d10baec2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed45483-cd16-49c0-8b10-91494b130781",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7ca063-4ba6-4526-ae34-1c8025be377c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb270cca-5989-4e8f-a357-ed86814fa4f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61794d6b-7321-45a9-88af-d0f7688cf34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c95f5296-17fe-4652-9811-5997899d0034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c6e16d-c1cf-4cda-b9d4-ceb48fed5eac",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3bf772-c55c-40c0-b8c6-da5c9d7cda51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f36bc16-d1ec-4032-8903-7c30a7285ed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8a50b5-85ee-4838-ba4c-57afe4f11dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71ea0bd9-d35c-4fcd-80f5-085b2e4efc91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b179b84d-f1c8-47a8-aba8-c4aa395f26f4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef019790-ab6a-4b95-909d-91e1899c40b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d42de73e-ff3c-47fc-b83c-13bd715689a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1eff1a7-5a51-459c-b901-efb154a86195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0c5e9a4-7e7b-43e0-81d4-90087956cc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b6bae0-a018-4410-a0ce-a9418df258e9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d983a7-1801-410c-9987-bf7d1cbea347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a4bf9a1-91a5-4ace-871e-cfd248e20193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c4819e-eb68-4851-8fa2-f395bf6ad873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d24a384-43da-4f69-88fb-3cc63168be9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6666412a-9e82-4662-b3ae-09598b0c9c7d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf159d0-1087-44a9-a963-4b90a38791c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "049dfa66-e583-4288-b58e-8e13e884c812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531b94b9-e366-4e7e-b7ea-10ae5c528ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1a705486-4da1-4751-b856-ffccfeea2a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3327a7-8591-4049-a894-cfae824df415",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be741e7-d1a5-4be4-a5b9-83c91dce7d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "463ee915-7a73-44e8-8ac5-e745de95c6be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32503382-c75b-45f0-893b-d5ef7752839c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2d05546-5fc4-489f-8e2d-699eea966470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de6ef75-f065-4c2e-afd7-80639c79eeb9",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b5a4137-3f2e-4035-9883-02e661bb9ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ca7c43e-f216-4cd8-9817-c66f570bd9bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0c988e-bcac-4df5-8038-a3bfa8d7f905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b6c2699-57c9-4446-aaf5-c42a491aab7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a86a14-3fd4-4ee4-9e6b-aea8d0540c88",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41239c8b-d417-4f0c-a637-50c2d137e27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47b0e73b-fed5-4d10-8846-95607d70fc30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ba16af-9f4f-4953-a494-9d87cf327b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "37220880-dba5-4218-8100-5f6317915c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b940095-6e96-4c4b-bfb9-5b06cb55ba10",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a5548a-4e1e-4dfd-8ebd-c0ccb329ee28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3865153-bd3b-461f-9485-6cb93b0320d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994a21b9-d81a-4dbe-8a54-84e919725ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f025dd57-3a8f-4c0d-8ef5-61fe1c6863c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13779b8c-9ec8-48b4-bb93-c4f417d681c0",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8483dc74-34e6-4e0b-b70f-70f2461c6b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaa34b5e-685f-4007-9c02-2f762c4f7e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e019fb-29e0-494a-9d33-4a168231db25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9558bcdc-9a1f-44fd-89ef-edda4a6d98b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e651a9-f417-4561-a8c5-25a31da195f1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a1f92e-1636-4a76-b09a-21790560d941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28cd93d9-ca9b-4306-9891-395fdc86ccc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e950787-d3f6-486c-a2d7-11a6c62d122d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5f90d29c-9cc8-4dd0-b352-dae7693ce90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94db6eb-b621-4117-a813-005a81e10f61",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4195a443-ad20-4533-8374-a74b7747d62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7943b8d0-5fb9-4391-a99d-1add037049f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c994a450-219d-45d3-bbfc-c428b17c5994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "52c295c3-5ff5-4a01-a9d6-ea13a2109efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b56b415-1f72-4c11-8f96-655876433447",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8712626-8ccb-4d68-9d5b-c37d1d21e075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab99f73-5448-4649-a886-73ed880a579a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d3edb2-684a-4bce-bf7b-0a02cb56983d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4feef4c3-cfb6-4313-ae8d-69602b810734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c761097a-2495-4047-9c86-924002d7c78e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "778a22b9-2c4b-43c3-8ced-37f6904f1118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0ce2a62-a293-4554-b165-9dcea5a789b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e86abf-8f71-4ae2-b8f6-b087e56a2955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e708b7f8-337d-4e2e-9f17-1f090b1dfcd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61f5bb2-c27b-4876-a4e0-48d38382b940",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc551725-4e48-4bf7-93da-fc5e37c93916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a84adcae-4865-4062-9f33-2608b1e2501d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1ef473-606c-48b3-be0d-dd0769dbd8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "832a0899-09fc-4a30-8f31-fab8e4c5d4ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997c9425-5895-4d1c-b0e8-82b607796490",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7be33ca-6d35-478f-8354-f075424ff3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8bc0af5-482f-4b75-9ed6-18280761d529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a828ca-be2b-4444-9068-0913ebe90913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b1ffc7d4-7955-4a89-90cb-14eab7f8889c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28d7284-dca9-4a62-9880-5d984144fffe",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad2e6ca-df33-4b30-8f42-c3fb529bc5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaffa390-7ffb-4748-bbaa-67cb8dc33dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3da2259-c6f5-43c3-be92-31ec44605035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "63024c1c-3a69-4116-b853-5337733dcbaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19609829-2bb9-4711-b10f-f877ea7cf5ac",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7815b73-b71c-4617-83ff-bc91c93b9b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fde68bd-0bc5-4506-b781-c7425476f302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc27dc2-26e3-4eef-9a07-03db0fa118a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc2ce53d-46cd-4f4c-82a0-4feb4012a573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1835e3-2d97-4c45-8501-5c995cc478ac",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60f8baa-833f-46e1-8183-cae98410264b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bbcc2a5-fa90-4196-a426-cea946e815ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b82c68-cc95-4e54-bbf1-54f3df4415c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "30b4e89c-5d76-49c7-bcbd-bedcc0f70741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455800de-50ba-4102-83c1-0e28eff999e1",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec58280-91a1-4c2f-a64c-c14f821124d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6afd6e49-638c-4388-b5a4-8a5f5bd4fb1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e0f769-ed7c-474e-9d08-0aef588666ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7f263f1-776a-438e-86bd-5e35baad5499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188326bc-ca0b-4dc0-aaa0-2e8b9ebab501",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446f1210-bd28-45c3-aa9e-df66900a0d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a49e9c95-9ecf-4749-bb2a-2fbfbb29cbc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b327b27a-a352-40b5-a1e9-9d27d0e129d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e756b245-504c-4489-b9f0-ad3f20a67ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b9412d-fa3c-40a9-90c0-f067480fad63",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d08b21-9a63-4790-a476-207f643e6084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a651898a-ce83-419f-ac9c-55aa7e8023f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af22d86-b6fe-4250-b4c1-89b2c301f227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ca6ffb-b19a-4638-aee0-f9c1585edd72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab4e31c7-23f6-4ef0-aa45-c87bcb7d5714",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f30236a-d73d-4e49-9ecb-97146b583896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "de7b0805-0c75-4c85-ae32-a4f35d100540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caab0cae-f41a-4355-93c5-a0e44d653a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba1a4069-9428-4c51-8017-3619749b9160"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "71a0f1a3-2dc7-4272-a89d-3d0027c04d59",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e75268f-c1e7-4171-991e-af1f4f5a7b15",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c7cd2a-ed3a-410d-b3f7-0ddb7b189316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8adb04aa-da17-46fa-aa56-a20fc1f86ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc712d91-1bcd-4254-9102-ef28537fb054",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4bcfee2-2340-4e30-b5f0-eb88923015a1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0025228-7fc5-482b-8af0-ecf138104be0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ef3e1cb-b2b9-4e51-9e8b-94b32223d0ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "67c2f5bb-4b03-4f1f-83c6-37e5092d58ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a89c3fe5-2627-46ac-b1c6-8eab4ef36a01"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "836716ce-7e30-4a81-999d-382b2f8f2a51",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "635dd004-1a3d-477e-8880-61ac16e00ac6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1344c732-65a2-49ed-b1ca-479d3f776238",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "55af327f-174f-41e3-a09e-9a339e9ef41a"
                }
              }
            ]
          },
          {
            "id": "6773e4e2-909e-4d85-b88f-2ddc872c755d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "78ac47cc-78b5-4f42-8f65-a3173731c2fb",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "ff648a32-3e09-4068-bb69-5d447cb73873",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27f1056-d524-4959-9c58-7fef1db7d170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "689da836-eee0-4474-8d90-1fdc416e398a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199dce0e-58e5-41b5-b233-763a4a41fe27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dccfe47e-e7b5-45cd-a529-cd35eaa3cfba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a06b9f66-0d60-4c3a-87ed-75aa25bad9b4",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbf6076f-36b8-4b20-88f0-07e26c3fd227",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5d0e897-a0c4-4f12-8128-3fe339a17804"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40496296-f723-4136-900e-68dc89052d1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f8908032-09ec-4bfd-924f-df5bd8913a79"
                    }
                  }
                ]
              },
              {
                "id": "ab6331b0-4565-4886-8873-4fb29352e7af",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0aefd69-fa81-4234-9316-af5ecae7128d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5e80cac7-09ab-4f4d-b3cd-2aa263f66e5a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "691f87db-5969-4a3a-8f69-8412bf999d28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d941e027-c027-4515-95e8-dddb714e7fc6"
                    }
                  }
                ]
              },
              {
                "id": "32304315-74b8-4d99-a9d9-5061a8b42344",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b07c0c8d-a5a4-4942-b86f-6e16d3402b72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "57c8db48-a677-4033-8914-9f354f96322c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdba7f8d-abf3-49b9-8310-210780698945",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "500f8772-3c64-434f-86da-d6e989b76805"
                    }
                  }
                ]
              },
              {
                "id": "30461dc0-3efc-4c25-b162-cec53305028e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbdd686b-5369-49cf-9db2-6c7baf5158b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b0177c9-258f-4c14-8f2a-51d767bd8a57"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b1cd7f4-e3da-4ddc-b781-5e73c516b1a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d98c72e0-6d83-4b29-889c-314f05337f0b"
                    }
                  }
                ]
              },
              {
                "id": "36d441b5-cc9a-4d23-a4d2-496cb46754d3",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "444d4f71-124d-416b-b282-1629fef3cb06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d9862af-054a-4b94-9531-5fb40b47eafa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0bb94ad-e815-49f8-b943-8f32d8052e17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e0fdbbdc-6eab-4fe2-9410-e3428fa5f4d0"
                    }
                  }
                ]
              },
              {
                "id": "5c5a9aca-e5d8-426a-b16a-90fb98150d04",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "112b96dd-3b2a-4dfb-9b7d-adb937f2151b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3721043c-a4ff-4df8-a72e-d85df011763d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "739d0b28-e4d1-4485-97ba-bf7e14728dbd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4bae4415-2ffb-457b-b5c5-e770a7a35794"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a58d8f52-7b11-408e-be46-6a8d8eba69e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "07ae129b-7a0a-471a-a409-5f63b7c134b4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8d55e767-3015-4a14-9bd4-af0fb341d356",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e6519e9-a6e9-4db9-b8a2-28ed4c6a90f6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e01968d2-e6fc-49bb-a3b2-57bb1dc21e3e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a784b81d-3dab-47ad-a456-6930cb3f48b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66aa3850-2f13-45a4-b259-c4c726b8b1e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a40d894f-ffab-4ea3-934f-5709165df2f0"
            }
          }
        ]
      },
      {
        "id": "9a53ae72-ca59-4831-8640-8123d773b3a9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "cc0e3f61-b503-4839-a182-d33687b8a23f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f615716-bf98-4296-8e33-8b5db270fb1e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1aac672c-0124-4224-a923-01de13be9915",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49bfabf-271b-4d6b-a462-e0c31455ba23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e39e815d-22c8-405e-bdfc-3c4aa3fc3004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e801369-c692-4615-9d5f-46ef9a92f92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd007d67-46a6-4080-8796-19d1fe88ac48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a0ef0e-3ced-4f26-ba57-65ebfeef0de7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3083fcc6-ee83-4889-b37c-e8c34cb6a744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5048d8c-b5d3-4559-90be-e1f36e6d5bb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03c21cd-4290-4973-9c33-94ccea5683af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "18e870d1-e004-4ea6-9b98-5293bac6d3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3cd439-2b01-4d2f-b451-dcb2ab2186e1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a61667-0181-43d8-ad8c-b981f0562c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32de1eee-87dc-4a5e-8274-6d369839d9ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1bbd45-21b7-4f5d-96fd-a458f4d0a28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "51a7f9d0-369e-43d4-b07e-50ce0292db94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c580cc1c-6c0d-40ac-9f8b-72fe85ec5eb5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "293eeead-ddfc-4091-bba4-7f4896d83295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "951b16be-805a-45cd-8c30-cdb1e9d59515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53bcdc72-cd25-48dd-ae2c-5e1cf7b9f238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "14dfc164-c233-4b6d-983f-ac656d5477a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34373046-ffad-443a-a014-100815460279",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39e88ce-7aab-45d5-a641-f110c0930ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d87ad24f-e43d-49c6-a2ae-3739fa6806dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca5f773-3e20-49c0-927b-dc275c7b2fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "217d3470-03be-446a-b776-8ade49b72c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d862f0d9-625b-4173-b56c-36bee16506ed",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcdd7d9-0f5b-42c7-afd0-a237681c7222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5699b0ca-6f91-44ea-ae6d-5797fb6cfb9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c37c0eb-c30f-447f-90a4-b0850ff16f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e712ddb2-1701-4f8f-8138-d07260abc313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a86b9d-f3fb-4478-b361-ef63fb0df17b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162806e8-86a0-4370-9d64-1dd4c371b2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a8282f-585b-496f-9abb-f95894d2bb42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e4164c-648c-4db5-8079-ca041ffd3ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3c97d6f-fa29-466e-8a1f-de39d98d42b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d0eeb4-6560-4422-b9cf-5e6485385fa6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3caa634-34e9-42fc-bac1-fe24fe315b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07250685-c24b-4c3f-bcfd-19fccb058ef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0764a0a-4372-40be-b858-f7730c5fc2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba2de81b-c362-4b52-8970-1f85878eae53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f62c75-b614-4519-8df3-78e488f2a72b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4647b5-4b9f-438c-b2a4-05dbe32542a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de883aef-7e0d-4251-b6e7-ad392ec0135d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33444566-e550-4f3c-b540-292cfe1b683e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "995690d4-74bd-4329-ae17-7d1a757f6273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0171f64d-c032-44f8-b3ea-0e9516f4223a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41f5068-6ce1-4de3-9d3a-a8bc7a72fb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "296679b8-cb26-4a4d-85de-8f0e517a1030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64e9e26-2ef5-42eb-b1c1-4f9588b7bcee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d6a8601-df5e-4e03-adec-72d223f8ea18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8bbf4fa-b94d-4cb0-9f4d-c6d89352e06a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c4a076-c544-4561-ba9f-baa063efc972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "896bc045-face-4d1c-86b0-8622c97a0811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda267f9-2835-4445-82ea-d719165e1c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8d4b3a79-db0b-4dc3-8ef4-b9b604a8f000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16990b1a-fab4-4ca4-ab9d-817f67728480",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "703c67cf-551b-44ff-87e2-0bc321bf10c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17012ebd-fcbb-476e-8c97-1dbcb5103a99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a4b3d6-d5da-40d2-bddc-9439a96bbfee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5a02111f-204f-41c1-a6b4-b679b6b67226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e55ae3-7a7d-4cdd-8301-d4e43b6de5dc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9487563b-1590-4e06-afce-2e35c1443318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e03c6608-7255-4aa5-9aeb-6f13cf30e132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e0f97db-926c-4626-8b18-cc6746c0f99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "68d0f4f1-81ed-441b-a5dd-9e84ff714094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd91dfa6-585c-47c1-b96a-1b6f7377bc3f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1d3c1a-8ed9-444d-99b3-d5850e8f1db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "389761f5-df19-43c2-ba32-4a8df634dda8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8b97a4-e17e-463b-b498-8cc39934bcb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2808d6a7-169f-4051-8db1-e9fd4496014a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5046cc66-3054-4a63-9e23-2302ed0c51c7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf0cceb-4307-411b-a3c9-5b4b20242db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c92c1ab2-171e-4b6c-90f0-3fed076af4c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4700ddcc-c10f-4e19-a369-c427daf61b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc2912c0-f3cd-41b9-a87c-e761406de77d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b290a0e-7305-40ab-8476-d55496231442",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9b0cfc-01bf-461c-982b-8beb37a9e7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f11db94-f36d-4377-800d-796c2f65760a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9494d21c-f4dc-4f60-9a63-68f08bd42de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "66c8745e-a7d4-4315-bfa5-e6a4b8f26f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db19dfde-2adf-43d3-ab75-d35bbe348018",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5615bd-edd3-44b4-a035-b951b34897a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58aacde9-4fed-41e3-8225-024c4481e576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1144343-4b74-40bc-801d-bde8c9119fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c1f2806-7060-4c47-a56a-30474b8b28a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad21e38a-cc04-44ef-a094-b5c4b2916c16",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3130390e-930f-4453-b93b-bd0941951970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9ed727e-33a2-491b-bff2-eb09f20266e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26acbe0-f75b-4c74-8d86-60ec42c47cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a794ae8-60e1-418f-88d8-9ab288b8b999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7974297-ddcd-4ed2-8747-fff3e90c4a8f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9cda9f9-c56e-47f4-8112-39990dc30403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc41e4e3-4b4e-47df-87e1-c81a06e379b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e30b50-ab82-4034-9b6f-f49df1b3ddfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81f84296-6fd8-45c8-a428-bb951562dd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23499fa-90fd-44c2-bdc5-e4bcd139e0bd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70795c1-2b33-40e6-a713-8a62fb5fbf2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e220bf32-7b0b-46b8-9d03-20d9761e1613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10e6e65-552a-4dc5-9cff-4b49535684de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98e3a3d9-da9a-41bc-ab92-bc31b347a911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48fc8ab-c7ac-49fc-bf9e-0971d54fa22a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa70b1b4-c1e6-479e-b930-cda5cc49480b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "071ee749-8354-49ff-8c62-cdb0cc00e013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29b2cd1-4ac0-4681-baf7-80ee3b536dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7890f60-cb10-4041-a270-774df4cef5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2a90b7-7e3d-4bd2-8c63-a7b1281e2bca",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1b384b-4b48-401a-9c5e-fe96343f8a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e43789f0-4276-4f02-a974-de69a4f3dce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e61693-ae3a-4122-934d-4194ccd0c0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb8f635-c1af-40fe-8bd2-14a7bbf4377d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60e229e-2d02-41ff-aba5-60f99572ec2b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3bb69d-2e18-44f8-b348-a696256cbf26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b6b4454-641d-442a-8cbd-0a84afd47737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebbd924-f1b1-41bd-84b8-0eab1d835087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dcc65de-9c46-416f-b59f-88e8708e8c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c32b238-bd81-4331-814c-63f4b072473c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60afaed-4273-44d5-860a-fdecc85b0ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b84e043b-fda2-44e8-aeb3-7ba91a8d5927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd68578-cae8-4ab5-9e51-b2d4a624b9de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fe832ea-2c22-4baf-9ffd-dd94125d63a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035d5f80-bc47-4bb7-9490-b8a48e3c7357",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42463ffd-e771-4c88-85d0-dfaf9757120b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05002c60-d50f-43b6-ba99-0d592ac7b5ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b030b3-fdac-403b-8bb2-1c202a9d3f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12d6c766-2c5b-4ab4-932e-4f51b443a2c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b64e0943-abe3-48f7-8bee-bfa5754d701a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79de2576-a00b-4c07-9993-20d334fbc9a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af45def-026e-48ac-91db-f05a9254f056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d42096-2fa9-4c71-9fe3-0a19c97355de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "590aa138-e0e0-4216-b940-7cd4e2b2314d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f3ab2b1-ebea-4869-9fa1-608a6ce23636",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f564ebf1-477f-4ba5-8a01-042ea6570ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d48fa61-2d8b-40b1-b7d5-a97e6352903a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5853db89-3300-4603-ad24-b6504572ff3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d18e112e-63d1-47e0-a0fd-2018095545be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "707ff4d7-6d96-4a33-a6b0-52fdde4ec027",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9847615-1162-4965-aa68-8f8de2596ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ae035a-82ec-4213-8d4a-c18561d5c070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9b81c8-347b-4272-adfd-ef5f747dcbae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74672fa1-debf-466e-b68e-40d3d0c7a494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d404c1-2a51-4e46-b07f-af6bb8e15699",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ff115b-430c-4b64-a485-5021093c5078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c7772ce-f6b4-44df-94d5-3d7eb352e1e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4eb510c-bf93-47af-9d5c-58174db3a6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf1f705-57bf-477e-9cc0-ae93f7a191cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c2b1dd-2496-456b-927a-047dcc276707",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce13246-2bce-4ef5-8722-fe51b3c0c40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "590bf852-edb4-4689-8af3-78fc049caba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e804d9-6125-4851-86f7-fc3aaff6fada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d00c074b-94e1-40bc-9efe-2238341a4ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df63c9a-bc58-4ab4-a31f-f378d389c2fa",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb1c900-fca7-40b0-90c8-ea96bc5ada22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571f48a0-ff13-478a-9dd7-5900b37da5aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5442e2-8516-498b-bc39-0a0dbb8efa58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40b3f8a4-a3c2-450c-b2ef-9e9677ea7819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34de334c-85d1-45b4-9d95-893d45289118",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44f5d3a-1e67-4ce2-a46d-632ba2690694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dccd34c0-6d3d-4d1a-bbfe-6092b4190830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a3777f-1e42-45c0-9ad4-cfe94283d43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db021fdf-cec0-477d-a8b8-de40d726a77c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce0e13a-1f27-4731-a9f5-34bbbce59dae",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5c5054-63a1-439d-97f0-1a3bcd85bffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b734c8bd-10fc-4dbd-952e-9befa87df790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5095af-4d51-43a0-b789-b77c668d9583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c3382c5-66b6-46ad-af20-2eb1bfedf580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db117d9c-838b-4f2b-a3a6-9cc529a5c3a5",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9ec570-e90c-4d87-a9da-181fe1cd9ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42e5a524-ccc9-4ee6-aa94-db0411e57bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e96e28-7044-40f1-afab-490faf37fa23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ec623b-0a65-4069-a81b-69decb4c7ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fac2caf-6504-4708-926c-afd584a0e115",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba49126-fe2e-4b89-983a-3cb1e10fc8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de7217d3-57b4-4a8e-89e9-156f21387f6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12b512d-3087-4729-b8ce-aa741891609c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e4f5bb1-1ae3-4378-b4fe-a68ad3a875cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e47685-8202-4f4e-80de-72ad0be2fae8",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ee2d2e-9c10-4627-b30c-922369fe0fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57be5426-d2b1-44b6-95ac-0a4d5f193813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e97dda-13e3-4d59-bc7b-0779af215d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aebaad99-d1a8-41a7-899d-2a3719756b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc39adf1-5502-4c6c-83a7-7c9ad146530f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "480ba260-65bf-42e4-a874-c4b81e28c28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f612b6cb-456a-422c-a666-9481a2946477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce716e7-7dfa-4f3d-a584-15aef3ba6be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f133f67d-fbaa-4768-a216-52e2bd1ecb1d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "84d64ae2-00e9-4848-8c17-0a49e44890be",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9ae211b5-8c46-4158-ae7d-6ec7a9fb7b9e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0cffffc-8aac-40f0-9f53-655e79be7a2a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "cd694223-1acf-4b13-a74e-4c9d561c694f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e373796f-4ba2-4af8-b954-6f408e443a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d5f8d04-8ac0-4b86-ac44-11e46a7b7300"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "50b428aa-5438-455b-bb3e-1bc75e868d23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16b33c0d-c73f-4072-b5ee-d8148bc02631"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc7aff6b-3dab-4e0f-b4ce-59175e61b581",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be477ba1-e3f2-4530-acf2-5b823fd51542"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2dd327e-1f0d-4f69-b3c8-d0659aac596c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f6d29235-a25a-4748-bec9-7e5856b64ac6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff8646da-910c-4245-9d40-2c7437b5049f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d12e0547-f639-4b09-bf8f-1da2ea711fef"
            }
          }
        ]
      },
      {
        "id": "8a7d41b4-bf85-4160-a44b-73579e7ce6ef",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "110deac4-0066-4d93-8301-1ad7055a4722",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a7eec0d5-5910-4a50-ad10-90ca4d083d5b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d3624424-380a-488d-a830-d06eea7b8839",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da23397b-482b-4a1b-bdd9-5ffc1098e235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b6846e-8336-4858-9365-03d295a9445b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974e9f78-57b9-4ab4-befe-a8b602a98a99",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aaf035d-e52e-4270-9a16-22d09cf9a6e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db59ecc-4da1-4147-a0cc-9fe68f24fe37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b19f84-f418-46a5-ae03-94fde6ba27d6",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed12acf7-dad5-4877-8266-57e62b0ba6b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "012295c9-f82f-4725-8a37-fac4491784dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0e1837-8c0a-4325-a330-4480c1da59e1",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "802c3601-5fce-4a6d-a580-3a151a5f2a1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a66f7f9a-b306-4444-b9d8-2e04123ffe81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b4c00b-833a-473e-8768-071a67a5adb1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4e8432-243a-47ae-8bd1-e22c53f544ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1ea757c-e87c-4d86-a91b-a78690cffb7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739dbbf7-21c0-44d4-a509-fc221f483e09",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e147aae-cb8e-42f9-945b-1cfb61342de2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d230c639-7868-4006-9abc-6f7a9ee36156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb71963-3c0e-4f24-9a85-69923cbb73b0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2ed271-4906-4633-a58a-80132783743f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dcc128d-3e7c-4ea2-b419-4e066d980da7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafc0092-0e0e-4438-8a61-9fa26227b62c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5e4b9d4-9a6d-4b8d-869b-455aaf50fcd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ae3cdd-61a2-4b17-8ef6-0ff26d8589d2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96116ba-5d98-40ef-bd58-877c5d902185",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "864ce091-a007-4208-ae6b-4318d80fe7cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3264b1-ef9b-4a12-8eb4-8e30984d51be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b93ab8-9216-4785-b01b-c187b1b3a006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382fcd8a-222b-4952-8c21-120bc2f6a894",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48352dd-e011-4ec6-b3d2-f76b4623d849",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d949a9e-620b-47da-865e-a88f9082b81d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae884b58-1be1-49ae-b39c-a0e9aea84b75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b420ca-57c6-4f40-85dd-a16ec89bee2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d9a4fa-893c-4899-bf60-8c248794a8ff",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc455077-94c3-43f7-9bff-502d98d8f191",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78139ce6-93c8-49f9-a86b-00dbe9becc6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5471a17-fef4-4b8e-a502-f88569e455eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24d8aba-fa32-4d3b-a27b-95fc863209a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee09620-20d8-412b-b3b8-7073716003dc",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d53a221-e652-46d9-873e-dd7729288e81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cded534f-021e-4689-8034-57cc3d992a83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2961ee-b6c6-4995-b9c6-938ce7f70d07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb8d9f8b-9743-4f0a-99f5-27f60390bbb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0140132-319a-46a2-9174-0195fb0a4d29",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f12cd6-8588-46dc-8e87-d6bfea20cc3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adfac4c0-ed29-44b4-bc50-f1db6d7cca33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc745b34-95c2-40fe-907d-95cb338337b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de66c85-7792-444b-85e3-3ac108851b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b32292-0db6-42d3-a569-00d418fd5b50",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37db485b-2d1a-4f68-94fb-e23bfdd2ac31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abaf8d71-98c1-43ba-a8d4-f7a35487b0e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79227cdf-7f65-46e7-8d46-0bfd36e75bae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b754553b-f0e5-4020-9f7e-80f840abbbbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb945008-9c35-465b-be2e-98a08e1ae811",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c905db-3536-4840-9d74-0c9a31f892e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce04a4ec-5799-459f-b2b1-fbdd64d82033"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "136273a0-2f98-4eb3-97dc-22bc889143b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba35540-d666-47ba-b81f-7d174f36fb01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5728d675-c585-45e5-81de-c6bb7d693e30",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e5b105-1221-43a9-8b8f-09cd1598aee6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7adb011-f40e-40f0-bccb-d625108603b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91571daf-f966-4efc-8380-aecd5d0eabd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cba93de-de55-4355-a8aa-80fbcacd529a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed11c36-62e8-4968-ba41-bf99c94740d1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d93a1e-29a5-4c8a-ac63-644f9ee683e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2abc1b36-1484-42f9-93cc-d4251b826ad7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9976593c-87c1-4c46-a656-589e66de7ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d175fdc4-6d8a-40e1-a684-befc06ece94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34977515-367a-453e-8ecc-c06c830f5f0a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79e7643-867a-475b-94e4-a75ce25d730f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f3905e1-c161-479e-bc44-0c4aee536f3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b418ce30-ae2b-4a2d-b6e1-1a71c94c73ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdd3b573-3499-4a38-a38c-495aef322d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f166747f-6cc7-4e28-8bc7-2e795f430ed5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ea8ced-417c-4b6c-88e1-3549b687ca1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dadb2ef2-c8a5-4e7c-94a3-c739268e5c79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb389057-d1b0-4c81-a027-c799b9d4d6c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71c8f25f-852d-4ac8-a487-28109c0ae248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d42ee01f-2e94-4308-9c8a-fb1a76b1a116",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e68062d-3a90-4f26-a2ff-6ca70a542f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9da9301f-57f4-4472-8132-6aab115bfea3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeeddfd8-d567-495b-8493-8bc65ffbfb3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c262525a-1718-4be6-a767-75bc7de7cced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43106f13-39b4-412f-bc87-3d4929a631ca",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7590c8-302c-41b9-b20e-a786a20e5e3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d19cd4-5613-4d03-be2b-8bb47c6f9ddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "134af984-96e1-48b8-ae32-fbcff2ac6cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224370bc-ff39-4787-a5d5-8017502fb099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d42001c6-1a72-4f87-8edb-287854059148",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1e15a7-a556-4a71-84bf-003d55ed33f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eaaaf06-6afc-49c1-978f-e807cb140b88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0d7eb8-60ba-4803-9127-0ac3e00a4fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "321a6957-5a34-45c9-84af-05b6876ad3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664b0e52-c9c1-44ae-be8f-91480e747113",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d999ff2-df6d-4251-a39b-e64314a01aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "084878a1-e15e-4abc-a4b6-cba3f790301c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b2174c-f843-4d2e-bab8-1674db8f8fae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0781741-afd4-4c80-9855-a1fefb141fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05f877b-4040-4c2e-b3c7-b21779f6406c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f39ce4b-27ee-4a00-b5c6-1ee070793304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5e1959-7960-4ab4-be9a-a3b22a9a6ef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea80399-8d41-473f-8b2c-eda481a4208e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7510fca5-1078-424e-9899-0edbc5d3515e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15812de-7ae7-4bfc-90a6-ffcc43a335e4",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d061583c-18b6-410f-9150-b62ca21c4c4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc4fb80a-7084-453a-a873-bdd626fd56f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ec39db-49e1-47fa-92a9-d8ec0aff372e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "573630fd-f260-4ece-b093-a3c340fbd063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aadd66e-6518-46cb-9a4f-ca224efb91a4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789ad48b-3945-47ff-a91d-d9a8b55d2640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f61c4b64-c364-4133-bd09-01682e352da8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d79d0b-9523-4820-9d91-22cec1cb8dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9425e053-09a9-4aa4-8fe5-5bad179111c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b272938-9a80-4ee0-a370-da96e2ee4a1e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113b62ac-521d-4975-8b66-c493baaf8293",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a4de3c3-21c0-45f4-ba01-90d2c17f558d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4fd1946-2e47-4576-9613-da4e671433ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5b6fc8b-b323-480d-9c3f-7e5d6cbdf71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ecf553-157e-4abc-9e18-98ab5b10def6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea61d78-bd4c-4ca1-96d7-f90a3dc438f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e8fd3d7-70db-46d8-9eaf-e58213f74301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d8cb8f6-db97-45c4-9dd7-6fd8f2f41697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "826b09b8-dcb7-41b9-86a9-a8a982b5698a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a4f7229-6573-4528-936a-5473ddcd9a06",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec912f93-d817-419c-84b4-7a3bb68734cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9929e66b-7e15-4b9c-87b1-301217d9bac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d74bcf3-a710-47e0-84e4-eb4ff0a87590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57760ec0-8859-42cc-bda1-6f0c4e450085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867ebfdd-285e-4134-82eb-332d67335052",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4959c07b-708c-4fb9-b188-87948f03d0c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1afa2180-923a-4dc8-bc83-1ee34fade7c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14ecb3e-e006-4f76-aeb2-4bf5c8eba3a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fef9b488-cae1-4032-b7ed-4e8b59ebf118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8abeb6d-be75-4f33-83cf-eb94c4d5f92a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54eb0465-887a-4402-80d0-bbd81d616404",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "306dd854-2e57-45b7-92d5-332e814f89b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1884a62a-92e1-410e-a584-392c4eec0335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22059f35-fc6f-4b9a-8300-17cb81285769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07058ce3-3427-41bc-8a24-8d7f7a173c1d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1262d726-618a-4bbf-a1f1-5482f56f7507",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12161e0e-a25d-4dfe-b008-41c4dbab9d23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e91b121-0f5a-4c43-9f4c-0dbd2edb8137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56e1bbb5-bf34-4c43-bc07-5bf7c8b4cb2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d502b8b-c291-454b-b7d9-e4ae28ee3335",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003f6728-54e1-4673-a507-690b55199ee1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "624689e2-753c-4a3f-b398-49d894e5c8cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91a35c3-d959-44eb-b0c7-bfcb34ff0b29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b780e830-372c-4132-b025-17b625c70f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b8ff14-43a2-413e-8cd9-cc940bb4f0d9",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161dc5b0-2bbe-491d-b8ff-71997e03596f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfa68b2c-e2a7-4176-82f7-09bb29d0a77c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1526a76b-8565-4d77-9bb2-543d0c500599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feae2ef4-2c9f-4338-8389-8175a55090e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728f2d62-e374-4804-a38c-dbc93848f983",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67aa3b10-81f3-4c65-b4ab-9cf9a1290d83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea521c47-cb4d-44ed-8915-128ca3b1d5cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2032de3-7afa-49a5-ad7b-765c217554b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df428ea7-c574-4f40-b2d0-0bf4d0d0bfac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78377423-e52c-4a5e-87f0-4a84a7bf477a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9197172c-c80d-409f-ad8b-b485d0d57ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954cec4d-6045-4dc6-b210-027f7a73ce05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f1f77b-add7-476c-9d1e-7577488bfc3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae1c346d-21ef-4d94-9224-b0d1b1cbc3be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05404ffe-5b62-462a-a2e1-5c4021e303c3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef21890-5d36-4935-8327-4d20b7f97a7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6545a4fa-f53e-4239-afef-9babedcdaa01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c84aec-4822-421d-8001-b668f3ce60ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "793cb6f9-c0f6-4227-89c6-9c8f5e826ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed24c47-9efa-4976-b5cd-9b91f3a8215c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee4be143-a30e-47f3-853b-78d2dc1fea3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66c594f9-f812-4fa5-9af5-f9a66e403898"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad46d399-68a6-46e8-95f8-3f3c7e82c3d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea77a607-5ce7-4c9b-894e-bafb3829af83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28408f56-12bc-4d4f-b045-74d4d355ff16",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4eef9d5-b15f-4e20-8edd-a93239c140a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60b3b970-c41b-4e37-8b2b-fbf97ca13ee6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3213e86e-f544-4040-ae59-01b929b63481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182aaa67-e9f6-4f15-889a-2fdbdcda7c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b212ef4-2f54-413e-b44b-d3cce48eb9ea",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03e24c5-fb2a-460c-9b32-6bd6154e4f8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c431b6b-4cc9-4d73-959a-e53461aea884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "269143c5-99c7-45a7-8591-354853fd3a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ccf1e77-395b-42dc-bcf6-6bf9fcf3a0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69b8c34-8e5f-4de3-bdb3-15f1d8cbcb11",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff30db57-7d0e-4f40-9b55-e2fd36d0ccf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf22879-e4dd-426f-92e6-50dea0644c66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1838c80-dbff-4dda-90ad-433085293058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21901914-5b59-4b27-b825-ff565718eb43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9fd54cb-a5c5-49de-b06b-212a094d5b72",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187e3fd0-5715-4d66-a93b-c30c9d52d3a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cec30cc1-d226-45f3-9fc6-df735d31f02c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90de46bc-3c36-4aa8-8b70-3536ad2c3cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6665c797-d9a2-4a15-902f-d4d3e0d6063b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd2ba53-57f6-491c-abb2-a6e6f076e4ef",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d8168c-80dd-4719-ac7e-e8d526943f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f4b9e2-193f-47fe-bb30-615f711c3dc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ea493b-88ae-455b-b615-bf2c82e3b55a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "865b4583-a241-4ae5-b679-9e8339d1c9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9aa03e-3cdc-44d0-8ead-5d1940905767",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f91495b2-4d21-4e74-894f-95e9cef72512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe30ce5a-9bd7-4706-9ec9-cb8bd04fa4ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc43946-2d61-4f3d-9d03-265195dd3737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98e81cc-972f-408b-b3e0-82facad7a2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf01ec11-74e4-47ba-bef0-fa57bd2c7956",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cbe7b06-2178-4f86-8c5e-80137f72e326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0989e517-84d6-4aca-bfea-65ce5fec3071"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1db251-3fac-448f-8cae-a03e74118133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0979cad-9dd7-431e-aee8-f6b38dbba2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc60cbd-69c2-4442-ac19-8c5545dff7e5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a54104-f8f0-4ecb-88c3-748f1c167a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9812e32b-0f33-436f-8055-85729ac54895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe852b63-4c84-4330-b1e6-d5b38683f7c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d26640b-3bb2-4924-b0de-8507824cd9ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753c215b-0077-4f2a-a0f9-d0fca684f399",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684e1084-af45-4454-8173-b2d3d7d77f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96aee24c-04c1-487e-a575-ac45309b1dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7525bbd8-85e6-4bdb-bcda-b6475b5a82ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502a5ee5-9a87-4a5f-abf7-071e5e8b39eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c5e4e3-08f9-4d10-aa5b-31fa93b91cf6",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4eb0e3-1cc2-49f3-886f-a5cbb92db3bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06bf2dc0-8377-4e9a-bfe7-df3a85db6702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e895d8-3695-4d24-a684-c39d8b88e0bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a22c270-add2-49e5-9f94-f85ef397fea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce61f36-83ad-4944-bd16-992ae9ef0c3f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1789584-8761-44fb-a882-3ad47f100426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49447480-4e92-473b-b785-d1f1fbf88e90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c429a807-092e-4d06-8b8f-60e1d1a28db4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ace1584-80c1-417b-aefd-d4a565188746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f136723-7e61-45a2-81bb-44a654d43cb7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac48c1f-e3a1-4666-8bf7-bee66fab3889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fadd6333-7f4e-485a-be59-ba04197ff7fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c20bf1-3653-4ade-922b-1d10501cc32c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce81facd-fd40-4283-b39a-d7d224c6b8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d833dd05-54ae-4e1a-9d2e-4f786e3538e6",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddee8ed-fbec-4327-aa83-a982debf368a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c841d6c-797f-4bfb-933d-5bc30bb3545a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bc618c-49ac-4031-a72d-55b66fabc2f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38f0b1a4-c157-43d3-9afb-12e3d8fc259e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba39f31a-4363-4c9e-96d5-64ddfbc54b75",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e02ccae-e902-4eff-9636-41fb779ef046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5750dd60-4b25-41de-a1d5-0b1f8e943efc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25236803-3b09-4446-8776-91e47674b75f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8465ca5-4b98-4c48-b117-139be1ccd95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440fdb75-9e21-490c-8b0f-fbd39a54bbdb",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b737680-ce21-4aa7-b108-89fd61813cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cf87c54-ea25-478c-8244-55cab2f478e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "569df4f5-e92b-4dcd-a2cb-3b874bb90879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abe4c93e-2645-4276-9e4c-9a3d059da3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a003c690-8f97-418f-be0d-381bd3154d0b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a9f4f1-b1b3-42bf-9afe-6e43f5a362cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45db7173-72df-4426-9cbe-15cdaf47c655"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "730123ab-dc00-430d-9bf2-11ec224193c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dcc35b8-4614-4c9f-b7d1-1f9b5622a64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aebd85f-e5c0-42a0-ad8a-6f156b68f2e9",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8f0d7e-5026-4c08-9024-83b4a1fa4388",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77fe231c-4875-4328-b0a6-22d3f41acffb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "801b52f0-498f-49fd-9aef-f3846528ded9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e3380cc-9917-4585-ab86-e651dbcb916c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbfad28-a056-44b7-8c36-06a86e00f5bf",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7dd13d-74b5-49ef-bf54-ef4301d86156",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5211f13-8e2c-4339-9b57-3af1f8f0d336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b263fbe-472b-456d-82d8-8d234736a370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d37cdf2-5f9e-40b3-a4b5-9cf04d393a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802f190f-a64e-4e5b-b870-64fdcbdbfdb4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba11b01d-d78e-40f0-99cd-3c8eac6e7b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d78e873-1f51-4a5f-925b-94cff4b0f273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "884d1b5f-7e6e-4108-aabe-121317cb471f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb34e8ce-f852-48e5-90f6-cc656c262eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b042d1-fa2f-4431-befe-fb160a77a950",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce21b38c-1992-4447-b186-0de7fdfb1147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c27a65a-26fe-40d2-9808-f11de9f0fa6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2acd7f-f7b5-4a6e-9bca-c31096454c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b04e347-f063-43a8-8569-f5bc93066f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08efc65f-e3a8-4ff5-83b2-74381cdabcd5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4adef840-d100-41b2-b567-f26c4f705acb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a21704c-3f91-4be7-9da3-1a9f230ef177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4d4b50-2a7d-45ad-92a8-89a9b6677452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60df5791-5540-49a5-ab3b-1a2295404a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272c81cb-6be8-4d61-9af2-e378d74f3646",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9a979f-87ab-47b1-b4c3-26deb6f689ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aee02aa-1ae3-4886-a276-26e827164005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "661aa95f-a5b0-4e46-8741-a36d8b7805da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea53828c-ce82-4619-9244-0ca150231459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2568c4c2-230d-43f9-8a60-27b758e21ce1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0951be0d-40f2-4e86-a05a-3231836396b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc8a4c29-b361-4be8-b6fc-ed2930023fd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8455f45b-814b-4eac-9939-f19995b5fd30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3ea833f-ee67-4054-9ad5-5ef954df563c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa50ae0-240f-45b5-be39-53dceabcca1e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba6378c-c8a6-40ad-bf24-f3743ed80cf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceea7551-cd0b-4a47-b784-d8629faed444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2357e2e7-820e-4f9a-9010-48f507ea386b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ca5fca-55ed-490c-a9e2-d68d8aa2e4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662de1ba-2d0e-415c-90f1-cd2dfd827c95",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330ba595-3a69-4389-a582-5f748d09c227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb265ea8-c3db-4946-a747-94d4513e4ed2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca88a63a-65b5-4537-a3c4-d2dd4b9eafca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34961839-8472-4b82-a3b6-7f987c903e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b4833b-4e91-400c-b741-7d7f4d4e30d7",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cb92a1-a086-45a2-b267-23488c3bfa3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfeb99be-5a79-4b14-84d2-d2bba6b57f20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4fbcb65-e8dc-411d-888a-c96e976e2725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e55dbf08-90b8-452b-9aaf-9a8407723b05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13ab776-c4f3-4a9a-9329-52915a91f435",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b25ea30-4451-4b4d-8dd9-d93ef45e3992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7927040-d062-448c-886e-5b7441ec1c5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0748b8c-a709-44ae-bdc0-091a3af40b85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bad9d7e2-a865-4245-b807-c79e5dc4a3fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e0a07c-edc4-430a-8f22-671dae0521c5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433bbea2-f2f3-4737-8e7b-6c3fede8abe8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "638f78b2-a56c-43c0-b407-9c2ea63dd0b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6d5412-b71a-4a59-8a6d-7cbb3faa088c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b87c6ac8-f935-4654-87d3-e981e9e31ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cce78d-059a-49ea-850c-8d69d156d1ce",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13e09d7-9373-4745-8656-cfec555ef131",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1a5715c-2b39-474c-818b-7de9ffbda607"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "791a441d-95e1-4851-a0e3-f37cadc2db86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da47d84-b8a0-40a9-add3-ae04539e1fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86930a2c-3c96-4b1b-b989-f6ff0b5ee5c9",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23453d9-80c9-45ca-bc17-888ef2eddb81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53c666b5-1912-485d-a133-bce6dfceb4c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff418413-cf3b-4585-a9d9-26210043dec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6078f71f-e3a3-4456-a0c9-872bde8b8367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49edd0a-21f2-41e1-a397-f10ff38395a7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc64222-0d52-49aa-9a94-22f668eb5576",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "817dc60b-a494-48dc-93d6-03efd5403d19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f41abf-d11c-4db2-996f-47cc0861bc91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "962ca572-cb44-4baa-b0f8-214fd6992011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de28937f-fe04-4781-b1d6-775147b1e6c0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2ca40d-0b2d-4479-8d4c-6ac719f0f378",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86a644ca-ee1a-479e-9090-dc216c46f2f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5dc006b-6462-45a7-bdc2-b342f6b9c0a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65d87159-76f9-426a-b4dd-36e96a9e1250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0eb2e9-8574-46dc-8dee-193a67736e0b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85db30d5-1430-4e2a-be87-587b64209e6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eb9b0b3-93ce-420f-8a85-35ca7718d8dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a940969-96d9-43fe-869e-03383e245f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab7a5ef2-0dc6-4ea0-9c68-9ff5ff7dc448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1c7156-5c45-48e9-9801-d29f595bb73f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b766b588-10df-42d8-903d-10cc15f94e69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c586dff-4978-4e16-a622-4bd474045be4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1583e33a-f508-45f8-a74f-44f97085cf47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99dff184-c660-4146-82ba-5f3560f53c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9833cd-863d-4bec-b077-91c4d25a51a7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f2334c-33c6-4bf1-a810-8bd43bb91006",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f238bb6-e2b7-42de-bb8c-f42a76ee27bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "209e2474-21d1-42fc-aad0-89de134a5f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d52488d5-e303-41b9-a5b3-09834a718263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66d8445-2b7c-4253-8025-57002bb17509",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9fbbce-dc17-48bc-8a3c-09fcc9e8809b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f235bab9-54f2-4030-91de-a016d45c00f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac57dd17-bc3d-4919-885f-820b83d0a747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82ab058d-8aee-4379-9de9-d62d3cf65ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27bd277d-7931-423e-9c8a-57dab31d2e02",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539753c4-b9d4-46eb-8027-729440a93ed8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f1ee873-bec8-43c4-9a00-40a80cde9007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cedf52db-8491-40ef-815d-e839a292c1f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cead98a3-1e81-4419-8b39-b6359a52bba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b93d2cd-c20d-4817-9e46-1a4d2ea489da",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b06664-d81b-4587-ac67-38d4ce279952",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fde2b23-043c-436a-adc5-e0221fac40b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbdd017-b62b-4ae9-8167-3318ef0b4f13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bf00f40-e712-4d5a-ae6b-62756e0938cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9588559-0bdc-4d43-9810-11e37ed28ea0",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8509b1b-ec12-4242-88f7-7ef360cc652a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea787e13-2099-43eb-bef8-cc2456dfc016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ceb840-652f-4c16-b3fc-78c9c9e9c62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c32a19e4-732d-4cf5-bf7b-29acca95153a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daec6428-bf5c-46e7-88cb-bc4ac22ab061",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69c89f2c-7164-4766-9a99-793ee34a58f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "370ab9b7-fda7-4120-861c-91ca6228977e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c661a8-74b1-44cb-bef4-187ed90f1774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c690c6-3058-4214-b5c1-70029ee4a994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7730d3fe-fde7-4d81-8491-cea2f8c550b0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245b684b-6279-4a0e-9d6c-ff3e1a204ddd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b014c49-4c67-438b-b495-77e503fa93bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8dd9d84-d144-45a2-a386-1a50bc9af035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "575a4dbc-7657-4462-9c89-1de7e608a797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5be2865-47e6-4afc-bcce-fb2666f35194",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8eb82ef-716f-46d2-a61d-67f17046bc30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92ec6899-1782-4ca5-87b8-95a882d0db81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "144b2e73-5aef-46ec-b1a3-6253af8df4ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4486af0e-fc78-41d6-99e3-05e64ab4b419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d336c681-fb23-4a6a-a357-be98a4b62573",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b128e2e4-06fa-434c-9c64-c44ed4151bd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5939ded9-6a9d-4b59-b687-d34c40d2cc0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc02ae0b-aa85-4a71-8998-9b6a501518c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b87dddca-38aa-4845-8944-66b90a5e2515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6558ff7b-e22a-4ef4-bba7-55318a45f27a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9ea4ce-b580-4185-bfd9-e737dec3277f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f39389d-cc76-43c7-81fe-0242b2854dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b941795b-5701-4452-bd98-22d50119f48b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8feb7ae5-eff4-4d53-b2db-26a6d86279f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2656ea0d-8d75-49c9-bb9b-fc7efc4e62ec",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3001582c-5631-4b7c-9ab4-e0d67fd33221",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4b39e27-4fde-4cfc-be0a-dfa71906752e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df6fbcd-eb65-458d-a008-d7a2498f2a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42cd0366-f0af-41a7-879c-d73df9beed5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3483f4b3-6302-4b2b-a4d1-cf0c22ecacbf",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ce1920-87ef-490b-8dce-091f0b12085a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c23e8bdc-e445-457b-9e10-737df27a6a6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a2e2f3-857f-492f-ad98-fc887293ba59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c8ca24-9c56-435c-bb90-067a7d615d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4310bb5e-61f5-450c-aacb-757ef6ec24c5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f9e480-b2bd-4419-826d-0fe3fe14a231",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a5f744d-e453-4b4c-a780-1d840263e7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b058585-4f41-4f4c-b6ee-e844df38a0b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba684482-ae92-4e25-bb79-e44dfbd00880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6447d9d6-8dde-4d6c-b581-d47f8ee8885a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0872ee37-80e7-4d88-9168-34c9923ff921",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74390115-3b22-4cc9-9ee5-4a1c25003b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67acb51-6f23-4233-beb2-7e0f0c79612e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55eb05c-d18e-4fe4-8139-ec6b22ee5690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c31c8d-99e5-48e1-a588-59662e3caa8d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a286453a-e17a-4d8f-a740-13dbb3a9e08c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24079fbd-bff9-4e95-b359-68634ce81863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d289f035-d4db-4d22-a2db-34ae7701a049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c5f60e-6d98-49c1-9291-04550ca52bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f03213-aed9-4fb1-9f36-2af220dc1a94",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c027762-39c4-427b-b462-2a84f96e3cd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94c43e8f-1e52-4527-9bca-1434a796c233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96bc38b-77db-4f74-b050-8581652fda34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af2ac84b-5cf0-4ce8-b76b-5bb6210269a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a986372-5e7f-4fcc-8270-c3483fc0543c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf5001a7-7621-47bc-bfa4-f6c1206c72d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94b4e5fa-3032-40e6-a693-659e7f4b7a2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9afb38-6579-4433-b2fe-69fe04d1910f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "454df831-07ed-4a8f-9001-64672de7219b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0caff2-b879-482f-a124-13741170f8b9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158c0dbe-7f39-413e-b098-e864620eec11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8ab684f-cf04-4e91-9f05-88545e1e187b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1dc3ebe-690f-4ea1-82fc-6f3c37fbff1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e82d117-bc8f-4f18-8340-c1747d5e942f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40063e3-6a98-4b51-ad98-e81590ea845b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6fcf09-d032-4ac2-b74c-252100598bf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a96a262b-bdc9-416a-8d95-c3c0d94d38a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f971d606-75c6-4cc3-951e-d27cc782f401",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cf45871-ff21-41ba-9c34-667ac29dc6a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ca4cd4-c8f3-4486-90f3-7126836a72fb",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de78af73-e694-4809-8646-301509347640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0ad447d-0b46-40be-8689-e2d6c9f78635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f283413-821b-4ee9-ade4-a4db0c7a8f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cbfac30-6550-43d2-ae98-00106bb4e7db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370b86b9-1154-4705-8c74-6b952ee71f77",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ce5cce-bf94-4dec-b4bc-e8b0e00262f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b60aa77-ef63-4ac4-89af-96613404c8f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8de4a3-5620-4855-a5b6-14253a539b71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b24d6e32-1161-4298-8c9c-4fc5a4489d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da9c981-ce85-453b-a8f1-fd54251849b9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dabb2116-4cc8-405e-a61f-f6b1dfd2f610",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d4c4899-cd9c-4188-8ad5-63f4e45da499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22160e35-07b6-429f-b603-9dd6614827a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e708b626-5d0e-48e8-8bc0-7823fc65f279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e32e5a0-3261-4874-9f93-b0c178333571",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7190faa-21c3-4085-bc62-1a526d4737d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "987d4997-7cdf-4b9e-91dd-35d34b278b89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16caa65-56e9-44c9-b6f7-f69bd4fcdc52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f402116-22ac-4829-9988-cfb9e3e1aa1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d2233c-6044-4488-99b3-8f15e3e95371",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde5ef41-f948-423e-8aa6-22715b22265f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21d61fb2-1eaf-4758-aca1-ffed3416bd80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8454f6a9-ab65-418e-9bc8-61e84194765a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20fa1f84-9839-4f51-ab6e-866983f9c7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa4bbd8-8ba1-4c1f-9fd8-34bc2cd93341",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e883815-5c5f-4351-88af-47b4e11755f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62a3060f-cbef-4ff5-a5a4-be29ed662b45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "270b59b8-8137-451c-b2f5-0ad4de43e2e2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82276ea3-54bc-4dfe-8330-8607af6673cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb790a4-a1cc-4f93-9074-0bbc894221e0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20116440-4c66-4380-9b1f-967d5784b79d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cafeff3b-3842-447b-8178-be3d2fbab01b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8173c2-e0d2-46a7-b496-63fb843da4fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "506608f5-3f85-4a8e-b138-057c1edf7142"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ad1e8c6-436b-49c5-b953-4c2c799f10d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "838a75f2-2176-4726-a68d-7a5ac161247b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "adb36e88-68cc-4f8a-a02f-e8b9bd815a21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a90c8fc-7b21-4dcb-8929-606a6f33213d"
                    }
                  }
                ]
              },
              {
                "id": "f4eec011-f0d6-4693-9890-36cefd32c17a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90305f17-8d57-4063-9cf1-480be5cfc448",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d61aa0c-48d3-45c2-aae0-0d2f82d30b9e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0919389d-c7a6-4772-bd83-7047c53d7a2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb83510-c5f3-4ebb-906d-aa476ab0e945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ad2a458-8f64-4385-a9be-312499939428"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02b0ffb2-780f-430a-9f5f-c6758f48822c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f555d14d-52ff-4ff1-b6ad-75f6239af2d3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c653dec4-b9c8-409b-b2ac-acea1bb311b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9636df4-d931-44b7-8b59-96a26804562f"
                    }
                  }
                ]
              },
              {
                "id": "ad6be76c-e38c-4bf3-978f-81ea28d05481",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "124e0ec8-16f9-4d1a-99fd-ccf927f15854",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7395461-ac79-4185-a46a-3cc380c44784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a55d9eb4-8d3e-4892-ae80-d2fb6cf90380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "395a9d28-bceb-40db-ac00-3a7ae396ffa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd934b0-818a-4279-a9d8-245a654aa67c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "84527620-3e36-422f-b75c-86646725ebb3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "401ff1ea-5c63-4533-8fbd-dffdcdee44fb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d731406-d86e-413f-ac1e-cd74ca2a8c55",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "df7a5b4a-2fcb-4492-8e2e-f77fb08f9e3a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e483d84-af9f-404c-b553-6e8369f918b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c76cc3e-33cd-4689-a512-c9dc0ac5f2ba"
                    }
                  }
                ]
              },
              {
                "id": "5df88dfc-d876-4ac0-88fb-c43a2d646065",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a78db4f-aba5-4b10-bc53-906c139a41cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2fed5967-06cd-4651-a340-a78d9aa5e8f2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3e4d059-319c-4dc0-8aa2-1c53ac4a3e50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f287a33-d1ed-4f98-8bd3-94ba2d8b924d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be80f30b-2770-47df-83d0-0f4bd3c35f22",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c20460df-dc90-446c-bcf7-ee94943202e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "23ad462d-7e41-46db-9e44-023ea84562fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d270d6c9-9106-41b7-b5c9-8e80d3fcc4c7"
            }
          }
        ]
      },
      {
        "id": "592d8763-0bd1-47ef-a8ed-f7957f996dd3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "eeb2e670-8ae6-41a6-b87e-7bc541f0bd56",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10d34b6c-a685-45b1-8fb4-482fd3035c46",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "34480c9a-2620-466d-bc28-3e01896b3dec",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a040f0-ae07-4479-9f9b-e06738aeee12",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2c8c4456-c478-49b8-aed2-0dc5ef0a8e09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2259b678-db4e-4e2a-921c-571dc8df1011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "038825be-5970-498e-853c-60b111031cce"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c996b062-32d3-4d3c-a5ec-4680dd261815",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f94a1f0-a5d4-470c-9bab-132c03ab430c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "773b64f8-a5a8-401f-a6b2-6233b62b3cb6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21214d3a-a300-4697-a676-b0925742d7e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dad1c559-7a81-457e-9456-2ec9f7f4a6e6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9213cec0-4ea2-4457-a0e9-d3659dbdc7b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17437348-47f8-4241-b538-bfec7b931496",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "17a1f4f5-8f1b-47b8-bca5-5eb160568dcb"
            }
          }
        ]
      },
      {
        "id": "0b451ef4-0538-4175-a6b7-47c5a97a3dea",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "cf25fa53-678d-4817-9e1d-e20e7586d46e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b7161212-54bc-48e2-9e2e-f639989876e8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "51d278cb-4f55-4c10-986f-d53a7b9ca86a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c9f0e6-9e1e-4497-9a45-3571e58cabfb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a47318f-db8e-44ad-af1c-352e72d5558d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2679189-2a55-4e1a-8084-c30970285568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7440eba0-d7dd-4209-8fa3-9f92a8c82dcb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a130217-5983-48a6-8792-5b8bd47439fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f125fe98-61da-4a6a-a7a5-e38554eb7aa9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "425d3d8f-0302-45c3-886a-e629f6eaaabe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8cfe7eb-4a0b-4419-aa6a-e2044e2450cd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "763c942c-b926-4d4b-a203-38c66c863376",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "67cdb3a1-0f08-4103-a028-b712b6851b26"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "acb91bf3-3e8f-467b-81b3-578e62cc89c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e7e2081-34ef-4ebb-a929-58cea8ab282b"
            }
          }
        ]
      },
      {
        "id": "bab8e0d4-d951-4a0a-875a-5d918e53b0cb",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8113b265-0b11-49cc-a54b-af32fc5a287b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b9dcd2f7-b3fd-4ae5-b4db-5b32273fd47f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b74702fd-f143-4eca-8fc7-ff98bc4514bc",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8dce64-7a93-48f5-90b9-c2052ffcdbda",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b377653-3b49-49cd-b4c6-4192ea5a3424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c569eaef-5193-4825-b804-fb29b754dab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f708920-f98b-4611-bb84-1a9350781661"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8828f0b-e4aa-493b-921b-03710fda6679",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "825a1674-f072-442c-a50c-cc8601058368"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb9ad5c3-2f45-4f38-8bb2-c70cb45be5b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c581ab8e-389f-4f45-8e72-b04625e551a4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13d9fcd5-00fd-4065-be5c-9677ff0fe7d9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a137e51f-8ff1-410f-8dfb-acc0836a177d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13ff8256-575c-4d74-89a5-56598d4c6c8e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "740b2e5d-124e-4bbf-bd4f-4f4dd5f65fbd"
            }
          }
        ]
      },
      {
        "id": "81f062f2-98c1-4985-abd6-48cb73c98a3d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c8940bf-d69e-496e-bc0d-d02e4a535b62",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "25ba3055-00b6-48f4-b7ae-c5acfcac5bfd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "51a20b5a-56a8-4d85-86d8-b3f54b9e36d7",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "26eb5bde-5569-470c-9766-1e8fbed7f037",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b0805092-bf15-4fc9-984a-1a64cf5b7294",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 110.09126984126982,
      "responseMin": 6,
      "responseMax": 724,
      "responseSd": 80.44866500795467,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1715560665398,
      "completed": 1715560701656
    },
    "executions": [
      {
        "id": "131a4ee2-f73a-4f26-abc6-e11bd11bf545",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1630e34a-b9be-4da5-b053-4a1c84e5585d",
          "httpRequestId": "677ee76a-5b17-4155-bd3b-c5f136259297"
        },
        "item": {
          "id": "131a4ee2-f73a-4f26-abc6-e11bd11bf545",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f4859502-9713-4ad7-ac19-72eaa0a28d6e",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 0
        }
      },
      {
        "id": "b1454261-860c-4c9e-8d5c-be2cfbc38e79",
        "cursor": {
          "ref": "23c8fba7-aa6d-40bc-b9bf-33c68dfd3052",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ff6a887d-77d1-4bf7-b7ab-1bcd3df2b448"
        },
        "item": {
          "id": "b1454261-860c-4c9e-8d5c-be2cfbc38e79",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6c9278b7-fc5c-4981-86ca-31bf4e5fa0a7",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "427a612d-3df5-45a8-969a-cc547ee22347",
        "cursor": {
          "ref": "a56f7c30-83d5-4e3e-b131-1c0ba1fc2c20",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f5c0288f-8a2b-4895-9a68-cb4743ef826a"
        },
        "item": {
          "id": "427a612d-3df5-45a8-969a-cc547ee22347",
          "name": "did_json"
        },
        "response": {
          "id": "22d12e82-d6ea-478c-baf6-84c7c63694f2",
          "status": "OK",
          "code": 200,
          "responseTime": 237,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b49f45d-f46d-4a69-8267-d7be306bae74",
        "cursor": {
          "ref": "48698bec-3f99-412a-9210-149b591386cf",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bd2aa5a2-c9e3-4a11-89d8-bb63d1f6cc0c"
        },
        "item": {
          "id": "3b49f45d-f46d-4a69-8267-d7be306bae74",
          "name": "did:invalid"
        },
        "response": {
          "id": "5186c838-bbdd-46e6-8303-37b5ebbf2590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b49f45d-f46d-4a69-8267-d7be306bae74",
        "cursor": {
          "ref": "48698bec-3f99-412a-9210-149b591386cf",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bd2aa5a2-c9e3-4a11-89d8-bb63d1f6cc0c"
        },
        "item": {
          "id": "3b49f45d-f46d-4a69-8267-d7be306bae74",
          "name": "did:invalid"
        },
        "response": {
          "id": "5186c838-bbdd-46e6-8303-37b5ebbf2590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c839a6f5-6341-4bfe-a9d4-c27a2c4a35be",
        "cursor": {
          "ref": "34443543-e0fc-4a77-a5a7-351249152052",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "208bd3d7-5859-4803-b02c-0dd5f0c92b24"
        },
        "item": {
          "id": "c839a6f5-6341-4bfe-a9d4-c27a2c4a35be",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "127f0225-3643-4622-bfdc-a3a0e20d815b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 341,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a00c7f5-d39e-4793-aac0-d61419953393",
        "cursor": {
          "ref": "5f9e52f9-45cf-4afc-b283-235dff04045e",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "87f8d711-f09c-445f-a202-0385e6bbd768"
        },
        "item": {
          "id": "3a00c7f5-d39e-4793-aac0-d61419953393",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "56f82352-e839-48e2-b461-f4bdb0bbca15",
          "status": "Not Found",
          "code": 404,
          "responseTime": 85,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d11fa5-bc19-44c2-9972-0b2c76f05fa6",
        "cursor": {
          "ref": "bc82c1fd-15d4-484c-a523-9e296242a214",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f39bf31e-42cc-48fb-827f-48e492660ca0"
        },
        "item": {
          "id": "f5d11fa5-bc19-44c2-9972-0b2c76f05fa6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "15ccd0fa-4cbc-4567-83c3-b0f4155834d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbaf4150-49e0-4018-b989-fed444192f5c",
        "cursor": {
          "ref": "c25eb046-1db1-47a4-95f3-89fa831d1107",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f7839f3d-42c1-401c-b8bb-44b186e4c842"
        },
        "item": {
          "id": "dbaf4150-49e0-4018-b989-fed444192f5c",
          "name": "identifiers"
        },
        "response": {
          "id": "74c4fcd4-bb39-4187-8d1e-c2160819398d",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7423be-8c32-4abb-bbee-9153489e2d17",
        "cursor": {
          "ref": "a2311c93-7717-421e-b151-c44520e31194",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c4892339-17da-4d83-8331-a5a17225b51e"
        },
        "item": {
          "id": "9c7423be-8c32-4abb-bbee-9153489e2d17",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "21e04f53-0329-4242-b938-90eaae794d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207ba9fe-0d2f-4e32-afec-9bb6d58b13f8",
        "cursor": {
          "ref": "7fc0f784-d777-4787-83b7-b2799c01be16",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "677280f2-7678-45cd-a8c7-ab29411842c2"
        },
        "item": {
          "id": "207ba9fe-0d2f-4e32-afec-9bb6d58b13f8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5863cd83-162b-4fc6-ba83-8e212413cab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e36261d-864b-4275-b721-bca5ed2c6bfa",
        "cursor": {
          "ref": "c48e2de9-42a9-474f-ab3d-b21222a4d49d",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bc1f486d-801b-47cb-9be8-55ab511696d9"
        },
        "item": {
          "id": "6e36261d-864b-4275-b721-bca5ed2c6bfa",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "564df7cc-c524-4df6-bd90-023dc6b5fc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267e1a78-76c5-4f2e-9396-b2061ed75628",
        "cursor": {
          "ref": "2dc783f1-1a59-40d3-b98f-51241a96ca7f",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e45ad59d-c006-497a-8233-3ab01f26dbbb"
        },
        "item": {
          "id": "267e1a78-76c5-4f2e-9396-b2061ed75628",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1ddd6f5b-5b4d-4c0a-bf17-26985c768897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f25f76a-a5aa-451f-8149-25317f04aa36",
        "cursor": {
          "ref": "5a326f6b-a60f-40a4-8ced-9e9a94eebded",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "203b4c6c-9f69-4a14-85eb-d88d5ecdd39a"
        },
        "item": {
          "id": "9f25f76a-a5aa-451f-8149-25317f04aa36",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "72cea1ac-cf3f-4ddb-978a-7488b0caa649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7852c60e-da53-43e5-84fc-ca1a5d570a00",
        "cursor": {
          "ref": "5164374b-84bf-455c-bb35-3b8f26557322",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "60eb2884-1e06-4c17-90ea-3ee1a4aa82d6"
        },
        "item": {
          "id": "7852c60e-da53-43e5-84fc-ca1a5d570a00",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c3110eb8-0d0c-41e7-b306-c6d4c5efc78a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49982162-fd39-4a77-9b9f-3b173c59bb85",
        "cursor": {
          "ref": "1ebca762-a25e-4104-98bc-dc393d413eea",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "bfb262d7-6c46-474a-8001-b3377d234667"
        },
        "item": {
          "id": "49982162-fd39-4a77-9b9f-3b173c59bb85",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a80b8803-06a1-4b42-be36-067525a0ada7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "198e4080-1684-4c6b-9013-b3d6da1e44bf",
        "cursor": {
          "ref": "a7b57361-e30d-4899-997c-ee688baadb99",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9a1a1c7b-0838-4384-9ff1-202b77c1ac9a"
        },
        "item": {
          "id": "198e4080-1684-4c6b-9013-b3d6da1e44bf",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8adf0068-fff8-4b28-83ca-3c9fd79039ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb5cbba-ee61-4a0e-864e-4784126ced7c",
        "cursor": {
          "ref": "41b9f8ed-b90b-4174-9456-fb240feb3a15",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f9e7b429-3e84-41a4-bae6-ce02da06fbda"
        },
        "item": {
          "id": "ceb5cbba-ee61-4a0e-864e-4784126ced7c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0733eaa2-56eb-4ac9-83f8-eea3d9964ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e3227d-22f8-455b-a094-5dce9e0b9b25",
        "cursor": {
          "ref": "feb93ef4-ab1b-4952-81ff-f914498363c6",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d6648e2c-32ba-4a60-840c-26b9d680d67b"
        },
        "item": {
          "id": "03e3227d-22f8-455b-a094-5dce9e0b9b25",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "05e97d2f-09a2-40dc-8a85-ba3c904bfed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ea6339-1715-4046-991d-5f6a70cdb7d8",
        "cursor": {
          "ref": "facde02a-ea13-4498-b7b5-a1a0310334d3",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b78fe2f9-d976-4a9c-a9eb-d76fbac6c277"
        },
        "item": {
          "id": "77ea6339-1715-4046-991d-5f6a70cdb7d8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1b5ecdbd-13df-458c-bfec-c6bae414b910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22e4f0f-7645-470b-91bf-c356241c050b",
        "cursor": {
          "ref": "30f9cd35-8b67-417d-95bb-8a1d5b50c4e6",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "563b786a-942c-4224-b822-1d59ff1c6a37"
        },
        "item": {
          "id": "a22e4f0f-7645-470b-91bf-c356241c050b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2098f9ce-92c7-40a5-9048-f1fe027c46da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8abbfa51-6a51-47d3-a071-176a4a13b455",
        "cursor": {
          "ref": "80818300-14b0-44e4-a391-93693958e06d",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c9395067-4172-4049-bcdd-7e94e1ca7a5e"
        },
        "item": {
          "id": "8abbfa51-6a51-47d3-a071-176a4a13b455",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f5abbd7f-3587-4501-a6fc-7482d71a1701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46664462-deeb-4a09-8878-38a8791f7330",
        "cursor": {
          "ref": "3b955dde-c805-475a-8caa-f75ead720ff5",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4d0ad50e-a9a1-4577-8db5-d532c6604271"
        },
        "item": {
          "id": "46664462-deeb-4a09-8878-38a8791f7330",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "eb87bc08-c844-4cdb-8399-97c8f549a45c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9332f402-0d6b-4dd6-8cc9-a258e2720a58",
        "cursor": {
          "ref": "f0a796d4-4f28-4a45-b5d4-9204d5cc0959",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "532b97ef-5747-47d4-9fa8-ecc84253a34b"
        },
        "item": {
          "id": "9332f402-0d6b-4dd6-8cc9-a258e2720a58",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7f867061-5975-439d-b23d-9d2b9961b131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f82bb8-a985-4cb1-b4d3-457416a27f3a",
        "cursor": {
          "ref": "6197fc01-3c17-4ef0-8fc8-328feb023f77",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6fb3185a-b69a-4df6-978f-21cf7dad10c2"
        },
        "item": {
          "id": "20f82bb8-a985-4cb1-b4d3-457416a27f3a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9b07c075-5b07-4328-8c44-7e3d32154da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8875394a-69a4-4451-9fbd-825ad4738e03",
        "cursor": {
          "ref": "30661788-c89a-4120-9b31-540cfb6e74e6",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a4047107-f7c5-4917-bbcd-69683a275b0d"
        },
        "item": {
          "id": "8875394a-69a4-4451-9fbd-825ad4738e03",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1b84704b-950d-44d6-87f9-cd6267215541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1b619b-fcf4-4032-94c7-acb28648210a",
        "cursor": {
          "ref": "42b75823-ed44-4ef0-be57-aeed7853b5ad",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "19af9682-727c-4c57-80e6-717bc94cd209"
        },
        "item": {
          "id": "2e1b619b-fcf4-4032-94c7-acb28648210a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bfc1b014-b183-4530-8a63-46890184fe62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b505e8-7bd4-4098-8acf-7dda128a30a4",
        "cursor": {
          "ref": "66b99815-8d9f-4a00-923f-983a06e292df",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c28da535-c375-4d97-878c-2f8b14f73497"
        },
        "item": {
          "id": "59b505e8-7bd4-4098-8acf-7dda128a30a4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "11b0b216-943c-4f53-b4ce-b0ff8d0722c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5fb282c-a5b5-4c69-983f-2b1bda7dfb0d",
        "cursor": {
          "ref": "c9cdd87d-3f48-41c7-8dcb-083d67e4a34c",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4ae0425d-c674-4942-8d63-7bacef6858a8"
        },
        "item": {
          "id": "e5fb282c-a5b5-4c69-983f-2b1bda7dfb0d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8ffcc806-398f-4a4e-8a47-e473c94a6af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9199828-7d86-4343-b2d6-b4e5f01d491e",
        "cursor": {
          "ref": "fad02fdf-17ef-448b-9332-16ae8d97a75c",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "61125a16-88fb-472f-b88f-e14e2272b326"
        },
        "item": {
          "id": "b9199828-7d86-4343-b2d6-b4e5f01d491e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "599d00bd-b141-459f-8f58-b642d330d3d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf35d76-4371-410e-860b-a53fd1abaee1",
        "cursor": {
          "ref": "56cf2d95-3338-4ec9-9a89-0b8de40679aa",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "30615ed7-b1a4-4f41-b228-34956ca266a9"
        },
        "item": {
          "id": "eaf35d76-4371-410e-860b-a53fd1abaee1",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1f825224-4ff5-4d27-9e3b-39e4b8ab6b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98e969aa-6ed1-4d87-984f-51f8407e50fb",
        "cursor": {
          "ref": "583f48a8-0d53-452a-b848-bf82f471e221",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9089de01-9a3e-4425-ba88-f6756a197749"
        },
        "item": {
          "id": "98e969aa-6ed1-4d87-984f-51f8407e50fb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "193ed0a3-0f60-4c43-a43b-b7019c00f901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96bf2689-2008-42b3-9a3c-0ff5c5f58854",
        "cursor": {
          "ref": "b10c8e40-a8b9-4c37-bfc3-8c7644835b4e",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d6c40f96-482f-4a6c-b3ed-cec316599d4a"
        },
        "item": {
          "id": "96bf2689-2008-42b3-9a3c-0ff5c5f58854",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3f2dcbe6-6a83-422d-b7e4-a74ceac3cfc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fbc9be-9a91-44fd-90d3-3eec3725653f",
        "cursor": {
          "ref": "218f67b5-5062-4361-bef5-67b790056020",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a1b2bc81-a58a-40b8-8106-8d7ac9a14fb5"
        },
        "item": {
          "id": "77fbc9be-9a91-44fd-90d3-3eec3725653f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b6c434e9-7859-4f7e-ab04-2cc34aa1cc74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439a8229-a71c-4225-9265-74f34ec536da",
        "cursor": {
          "ref": "0f2aeac8-1777-404b-acc9-ca5a534cede3",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2dc8e20e-6d33-4c6c-a4c0-d2f16132cc2a"
        },
        "item": {
          "id": "439a8229-a71c-4225-9265-74f34ec536da",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b9cd1553-10d5-488e-b06c-64f6f39dd07e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f9f037-d546-4674-a27f-963ad804fa89",
        "cursor": {
          "ref": "fede5f6e-e81b-4b87-8a26-49b344a92055",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c2144234-8a8e-469b-881a-e43e4b0bf67a"
        },
        "item": {
          "id": "19f9f037-d546-4674-a27f-963ad804fa89",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "62dfddd8-d34a-46c7-a93e-54cee0371d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57c553e-a7c0-4f1c-b874-a8074d373979",
        "cursor": {
          "ref": "396b42a0-99c5-459e-9e76-fad1f515f6ed",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "73d98c8e-c81a-4c37-a317-2384622fd31a"
        },
        "item": {
          "id": "c57c553e-a7c0-4f1c-b874-a8074d373979",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a6054708-2f54-40e9-b2e3-30d0db67e190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d44ac86-d4f2-4893-82d3-085c8a380d9a",
        "cursor": {
          "ref": "d9646e17-cadd-4553-bf98-c53e4ca47ad3",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0c26259d-8b75-4f53-acf0-ab4b618e2593"
        },
        "item": {
          "id": "1d44ac86-d4f2-4893-82d3-085c8a380d9a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f8e42ce0-6f3e-4aa0-922d-7531883e2ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcc471a-a37f-4607-b81a-052c0672cf14",
        "cursor": {
          "ref": "2f52493f-4a71-4fcd-8f9e-affe3741f80e",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d6db9a8c-1678-4a33-bea1-ad7b8ae93011"
        },
        "item": {
          "id": "9fcc471a-a37f-4607-b81a-052c0672cf14",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6a277223-ad70-463f-8049-add594d102a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2704ef6-50ce-4df9-bca3-5ccc0d3572af",
        "cursor": {
          "ref": "4a9b14f5-b307-4623-88d2-fcd98a162695",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b6769125-4c10-4972-838a-b644226bc51a"
        },
        "item": {
          "id": "a2704ef6-50ce-4df9-bca3-5ccc0d3572af",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4f2ef1bb-f2dd-40a0-a708-6c862178fc8f",
          "status": "Created",
          "code": 201,
          "responseTime": 724,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "23033f7d-0b40-4aea-9f43-a8e891438e12",
        "cursor": {
          "ref": "0df8dc65-25af-4bde-be7d-54f85ec98ed9",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "16fb3734-517b-47b7-8d0c-9e4e215d5586"
        },
        "item": {
          "id": "23033f7d-0b40-4aea-9f43-a8e891438e12",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4ef3975a-93c2-43e7-93bc-ae97f6df828b",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e68bef0a-57de-499b-8ceb-9c447a8ac7c7",
        "cursor": {
          "ref": "a28f7208-f4cb-46f2-a050-c97863c424fe",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "867d27ae-266c-4c1f-ab40-4fe2fa6c8f1c"
        },
        "item": {
          "id": "e68bef0a-57de-499b-8ceb-9c447a8ac7c7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "84a63613-54c5-40a1-acff-edf9f5c20665",
          "status": "Created",
          "code": 201,
          "responseTime": 367,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "156278fe-03c4-4bd5-9cf7-6bb06cdcceb2",
        "cursor": {
          "ref": "e765e102-dab5-4eb9-81de-cb7f62704917",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "afad5ec6-c32f-405f-a5b5-cdb347ec8f94"
        },
        "item": {
          "id": "156278fe-03c4-4bd5-9cf7-6bb06cdcceb2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ab29a4c6-126e-4c46-8963-142dc00c2311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e5a455-8c3b-4f04-824d-621ec8048fd2",
        "cursor": {
          "ref": "aeb29879-d54a-472d-bc8b-867fc7fcf065",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c72ac551-f7eb-40b7-814b-08251b25b9df"
        },
        "item": {
          "id": "17e5a455-8c3b-4f04-824d-621ec8048fd2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0d33dc37-d8e8-48b7-80df-c24054688604",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c6634264-71e7-4e7f-9ee0-304b46e47c83",
        "cursor": {
          "ref": "238483e2-1fdd-4696-b24b-6200daf1ecc8",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "770e3340-a7c8-47fb-96cc-e076f77ba7ec"
        },
        "item": {
          "id": "c6634264-71e7-4e7f-9ee0-304b46e47c83",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e581dca4-d233-4394-b56b-f40ab4a93a68",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "dfb92349-507a-4f51-9153-c0f51f3ab409",
        "cursor": {
          "ref": "e8d83faa-e38f-452d-aca7-0e95cd6d2b62",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2b93f2a6-5519-4b64-89fc-9b31aad18fe1"
        },
        "item": {
          "id": "dfb92349-507a-4f51-9153-c0f51f3ab409",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2f1beb7b-ac18-4e82-a7c9-c7f7829471a4",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "2b51e732-4dfa-44e2-9b42-80ea7e9bfdea",
        "cursor": {
          "ref": "d08919c6-525d-4f12-94ed-7fa82c03b67c",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "418002e7-5f56-446c-a6e7-8b90a006cca8"
        },
        "item": {
          "id": "2b51e732-4dfa-44e2-9b42-80ea7e9bfdea",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "76289084-72ea-4c2f-8e9c-ebf853001973",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "7aca6100-3b50-45d0-a253-57aef3ab9fce",
        "cursor": {
          "ref": "360a557f-b53c-4e51-be6f-fddb44c55e52",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0ee51480-5b1b-46f9-81c1-4c4f8533df61"
        },
        "item": {
          "id": "7aca6100-3b50-45d0-a253-57aef3ab9fce",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a2efd135-11d8-421f-b291-eb90b93f63f8",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "21ed87a0-1377-43a3-80ab-81865186bab6",
        "cursor": {
          "ref": "0121829c-f6ba-46d3-a7c7-07a05cb3af31",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e8c33425-6625-4e9d-ba9d-b87a3b7b90fe"
        },
        "item": {
          "id": "21ed87a0-1377-43a3-80ab-81865186bab6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "938d2cb2-f1e7-4701-9f57-c4032bc5257d",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "07ad8454-dd67-4c1b-aff2-5570186ab871",
        "cursor": {
          "ref": "239ece15-1e8b-47f2-b274-e6aec0c02dbc",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "fd5fecd9-d627-4fb3-8350-a0e5a395676d"
        },
        "item": {
          "id": "07ad8454-dd67-4c1b-aff2-5570186ab871",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a410ba90-31a5-42a6-bec8-25dfa7a34a00",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e8b44ca5-d515-4c6f-ae13-a1a6cf626654",
        "cursor": {
          "ref": "72afadcd-10ec-466e-a5a8-1bb240a03950",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ffefe2a2-24b7-4b15-ab2c-29d01b03884d"
        },
        "item": {
          "id": "e8b44ca5-d515-4c6f-ae13-a1a6cf626654",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d9c66f89-8c8d-415e-ba1e-61136820ac74",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "47134cbe-cac6-4ef7-add3-886fa80d0b35",
        "cursor": {
          "ref": "441ca4f8-c238-4368-b306-c59455a40cf0",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ca3083f9-0359-4590-8f32-e8356d4ace2f"
        },
        "item": {
          "id": "47134cbe-cac6-4ef7-add3-886fa80d0b35",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "db0c135a-3fa5-46e7-ad96-965e19f86833",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8e9652dd-f9ea-413c-905e-cc3b65ce385b",
        "cursor": {
          "ref": "53b92f29-a65d-48d9-94ec-0548619b1165",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "958df069-3a0d-4f66-895f-1ddc58bbd15a"
        },
        "item": {
          "id": "8e9652dd-f9ea-413c-905e-cc3b65ce385b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "aaea6f32-0f20-4144-bdb4-945ed011d01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2694781e-fc40-4398-a870-ccc0fb78a543",
        "cursor": {
          "ref": "d597c461-b850-4556-91e4-7f1c2608823f",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "733f53d1-6e15-468f-b984-f00f74a328ad"
        },
        "item": {
          "id": "2694781e-fc40-4398-a870-ccc0fb78a543",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "19f365e3-cbb2-4e29-8d86-aba8a41da1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51ca93f-3056-4aa1-9fcb-eb6790df4e4b",
        "cursor": {
          "ref": "45b95867-7b57-4e80-ba0b-d3f3a51078c8",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d8bdbe61-dd14-4f4f-9bb1-798c4f7d91bc"
        },
        "item": {
          "id": "c51ca93f-3056-4aa1-9fcb-eb6790df4e4b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "cebe77f1-4bcb-4fc2-8642-8c154f604bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c1aabd3-8202-400d-8568-c9a85c8b03d4",
        "cursor": {
          "ref": "a5e28b2a-67f8-412f-9eed-bd6055d823ad",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "882eb5c0-55f8-4ef7-a5d8-1d5e1777734a"
        },
        "item": {
          "id": "8c1aabd3-8202-400d-8568-c9a85c8b03d4",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8a932cbc-bc5c-4f17-8e60-7e2c6b9af955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cedbf71-70a1-4807-b4fa-e27d32fa2bfa",
        "cursor": {
          "ref": "e2ae9989-7d79-4d1e-813b-abb488d9faf1",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "530ea814-f392-4929-8b12-0e68399b6299"
        },
        "item": {
          "id": "1cedbf71-70a1-4807-b4fa-e27d32fa2bfa",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2a3a79c0-2414-4ee5-9f27-302209567857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1e9c05-f606-409c-90b3-c2b1512a865d",
        "cursor": {
          "ref": "400aa0c5-862d-458f-b622-1149165c74d7",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "57472b89-f015-4e14-a41b-01ab260c05bf"
        },
        "item": {
          "id": "5d1e9c05-f606-409c-90b3-c2b1512a865d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e77fade0-b789-43c9-aa62-cd206263eece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af71171e-720e-4b85-b659-48334e7e9664",
        "cursor": {
          "ref": "7908b352-5054-4bf4-ac70-7016b3ddcde2",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "01e4f53c-d86e-4c45-962a-b738fca51a5d"
        },
        "item": {
          "id": "af71171e-720e-4b85-b659-48334e7e9664",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1ef5cf0a-cb94-47dc-a069-5ed8f83f7474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20b6272-b533-4f90-84ff-7f823bb52661",
        "cursor": {
          "ref": "2040a78a-efef-4b34-bc83-13116ea49f23",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9b5dc367-9a41-4495-9f14-e2810a40227d"
        },
        "item": {
          "id": "e20b6272-b533-4f90-84ff-7f823bb52661",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "32fde935-c834-4e8b-aa72-b16b08e84b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca6266a-27d4-46a6-8d27-92abcd0a85a6",
        "cursor": {
          "ref": "ac4f656c-3525-4884-a91e-ddb1e053421e",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7f5afbe3-472c-4c5b-bf83-847311bddcb7"
        },
        "item": {
          "id": "cca6266a-27d4-46a6-8d27-92abcd0a85a6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9182f4cc-8d1d-4900-a1a7-c226a0c74e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac33118-70e7-4db2-a093-6987904b0dc5",
        "cursor": {
          "ref": "0d24c44f-a1df-4635-914b-48252393f838",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "bb577051-4c50-4319-bceb-99596c7e9c5c"
        },
        "item": {
          "id": "9ac33118-70e7-4db2-a093-6987904b0dc5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ab280db9-e7c1-44cc-9008-823efd4270df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f3dbee-fa9c-4522-8d3e-daa06afb65e7",
        "cursor": {
          "ref": "65f7721d-9f15-44e8-847c-1183fd645338",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "486727bf-af46-44b0-94ca-64967a775100"
        },
        "item": {
          "id": "a8f3dbee-fa9c-4522-8d3e-daa06afb65e7",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "93f59c1d-ce9a-47f1-9a3f-91c330bf1f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c97542-ee7b-4577-8267-00318700544e",
        "cursor": {
          "ref": "e63625d8-405a-4ce7-bf50-19897cd6bdd9",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "058c4333-b0ea-4f77-b52f-c669d9e72ba3"
        },
        "item": {
          "id": "90c97542-ee7b-4577-8267-00318700544e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ef08201e-85b7-4fd4-9df1-e79502b6537e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2579bf2-38e5-49fc-b7c9-340407550231",
        "cursor": {
          "ref": "3eb14c45-78b2-4e1c-a54b-3566d80310a7",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2330f2f1-43fc-4544-8833-25245dc2ad40"
        },
        "item": {
          "id": "e2579bf2-38e5-49fc-b7c9-340407550231",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "38453d18-8e2c-4f3a-b3ed-7a71367b8e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f268f94-8801-452e-9825-4cedd2b660ab",
        "cursor": {
          "ref": "4062ce06-0e39-41e4-9ff2-0a5296a61b78",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "18debb1f-e619-4a9d-bebf-7d78749a2b7a"
        },
        "item": {
          "id": "1f268f94-8801-452e-9825-4cedd2b660ab",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9c727ae5-4537-4d7d-b712-52f617d987bb",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "9bccb107-afd0-41c8-9c77-efe0e72133a9",
        "cursor": {
          "ref": "59bc42eb-8e02-4b14-a34c-225f8e2732a9",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8bcc0c1b-5109-4f76-972e-27d220350a5d"
        },
        "item": {
          "id": "9bccb107-afd0-41c8-9c77-efe0e72133a9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d64f362a-9233-4e58-976a-f470baa842d6",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "d71e163a-e602-429b-8ed7-636ca5c50680",
        "cursor": {
          "ref": "1b9f5d30-51ea-450f-a02e-a4b1b98643e2",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "98367620-c42f-43a2-bcce-e7d7b22632a1"
        },
        "item": {
          "id": "d71e163a-e602-429b-8ed7-636ca5c50680",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a4f41f8c-95fe-45c0-9145-adf3dd2891e6",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "afbfbd2f-4add-4747-9f6b-6a321fd8d5d1",
        "cursor": {
          "ref": "094c43aa-12b7-4f51-bc7e-ce29d08b9e89",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "bcee9232-1f6b-4acd-8687-2d5c6e468810"
        },
        "item": {
          "id": "afbfbd2f-4add-4747-9f6b-6a321fd8d5d1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4a07d227-ab35-4a33-8492-a43638dd7f1a",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "2a81b4d0-d8dc-4964-9bd5-6da22f95f021",
        "cursor": {
          "ref": "35e9840b-7825-4bb9-8bd4-ebb05da7f2c7",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "66cb533c-33c2-43ba-9955-3ac2fbfb51ad"
        },
        "item": {
          "id": "2a81b4d0-d8dc-4964-9bd5-6da22f95f021",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0228ce51-6fd6-4ee2-b0ba-97fe6d723426",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "656693e9-8396-433c-baed-5af100aad54e",
        "cursor": {
          "ref": "6b6d9876-244c-4690-a7d3-761817a5f610",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ba848d96-0ade-4cef-8a50-7dfa1b84978c"
        },
        "item": {
          "id": "656693e9-8396-433c-baed-5af100aad54e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "01c5b160-6fb9-4f2f-a1ca-b3c4c6d9f43a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0f6d54-031c-4e65-931b-17253d401fe8",
        "cursor": {
          "ref": "d28a776e-86c0-4ba6-b9cb-2024336a98f4",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "06ecc8d3-6490-4f04-b295-217b071023ca"
        },
        "item": {
          "id": "8f0f6d54-031c-4e65-931b-17253d401fe8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "308aed30-3c94-4e86-bc36-61a232c03b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0cfdd8b-bb30-4342-9b1b-a994b1f5e07c",
        "cursor": {
          "ref": "8e70cf60-f339-4555-8e58-43b765d46d1b",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8986ba03-2530-480a-98ac-4ae59ab72b14"
        },
        "item": {
          "id": "d0cfdd8b-bb30-4342-9b1b-a994b1f5e07c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "71be5c43-82c9-4d8b-8bb3-c586c7c3e1a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f69985-de02-4953-9010-4447dca757e1",
        "cursor": {
          "ref": "c114eced-68ce-45bf-8795-8db7e2bd8776",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f04abd58-871e-48be-813e-ffd6b9a0a9da"
        },
        "item": {
          "id": "69f69985-de02-4953-9010-4447dca757e1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "41462d05-aeae-49fc-a673-de81be16d529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed763abc-1ddb-4e48-911a-8b1d0437f16e",
        "cursor": {
          "ref": "d6d8584e-1412-4260-8b77-0bd2c661c0a8",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6aea2bab-ea7f-48f6-bb5e-4a26c73370d2"
        },
        "item": {
          "id": "ed763abc-1ddb-4e48-911a-8b1d0437f16e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6d374f44-897a-4912-a3e4-e65de73ed986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2279f768-1085-4715-8644-94ce97071949",
        "cursor": {
          "ref": "f69a4892-91d7-4663-b411-832109123694",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "4a5c967e-9a12-4a3e-ba9d-ef1c28f300b5"
        },
        "item": {
          "id": "2279f768-1085-4715-8644-94ce97071949",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8a0604b0-ba3d-4335-824b-8432478a03af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4ea2d8-7257-4ba6-a511-5455a4546139",
        "cursor": {
          "ref": "6b169753-4d6b-47ae-af66-2567d7cf2e92",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "45193ad7-2b1e-44c2-aae0-b056d0faad19"
        },
        "item": {
          "id": "9b4ea2d8-7257-4ba6-a511-5455a4546139",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0b980be2-4b02-4f3a-afea-6ee5f07fd279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc104601-192d-4a23-825d-415245878b61",
        "cursor": {
          "ref": "971c303d-389c-4b28-af69-4f1c69237440",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "bb54d9cc-3671-4865-b17b-b7b4aae5d38b"
        },
        "item": {
          "id": "fc104601-192d-4a23-825d-415245878b61",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4d51afe7-5b7a-44b0-b7fa-8184f497ebec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed45483-cd16-49c0-8b10-91494b130781",
        "cursor": {
          "ref": "0a5f38f5-1ef1-4e67-ac29-357481168f85",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3485e201-c1aa-44ba-9a90-73b8703ba00d"
        },
        "item": {
          "id": "0ed45483-cd16-49c0-8b10-91494b130781",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f46c4cda-561c-4092-aa05-958e3cfe23d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c6e16d-c1cf-4cda-b9d4-ceb48fed5eac",
        "cursor": {
          "ref": "73096717-9ade-4c37-8c98-7e01aeaccdc5",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "bee5eab5-9c09-43d8-8836-6d48548ce6cb"
        },
        "item": {
          "id": "53c6e16d-c1cf-4cda-b9d4-ceb48fed5eac",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "1763a035-8b2a-4ef2-be56-3ef170cbb65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b179b84d-f1c8-47a8-aba8-c4aa395f26f4",
        "cursor": {
          "ref": "05538992-7493-4884-bcc4-aa52f6d16d6b",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5c1f8391-2351-471d-a72e-4706e6c5bf72"
        },
        "item": {
          "id": "b179b84d-f1c8-47a8-aba8-c4aa395f26f4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d51ee1fe-9a9a-47fc-bf25-b1e94cbac83f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b6bae0-a018-4410-a0ce-a9418df258e9",
        "cursor": {
          "ref": "6c701fd6-8f49-4a6e-a704-09aa96e8f347",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b9979a99-09bd-41b4-8d8b-fd9c31264217"
        },
        "item": {
          "id": "e7b6bae0-a018-4410-a0ce-a9418df258e9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "01147837-d05b-4769-ba08-02c312d0aec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6666412a-9e82-4662-b3ae-09598b0c9c7d",
        "cursor": {
          "ref": "087f5066-56c0-4b87-8004-3b68f24e972b",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1f9b77a3-db90-41f0-a9a8-def4c68056c2"
        },
        "item": {
          "id": "6666412a-9e82-4662-b3ae-09598b0c9c7d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "caddf7de-f8e7-42bf-9f13-f68d762c8c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3327a7-8591-4049-a894-cfae824df415",
        "cursor": {
          "ref": "e332336a-6abf-408c-8931-78bb58b6a5bc",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "08ef7d60-52b2-4e4f-8682-b8ce651649e2"
        },
        "item": {
          "id": "ba3327a7-8591-4049-a894-cfae824df415",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ea959638-b109-41a5-823f-883c492be016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de6ef75-f065-4c2e-afd7-80639c79eeb9",
        "cursor": {
          "ref": "74d888c8-0332-463c-b25f-c9f1f5011a37",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "002b60a8-22ab-4325-8f53-99842aafdf4b"
        },
        "item": {
          "id": "5de6ef75-f065-4c2e-afd7-80639c79eeb9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "65f86e0f-9d40-4849-85a6-b7adf1588c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a86a14-3fd4-4ee4-9e6b-aea8d0540c88",
        "cursor": {
          "ref": "6409679a-5561-4222-b818-422adefed616",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2dba00c5-fb08-4b40-8601-d6923eb69cfa"
        },
        "item": {
          "id": "a5a86a14-3fd4-4ee4-9e6b-aea8d0540c88",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3f7a0e43-a31e-4211-85df-c300123f5065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b940095-6e96-4c4b-bfb9-5b06cb55ba10",
        "cursor": {
          "ref": "d2310026-9b51-40d0-8c67-ab4af1d26ecd",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e9207332-bde9-4c60-b51f-58c9139be70c"
        },
        "item": {
          "id": "6b940095-6e96-4c4b-bfb9-5b06cb55ba10",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "158e81df-eda2-4ca7-8925-b348423100e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13779b8c-9ec8-48b4-bb93-c4f417d681c0",
        "cursor": {
          "ref": "7fff1588-e7d9-4924-8287-db7814a638dc",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "050b2d05-2ca2-4309-b46c-4f7f1fb4eddb"
        },
        "item": {
          "id": "13779b8c-9ec8-48b4-bb93-c4f417d681c0",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "20a1ac5b-3492-45ca-9fdd-01f0dc476a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e651a9-f417-4561-a8c5-25a31da195f1",
        "cursor": {
          "ref": "3037bea3-0bb8-4ea0-9e9c-7a1e5fea36ca",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7a81372c-5574-43d5-bef7-9b13c77fe936"
        },
        "item": {
          "id": "92e651a9-f417-4561-a8c5-25a31da195f1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "65f7958f-b814-443c-869b-b1e43c19fd33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94db6eb-b621-4117-a813-005a81e10f61",
        "cursor": {
          "ref": "7b8c4599-b3b2-4219-87dc-e6a1adf74831",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "84ef1bf2-6df4-4009-8ca0-5b706565ae20"
        },
        "item": {
          "id": "f94db6eb-b621-4117-a813-005a81e10f61",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "7a00248b-d289-4313-888b-343927a3a0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b56b415-1f72-4c11-8f96-655876433447",
        "cursor": {
          "ref": "fbaf788c-8544-4111-954f-1272198e67f4",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "23a6c046-c45a-41e6-9103-bf4c16bcf9fa"
        },
        "item": {
          "id": "6b56b415-1f72-4c11-8f96-655876433447",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4be80b60-3ec0-40bb-9c21-fe036315ea7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c761097a-2495-4047-9c86-924002d7c78e",
        "cursor": {
          "ref": "037ecd75-e608-496b-b7c1-ab5f93b81543",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "77b958b7-d6b3-4445-813c-60fc0b905a5c"
        },
        "item": {
          "id": "c761097a-2495-4047-9c86-924002d7c78e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "91d4cbb1-a46a-4057-b175-fec30b16682d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61f5bb2-c27b-4876-a4e0-48d38382b940",
        "cursor": {
          "ref": "be90afca-d91b-4adc-b0fa-4420d6b83b4f",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1ff399e4-2e29-429c-9f6d-e82404f9e3c4"
        },
        "item": {
          "id": "d61f5bb2-c27b-4876-a4e0-48d38382b940",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "848c0833-0669-481a-99ba-0cb24f535eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997c9425-5895-4d1c-b0e8-82b607796490",
        "cursor": {
          "ref": "868a7df8-0d27-46fe-a479-f6c81b2d8b9b",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1e364539-f5df-4ec2-93f7-8a5da2dfaf33"
        },
        "item": {
          "id": "997c9425-5895-4d1c-b0e8-82b607796490",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b09753fe-96a1-4719-9506-33cf971ae045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28d7284-dca9-4a62-9880-5d984144fffe",
        "cursor": {
          "ref": "6c005e84-dfe8-4948-8f02-663a0ab75a6d",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5e13c780-22a6-4c18-b199-aee6197c5e1c"
        },
        "item": {
          "id": "e28d7284-dca9-4a62-9880-5d984144fffe",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c21497d7-f15a-4057-af56-a10544b60c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19609829-2bb9-4711-b10f-f877ea7cf5ac",
        "cursor": {
          "ref": "e68f7da6-a835-4eb3-8df1-b9d1f7cda744",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4bc5e31d-b541-43e6-8271-a71c5c092b46"
        },
        "item": {
          "id": "19609829-2bb9-4711-b10f-f877ea7cf5ac",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c4fa8f8b-7b3e-448b-ab9d-4cb4e24abf8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1835e3-2d97-4c45-8501-5c995cc478ac",
        "cursor": {
          "ref": "cae73499-1bf7-4559-bc6d-979e89c80351",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2b6c34fd-9d8c-465a-955a-18d8f3e72b18"
        },
        "item": {
          "id": "6f1835e3-2d97-4c45-8501-5c995cc478ac",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c6901554-a35f-4114-9508-91c1010f09a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455800de-50ba-4102-83c1-0e28eff999e1",
        "cursor": {
          "ref": "3f5c98d6-6d1d-4f72-9efc-6e4fa30cbfa6",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ebbaa506-b806-4f13-833d-8bdfadf538bb"
        },
        "item": {
          "id": "455800de-50ba-4102-83c1-0e28eff999e1",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "58ec8851-da4a-47a6-a079-1c202a424fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "188326bc-ca0b-4dc0-aaa0-2e8b9ebab501",
        "cursor": {
          "ref": "2380d6cd-631d-4122-b76c-76b14e90f5d1",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a814c907-b28b-4d19-91bb-5602ae4d62b0"
        },
        "item": {
          "id": "188326bc-ca0b-4dc0-aaa0-2e8b9ebab501",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "63b07da2-6138-43f6-b507-c27b1644c725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b9412d-fa3c-40a9-90c0-f067480fad63",
        "cursor": {
          "ref": "3dd29390-9542-464f-9225-3f04a096c1d9",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "996337e1-b5ec-4ba4-9ddc-6c3f382f5309"
        },
        "item": {
          "id": "86b9412d-fa3c-40a9-90c0-f067480fad63",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a4d55161-8ed7-42e3-829b-4741c7f161a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab4e31c7-23f6-4ef0-aa45-c87bcb7d5714",
        "cursor": {
          "ref": "855d2d4b-f481-441e-b391-1604110f3a70",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a8708b9f-4e8d-44ec-bd23-eae8fcade2b1"
        },
        "item": {
          "id": "ab4e31c7-23f6-4ef0-aa45-c87bcb7d5714",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a5291cf8-1834-414c-81ed-6f2ca14b0fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e75268f-c1e7-4171-991e-af1f4f5a7b15",
        "cursor": {
          "ref": "0e18390a-c219-47a9-98d5-8e3b66c535f1",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1fc00a53-25bd-4a2e-a039-87324ca0e2e1"
        },
        "item": {
          "id": "1e75268f-c1e7-4171-991e-af1f4f5a7b15",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "824be135-8034-4088-8d55-89e0dcd18485",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff648a32-3e09-4068-bb69-5d447cb73873",
        "cursor": {
          "ref": "40720533-84ee-4a5c-af16-fab05fe67673",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3dd54187-3095-4d81-a46d-ff888ec4cb51"
        },
        "item": {
          "id": "ff648a32-3e09-4068-bb69-5d447cb73873",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "ef26337e-4e9a-41a6-b224-db687b0b8e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "a06b9f66-0d60-4c3a-87ed-75aa25bad9b4",
        "cursor": {
          "ref": "355a21a4-4303-4948-a526-663c7e591f83",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d1723723-85d2-4131-bc56-4aeeb7ef54d6"
        },
        "item": {
          "id": "a06b9f66-0d60-4c3a-87ed-75aa25bad9b4",
          "name": "credentials_issue"
        },
        "response": {
          "id": "454af1cc-2e99-4c92-b32b-796a83fb1062",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6331b0-4565-4886-8873-4fb29352e7af",
        "cursor": {
          "ref": "def65b86-e6b0-4bf3-9c59-151eb0389845",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "23e5c103-8f74-4c4c-be25-f4c148dd677e"
        },
        "item": {
          "id": "ab6331b0-4565-4886-8873-4fb29352e7af",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "358a5f31-f9c7-45d0-a2ee-636c56060447",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "32304315-74b8-4d99-a9d9-5061a8b42344",
        "cursor": {
          "ref": "625fdfee-7b83-49e7-8aa5-59fcef1e5f18",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9159f9a5-cef8-429f-bd06-1194fff282ac"
        },
        "item": {
          "id": "32304315-74b8-4d99-a9d9-5061a8b42344",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4cae5899-6c50-4c01-9f02-72a5d8f8231d",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "30461dc0-3efc-4c25-b162-cec53305028e",
        "cursor": {
          "ref": "cfd779c2-1384-4556-bdd6-5e42e083e5ff",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "cc9e1947-851e-4ac3-801f-92b237238349"
        },
        "item": {
          "id": "30461dc0-3efc-4c25-b162-cec53305028e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b15cf93c-4c73-4c15-bbd5-3679b3b8953b",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d441b5-cc9a-4d23-a4d2-496cb46754d3",
        "cursor": {
          "ref": "141bccac-a6a9-416a-8bab-5c3495a9405e",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e3253454-e07b-451e-b4ae-4e0874fc9b8d"
        },
        "item": {
          "id": "36d441b5-cc9a-4d23-a4d2-496cb46754d3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bd86bc0d-7a1d-405a-ac23-35e444801a5e",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-13T00:38:03.763Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-13T00:38:03.763Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "5c5a9aca-e5d8-426a-b16a-90fb98150d04",
        "cursor": {
          "ref": "7eb8d520-1854-4c43-bf8b-79191dd2b3de",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "caa9ac5f-c153-4967-a94d-837425a26550"
        },
        "item": {
          "id": "5c5a9aca-e5d8-426a-b16a-90fb98150d04",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4f130ce2-b0d9-4961-a71e-788b922decd9",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aac672c-0124-4224-a923-01de13be9915",
        "cursor": {
          "ref": "cf78b3c1-b55e-4827-b8e3-e161ded9d565",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bfa323e2-9139-4ec9-9a97-d85c6f46e9cd"
        },
        "item": {
          "id": "1aac672c-0124-4224-a923-01de13be9915",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1826324f-b4e8-4083-b341-f3544ce96561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a0ef0e-3ced-4f26-ba57-65ebfeef0de7",
        "cursor": {
          "ref": "ba96aa6f-58d7-41d6-93a8-8f9da5940180",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "276bc15c-cd83-4caf-b94d-57569d55ff19"
        },
        "item": {
          "id": "d0a0ef0e-3ced-4f26-ba57-65ebfeef0de7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d576992a-885a-480a-99b6-64dbb0d4518e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3cd439-2b01-4d2f-b451-dcb2ab2186e1",
        "cursor": {
          "ref": "56d46cec-a4b1-4e83-bbd5-b512ba1c599a",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "feff974f-8725-41bf-85f1-f22ea939c15e"
        },
        "item": {
          "id": "8b3cd439-2b01-4d2f-b451-dcb2ab2186e1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c211b2fa-479d-45ae-915b-e1f75edbb437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c580cc1c-6c0d-40ac-9f8b-72fe85ec5eb5",
        "cursor": {
          "ref": "03bf1481-2bea-436e-a5d4-742d3fb38711",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1d2dfba0-141f-411c-bbf1-177f3b79dcc1"
        },
        "item": {
          "id": "c580cc1c-6c0d-40ac-9f8b-72fe85ec5eb5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b24b5ea2-3a59-4e7e-a595-60fcc9f6cebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34373046-ffad-443a-a014-100815460279",
        "cursor": {
          "ref": "92249dde-04c4-46a2-9e13-6dca31740c5e",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e9a08976-2e63-44df-9c25-2ded52ffc9f2"
        },
        "item": {
          "id": "34373046-ffad-443a-a014-100815460279",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1f29aee9-5e61-4ac1-8f47-a41366817000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d862f0d9-625b-4173-b56c-36bee16506ed",
        "cursor": {
          "ref": "c101173c-53fb-42ed-abe7-8f5966f08710",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c93d4518-3d7f-41f7-811b-b18dd1d3e451"
        },
        "item": {
          "id": "d862f0d9-625b-4173-b56c-36bee16506ed",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "decce453-97cb-479e-bbdf-5e8d51770a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a86b9d-f3fb-4478-b361-ef63fb0df17b",
        "cursor": {
          "ref": "eead0114-cff2-4bf7-bbaf-cddfb244a39a",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "345ef082-03ab-4b0c-8a09-3556567fdd36"
        },
        "item": {
          "id": "41a86b9d-f3fb-4478-b361-ef63fb0df17b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b61271b2-3f14-41ad-b9f5-6f7fbbe7601b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d0eeb4-6560-4422-b9cf-5e6485385fa6",
        "cursor": {
          "ref": "cdacd261-70fe-45e8-b999-df5ff317c1af",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7e861dc0-8f6b-43d5-b262-d07463b070a6"
        },
        "item": {
          "id": "43d0eeb4-6560-4422-b9cf-5e6485385fa6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "58c2444c-6638-4230-b200-5055bfb7bde5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89f62c75-b614-4519-8df3-78e488f2a72b",
        "cursor": {
          "ref": "9650dbdd-13db-4bfc-8a4e-27ef35db98ea",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "25ac9dbc-37de-4614-b18d-97387b5d110e"
        },
        "item": {
          "id": "89f62c75-b614-4519-8df3-78e488f2a72b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bc7e5cd2-9e77-4583-afa2-7fa399ebf466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0171f64d-c032-44f8-b3ea-0e9516f4223a",
        "cursor": {
          "ref": "ebbd6a3e-2e7f-4b73-a20f-b21ae1e89177",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a49cae43-a955-4099-8321-4d9e62bcabee"
        },
        "item": {
          "id": "0171f64d-c032-44f8-b3ea-0e9516f4223a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6ab88ab4-a21e-432c-ba1d-05aec9f1e1c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8bbf4fa-b94d-4cb0-9f4d-c6d89352e06a",
        "cursor": {
          "ref": "883a109b-e819-434d-bc50-61d3f5afdac2",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "42914ec1-98dd-434e-b05f-165e470fc209"
        },
        "item": {
          "id": "b8bbf4fa-b94d-4cb0-9f4d-c6d89352e06a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "887a9ed2-2186-425a-a0fc-37c0b6b4f0a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16990b1a-fab4-4ca4-ab9d-817f67728480",
        "cursor": {
          "ref": "dca20a0e-886c-4deb-9890-22cd16dabace",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "481f0cda-815a-4144-a255-ff609df596d7"
        },
        "item": {
          "id": "16990b1a-fab4-4ca4-ab9d-817f67728480",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2a4f2e2d-54fb-4253-8207-03217e54aeb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70e55ae3-7a7d-4cdd-8301-d4e43b6de5dc",
        "cursor": {
          "ref": "9c90ae59-6bed-484a-a19e-cb74a82f3963",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d4beb317-634a-4af1-8a13-dd0a1aead173"
        },
        "item": {
          "id": "70e55ae3-7a7d-4cdd-8301-d4e43b6de5dc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "240a3318-7cff-46de-a76e-7177f27b4db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd91dfa6-585c-47c1-b96a-1b6f7377bc3f",
        "cursor": {
          "ref": "be13754d-cdf2-4d39-8353-a4c20fc766d1",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "bebd7fd9-b295-40eb-8337-d544db37fc65"
        },
        "item": {
          "id": "dd91dfa6-585c-47c1-b96a-1b6f7377bc3f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1ea63dfc-2749-41da-a74f-4f749ddd75db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "5046cc66-3054-4a63-9e23-2302ed0c51c7",
        "cursor": {
          "ref": "2b26d287-3b7c-4ce1-ac83-0d2293b73f9c",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "740fa9a9-1b2f-4977-9085-0b75e081ddba"
        },
        "item": {
          "id": "5046cc66-3054-4a63-9e23-2302ed0c51c7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9cca0b7b-a782-4017-91b5-8a9695130558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b290a0e-7305-40ab-8476-d55496231442",
        "cursor": {
          "ref": "b0ac8ae7-abb4-409a-8679-70ae2a78b70b",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2caddc8e-c67c-467c-90d8-f827fbe99d4e"
        },
        "item": {
          "id": "4b290a0e-7305-40ab-8476-d55496231442",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "33489c6e-23e0-4fc0-a3d7-2e0b315afe74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db19dfde-2adf-43d3-ab75-d35bbe348018",
        "cursor": {
          "ref": "654cda51-997b-4aa4-a7cc-ac4a6afc2edb",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4098ec4f-3536-42b5-a2d9-6c119308df0c"
        },
        "item": {
          "id": "db19dfde-2adf-43d3-ab75-d35bbe348018",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2b7b714e-315f-468f-9467-09a976607718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad21e38a-cc04-44ef-a094-b5c4b2916c16",
        "cursor": {
          "ref": "1e73a24f-f365-48d1-85d0-b2bc33a19a94",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "61167674-083c-4154-989e-5ef2ad2baf87"
        },
        "item": {
          "id": "ad21e38a-cc04-44ef-a094-b5c4b2916c16",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a4541cba-e1e6-414d-b7d2-1811113b0481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7974297-ddcd-4ed2-8747-fff3e90c4a8f",
        "cursor": {
          "ref": "00a79217-0b46-4a3a-a44d-df7b69a3fe59",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7ed4947e-9858-4a67-9134-3b59c2d500ec"
        },
        "item": {
          "id": "e7974297-ddcd-4ed2-8747-fff3e90c4a8f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1a78969e-481f-46de-8b88-c370a8f267c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23499fa-90fd-44c2-bdc5-e4bcd139e0bd",
        "cursor": {
          "ref": "3050c5f1-08e9-48fc-9146-0f811525250f",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1860ad21-3926-4aa8-9a97-a5a5834a10db"
        },
        "item": {
          "id": "d23499fa-90fd-44c2-bdc5-e4bcd139e0bd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0d0778df-a772-4038-b0be-d54c65d8b984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48fc8ab-c7ac-49fc-bf9e-0971d54fa22a",
        "cursor": {
          "ref": "ed16b8f7-8fa0-4454-9460-c51898a25a78",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "78515c3b-c1fd-4b50-a527-41184b423203"
        },
        "item": {
          "id": "b48fc8ab-c7ac-49fc-bf9e-0971d54fa22a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c8697d01-ad37-4444-98cd-baaaeb894945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad2a90b7-7e3d-4bd2-8c63-a7b1281e2bca",
        "cursor": {
          "ref": "54188a95-8254-4120-b339-d16e71cbc557",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9293e548-74c6-4e85-badd-1df3e7b0c5ec"
        },
        "item": {
          "id": "ad2a90b7-7e3d-4bd2-8c63-a7b1281e2bca",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "742aca05-901c-48ab-b46f-efb45d2f424d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60e229e-2d02-41ff-aba5-60f99572ec2b",
        "cursor": {
          "ref": "a0240334-7780-4b33-a175-a34b66173562",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b8abaaf3-1126-41fd-9251-f71a5c2fd2fb"
        },
        "item": {
          "id": "d60e229e-2d02-41ff-aba5-60f99572ec2b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f7bb4978-2b93-4442-bbd5-845cbe093b47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c32b238-bd81-4331-814c-63f4b072473c",
        "cursor": {
          "ref": "07ac3fb6-7ce1-4e2a-b812-3a5b2219436d",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e0dc4aaf-5e74-4a87-a14d-224ab363020c"
        },
        "item": {
          "id": "4c32b238-bd81-4331-814c-63f4b072473c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "aa7f9fe2-099f-443b-8bcb-d95bbe489591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035d5f80-bc47-4bb7-9490-b8a48e3c7357",
        "cursor": {
          "ref": "15f80e85-26df-4e79-8660-f488cc12c779",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a9ef383b-d348-4a84-95bd-b3a27ef11491"
        },
        "item": {
          "id": "035d5f80-bc47-4bb7-9490-b8a48e3c7357",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "089868a6-42e1-422e-8aca-0d8aa74b9818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b64e0943-abe3-48f7-8bee-bfa5754d701a",
        "cursor": {
          "ref": "ce34e15f-0792-43f9-bc1c-e175b4bdcf62",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9980f804-ed82-442f-9d02-444d762e6294"
        },
        "item": {
          "id": "b64e0943-abe3-48f7-8bee-bfa5754d701a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a93cc3c9-7daf-4ab9-9d52-c9d8869380a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f3ab2b1-ebea-4869-9fa1-608a6ce23636",
        "cursor": {
          "ref": "ce2c453b-d6f5-4a68-bf45-498cdaea0461",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0a8c9bc7-20fa-4189-b94b-6bbfb4b6df6d"
        },
        "item": {
          "id": "8f3ab2b1-ebea-4869-9fa1-608a6ce23636",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "73e2dec1-58c6-4493-9d38-40e582c95edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "707ff4d7-6d96-4a33-a6b0-52fdde4ec027",
        "cursor": {
          "ref": "8738d657-358a-463f-9127-ff8ac1288fc8",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5cc9dbac-75ec-4f92-97ce-02336c5dc360"
        },
        "item": {
          "id": "707ff4d7-6d96-4a33-a6b0-52fdde4ec027",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8f2333b9-be1f-4f9c-b68d-dc33392399d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d404c1-2a51-4e46-b07f-af6bb8e15699",
        "cursor": {
          "ref": "4df1d091-e970-40eb-ae4f-33467ae499ce",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "fd6e59e2-000a-4b28-8cad-6a1e733795f2"
        },
        "item": {
          "id": "40d404c1-2a51-4e46-b07f-af6bb8e15699",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c5b99507-109c-4c99-a572-085a108e5f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c2b1dd-2496-456b-927a-047dcc276707",
        "cursor": {
          "ref": "1beddd32-2624-47b6-8747-5dc4a3531619",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "88ae4d8a-256d-4d9f-9263-9b8b1bfff574"
        },
        "item": {
          "id": "c7c2b1dd-2496-456b-927a-047dcc276707",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4a937dd8-5e57-497f-8a66-b9fbd32e2c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df63c9a-bc58-4ab4-a31f-f378d389c2fa",
        "cursor": {
          "ref": "17bae355-980f-4c14-8784-d2537458b3f2",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "287fb251-5288-4b12-8cb9-2bcfca7c7707"
        },
        "item": {
          "id": "2df63c9a-bc58-4ab4-a31f-f378d389c2fa",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b2f8ae55-df40-4946-9076-b146df3b2ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34de334c-85d1-45b4-9d95-893d45289118",
        "cursor": {
          "ref": "9ef98342-50bd-40cd-bd58-94fec9e2d949",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b123bd9a-0fc7-4fba-a939-68c32576c2b9"
        },
        "item": {
          "id": "34de334c-85d1-45b4-9d95-893d45289118",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a1bbe5db-d751-4303-a6fb-b6df0be9197a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce0e13a-1f27-4731-a9f5-34bbbce59dae",
        "cursor": {
          "ref": "5263feb5-193e-4b79-9fe0-183428f63944",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3392af2e-09a7-4f63-99e3-b0eec091843a"
        },
        "item": {
          "id": "6ce0e13a-1f27-4731-a9f5-34bbbce59dae",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "20f4a3fb-2896-4da2-8c0c-5083b0f2c5ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db117d9c-838b-4f2b-a3a6-9cc529a5c3a5",
        "cursor": {
          "ref": "5171c12f-bb7e-45e0-b7ae-d1d0eae3fe46",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "18e5be04-3e62-4e70-ad38-0aa84f0c77bd"
        },
        "item": {
          "id": "db117d9c-838b-4f2b-a3a6-9cc529a5c3a5",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c3142376-3c8d-4336-afdc-c8fbe35f23f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fac2caf-6504-4708-926c-afd584a0e115",
        "cursor": {
          "ref": "b979c891-a6b4-4c15-8c24-d9033883312b",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "57e55957-698e-484a-989f-be9919900e1e"
        },
        "item": {
          "id": "9fac2caf-6504-4708-926c-afd584a0e115",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "1285a7de-3046-477c-842a-504a6011e89f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e47685-8202-4f4e-80de-72ad0be2fae8",
        "cursor": {
          "ref": "d6c76d37-0922-4ed6-9adc-3dabf72dd59b",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0ddfa11c-1bcf-4aa2-87bc-f6ba9ecadf4a"
        },
        "item": {
          "id": "86e47685-8202-4f4e-80de-72ad0be2fae8",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "f184cdde-0224-4515-ac0e-5b82dccba4ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc39adf1-5502-4c6c-83a7-7c9ad146530f",
        "cursor": {
          "ref": "c0440746-f42f-45be-8fe2-eee69f65c576",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3f2a1f78-d8ed-4655-9bb7-0c203614a501"
        },
        "item": {
          "id": "cc39adf1-5502-4c6c-83a7-7c9ad146530f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "9715ebc3-f638-431f-af44-39350b78afae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae211b5-8c46-4158-ae7d-6ec7a9fb7b9e",
        "cursor": {
          "ref": "dc3043c6-145a-40ed-82b9-8786e0cac0f6",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "706d46f1-113f-4d8f-95b8-a9f36629f3d5"
        },
        "item": {
          "id": "9ae211b5-8c46-4158-ae7d-6ec7a9fb7b9e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7c055290-1a3d-4b07-90c0-69f30179ea12",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3624424-380a-488d-a830-d06eea7b8839",
        "cursor": {
          "ref": "cb862032-e11c-41a8-85e2-ffc69773ddee",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6e894fa4-367e-4a52-a771-1da602166728"
        },
        "item": {
          "id": "d3624424-380a-488d-a830-d06eea7b8839",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "31daf8a8-536c-49c3-811c-5c5fb95db850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974e9f78-57b9-4ab4-befe-a8b602a98a99",
        "cursor": {
          "ref": "7416579b-9455-45f3-bc50-ecb898a1b61d",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6697382e-6ea4-4701-b9fa-c286628618f2"
        },
        "item": {
          "id": "974e9f78-57b9-4ab4-befe-a8b602a98a99",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0d50451a-1502-4a21-8fe6-3a97e36a67be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b19f84-f418-46a5-ae03-94fde6ba27d6",
        "cursor": {
          "ref": "c5178e41-ae5f-45fb-ac4d-b995b9ae2a51",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "928efc29-632e-4615-8a3e-a2bd549d32fe"
        },
        "item": {
          "id": "55b19f84-f418-46a5-ae03-94fde6ba27d6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "cc2362ef-e78a-44c7-9806-77847db66621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0e1837-8c0a-4325-a330-4480c1da59e1",
        "cursor": {
          "ref": "a9d9e32f-831a-4e1a-8ed9-6e004f3571fc",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f75b61e1-2bbf-4b21-b9e7-22c085700ad9"
        },
        "item": {
          "id": "bb0e1837-8c0a-4325-a330-4480c1da59e1",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "27523bb4-c632-4b58-bd1b-14884195d9a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37b4c00b-833a-473e-8768-071a67a5adb1",
        "cursor": {
          "ref": "569be567-f7d2-473b-8b5e-a89e92be6bf4",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8f0fc695-a110-4d29-af53-649727527c17"
        },
        "item": {
          "id": "37b4c00b-833a-473e-8768-071a67a5adb1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7957013a-9358-4a00-a6ba-b2c3fe7c095b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739dbbf7-21c0-44d4-a509-fc221f483e09",
        "cursor": {
          "ref": "d8768fec-e2d4-4b01-b945-7f6bb11faa52",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8806244c-2d02-4558-8e3a-2d6d7a820725"
        },
        "item": {
          "id": "739dbbf7-21c0-44d4-a509-fc221f483e09",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "08d0ccc8-1a5a-48e8-a917-896d7dddb251",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "dbb71963-3c0e-4f24-9a85-69923cbb73b0",
        "cursor": {
          "ref": "86985f00-b014-4753-a49e-b8f8a8c0e969",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b9f875a3-3b39-40d3-9f23-27bfd1139679"
        },
        "item": {
          "id": "dbb71963-3c0e-4f24-9a85-69923cbb73b0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b49a6760-cbe2-409a-8cc0-b7166f54ba1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ae3cdd-61a2-4b17-8ef6-0ff26d8589d2",
        "cursor": {
          "ref": "468e06cc-b4ef-474b-8ef6-80fb5194abf7",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d89e243f-0418-44a4-ab2b-5511fce6c482"
        },
        "item": {
          "id": "f3ae3cdd-61a2-4b17-8ef6-0ff26d8589d2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "439a63fa-d717-4078-9725-12f8dbda570d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382fcd8a-222b-4952-8c21-120bc2f6a894",
        "cursor": {
          "ref": "6265a883-d03e-458a-9ece-66156aecd22b",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4edc505e-616e-40bf-ac23-88e8a312ee78"
        },
        "item": {
          "id": "382fcd8a-222b-4952-8c21-120bc2f6a894",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "91124a63-4f16-4adb-97e6-86a885004119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d9a4fa-893c-4899-bf60-8c248794a8ff",
        "cursor": {
          "ref": "b2426124-02d8-4244-b404-aa556dcf68f2",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8760342b-bc6e-42e2-89da-dbe3e9723c89"
        },
        "item": {
          "id": "30d9a4fa-893c-4899-bf60-8c248794a8ff",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "57f31db7-2634-40ce-aeb5-1f8077ac2f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee09620-20d8-412b-b3b8-7073716003dc",
        "cursor": {
          "ref": "74da4a53-71c3-435d-af0e-f021eb3a041f",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3e1d910a-0bee-489f-9e43-f7ac90268a79"
        },
        "item": {
          "id": "fee09620-20d8-412b-b3b8-7073716003dc",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "4f3e26f3-b641-4dcc-884f-098d83622d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0140132-319a-46a2-9174-0195fb0a4d29",
        "cursor": {
          "ref": "2e424faf-5a28-401a-ac6a-a1e215a6669d",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "280b8958-cd63-433b-aad3-4fec55ef4f6c"
        },
        "item": {
          "id": "a0140132-319a-46a2-9174-0195fb0a4d29",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "be92b233-4569-4806-90bb-94f4f4450249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b32292-0db6-42d3-a569-00d418fd5b50",
        "cursor": {
          "ref": "4ebe579f-bfa1-4301-a9cd-9d1b9fcd55dd",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9df6281b-3170-4e24-a01a-721c93f5496a"
        },
        "item": {
          "id": "e0b32292-0db6-42d3-a569-00d418fd5b50",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "edaaa8c6-609a-4077-8bcb-6b02d882875c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb945008-9c35-465b-be2e-98a08e1ae811",
        "cursor": {
          "ref": "736c7614-d4f3-4209-9f59-1ddd1040a09c",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "878edcb3-c62f-458b-9757-ad45920ea32d"
        },
        "item": {
          "id": "bb945008-9c35-465b-be2e-98a08e1ae811",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "733c8d22-f802-49d0-8f39-c99186979bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5728d675-c585-45e5-81de-c6bb7d693e30",
        "cursor": {
          "ref": "ca8dc08b-bf73-46f7-b336-7b8a21ea7a9b",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7db020c1-cb01-4a8d-a8ae-5929faef71da"
        },
        "item": {
          "id": "5728d675-c585-45e5-81de-c6bb7d693e30",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b7322abd-142e-4e94-9bf6-9ac73cbe39f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed11c36-62e8-4968-ba41-bf99c94740d1",
        "cursor": {
          "ref": "f54696ab-93bc-4ae7-95d6-77683aeebcb3",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ef85bc18-e03d-4215-be91-4d05618ebac7"
        },
        "item": {
          "id": "6ed11c36-62e8-4968-ba41-bf99c94740d1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "105218cd-69a9-449e-a03b-1a120f54b487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34977515-367a-453e-8ecc-c06c830f5f0a",
        "cursor": {
          "ref": "d342c8a1-305b-4a85-a8d3-62095bb3b8f0",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0e8a4bde-f297-4064-bc59-1a8e2fc8751e"
        },
        "item": {
          "id": "34977515-367a-453e-8ecc-c06c830f5f0a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "348f768c-e8e5-4c29-8ebf-1698d6b8c61e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 404,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f166747f-6cc7-4e28-8bc7-2e795f430ed5",
        "cursor": {
          "ref": "cec8a006-98e5-4dfc-a03b-08c6affffb85",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e96e378f-6523-4452-a3cf-ec3dc554f8f0"
        },
        "item": {
          "id": "f166747f-6cc7-4e28-8bc7-2e795f430ed5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "563fdf8b-3e80-4896-b79b-9ab94f9160cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d42ee01f-2e94-4308-9c8a-fb1a76b1a116",
        "cursor": {
          "ref": "95086d47-fdef-40ae-96a8-1d6dea586392",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ec064703-12db-4a8c-b2e1-1eefaba296e5"
        },
        "item": {
          "id": "d42ee01f-2e94-4308-9c8a-fb1a76b1a116",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "414b3570-0b29-4288-b480-b3818df35788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43106f13-39b4-412f-bc87-3d4929a631ca",
        "cursor": {
          "ref": "98a52838-2e73-4c45-801b-c533a9fe6fe2",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4ae736e6-35cf-4610-95e8-504862a3cf11"
        },
        "item": {
          "id": "43106f13-39b4-412f-bc87-3d4929a631ca",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1fd0c86d-5cb8-49a8-a6da-a7ddb3ef420c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d42001c6-1a72-4f87-8edb-287854059148",
        "cursor": {
          "ref": "0cc07713-00c2-4f4e-b11c-eeadaa4ba654",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "120f9bf4-231d-4f3c-ab7c-65923bc80137"
        },
        "item": {
          "id": "d42001c6-1a72-4f87-8edb-287854059148",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "cb99b6da-ee5f-4cd7-8fd0-4d04ca78882b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "664b0e52-c9c1-44ae-be8f-91480e747113",
        "cursor": {
          "ref": "3697ca22-159d-41d5-9a7a-cb5bd719100f",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "31bde3e5-288c-40a4-b672-af0d042e0137"
        },
        "item": {
          "id": "664b0e52-c9c1-44ae-be8f-91480e747113",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3690bce3-869b-4a22-9264-630510f10a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05f877b-4040-4c2e-b3c7-b21779f6406c",
        "cursor": {
          "ref": "2634ae70-7006-4fdf-bcc6-7cab22cebf40",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "0ff6eaa0-6529-4cb1-9a39-516a445ff2c4"
        },
        "item": {
          "id": "e05f877b-4040-4c2e-b3c7-b21779f6406c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0cc535df-db4c-46c7-9131-e3bc8c17931e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15812de-7ae7-4bfc-90a6-ffcc43a335e4",
        "cursor": {
          "ref": "c64433d2-e454-493d-a5c0-551ca465e7d1",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ab9bce11-c625-4e95-96c6-f80b9df514ff"
        },
        "item": {
          "id": "e15812de-7ae7-4bfc-90a6-ffcc43a335e4",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "150b3723-e41e-46a7-8d74-e9aad1bfc386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aadd66e-6518-46cb-9a4f-ca224efb91a4",
        "cursor": {
          "ref": "bc94fbe3-8ae9-4406-a9ed-0b9df94dc1b3",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "26405ccd-0a66-47da-97b6-a1b506118bf1"
        },
        "item": {
          "id": "0aadd66e-6518-46cb-9a4f-ca224efb91a4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f2f710a7-c1b9-4af9-bd1a-672bebad67ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b272938-9a80-4ee0-a370-da96e2ee4a1e",
        "cursor": {
          "ref": "886cf2b0-b7ff-40d3-bdf2-1330fecf8ab2",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0163b38f-fde9-4219-9de3-de92c7ca9be8"
        },
        "item": {
          "id": "2b272938-9a80-4ee0-a370-da96e2ee4a1e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "63abc035-fced-4f0f-a797-34231735cfdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ecf553-157e-4abc-9e18-98ab5b10def6",
        "cursor": {
          "ref": "86dc93ac-0e82-4474-add2-354c581e8765",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c769563a-4a0e-4449-a3d9-93c9dd07c6b9"
        },
        "item": {
          "id": "49ecf553-157e-4abc-9e18-98ab5b10def6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3b375dea-1a7a-4859-b84a-21d2322f206e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4f7229-6573-4528-936a-5473ddcd9a06",
        "cursor": {
          "ref": "62ee33bd-1480-4984-9e1e-b47fc5e58a56",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "aef6b4ee-807b-4ac0-a6bd-5e28eb32afbe"
        },
        "item": {
          "id": "9a4f7229-6573-4528-936a-5473ddcd9a06",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0f71cbfa-b565-446f-9915-96ced80123cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867ebfdd-285e-4134-82eb-332d67335052",
        "cursor": {
          "ref": "2fa32930-e960-4d45-9c18-680c6f74fdd2",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ba98d521-7a2a-48a9-a003-8af0dea8b4ec"
        },
        "item": {
          "id": "867ebfdd-285e-4134-82eb-332d67335052",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3a2a9a1f-a3c6-40e0-8ad0-d94f8a667380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8abeb6d-be75-4f33-83cf-eb94c4d5f92a",
        "cursor": {
          "ref": "71ce150f-6990-4ef5-a529-667113058b3b",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "070b35de-d59a-4925-8416-6321281f33ee"
        },
        "item": {
          "id": "d8abeb6d-be75-4f33-83cf-eb94c4d5f92a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4110028d-b648-4b9b-a1be-0da15e3fc470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07058ce3-3427-41bc-8a24-8d7f7a173c1d",
        "cursor": {
          "ref": "ebe23cd8-e5de-44ed-a941-0761ebd1661e",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f4e4f0b5-1e9e-461b-8f09-6a1b3e5cdfae"
        },
        "item": {
          "id": "07058ce3-3427-41bc-8a24-8d7f7a173c1d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4a7758de-c64c-4168-9b76-44f4af99c6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d502b8b-c291-454b-b7d9-e4ae28ee3335",
        "cursor": {
          "ref": "008295ca-283b-465b-b6de-f776c6ba603c",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "757e8a3f-4159-4cc9-83ba-898bd9c6b4de"
        },
        "item": {
          "id": "1d502b8b-c291-454b-b7d9-e4ae28ee3335",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "88abec94-e1bc-4c5a-b4be-a07c773b50c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b8ff14-43a2-413e-8cd9-cc940bb4f0d9",
        "cursor": {
          "ref": "0e46b13f-ca7b-4697-8017-ea3307f17362",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f96d3f15-2da4-4c9b-add4-e77bb31e596c"
        },
        "item": {
          "id": "16b8ff14-43a2-413e-8cd9-cc940bb4f0d9",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "baa0cc00-d711-46c0-aace-0dd76ac4a41f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "728f2d62-e374-4804-a38c-dbc93848f983",
        "cursor": {
          "ref": "b7a6ef32-1367-401f-8c35-3ec939a3a456",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cba310cc-1b2a-4d8e-b0de-ac85901555ed"
        },
        "item": {
          "id": "728f2d62-e374-4804-a38c-dbc93848f983",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "490fe432-9c08-46d0-96d6-ccb4eecdb4ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78377423-e52c-4a5e-87f0-4a84a7bf477a",
        "cursor": {
          "ref": "5d39c17e-7543-470b-a929-e232c93c622e",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "108cac84-37ea-417e-aeda-6bc2462a1c63"
        },
        "item": {
          "id": "78377423-e52c-4a5e-87f0-4a84a7bf477a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "cb3f5ca9-49d2-4f1d-948e-c120e858767a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05404ffe-5b62-462a-a2e1-5c4021e303c3",
        "cursor": {
          "ref": "6ce37b34-f189-4629-a708-0990e7405add",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "97e09859-dc5b-4a2f-bb00-063974f0f81c"
        },
        "item": {
          "id": "05404ffe-5b62-462a-a2e1-5c4021e303c3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "58864cca-d662-4884-b311-c8c9e431cfc8",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "2ed24c47-9efa-4976-b5cd-9b91f3a8215c",
        "cursor": {
          "ref": "ffb9dcf7-ea6e-43be-b53d-25d5ffc0cc94",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "bb61a53c-d6fe-4a32-9d33-3a31d72d8cc7"
        },
        "item": {
          "id": "2ed24c47-9efa-4976-b5cd-9b91f3a8215c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c2c5c860-86bf-416e-855f-62c6ba79c368",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "28408f56-12bc-4d4f-b045-74d4d355ff16",
        "cursor": {
          "ref": "86e7a5c3-e54e-4fd3-a2fd-0d65f295e8b1",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2f9d5db3-2a24-4f4e-b07c-6573041a9d09"
        },
        "item": {
          "id": "28408f56-12bc-4d4f-b045-74d4d355ff16",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ac4ce376-3faa-4084-bf9f-50008629a594",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "7b212ef4-2f54-413e-b44b-d3cce48eb9ea",
        "cursor": {
          "ref": "c12e80b8-3f33-4b01-a778-129730cba226",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "3ac48137-1642-4595-88d2-79a9f5854a5a"
        },
        "item": {
          "id": "7b212ef4-2f54-413e-b44b-d3cce48eb9ea",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e028b7fd-e0c9-48aa-888e-c74d0bbdce88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69b8c34-8e5f-4de3-bdb3-15f1d8cbcb11",
        "cursor": {
          "ref": "098edeb9-0a03-4c61-8183-04e028a995a0",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "847d0557-5c4c-4d5f-b2cd-e40962f43e2a"
        },
        "item": {
          "id": "c69b8c34-8e5f-4de3-bdb3-15f1d8cbcb11",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f29ab51a-d232-47db-8c58-d554d4e7a7f5",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "e9fd54cb-a5c5-49de-b06b-212a094d5b72",
        "cursor": {
          "ref": "ba8bd607-61d3-4973-a890-07697f5c847d",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "be4ef64e-4fbc-499f-9f44-5f708b32ff4b"
        },
        "item": {
          "id": "e9fd54cb-a5c5-49de-b06b-212a094d5b72",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1b0eb414-f8fc-461a-a84b-e188432a26b2",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "fdd2ba53-57f6-491c-abb2-a6e6f076e4ef",
        "cursor": {
          "ref": "0c1c5308-38dd-46fd-860f-42cedcb40a7c",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "aa37abe1-809e-46d4-ab23-1e3a0ad4f875"
        },
        "item": {
          "id": "fdd2ba53-57f6-491c-abb2-a6e6f076e4ef",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8bbff269-0ca5-418f-8739-58c2d4915bd0",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "5f9aa03e-3cdc-44d0-8ead-5d1940905767",
        "cursor": {
          "ref": "e47ad7ae-e904-4e9e-8893-e4867f87a1bb",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e5f01767-68c4-4495-9314-8c49720a05b7"
        },
        "item": {
          "id": "5f9aa03e-3cdc-44d0-8ead-5d1940905767",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1f58ffe6-b675-4295-8362-33316fc7f321",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "bf01ec11-74e4-47ba-bef0-fa57bd2c7956",
        "cursor": {
          "ref": "bfaf3279-072b-42e0-8f0b-41e756d992e6",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ff6b35ee-0084-4ad4-a8a7-2110180f7c0d"
        },
        "item": {
          "id": "bf01ec11-74e4-47ba-bef0-fa57bd2c7956",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a8086a48-f801-46db-bb6e-e78bad131ad6",
          "status": "OK",
          "code": 200,
          "responseTime": 179,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "ccc60cbd-69c2-4442-ac19-8c5545dff7e5",
        "cursor": {
          "ref": "a5e6fb41-4dfc-4eeb-8882-20f07200dcbc",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "56b6abda-75e7-4cd0-b81d-2413d6e24308"
        },
        "item": {
          "id": "ccc60cbd-69c2-4442-ac19-8c5545dff7e5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0a4aeb2a-2a63-4816-90e9-144c03eb8b2a",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "753c215b-0077-4f2a-a0f9-d0fca684f399",
        "cursor": {
          "ref": "2a54d05e-75ad-49e0-8b5f-71719272eb05",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "be4630bb-c33b-44d4-87b0-68bf789f36a2"
        },
        "item": {
          "id": "753c215b-0077-4f2a-a0f9-d0fca684f399",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1766a4af-c53d-4c6c-9367-cc6695646ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c5e4e3-08f9-4d10-aa5b-31fa93b91cf6",
        "cursor": {
          "ref": "cb7dd306-2522-482e-a549-f3e59e98a2da",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9773bbb9-97d0-4513-8efc-213fcebf6156"
        },
        "item": {
          "id": "f0c5e4e3-08f9-4d10-aa5b-31fa93b91cf6",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d8bc6936-19e4-4907-8204-a8e950707fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce61f36-83ad-4944-bd16-992ae9ef0c3f",
        "cursor": {
          "ref": "4ffd82b5-9fd1-4284-a298-d37694d1fc1c",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5d13a0cb-3aff-46d1-88d4-0c972c3750b1"
        },
        "item": {
          "id": "3ce61f36-83ad-4944-bd16-992ae9ef0c3f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6fe46d1e-8d04-48c3-a90a-6b159df167b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f136723-7e61-45a2-81bb-44a654d43cb7",
        "cursor": {
          "ref": "25f860c6-1c75-47da-bbd3-d60d31314df9",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0aae7191-e735-4006-ba7a-d96a613fc701"
        },
        "item": {
          "id": "4f136723-7e61-45a2-81bb-44a654d43cb7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "124d3483-8e6c-4a94-8eaa-372581d15e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d833dd05-54ae-4e1a-9d2e-4f786e3538e6",
        "cursor": {
          "ref": "69710058-e5bd-4d98-98a5-27d75e0784a8",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "05f45d48-76ad-4791-afb8-1a99bf379ccc"
        },
        "item": {
          "id": "d833dd05-54ae-4e1a-9d2e-4f786e3538e6",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5c57e98a-5ff0-4f7e-bf34-1b79535f46b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba39f31a-4363-4c9e-96d5-64ddfbc54b75",
        "cursor": {
          "ref": "ea1b7781-01b1-4091-a8ea-222a5aaef444",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c8d44d31-296b-4456-a109-09b8f79f8211"
        },
        "item": {
          "id": "ba39f31a-4363-4c9e-96d5-64ddfbc54b75",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d360fc11-ee70-41ee-a8f8-8f76f66ad116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440fdb75-9e21-490c-8b0f-fbd39a54bbdb",
        "cursor": {
          "ref": "d044327a-b112-4175-8f72-2bddee9d5d94",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "30907edf-f69e-41d4-9a26-d9e75e9d0f16"
        },
        "item": {
          "id": "440fdb75-9e21-490c-8b0f-fbd39a54bbdb",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "fa3d3a13-d6fe-4126-b7d4-ddccd56dd475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a003c690-8f97-418f-be0d-381bd3154d0b",
        "cursor": {
          "ref": "707c23b0-fb17-43a9-927c-6d702517be84",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "aff9029a-2a08-4d44-9444-3a89e26d7d4c"
        },
        "item": {
          "id": "a003c690-8f97-418f-be0d-381bd3154d0b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "23876b7c-8a69-49b4-9e80-05fc725a13b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aebd85f-e5c0-42a0-ad8a-6f156b68f2e9",
        "cursor": {
          "ref": "7b0a775b-f66b-412a-935a-7e0330c9b829",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ce16b1f5-5281-4477-b1d4-e3c7059492a8"
        },
        "item": {
          "id": "3aebd85f-e5c0-42a0-ad8a-6f156b68f2e9",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7ca88716-e87b-401a-9e6e-cd7c055a881c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbfad28-a056-44b7-8c36-06a86e00f5bf",
        "cursor": {
          "ref": "ae9808a9-57e5-4537-8a4e-b047086534dd",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "07926fe5-748e-4c15-b81c-c63f8716c623"
        },
        "item": {
          "id": "5dbfad28-a056-44b7-8c36-06a86e00f5bf",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e19e4f07-2078-4ed7-aa9e-3cf73951ee94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802f190f-a64e-4e5b-b870-64fdcbdbfdb4",
        "cursor": {
          "ref": "4125a89d-a9bb-4b93-9d4d-0e99a34de712",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "3620fa46-aac4-4842-ab81-243ec317b7b1"
        },
        "item": {
          "id": "802f190f-a64e-4e5b-b870-64fdcbdbfdb4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1cae64ce-889f-488a-b286-0d67264e4a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b042d1-fa2f-4431-befe-fb160a77a950",
        "cursor": {
          "ref": "b0206ab5-73f3-4e2b-8a76-460364c91547",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "30149beb-302e-4120-b635-883b50a594b3"
        },
        "item": {
          "id": "28b042d1-fa2f-4431-befe-fb160a77a950",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "277e45f6-34b9-4344-95e3-7fa460d17f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08efc65f-e3a8-4ff5-83b2-74381cdabcd5",
        "cursor": {
          "ref": "8abe9b88-91c7-48f5-a4f5-1570dd1cdf24",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3c70b0ae-df8e-4cb1-8f8e-984a1cc060a6"
        },
        "item": {
          "id": "08efc65f-e3a8-4ff5-83b2-74381cdabcd5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "61cc3e87-f13d-47bf-8e81-93708e5552e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272c81cb-6be8-4d61-9af2-e378d74f3646",
        "cursor": {
          "ref": "3f79ac69-ab81-47cf-a6f4-247e667ea209",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8a378bae-77f8-4966-8b88-9a7a24b69764"
        },
        "item": {
          "id": "272c81cb-6be8-4d61-9af2-e378d74f3646",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a0555f1c-bfcb-484f-91d5-c0f7aa99bdb4",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "2568c4c2-230d-43f9-8a60-27b758e21ce1",
        "cursor": {
          "ref": "86c01847-200b-42e5-90f9-1d7c7213e3ef",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "58f4bac5-f90d-4a8c-a905-a03c679560b4"
        },
        "item": {
          "id": "2568c4c2-230d-43f9-8a60-27b758e21ce1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4135a860-fe3f-49fa-8670-d576215ab94c",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "caa50ae0-240f-45b5-be39-53dceabcca1e",
        "cursor": {
          "ref": "e729f2ad-cfea-4688-8f43-1cc40f42370b",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7cf3b552-9a93-43a8-a9e0-55f1a8a32be2"
        },
        "item": {
          "id": "caa50ae0-240f-45b5-be39-53dceabcca1e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9850265e-2b71-4300-b817-98b40afd0b07",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "662de1ba-2d0e-415c-90f1-cd2dfd827c95",
        "cursor": {
          "ref": "07fb42a9-3efd-471f-af32-fd3965cf9231",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9c78e6ab-1650-4525-aa30-a4b74c84051d"
        },
        "item": {
          "id": "662de1ba-2d0e-415c-90f1-cd2dfd827c95",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4f1ba226-a3df-4670-bc8a-cd139ebf6add",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "22b4833b-4e91-400c-b741-7d7f4d4e30d7",
        "cursor": {
          "ref": "2b3239e2-5083-45e6-9005-e5e668c9acf7",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3da5dd1c-1567-4121-b08f-4cd9ac8f82a6"
        },
        "item": {
          "id": "22b4833b-4e91-400c-b741-7d7f4d4e30d7",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "92c7f217-b8d8-49e0-adae-8dc55cc3f6ef",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "c13ab776-c4f3-4a9a-9329-52915a91f435",
        "cursor": {
          "ref": "85265bf7-797b-403a-b304-27812f192d7b",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "40ecf937-b5f9-4a8d-b720-09a9a03286fe"
        },
        "item": {
          "id": "c13ab776-c4f3-4a9a-9329-52915a91f435",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d855d06a-89db-4b7d-a862-8344f107b003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e0a07c-edc4-430a-8f22-671dae0521c5",
        "cursor": {
          "ref": "e58b5315-bc9c-4522-b2aa-19c1743bf519",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8bebb189-a3e2-4cb4-97e5-536f3d030338"
        },
        "item": {
          "id": "c4e0a07c-edc4-430a-8f22-671dae0521c5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c699c630-f8c9-49bb-b161-eaa6ebc9af3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cce78d-059a-49ea-850c-8d69d156d1ce",
        "cursor": {
          "ref": "69782cff-12d2-4aa6-8570-0d4aef829017",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d2254878-e23f-47c1-be32-3db4de4442ac"
        },
        "item": {
          "id": "06cce78d-059a-49ea-850c-8d69d156d1ce",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c4caecf1-9c24-49b7-b01c-a87f010d21b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86930a2c-3c96-4b1b-b989-f6ff0b5ee5c9",
        "cursor": {
          "ref": "f71996cb-b9d1-4968-9803-3d026b51e084",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3b6396a5-551e-4019-9088-0a2919f126ed"
        },
        "item": {
          "id": "86930a2c-3c96-4b1b-b989-f6ff0b5ee5c9",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4036c7ab-70e0-4eea-a6b8-b084154de50c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49edd0a-21f2-41e1-a397-f10ff38395a7",
        "cursor": {
          "ref": "edd73c7f-b8b0-4c7a-b6f8-ece6921e23a0",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8b4bb90c-ade1-4acd-902d-abcba5e460a5"
        },
        "item": {
          "id": "a49edd0a-21f2-41e1-a397-f10ff38395a7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2ceca2cb-2f99-4d2b-9e59-1bf956d04612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de28937f-fe04-4781-b1d6-775147b1e6c0",
        "cursor": {
          "ref": "b8d7bec4-75bc-41e9-96c8-4aa1ae4aa828",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5fd932a8-e02b-42ef-8471-9d8c3634d1a6"
        },
        "item": {
          "id": "de28937f-fe04-4781-b1d6-775147b1e6c0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "59eb8162-8320-4eb7-90ab-3a4f522c1f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0eb2e9-8574-46dc-8dee-193a67736e0b",
        "cursor": {
          "ref": "23719b54-320b-4f94-bdcc-04e36ba05290",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "549c4adb-5cc7-4517-9349-4ea38bd65ba9"
        },
        "item": {
          "id": "ff0eb2e9-8574-46dc-8dee-193a67736e0b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2507effe-c4d0-436c-9fff-71bce3e9f99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1c7156-5c45-48e9-9801-d29f595bb73f",
        "cursor": {
          "ref": "579718a5-12da-44c3-8cd0-3396ca379649",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "47e7165a-5e55-44bc-ac99-b55bc877baaf"
        },
        "item": {
          "id": "be1c7156-5c45-48e9-9801-d29f595bb73f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "daecf235-9872-4eb1-9e79-02c9f57a2a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc9833cd-863d-4bec-b077-91c4d25a51a7",
        "cursor": {
          "ref": "346ed60e-a105-4836-9a96-77871a7fc313",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ebc02309-f549-4ae9-8756-4cabeeee3813"
        },
        "item": {
          "id": "cc9833cd-863d-4bec-b077-91c4d25a51a7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "134578e6-dcb2-4b73-ab8c-68f44676dc60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66d8445-2b7c-4253-8025-57002bb17509",
        "cursor": {
          "ref": "4e77747a-0c80-4c4e-8f4e-3ce804a2b841",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "11030d40-f446-4b61-bedd-93b113b42169"
        },
        "item": {
          "id": "c66d8445-2b7c-4253-8025-57002bb17509",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7a5d0ea0-f788-4528-9b66-f81a509f095d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27bd277d-7931-423e-9c8a-57dab31d2e02",
        "cursor": {
          "ref": "d36bc0f6-2406-4634-b15f-8fddf28c1406",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "88c754b4-061e-49a0-ad4e-ba2fa83ac2ef"
        },
        "item": {
          "id": "27bd277d-7931-423e-9c8a-57dab31d2e02",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f54f6cae-e33d-48c6-8149-99ada1395731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b93d2cd-c20d-4817-9e46-1a4d2ea489da",
        "cursor": {
          "ref": "e41d67f9-d345-4300-b975-c3e8f6fc7956",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "05f3d5fc-cf97-49c3-aef3-9529dc51609f"
        },
        "item": {
          "id": "0b93d2cd-c20d-4817-9e46-1a4d2ea489da",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8e02d727-d33c-4c7a-b019-ddd481df0787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9588559-0bdc-4d43-9810-11e37ed28ea0",
        "cursor": {
          "ref": "b5df5e1f-863a-4f60-9b57-8c740c7d883b",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c9fa1306-0064-44e7-8607-6753b480463e"
        },
        "item": {
          "id": "a9588559-0bdc-4d43-9810-11e37ed28ea0",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3fdf548e-00f6-4064-bfc7-71c415f06883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daec6428-bf5c-46e7-88cb-bc4ac22ab061",
        "cursor": {
          "ref": "2c1b28ef-c357-4d36-a6a0-f837a6a16cb5",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "88d351c2-9aae-4090-bf55-a65f442bbaa2"
        },
        "item": {
          "id": "daec6428-bf5c-46e7-88cb-bc4ac22ab061",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f255384b-d642-411e-860a-4ef4466e5669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7730d3fe-fde7-4d81-8491-cea2f8c550b0",
        "cursor": {
          "ref": "11c19523-85ad-400a-934a-40ad8c902f8f",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "22ae7260-9ed1-489b-9792-dedd64e6676f"
        },
        "item": {
          "id": "7730d3fe-fde7-4d81-8491-cea2f8c550b0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e1d31bbf-6478-45de-9c8a-8a7cfc22f34a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5be2865-47e6-4afc-bcce-fb2666f35194",
        "cursor": {
          "ref": "87f4afdd-826f-4ad6-a910-0781baf1e8b5",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e457479a-dc90-4f06-982f-95067dcd6f83"
        },
        "item": {
          "id": "b5be2865-47e6-4afc-bcce-fb2666f35194",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "65ab62fb-646f-4b58-84e1-22fcb549139d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d336c681-fb23-4a6a-a357-be98a4b62573",
        "cursor": {
          "ref": "7bdd201a-c395-4f51-aafa-7b231737eea5",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a88c824f-48ad-4505-aed7-bfcdae1262f3"
        },
        "item": {
          "id": "d336c681-fb23-4a6a-a357-be98a4b62573",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1d321290-d444-4383-a68a-715a5af2433c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6558ff7b-e22a-4ef4-bba7-55318a45f27a",
        "cursor": {
          "ref": "d44bdb84-28ea-4c30-99b3-e0bf97677db6",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6b61086f-0058-4857-8e7a-b0fb001c18e1"
        },
        "item": {
          "id": "6558ff7b-e22a-4ef4-bba7-55318a45f27a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "db76c7c5-08f9-4069-8361-43464c1a4f8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2656ea0d-8d75-49c9-bb9b-fc7efc4e62ec",
        "cursor": {
          "ref": "d8aa8f10-2b1b-42bd-9b35-0523450d2505",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "aad5aa60-dd8c-4756-bf04-a313e102512b"
        },
        "item": {
          "id": "2656ea0d-8d75-49c9-bb9b-fc7efc4e62ec",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "46030aad-436c-426f-a7ec-2c595641f000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3483f4b3-6302-4b2b-a4d1-cf0c22ecacbf",
        "cursor": {
          "ref": "4b9148a8-d5b9-41da-961f-23db7c1988cc",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "53f53bf0-df74-4240-860d-4951f4ae8e54"
        },
        "item": {
          "id": "3483f4b3-6302-4b2b-a4d1-cf0c22ecacbf",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "06e89d83-902c-46fb-9075-2ce08c16aa63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4310bb5e-61f5-450c-aacb-757ef6ec24c5",
        "cursor": {
          "ref": "46acaf7e-ad9a-4c89-b85a-c89f84915de8",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0d262a8c-c0f3-466e-b0fc-6217fa621702"
        },
        "item": {
          "id": "4310bb5e-61f5-450c-aacb-757ef6ec24c5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a7d577d5-7d8f-4027-ad5f-cfe1cf455db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6447d9d6-8dde-4d6c-b581-d47f8ee8885a",
        "cursor": {
          "ref": "9a6ed40c-cce0-43e2-b8b5-5d7a5df87c7d",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f5f4e551-9388-4259-b297-00df7f7d64e1"
        },
        "item": {
          "id": "6447d9d6-8dde-4d6c-b581-d47f8ee8885a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ec249e9c-c690-4310-bd19-3e57cb325c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c31c8d-99e5-48e1-a588-59662e3caa8d",
        "cursor": {
          "ref": "93bc1ec0-f8c4-4cd5-85b1-e03c12deac59",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "39d6f293-5c43-4da6-a141-d1eacb937aca"
        },
        "item": {
          "id": "70c31c8d-99e5-48e1-a588-59662e3caa8d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2c2fbbd1-7cdc-4fae-b2fe-3e81d8af0c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f03213-aed9-4fb1-9f36-2af220dc1a94",
        "cursor": {
          "ref": "94beb40a-225e-4283-a0f4-f728932bc179",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "aef5c314-b67a-4123-aee7-5e14691ab11f"
        },
        "item": {
          "id": "96f03213-aed9-4fb1-9f36-2af220dc1a94",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "153e2943-74d1-4037-923b-9620616f4c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a986372-5e7f-4fcc-8270-c3483fc0543c",
        "cursor": {
          "ref": "15e94f02-c375-4295-9f56-5f3bed7b2f8c",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "bb257179-81d1-48b1-a012-3e9a4138e7cf"
        },
        "item": {
          "id": "8a986372-5e7f-4fcc-8270-c3483fc0543c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6413b95a-fe4f-42d9-a274-3c7b0e6a06a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0caff2-b879-482f-a124-13741170f8b9",
        "cursor": {
          "ref": "0ed9e0bd-0829-42c3-a9ca-bdf3d25ed3c6",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "53fafac1-eb90-459b-b244-d6405f25187b"
        },
        "item": {
          "id": "fa0caff2-b879-482f-a124-13741170f8b9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "66b9dcf2-f92f-4a4f-91aa-b3117c7c6465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40063e3-6a98-4b51-ad98-e81590ea845b",
        "cursor": {
          "ref": "457b860b-ed56-41dd-ad29-94c32efe1056",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "105a4928-acad-4301-a740-424d82bb7319"
        },
        "item": {
          "id": "d40063e3-6a98-4b51-ad98-e81590ea845b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "073646cd-31bb-4bfc-b8ee-474e9208268b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ca4cd4-c8f3-4486-90f3-7126836a72fb",
        "cursor": {
          "ref": "fe0a3ef8-ff51-4a9f-b04f-29258ec99008",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "26bb3f7f-cd49-40ef-9cec-81cdb38badc5"
        },
        "item": {
          "id": "d8ca4cd4-c8f3-4486-90f3-7126836a72fb",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "917d2154-010a-4400-946d-39751c853629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "370b86b9-1154-4705-8c74-6b952ee71f77",
        "cursor": {
          "ref": "8fbc6349-3b9e-40f0-933f-0827ee88ab87",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "86053ac9-f332-4853-b9b4-6e646c702f0b"
        },
        "item": {
          "id": "370b86b9-1154-4705-8c74-6b952ee71f77",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4804925a-6528-408f-a0fa-c4cbb0216bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da9c981-ce85-453b-a8f1-fd54251849b9",
        "cursor": {
          "ref": "ac120cce-22d3-4c7e-8708-663648e0c2ff",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ed8cefc7-8ad9-46e5-a71e-9e8af235faf1"
        },
        "item": {
          "id": "1da9c981-ce85-453b-a8f1-fd54251849b9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "947aff14-0e85-4498-83f7-6e4e3e22630d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e32e5a0-3261-4874-9f93-b0c178333571",
        "cursor": {
          "ref": "438fc743-d557-4a40-bc29-a96fa0d1f556",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ac551471-5218-42aa-98a5-1e6ea826c044"
        },
        "item": {
          "id": "1e32e5a0-3261-4874-9f93-b0c178333571",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "185d79d7-b8d1-494d-947b-ac7ee8e78e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d2233c-6044-4488-99b3-8f15e3e95371",
        "cursor": {
          "ref": "e89956d3-90d8-4e16-a906-077c72071474",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2efb799f-b2f6-4de3-bcb2-c08e6cdda9d9"
        },
        "item": {
          "id": "11d2233c-6044-4488-99b3-8f15e3e95371",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8f5c5a0c-f3c8-4097-8481-53ffbdb082e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa4bbd8-8ba1-4c1f-9fd8-34bc2cd93341",
        "cursor": {
          "ref": "2b8cbdc9-9bc9-4411-997f-513f25149000",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "effefd48-e847-489f-b352-5c6f45d0f0b2"
        },
        "item": {
          "id": "eaa4bbd8-8ba1-4c1f-9fd8-34bc2cd93341",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d6dd761f-50f5-4f83-a8f9-9b5954a34537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb790a4-a1cc-4f93-9074-0bbc894221e0",
        "cursor": {
          "ref": "16c1dff6-0a60-4911-8d7d-cca2c630341d",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3d03b938-763f-46a9-96c0-e5b7b6687273"
        },
        "item": {
          "id": "9fb790a4-a1cc-4f93-9074-0bbc894221e0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8086d391-b867-4f2b-959f-e138907b992b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90305f17-8d57-4063-9cf1-480be5cfc448",
        "cursor": {
          "ref": "0282f264-1586-4d70-a1be-455e4e768063",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2e458e35-1847-4a11-8f8b-d8cf9f655f7c"
        },
        "item": {
          "id": "90305f17-8d57-4063-9cf1-480be5cfc448",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9d5c6aae-a313-450d-b482-f65eee6aa2e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124e0ec8-16f9-4d1a-99fd-ccf927f15854",
        "cursor": {
          "ref": "a57247c6-8952-41a7-bf86-f498fa3fefb7",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d2eda0ed-4110-4f2a-b35f-a14d2b717a47"
        },
        "item": {
          "id": "124e0ec8-16f9-4d1a-99fd-ccf927f15854",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "148e4d1d-a564-48fe-94a8-0dd913a71964",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "401ff1ea-5c63-4533-8fbd-dffdcdee44fb",
        "cursor": {
          "ref": "2f20f406-cd35-4811-bca5-4eafd8385394",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f347e7c3-14ee-4071-b1e5-f53f906ebcd4"
        },
        "item": {
          "id": "401ff1ea-5c63-4533-8fbd-dffdcdee44fb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "26dbd9ba-d43c-44d2-aa49-81080daf8945",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df88dfc-d876-4ac0-88fb-c43a2d646065",
        "cursor": {
          "ref": "cb27a0bf-8658-4e1f-b90b-55deb12b3d91",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2b52bb49-985c-4ca3-a350-f54d0a756034"
        },
        "item": {
          "id": "5df88dfc-d876-4ac0-88fb-c43a2d646065",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "972f3268-3052-4e07-95fa-11426fbe8408",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "34480c9a-2620-466d-bc28-3e01896b3dec",
        "cursor": {
          "ref": "87f47225-176c-41be-9f03-b14a243ad2a3",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4aa0c645-b02f-4f96-a7c7-565f0255c271"
        },
        "item": {
          "id": "34480c9a-2620-466d-bc28-3e01896b3dec",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8906c24b-3993-405a-b44e-4c92e8e1ad1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34480c9a-2620-466d-bc28-3e01896b3dec",
        "cursor": {
          "ref": "87f47225-176c-41be-9f03-b14a243ad2a3",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4aa0c645-b02f-4f96-a7c7-565f0255c271"
        },
        "item": {
          "id": "34480c9a-2620-466d-bc28-3e01896b3dec",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8906c24b-3993-405a-b44e-4c92e8e1ad1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d278cb-4f55-4c10-986f-d53a7b9ca86a",
        "cursor": {
          "ref": "bde865a9-0e05-445b-a134-6508af8f83cc",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "aabe5fd5-1076-4cc9-b5e5-8f6734919f57"
        },
        "item": {
          "id": "51d278cb-4f55-4c10-986f-d53a7b9ca86a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "aa51140e-1480-4046-acd5-0aaf78c8e929",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b74702fd-f143-4eca-8fc7-ff98bc4514bc",
        "cursor": {
          "ref": "11aafcc8-a9fc-4d8e-a73f-cd4b73f6f60f",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "19ca85b8-cd8d-47fa-ad24-3755c3823a13"
        },
        "item": {
          "id": "b74702fd-f143-4eca-8fc7-ff98bc4514bc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6fc60d61-970d-4ad1-8337-fb815c542b34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}