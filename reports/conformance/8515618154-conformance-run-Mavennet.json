{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "cbe593df-356a-4c7e-b110-f93edec40934",
        "name": "Clear Cache",
        "item": [
          {
            "id": "833134de-2d31-4101-ae08-bb2448875818",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f11d2a4e-7144-46ac-8d10-2dcfe984d4ef",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8a210db6-ebd2-476c-b5d3-44103ff8e77b"
                }
              }
            ]
          },
          {
            "id": "25532c58-97a5-47d2-889f-ee82aa740938",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "72575e4a-472e-4134-9876-48eb6ba97928",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8f53598d-d7b7-4fd6-9049-2cef0ffc1f56"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ee017bdf-086f-4c98-9ab2-64bafa9f1779",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "36fdc71a-0f76-4767-a796-6a8173fac71b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d0cc054e-c4b5-4863-ac25-b40c2bcbafe1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7cbef4c6-f94a-4200-86d7-7977d79c78ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1202eedc-8383-41f4-b57b-bb4b1c03a9bb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "08da58d4-08fa-4498-bdcf-d589c97fb04d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1f16e056-d33e-4568-a63f-2b169a98e1e2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2b74d03f-68ee-4570-b025-14ad9668bb6e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a492920-1ccf-40c4-885f-ce908deb2a47"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14bd0cfb-ccfe-40c0-8e55-d3921a886e8b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4f492fc9-ecb5-46bb-96b6-0d30f0b8ed42"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a13c65fd-2852-4a3b-a752-2be8b8bd53b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "46b2df5d-a83c-44c4-9bb7-768498c31860"
            }
          }
        ]
      },
      {
        "id": "3983ca34-a0d9-4081-a17f-bdca82a3548a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8306fd6a-81e6-4a4d-a020-82b32f17d955",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8b75e1fc-96e4-4c7c-8c15-043a0c464e9a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "60b940c5-160b-453f-9a3b-acde247a9560",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47759f8b-071a-41f3-94c1-7e9b7d8c8168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45fecb2e-14d8-4be6-92b7-94cf114d895c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3266a1d9-2935-40ec-876f-f48ccec726ca",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f188cb8-6759-4506-9bba-58d8083f5dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee123e9c-f717-4ba7-b6d4-20045ba7f00a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc8ebff-d733-42a6-b8d4-69b52118629b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "371d3c8c-6aa7-46b2-ac11-90be3c274a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac5241b7-4bf8-4787-94bc-5b82c6b9d0d4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "85901523-cffe-4871-956d-00e741382dac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8917bfbb-cc48-4074-bb72-ca56da737876",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "616620c7-3f6a-493c-a5ec-01b179d21e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "677e64cd-3b9c-48bd-8250-c142e5b413a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05501e6-87ea-4a61-86c9-53c7b8bf228c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04983d4c-44c5-4f25-8d3f-4d2b7eedda52"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c710b57a-c7c6-49bc-9714-c57eba490f97",
            "name": "Positive Testing",
            "item": [
              {
                "id": "760814f2-219d-4851-968d-f9ed36f07804",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09342a29-1b6c-4358-a74d-4c42918078d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "514b1441-e84a-4dca-8bb4-ea81c9c64eaa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b21ba53e-e09e-4740-901c-a555d7a8114f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "db3b96b2-66e5-40ad-b17e-fc7cdfe81944"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1efef653-4f39-4485-a425-2e8aa0ef6d89",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3170937-eba4-4765-844a-d4fd8d80cb71"
            }
          }
        ]
      },
      {
        "id": "c8feffd9-c141-4de4-a9e0-f7941b208cec",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9edb5606-fd4f-43ba-89f2-68991a44b6a9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c11951c0-198a-4ce0-bfed-7869e87748e2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c328718f-75f7-4462-8240-4195e05d8559",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10efa6b1-8737-4857-ab1b-c9331d03639f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29e17cf4-28c9-4e89-a6fa-de1d11e097e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d91fec8-e3fc-4837-9b32-2b00fa5f34ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60eb66a6-83b6-4f2d-a40f-e970f22719eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4b85df-786b-45ab-bce5-18e3d4224f25",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf446bac-2e87-473d-a277-f1bf64174ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9f80aa-f211-4cf0-b59c-12ed4eccc591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45a4555-a8c5-49e7-84d0-bd7d40dd5ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71243a44-cae5-4c18-890f-0db01ea95510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b12f601-f513-44f0-9e49-72a4bc5479d6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763e3943-2615-4dac-8343-a45d5ef054f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1eeb2ba-4349-4326-afec-1ce102eda952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b01f8a-d25c-4344-8d82-6758fe9445e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e19b05e-1ce2-4bcb-8a1e-e3057ac5f6f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4a5fe2-2551-435e-a0ce-3e101ffcc53a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c49bc9-a197-4c63-ac68-a049227de75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "441ed4a5-91f9-4954-8631-afba159d0f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b5ece1-aed5-492a-aef3-087ad39b3e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ae6eab3-8db1-46e0-af44-555967cfa868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9028fd9d-fa18-4520-85f4-daacd1237926",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1a1a00-6bcb-430e-8dbf-e15523f0e38b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "168fe8b4-213f-44ed-9372-9ab9e5beddb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ffba4b-9674-44fd-8d36-e1ccadf5b4c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aead1fe3-3d79-4844-8937-12c7661defad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30f5a9b-a806-4083-a935-8398389dfd66",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e470b4b0-6be1-42ed-a2d3-a28b7c5b7337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11b4cf36-a539-443d-afcc-10b8009a0d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27545f4-7cfe-4f51-95b9-ae69d7895712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "310f2022-1ada-42da-9d57-5c3da711ffef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9bbf89-765a-4ce7-ae12-63926088a00f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b3abc2-e4da-4044-8e19-41034fb6f36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24c4b1b-640f-4fb8-92b3-7eaf4ee5f457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35115510-89a5-496d-a955-da3822857a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0af017f4-20b9-4097-99a2-a884a0e53184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50984301-358a-4455-9c81-fe7ef6d82541",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6c9d56-efbb-41fd-8695-792439ecd13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "449b196f-c391-43ab-8ded-5f5ad4ae9382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418f7c14-67db-4736-a16f-d91f8e523c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b278959-a9e7-4bdb-abc8-88ab5032792b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d30bb0-4438-4570-b7fe-34225fdf8acf",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3a4dec-b49a-4120-ac00-174b049d9842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce16f2fa-4e6b-4a84-87b3-c80bc0f7f7f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9510a3a-f7da-4143-9992-fa1474d9986b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0521acae-f291-48a7-83a4-c893750282d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a3c703-595a-46bb-8c3e-52ab007b4351",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4571649-45ab-4404-96f1-3e34e0be2904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d928d181-c868-43c3-a3ec-a260d7bfa65f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca00c1b-a961-4a0e-b77e-c634f05815e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d348657e-8bc5-4c4f-970d-cf7036c2b3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca3e362-0520-49cc-a7e5-51f03b1106d0",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d33e8a-cd76-423b-9edb-a7a41bd15ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "689b734a-9092-433b-8dda-2813ea10a65e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9643fa-f5f4-47aa-91b6-00b8a0d5d681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29f39254-33fe-40d5-be2d-59e7b47d319f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed6367e-8105-4c5f-abe8-ed4ddff8c492",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "318f9d95-4b02-4053-8fda-0a71fd79e0b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f799aecb-33c6-4d8a-9e1c-5d6df7cd1249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff4a311-05fd-4dc7-9198-40c0592399f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "342febab-395f-4a44-9713-ed3d6573a159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc5c84f-df2c-46e5-9951-74dd86006b81",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7084cdc7-9073-4b8e-9e8c-abf91ea87af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a9726d2-63b7-4910-becf-5ee6d63d6c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c20312-008d-402f-a968-0fd7bbb4f8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e57c2865-fd75-44c7-b68f-33889f3dcb02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2471d24-714c-4984-9567-43df8c337677",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4e1437-6082-4491-8897-cd0a073cd1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "555a21c7-96db-4b1b-886d-85d1f828e2cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf606914-5425-41b4-82e8-48a3b9f9cc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ed74a0f-fd3b-411b-931c-01b09ce16d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88472269-2cba-48cc-bb82-c19ad188ed31",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "675d3358-c227-40c4-82d4-d9d63031d59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7018659-61da-4665-82f9-2088c881e8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e979d6-095a-4675-adbc-8fd8f4bbda9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0b73ffd-7a66-4a23-91e6-3f9bc5d0cfa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a730990-1704-4bec-bb81-d9b2dc885213",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a906dd-2477-4741-b8cf-76e956a49d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40298fa3-7db3-417b-a739-db7ddfb9c539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1997b8b0-920e-4d1e-805d-682f09b54bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba577d1e-226c-4e0f-b250-2ce7e5701f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01e4dfe-c9c0-4371-8b79-0ff4c0f9fe02",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72abbb7-17aa-4a43-92b7-9458a6033370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ad2f38-e3cf-4fd5-9e65-dd1aa79a678a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8d31f3-f1c5-4d66-974d-584d1a9265f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5de747d-b8e2-4e39-8c03-1c7e1cf26a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16fdff42-dcd2-46c8-bf9f-d70ad7e3606e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ea682d-f5cd-427c-89fb-7af74b85aa55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6ee1152-7230-4bfc-9aeb-3ada8dc03a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db92081-d552-44bb-8452-951025974bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5156a800-c920-44af-81fb-319e639e1352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c2bb6a-b3a6-486b-a6f2-f2cb8238d623",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fb84ad-e8f6-4655-b359-4cd454d5bc0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49f29c3f-9fb7-4920-9072-dae165e5f974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fc8d44-ff6c-4c8d-a172-4576b2b98d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e993990e-0d64-46c8-a0ae-d3c4dd3defb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf499f44-4052-4fbe-aa52-c53cdc688814",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502a746b-a53d-4fec-bc80-d81a688892fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c26074-a474-4303-8ce6-c187dad07cf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "229bcdf9-5ac9-4760-af6c-8df9aaea622b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "021ed60c-aeee-47fb-a7b3-f4f88fa3c476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dade619-0a8c-435b-9233-84da858e8989",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7544c9d7-1b4c-45f8-ac87-f07485260a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c37c8d7-e27f-4a22-ab29-e6c9c81ac1a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba2a771-f274-499e-af03-031676741886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d3ec0ab-2a0d-410b-81fc-7349227102ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dacdecd-4968-4bc9-8ad3-d6bb0dfdc84e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a3e878-9f71-43b0-97ce-0f9771d72057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b75c5538-24c2-48b8-9218-93472e11e86a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f9ef9a-0e06-4eed-972b-4bc20bbb5443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6737bbc1-6d08-4af6-88ac-ed6a36c5395c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af48b905-843c-406f-a316-c19bc7a67ca6",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a66651b-6649-47af-adb2-507c10a7cd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83f2b65e-80f9-43c1-b42f-eba43a38d219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9859696e-8db6-4dc5-a215-298c038fa7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27e836be-2138-4824-80e1-ed5866236568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5aa4e4-071d-47c4-88a0-328348c20921",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca9df3d-c188-41fd-9886-e4bb6c76b3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb64eaa3-c80c-41b2-ae37-594852d9f49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4cf093-2604-4f7e-9866-cca259db1f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "49a544d3-c221-426e-a7a2-e958836b6e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9e1f88-42aa-4588-bd98-0206f9c420cc",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4edb2a2-8c6c-433b-a65f-9257bcac9bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6712f94e-f7a4-490f-b69c-5205c3c4710b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f49934-fd7a-4526-a07a-f431790386da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "343bd939-52fa-454b-939a-b8e29a566eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a508ee-8560-4313-b91a-c905c2a0a276",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45968bd8-2ea9-43d8-8287-36b48ba790e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01179b14-ec4a-4f35-aa4a-388c3d0b0fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96c1254-7a7d-4342-afa9-0ce5f5ad4444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bae8e9c-34e8-40bf-b2cc-48d075f0f6e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24976f8d-20c7-44a7-8e72-75a9d31d68bf",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea27edc-3885-449a-82d9-1b0483127224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d39ab24-eef5-49b7-8b8e-44719fa1d565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d2a484-92fb-41ff-8336-bc898334330b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b3c160f-3a20-4cbe-8d59-efeab852b94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db4c764-538d-4047-8631-f2fa6ebded99",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86846012-7c89-46fe-88bb-4be84eef64f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dd70836-b160-40ec-9f4d-39b79549be2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54329fcf-8fb7-4047-9de5-feed166cbd16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d77510a4-3fdf-4516-a29b-0f849410e1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0755751f-746e-4003-ab6b-250a9bcf3047",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "032c6a45-6a55-44cd-a176-825259aca9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5ca172e-4da8-49a6-b878-a378e9041113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbfbae11-a198-4440-a9da-e9cc88dad7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ca8631c-9d6e-45d6-8624-f9d83d81c42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e418bca-82c2-4348-93f6-26e863ca128f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "467da061-89d7-4f1e-b734-ad9e5ae2d11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "208768db-51af-40a7-97a7-4b95aa0a8ae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a34798-45e7-4261-ad9a-293bf665a836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "10d9db82-9c33-41f5-881a-3e717537439a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364e5d3f-7964-405e-b2e2-2c41241a3e6d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "951dbcec-4746-42d0-9c17-dd51885e874d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c39027a9-0918-4946-bb91-b388aa004a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc426e88-ffb9-4bc7-88a9-0e2f8154bb59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "57553c41-858f-4974-b64a-22a5985fbfb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8693ac55-9c83-41e4-8073-e480855e71a6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6f547f-956e-40c1-acf8-c4101299f2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e2e1503-96ce-464a-8211-64d69a287274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e633ca67-4059-4038-8d77-e27a55a2a972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c69f84d8-7abe-4b6e-9d1d-8431f4949fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12ec9de-7051-4a7e-bfb8-01895d139a2d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42611dea-de8f-4340-a194-28c0c748b1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed7141b6-2f3d-4123-8094-4570af5555dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad92c24-54db-4d7b-beda-28be5a6ac329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b536dfe-8eef-46d7-9267-79b065dc42e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67de54b2-0a21-479c-bf97-ec4370ee2a31",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fbe5224-c130-441f-8cd3-2f003edcfc56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b31080cb-394b-45bb-b089-46de7257d39e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1697ef9d-cd89-4cb3-917a-27b29c1bfc1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf25bf2a-86e2-4903-ab0e-6ababbf685e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0f42af-684f-492b-af8f-eda1acb4117e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ffeff9f-b969-46a1-8d81-fac576943479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e3c16ba-fb34-4575-958e-4cda5f94b47c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3312115-c5a5-4a61-a267-e558d2156516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "dc81a9e9-e9da-4d00-9b3d-785af65d5dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa53327-d65d-4b2f-a8d0-4611002853b7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abff0d27-2ca7-464a-9029-c9547df94e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9cd304be-95bc-4276-9c97-85b59959e138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad8459b-9309-4a73-a1ce-74b9f7bb1a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "32138456-5b01-4b45-b61a-b0cab408acff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3517eb-80c9-4ae7-8ddc-12863d52d2df",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e7839f-d5c8-4d07-ac64-bb62016e9c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8e1a1d9-3dd1-49be-bdff-52bf24096870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df506a0-3238-4d82-b099-f54c67673534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "367f8ec6-b164-44dc-90ed-2d0c624fb58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aff011e-502c-4871-819e-eb496caced31",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29fe2b15-7ae6-44b4-85bf-1e974733e726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba388f95-edb3-44f6-b230-79fcff4c80ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3c3473-0f9f-4fac-814d-e7024ee4128d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b945b3a-22b0-49c6-9ca1-b56f986ed4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a640fd3-3ab4-4b93-9746-a15314e597ee",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "777e3c36-8f06-49d2-9c9e-ad27b134f8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7a5de07-efcc-4d53-93fe-3d594ef124aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3482913b-c1e3-42dc-96cb-b5118b45c19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f05a8634-8b33-4c06-868c-6a8e42f0c983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cede07d3-dcb7-44fc-9aad-44a7844dfd4d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d4dfc7-c13f-4d03-8d31-b9918065d3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eacbf83c-9fd3-411b-8c5a-61b442a8b2d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1639b1a7-f75c-4955-b939-0faf79629be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0343225a-228e-4836-afd9-5267a5628eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f229c5da-6d4f-4ae6-b959-3431895b251a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3c045d-1714-42f5-ab36-671127f7004e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1560b8a7-46ea-4f05-93c7-89a1a235dcec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b72a06f5-caa2-48f9-812e-fb8f5a2dc133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "819e4e7c-8ef1-492e-b439-6fd6e1c32358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093171d1-eeb1-414c-a79f-9cc98dc47320",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a47dd9d-0d33-4db1-9c68-0bccd774e93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90ddabb4-2b36-446a-8fc7-07d785d83341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "059548a1-cc7d-4ef7-a494-898f38a32cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4c34b058-ed3e-4910-af13-c06e249b2a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1a3cf9-27dd-4ff9-900f-11df771ab6e2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3be872-fecc-43e1-8853-29b06b66cee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23cd4104-ab39-4898-b160-58029daebd24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9bc1a8-9d46-4c72-a4f1-3fd96396a6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c21cef02-eda6-43bb-941e-4afd636dfc89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f0e869-b3e0-46e5-87bb-9179b84224f7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2434ec-11df-433a-b550-5232e312eece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14f30f83-5701-4b3d-a5d7-c725f64700fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9b595b-341e-42fd-aa27-c67d7026f434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb416af-274c-4099-bc49-d03c4bdd3540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e569497-48b2-4c93-8a7f-6135ccdaaef1",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41e21bf-db2e-45cc-bb54-1cddb241aadd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b38c07d5-10ad-497d-824b-6d3e06c783f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0287290-2197-4c91-ba3a-6df15f8f69f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "51204fb1-85e8-4ae9-a01f-f2ab76174d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4781cfd-0b3a-4368-ae19-423b777cbf0d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81011495-d471-4197-a415-02a06df71442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed2a9df3-b443-4511-b498-d2baf625c7d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c496aa17-e946-4367-a4af-16112eedd664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8de58eb5-aa5a-4ece-b5a3-79156e18e235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f4636b-4ada-45ea-a54d-ba632a907abf",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f398dc5e-aec1-450a-a552-5f6f1e082822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "679294be-55c1-4f3a-9df4-5f1d811b8d7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a31c335-0189-4fc4-b21e-72af9cc949d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee6ca072-dab6-4ec3-9bc8-e7526e5138e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b011189d-56dc-4428-a83d-c2297b4ddeaa",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4972afdb-dc24-4d47-a5bb-a3068fe8bdcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68eff92d-88ec-4d6c-bdd3-8acb6414fda3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179b6335-5633-46f2-8e07-71e26cc49ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "344bc900-3490-4772-b658-31bb97539a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7815951b-746e-4bec-a980-fec71c655746",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0c636a-d546-4ba4-aad4-7d61783a9aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5771d00-e5d9-41ea-bc03-994aac1ccd9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65193aa4-5a37-4d55-8cc7-a79b7c5f00ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9eec2fb7-2268-4b31-9fd0-77db7e45e1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbb1511-da64-4fb6-9dde-2b86e05c2ea1",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc9fa90-0a7b-4a47-8d3a-c0a3a1713d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11674b09-75cb-4e97-9ddc-c4e7535e3eef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfcf6650-1332-4c00-8c04-4b52fe4601a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "707bc053-4c49-45e2-a8bf-62b96c453701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b547ed-7bc5-4293-9940-e139984490ae",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d2de85-82e9-45a0-8fac-f6fc4fb7f867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96124db7-82ec-481d-ba00-205bf8db2545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51788c8-4ea7-4a6f-98d0-38c954f25ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "459e2816-a7c8-4b9f-86f0-e8c19dbafd33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541ddd7a-43cc-42d2-986b-ab5256e4e26e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ed78b9-3256-4fa7-ae90-2c714838227a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c710568d-7729-4b30-9eaf-6b3b784c9b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9996f182-d2c3-402e-8b7e-0b79c1345df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc09de0-7d61-4577-99b6-b51e8b59d0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd065ca-32c7-4385-a383-5dc41e37105a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ecb8d66-56a9-4588-97b3-8dfdec5cd85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84c8b58c-383f-4c2b-a87e-954849223aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2bd005b-c0ea-477c-9c4d-8f95a3632ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a9ed843-696f-4e66-9b1a-c5e2f26b6a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d764df9-e4eb-480c-b845-244e2828feef",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da7220a-2caa-4532-8be1-bab4d12b0925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e90ae8-19d4-42ea-8637-fa474256ed0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a66b68-da3d-42af-be4f-9435e25b08d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab5951e5-fdbf-4ea7-83cf-3d15d9f3d9a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c08b3f-035e-4db8-a679-0832257b0285",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2387ab-22f2-42af-be04-97297113698e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c0d1d6-d37b-4601-984e-f6250d8e4ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e39365-38a2-44ab-9d0f-5a386a639962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f50e56ab-e1de-4faf-9ec0-66c9196989dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7391b686-edb5-499a-990d-8e292d9f9698",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b07d702-dfd7-4e3b-b755-c11d0386b7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c49c49-9524-455c-8654-5bcf347a95ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be51504-3ca1-465e-a8fc-3b878c50d6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "65eba4a3-a976-49a5-ba2a-018ab73471f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6028f00c-2b65-45d7-8008-ea218c636721",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eedeab6d-5005-4101-98fd-b820ae87c736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b20b4f1-fd6e-4a6e-971d-38366c7afe13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9a10f2-9b52-40d7-b68e-7a103cab23b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d73a8c6-5ced-46f1-8c45-54c0534bbfc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "debbfd74-c441-45dd-97b6-9b14c96a705a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912fc88f-8033-4c06-afc3-70a07ade34c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28850c1d-9011-4105-9f46-2ff31a0dd17f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5db2334-7531-4505-99ba-147e444e66bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3025e0-c8e3-4807-9937-c5cf2000bd56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7176f0d-b7f4-47b4-aaea-0b324571e290",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b4735c-68aa-4a27-a55d-d2f14ea37e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e258b973-f718-4730-97c4-ee3d29db951d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3154b50c-3816-4dbf-a81c-ea034192cbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a145fb-281a-4338-9cbe-4a493d73f138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2340e1f6-891a-40f6-b5af-91079e0eb079",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c95e28-1045-4d82-aa20-0599e61b9688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae1690be-8a01-4163-b9c7-0a886af04529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6c4c09-0967-4281-8dfc-63d3bf4ce43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4665383-b916-4ad5-8aaa-cab1c125f0af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4085cf1c-1b78-4888-939d-28fc6173d65e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e55536d-6cc8-4c37-93dc-ebbc4608e224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e9d911-a8c2-45f1-bd3e-466e1fe6037f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e732450c-bf82-4439-a1e2-7201dff6b12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "be203163-baa0-4010-9745-0c4b11a040ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5dc9132-a279-4631-b338-fd9e18ef40c4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28126ed0-e1fc-4022-8a6d-1d94f5b7f69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46e53315-2cab-4891-b91a-ade9e199c542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac47c3b5-6068-4504-9d22-b3942e36a43e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "28f8c119-0932-4656-8f72-60666c49b0e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa110a2d-8f47-47fc-b47c-9318dd41dd4f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce8b7d1-9455-4e21-a5bc-1b8f4ec938e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf08e13b-9638-4b90-862f-e26708278840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490cd940-4046-4f30-aea5-950f45c6c12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0c9dc0f-da08-488f-ad37-baef03a0f36b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8a191d-5171-4ccc-9fa5-c4e632681018",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a5735f-22e3-43dd-9328-721404145195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c2bbdbb-15e7-4729-bae4-215066510f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332a6e07-0b2f-4c4e-8265-ce45138d020d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1ac842a-35ff-4631-afd6-822255019dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d3ba17-df20-4ba7-8fb8-54ac9a102c17",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6954abcb-c0a2-4260-9830-ef78ed7afdc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b046b54-32b7-46db-9913-abd3577b5d74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a23e576-8f71-4ef7-a2d2-5c923dfc1ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "75ca5b11-a07c-48ef-a5b9-36354d275a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e83b1ae1-cfa4-4d5a-8626-8ced1a679cd7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0cb1b4e-01d4-47ee-8b06-aa5be2912a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b707210-0325-4fb9-8b2d-5bc553fbda68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6706d204-7490-44dc-aa51-b42051957f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc152c3-49b3-4801-ae8e-f8df5f60f878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6421e3-2ff4-4c43-a79a-9df9c032e635",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f96b8d2-8fbd-4939-88b2-7f9f99c7c507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cd66577-9aef-46f3-8e65-b5eb689abadd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12d6fcb-2ae3-41f2-971d-58aea33a5f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb0b46b6-b9ac-44aa-af4e-11eed2b52792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ddef121-38c2-4e0a-8a35-e44354596910",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a911f4c6-1358-423e-a3ca-3b2eac7b25b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c011bf0b-e5fc-42a7-a0f1-5eb755490814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d960d00c-cc75-491d-94ef-8e5fc23db356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "886992a7-65a4-482a-9db1-43d510fe4b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff5d133-8ce4-478a-a47d-b4095fb1231e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29113ceb-4ad4-4ed7-b38d-6468d15f2eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0810ba8-39ed-4c4a-8d8e-18e338586690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f489bfd-3177-4037-bca7-f3658a19040a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c84ae519-65ee-4ed2-8aab-a968647e8e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcbbf540-f008-4e15-92d7-9e7a1350274b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc2fcf5-4b03-455c-bee6-92aa152517ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d1e41a-9fd4-4138-8892-ac878b813d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3929226-acbe-4fd5-87f0-7a48fd878368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8babaa85-2bba-40b4-aa08-03792708d1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ee4ed4-ea0c-4d1b-b7f5-d15b2380292d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3396b07b-03c7-470b-81c4-2c7458413d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "851fe8a1-e921-4897-87ce-3ec316d6840a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f7cc56-efca-4117-bc2c-6845a2914685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3fd3e79-5a92-4503-bda5-0cf8f77e6a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26530a8e-e8c5-4041-9ba8-113d1b4812de",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6331e77a-4951-4d65-8a71-6e09b7cc2813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc3219b4-0aaf-4df1-bd00-e1feb233406e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77bb9f07-fa6b-4e72-a8f4-890790ff1b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b49ce369-9bb9-41ca-9e64-194e06f582b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9171cce-4397-4cc9-8035-97f3632d55b8",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7732659d-a0fe-4bbf-8b8c-456cc350dd1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea18491-673a-4a51-94a4-9c0b54d0fbd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "162c4a18-7bf5-4960-9c7c-89d1c5ef9307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "64ebbf10-0d57-48e3-9eb3-9bea231282e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7808b75c-f9a2-44bd-872b-bb8c8065a8e9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7709e4-02aa-4198-b68b-b3e80cc1f64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b6ba356-66ff-4caa-9997-14c6c22761b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5058d8-6b23-4fce-9a8f-ae3431c51e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bff91f10-0e24-48b3-a622-7a2a67febc6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4fa26c6-afd0-4572-b200-3a63c250c275",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5045d46-9fba-4064-ba9e-04c44b9019a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f160158-06b1-42c3-b708-51e803b5c288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb1ad8e-6e2a-4816-86c2-b2961c34e49e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd19d50c-614f-450d-b2fb-d342ff23afc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d0f82c-4b6d-49b6-974c-6b4cc624a3ff",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e120bb7-b334-42b5-85d7-e3e133f80deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be007eb-b9cd-4dae-9b01-56e5e5280fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89c5915-ecac-48fe-b0e2-a95146432869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfc67ac8-dbce-4e44-975a-925669dd6599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b6b20e-a8a0-4d95-a2fa-39fcd0d742a9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4598d8-1b04-44d3-a51e-25b1e6bd574e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f791c3b1-7659-4be5-ae7f-e5911c39221a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4352dc-a47f-486e-ad66-00a2f3aff3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "413cf9fe-ab20-464e-be61-8990b5d880c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a720dc2-8c36-484e-b031-7ad2dd79b7a9",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b09d66-fe6b-4aef-aa0f-7d75d2184b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdfcc6dc-eb1e-4a0d-a256-7f477d83a48c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccb1c18-0460-4888-819a-0dfec0d25dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1749d168-9a8c-4c2d-977c-95bc055c889e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ea1c33-a437-4b38-bfdd-089a4a8e70e4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d1420f-4e57-48aa-8ac0-0e9dee7f2b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8863d84b-ec83-4e6d-b00d-ee9749dbbebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9a006c-5bb3-4e0c-86fc-9d67b8791dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "721190c1-493f-42d0-97e0-04917a2e3cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38afcab-03c6-44f3-8c3b-d33f34fda9ea",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8fb6b58-058b-4f17-bc46-1d4a7f76735d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "843bed88-d594-4853-8143-0ca2b720e9b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6e1d97-53be-4980-940c-b0c098eb4fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ca5a039-f8db-4de5-85ca-03263d4889a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68dbb6f-df00-4d2d-b9d1-a20a99eb3fd4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78b6214-747d-432d-b8d6-72d6768fc265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62bd63b5-f513-4254-a419-144e7a6caed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e99f11e-f8e6-4206-8653-299855a712e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ab27907-38e6-4957-ad17-b1f41ab1daba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494f6e8a-9377-4b1f-ac4a-da1c1fc4b852",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4cff2c-5eb9-4f06-892f-e6a5f23bac8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f80f85-ac42-48c3-8fb2-56efcf3d3d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16489897-ca87-43dc-accc-c6f37dc079fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2a7e23f-6a66-41cf-ad8a-d23798280a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1569238a-045a-475e-ad36-f414ce2e84df",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "773a4129-03a0-4e5b-9f9a-d86c480e01be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1363861e-b3c3-47e9-9a1b-37466c53666f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb30f9b-5791-40fe-b026-1e7c247d641d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f5ffaff-d132-4cbc-9b0e-ce29ca541d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048389bb-e570-43b8-bba8-19c65721d37b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60427de-f53a-4046-9d7c-7a7634daebec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a70b53d-cd86-49ff-a262-fad730f64f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01e7298-13a1-46b2-bbd5-106ac81e03ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac11326f-528d-499e-ac14-8229a3608300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b4a59e-8dcd-46e9-ad9c-0bb4429cb6df",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f9458e-4a71-4a15-a170-586654a3ab65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b23732c1-0a4c-40f6-877b-58c844b5d9a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44d4a49-5b9b-45e5-8997-6a0619543dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b0041e92-1dcb-446f-a701-120231c54cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c0be98e-8e00-4466-9df9-4bddfdc26ab0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b93ba7-62f2-4f90-bb7a-bcee9190d23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f8fe13c-299b-4105-9506-e370588a6291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365ec2b5-a220-4e62-8920-15bd92b5edac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "418f99a4-0454-4199-a6d6-33b3a2812bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283da5a4-1b5d-4c56-b6b3-132a464855b5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ede3f44-c4f4-411c-962f-7ba8bd65405e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aed9975c-4f19-4f09-8dee-05fa3a0b24b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e96aa60-ec02-4661-9085-7843a89dcce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "71e7cd25-be3e-48a1-b2e9-f4c9efd1c8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4561d70a-6047-4458-976b-a3d39e93c706",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45e7285-2120-4629-b7d9-719143f67c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "877d608a-a192-4dc3-b44c-b85bed560c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e26e623-065c-4915-ad21-f6818c506092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1dfb5abd-7dbd-44bd-b49a-e30c23367c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27503d98-99e7-4483-8a53-7c2d3ad66a60",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61a8df8-cf39-4afa-91ab-ead48b56d7bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e38baa91-57f6-41e7-b0f5-504c7982888f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5f0438-b060-4c63-9d04-f47a2ca9b9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "24bfcddb-6650-486f-a892-ce69a18847e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddcba938-e7b0-4ad0-8686-e9b179973d6b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50bdfd54-0d5a-44a3-b5a3-a555f8f85520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72c95baa-3cf8-4664-bb6a-af28d111b48e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ff26c7-c05f-4311-bac6-3f641eb50a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d407d049-a8a8-4790-a256-677420268f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5493ef07-15b2-4cb4-91e7-41aa3f1b3198",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2230fd-7150-4d5e-a1a5-7cbdbb721846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c16e7a96-3e8c-4eb5-bd7a-42b07948d133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8423f659-c8ec-498c-95d8-a7fc6d2792b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0334e49a-f690-48d2-b0e6-8a6189ac9374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2c4b68-e64d-49ce-943f-2f9674ad158d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1534b71f-5837-4481-ad7c-3c85173d0433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0a2ded49-d708-4671-a3d0-0378840732ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c631c4-5685-462c-af2d-8299aa654c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "da251f43-646c-46b9-84be-230c6b799d7e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "19c42f76-81db-4d3c-bbc5-0d9b8d47fbbc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5b5a59b-fcfc-494f-afa7-d91bfe89e764",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2bc690-ddbe-4231-bc5e-65501635dccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d2a2f6c-6eed-4210-887a-4bbff0b88d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c6adc25-ab2c-445b-b19a-efed0d1cd4d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "731d1084-db32-46c4-b3ec-1b917a582582"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9df6ce6-7f80-482e-bd66-95e7285146ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa6b8c27-8e7b-44d3-bac1-9e439d83b023"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "251fe85a-86be-42ae-a0b9-4191959b9097",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "874b4314-721c-4b94-bf31-f84e0a150dd4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8aa65a99-399b-4222-a6ea-036adb6f77e5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a8ca4cc4-5849-44f2-9e8c-f2bfae4bef69"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d6cd148e-0178-4a65-a5b5-9d095e8979da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d1ba76e-3f56-4ca1-adaf-dd45915e5c93"
                }
              }
            ]
          },
          {
            "id": "dcb7568a-d512-4660-80fe-96a1886cb838",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7fd618fb-8f4e-4bba-bfbf-96c386556cd9",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "cbbe31d3-6348-40d1-a1db-3e2c2d312c60",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc6e230-2248-4df3-b585-35b7da38e15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7559d8cc-d1fd-4817-89c9-141cb899acf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a468b0cd-0909-4e57-8863-a7bada320ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17d4c364-9a0b-46aa-95ec-c4a19f9b0160"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e8d2d00f-c41d-45da-89e0-3dc0990b17cd",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a370222-a7c0-4113-a9a2-a63fa8c67187",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68513b33-59f8-4fbf-bdee-efdb92f68c54"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "471c58f3-8ba8-447f-ba2a-6bfb401d6a4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "135f643e-a5a6-474e-85dd-3df76d6f4075"
                    }
                  }
                ]
              },
              {
                "id": "12cc6888-b1a4-4afa-bf55-5e20e01b6c86",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c040a9bd-87d3-46af-8dbb-67b9bc80b2f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49bc11d3-7f7e-4eb3-a227-477a89fd955e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82fb97e7-7eb4-4492-a62a-eae6d015e091",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5adb21c1-f4e9-47d7-8aac-1ef11c5589a5"
                    }
                  }
                ]
              },
              {
                "id": "56fbc7ec-8443-412c-9857-0411294db156",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9403d64-f897-482d-b094-002f0e941d44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "28de08c2-3891-4f06-a793-132f01107597"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a12a53f2-2dbf-4a2b-8848-8c35c0caf99f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "96e7bf54-9bf3-472a-ac39-0c8f7757433c"
                    }
                  }
                ]
              },
              {
                "id": "0d353eb5-91a5-4218-bc9e-f03b9276ca8d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6bd6d1f0-82cd-4031-a3ef-c3269eaf4f95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b37780e0-ef0d-40c9-a845-8c5b593aba79"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c832d54f-5300-4de2-9e2d-adde674689d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "310db016-2332-4eb4-901c-ad125ae3b417"
                    }
                  }
                ]
              },
              {
                "id": "8c88f93b-6148-48ad-b535-2b831224e9a0",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ca996a3-32fb-4602-b910-0067ee14cfdb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b75d920-6973-4c1d-aa16-be1f3c2c421e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aff3c9fd-58cb-4570-9b02-e45816aaf7fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9f353896-f3f7-49b8-83f1-0356c9944a1d"
                    }
                  }
                ]
              },
              {
                "id": "d17a995d-850c-40b9-869e-6dc693787f05",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e125f0f-13dc-4a6c-a4fa-e85166f711ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "92157d80-a2db-4b47-925c-edf9a56c833f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09cb52c6-61aa-48ff-ad25-7c9d8ce619f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "53ec23c3-f7ef-40e4-accd-503fa86dc086"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b358e9a5-23b9-4dfc-9277-475260d92df0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a8709160-b18f-4c93-a2ba-7069ea78dfb5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "81af5b12-c3c9-4f16-8313-a7efa174b49d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6b7f80a9-5a27-4861-a22c-bff76d82fa59"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ebb3384a-a006-4460-b9d0-38ccbfb42cf9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d8731d7c-836c-4f98-bb70-b258795c3532"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9670f974-5e62-43fa-84e0-e3baa178981d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29192c53-6b44-4ddb-bfe4-9595502b6591"
            }
          }
        ]
      },
      {
        "id": "160557db-91d2-4f80-93ee-1503b6dbfadc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4e171547-22b0-4029-9370-4b4acaf5afab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "99df35e5-9455-498c-b7fc-a2fb643f40f9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d90c3611-6c06-42c9-89d0-11fefc7f69b5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc42338-9790-4fa6-a556-2d1c0715d444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74e2698e-75b0-4358-a0e1-a827b8650539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ec8cf9-144f-43bf-81ba-b572fbbb7534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "010ce54f-9d1c-45b7-b9ea-bf0c9df18598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f4ad43-e449-4974-9492-133e8f5c573f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e29f47-3021-4d58-884d-1cc14fcef2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a32e8ee4-4af3-41b5-97b9-5f1654457a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6326ea-29fd-4cdb-a13b-09b92b9f8a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cca18f9c-4978-4ab6-9f69-78d1ace44500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28f70a9-9c7a-4c5f-b04f-7794ab733238",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7154a442-83a9-4b57-b2c3-80b0d41d5f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6070fb32-8c9f-4c34-a558-aedd8413bc9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3241ed7-af9f-404a-9634-de5d0163f0c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc3de2a9-55d1-476b-a4c0-24de457eb26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62899105-1434-4a6c-accb-0de041c6e9ef",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe159c4-87a9-4db8-833b-94aa2256baf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d20535c-7811-4e5d-b072-71d65bf760b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc7b979-cd62-4fb5-b322-56d1d2e9a636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e06744a-5d36-4030-a10f-3938ffd2cfff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fbf71da-d1b3-4a4e-823d-6ad515f6597c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088633df-5c48-41e6-8247-b4ae900268c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c1a36c7-a33f-447f-bfaf-619ebfacded4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621ea717-4687-4d9f-a3fb-7eae47386dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35a78d4d-8402-4c5c-b3c1-950018c69fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa2a74e-c4d1-4dd2-8b95-8246860eca26",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "708a4241-b392-4d84-8322-9a88e85e7d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e858c734-6a21-491a-95a4-34310f189f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f682809-fceb-421b-880f-b93e8b57f920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "151225a2-83ba-49c6-a2e4-61d1dee975a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7162ade-edc6-4563-a854-c43fc86be967",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8ebbd2-07c5-42a4-80ea-57f44d649db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c463c479-611b-4d5e-8439-486c56b5bbae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc1cf74-373a-4482-8c5c-71993e851537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "89cbdd44-5802-4cba-beaf-42fa15b7ec79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe90a52-808e-4590-a665-2574d1647673",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b77927-f6ea-4b42-b0a8-c9c94b28117d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7b168fc-a414-46a6-953f-16e75b89862c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9381748c-82bc-4069-8949-5847c1aa0d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8231a656-a85f-41d7-97dc-9f09eaeffb11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0b16a0-7ab4-4029-a61f-4b7e3699b580",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c4a238-d82b-49c8-b646-1ec59e7fda5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5660d8d-46ac-4a21-9e00-e310eb6fc326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16994e9b-7bbc-4f54-9d28-5c6ba12ee783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a22cadf9-18c7-46d6-ba01-572ec4643090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc6a025-54e1-4e16-a256-9d462f216355",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70b0e1b-826a-4bc6-ab32-4a3f8759eba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e4718a0-b6b5-44c9-902f-571eec8d1897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124acc25-ab47-4f0e-be9a-ec2537861302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8afa1ee3-a00b-4303-b3f2-30437e081af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0bfa7e-d77a-48ae-8e65-aa53fe22f904",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a50638-5321-4d93-8f80-7bee18dd7865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c605e2f0-2fba-408a-a4cb-918ffc03f469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52bb99f7-bb84-4708-bdfb-eaf37de0824a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e804854c-64cf-425c-9e28-fd4792ca3b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad20ef8-38ba-4262-beb2-5b0704760275",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe93d86-c903-4c88-ab37-b1c1abc3f688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc90d5de-d2f0-4862-85a2-ed8451ee9f09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d6c3810-99b0-4661-a41e-d294fa4301e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b1c019d0-aa8e-4940-8c14-ad48a1cc4e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f93d87-43ef-46b5-bbcc-466718fb9999",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "685d9379-674e-47c5-a1e3-b464e7c1dc99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "becd23ef-22f3-4b37-9286-a97d2d9e39f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f51a519-53ce-43f3-a224-ff5f6c6f8011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6ae63bc-faa0-475a-b0de-e968f116374e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5afde69-0a76-44e6-8d94-1f59a6970adf",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d1de29-d009-4ad1-9774-720b0fcec0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ccefd95-5dd9-44df-93e0-3d781e32399b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2813b20f-144a-45ec-97c5-63705daa709e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "857cb523-9dd2-4ae8-9a0a-1d601e63141d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c70d7c-b5ca-4c0a-b1ea-2903cba72d32",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "207fabd9-03b0-4d34-9039-cd8490f2054d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "105c9c0a-4082-45fe-b600-60519df51725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4a8e48-4a45-48ab-a613-7ecbeba6c3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e270ed48-626e-4a00-8255-6932da869c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b887229b-8ed0-4d7d-ad20-6e43b034d2ae",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2808fb66-484a-4be3-9995-efcbf7a25d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18159984-ed8e-4153-a7a1-eb84287050ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ab43f4-bf2f-4d05-8339-4458ac4952db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "47aadba6-6ef7-42e8-9a44-9a0f7d88d407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179db23e-f457-42b2-b05e-f24d6895bab7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdffe89f-a35b-45fe-8223-d6b94cceb5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "766a475c-3a7d-401e-a67b-4d872c63ec3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610a5c7c-f2c7-4628-bc41-a32c3131b998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8c75f11-3aa2-4ee9-8162-a4483e9628b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3c8a62-1fc2-479c-bf13-0a29f4d3ba94",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "814ae6cf-0d71-48b9-90d4-130d1ca602a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d687b194-7543-4bf4-878e-0742ceb2ccd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a7f0aa-ed74-4481-ac7f-2dfadc22792e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9a02642-2332-4a00-8bc8-9d71bbf09ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40543733-aa68-4595-af8d-703b2c85de5a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dedbbae-a5f4-411d-9a7c-86178567b982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11451b30-04e8-4aa8-a4ec-7af91cbe8949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e1c69e-1a21-4b3d-af90-312ac0b92d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "813cf5f3-86d9-4cf9-8bc9-baa55bf3914f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a59fac1-7504-44b6-9f5f-b02591682996",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8625ba62-ff28-4017-ad7c-a8dbf27c2fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "198b3b8c-4960-4290-9028-fff8e594859b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51db7680-1c70-4518-8567-1653afdfbb29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0da906ff-8fb7-40dd-9a30-61a525b0cb89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a016de13-e0d1-47ca-98e2-fe8299903ac7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1ffe18-390b-4f26-85cf-4c4694bc27e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "257c3ee8-5d51-4abf-9d90-5c0af76a5bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2bdc87-c831-4512-a04e-ed2636d26022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92c65f86-9b7a-4648-86e3-22231ca9cbce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848305c1-b04c-46d2-a7ca-4553b2c10c6b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1522965-a01c-45c5-8778-f60072e092e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c68268a0-5fd8-4f43-aea2-90c1382e8e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97861716-1d04-4ffb-bc81-009e4ce46525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c4fa8b8-d720-4845-bacc-248c5bd10fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c787f8e-cb48-4759-a3e1-a9f7dfc6966d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9f55fa-d1c2-4aea-af01-d4cb34b92bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e42c0bed-2f8e-48f8-a0fd-244760e6fa5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f60ca08-1100-4514-9245-66e7827210ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d469083-c2dd-4711-8696-e59b569db84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd529b7-2cbb-40d3-8bff-3d27ec81ca99",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0d81df-b802-4737-915f-4a3598b6322f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aff6e01d-43c7-4a65-8c19-070055a081c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af379aab-d3b5-48a9-a731-e6a797f8e86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24eb558a-a1ae-4fef-8923-a4b5c7b6ef20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b096abc4-cea9-45ec-ad9b-a2d9f5db3350",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14cd635-eb2e-4c54-a754-e33cfa8f5fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1ca8144-7fbd-43f8-9a6f-96b0b6ffa5c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639de16f-d863-44ea-a94c-561fc64cfaca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38d011d3-128b-42f1-94df-019c06d01eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3931182-0dd5-4e36-a363-6b500d89365c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc574efd-55c1-4be0-8b02-2e0db82c02b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e96f60e3-5a16-41cf-9e12-7b9fb14deeb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167c610f-147b-4e79-8f29-101096df10fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f379d00-7eff-4f5e-80d8-74339354cf87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3af0d17-cfbb-41df-b55a-08090a879239",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e38af32-a964-42d7-bbde-9a837a0d9c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f34111-cd02-4649-a30e-73defaf1973d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169ec16a-8578-40a8-a0e2-6bcd8aa2623b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d71b7475-f618-4899-810b-74851ccf6478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5cc1a3c-52e6-43b9-a53b-38cf6ae6206e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce27f3a7-2052-4969-b03c-6179220dc78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c39cc8a-8f84-43f3-8d0b-b37ca7e4b943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5076d7ba-c807-4901-859b-ff70d623f398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0a1c349-a186-42f9-874a-15527cc005f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20996bf9-2595-487e-b2d8-abb0a604f6a9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b97b41-9fe8-4def-83cc-fa6c821360b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e74190f-631e-4cb2-8e49-37717f84aecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86da7e7-061e-4e2c-92c0-cb2cda2d4cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "186d657c-78ad-4847-9c67-8f348194b907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20dccb5e-67bd-458b-b512-79537b689742",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d9fff8-a8b1-41c0-b0dc-f05e35b16963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff18df02-3eda-4e9c-9bf3-05b78b6a67ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d362b82-758d-4a0d-81ce-78bc8ded254c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb2fb908-1d3a-4536-9357-5e161e1ae6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91edd766-c2ea-4d41-8ce7-55912c1ae72d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39478f20-8b7a-4443-8acf-09db7906c009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7476597-cc41-4e48-bbe5-9e6bdefdf273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa24b1f-b615-46bc-b2a7-8e8d87a74ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1727f741-24b2-47e5-965a-dec9fafa0dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bdd7de-1a03-4f51-a08c-ed71d3ca7f93",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb8fd2a-3bb5-4920-af1f-4b03c62e1588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0bd87ae-cdef-4fc0-a16d-cb353c6676b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c320370-a0c5-4c27-8d3c-588918ba7a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdcbc507-7b41-469e-a59c-94428a5bfb4d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bdbc5fac-bb1e-4527-a02e-211d4129a253",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e401806e-ea25-43f0-ace1-f49fd19ca392",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be2e606f-a750-4029-9cfe-6c84a5834795",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c41401e2-0b0f-4825-9b32-65405b4cbef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "699f1ba1-249b-4951-9a38-8ca239d3b167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5fd5bad9-6b0d-48ce-95d0-2dae0d0de2bd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00b4b5e2-b532-447d-b7cd-99e65272d3e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23c79271-e690-459e-b226-5cb54f3e1517"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "761726bd-be7f-4414-9155-68639b7bf535",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a24c4d70-8237-4a9d-8dd9-03a52290b280"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "476433cf-2dee-43a6-836d-6993d6c72c1d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a0a014a0-fad7-4311-a446-22a37b296ec1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45474aa2-8bfb-4afe-9993-c891326a8761",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7e6ddd79-04a6-4d0e-9765-821c348e2cd1"
            }
          }
        ]
      },
      {
        "id": "ad16f4e8-4aed-4a46-9525-c562847d0c66",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "cc04ccc5-450b-45ab-9db4-9bdbb8a9b969",
            "name": "Negative Testing",
            "item": [
              {
                "id": "50273854-fc73-4578-a93d-7ee835d0250e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fe2fe1fb-f11c-479e-9ac3-1695d68156bd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c4857bb-7af8-448f-a5ec-9f57b6026291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42717f06-bf41-4027-9fc6-ddea829cb0f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd5b5c4-62c9-4047-9520-70359e21409f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "36db514e-f1c7-4f16-9eda-1442334aa262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d66682-131b-4e59-8961-1fdc92c693b4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97376644-fc5d-43ec-bd8e-4601f999fdfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c02cf8c0-e356-42f7-b5c7-b3354a5290d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761c704c-3b87-4a65-8cec-1ea1acc0bd8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "11083bab-1497-423b-863b-a80d14d6404a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c4d695-e7c8-48a7-a177-50e901025b84",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba3313d-019c-421c-bfd6-9f03b51a092f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3181f36-079e-4edd-a812-a6a9d9b234a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e46a300-b76a-410c-a47a-90ae1143e8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cda6aae1-4676-4b7e-8158-d7be0e4a8c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8fd64c-c5a2-4cde-bee3-ef40f40bb916",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc235f54-8a16-4f58-ba23-b749300ad5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeef2f7d-56bb-45d2-b10c-29dc967c8c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358d296e-a0c5-4b2e-a99c-5a1d41344d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "afd6906e-28a7-44cf-89d2-0cfe11756461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0cf80e1-18d8-499e-801f-c58d27c17bb7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ec30f3-71ef-4a67-bd1a-ccb1d7a9a394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89e250b4-bc77-4e3e-80eb-9588385e081a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd7f67a-9b0b-4e9b-8fdd-6bb21b97bacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f72955e-eafe-4b9a-a1fb-fc51e68cdf4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e6d4ad-6964-4426-baa4-d499c0691879",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "349fc0e1-e5c1-4a52-8d33-63f892bffde2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8889be1f-5f2d-4f71-9141-772fa2e455fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8122c0-7b50-4324-971a-c0adc144a71a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2831caf-9e6e-43a2-befd-8159731526b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55197f30-f9aa-4dcd-9fb4-2d6019754a1a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39764070-a57d-46e7-bd14-d0b7f7b5b530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cba2faa-3f60-4f2a-a3a4-88e6682632cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920ccee3-4463-454c-bb60-a87fd205e719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b366be1-533a-47f9-aab2-8492f3d410c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bedb6da5-9a18-4a46-a1c0-09c28e9e6954",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bcdbc85-03cd-414c-afdb-42497396ce27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaed09be-455f-427d-b46b-522bbb184467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d5a2b9-bfb5-40d7-93aa-0ee3f9d53deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e853fb-e800-4727-ba86-9c5a105f4a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ada2b3-3df1-4f27-a307-7a5760996636",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ec4827-52a8-47ae-a5be-bbf72fe285c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c916733-aa30-4fa1-ada3-5edade78c60d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62906cf2-a7c3-4daa-a029-1b399f36aabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dec9591c-25ed-40a3-bdbe-74193d27e018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9e3959-7d4c-41dc-b058-a15c5370881a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad46faf-f960-4127-b42b-3ad1052fb06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b95661-136b-4e61-9638-882b33cab52f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb8b610-f5c5-4237-aa36-5c54c37c3548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e1e1ada-e5ad-4ec8-a4db-fb064e80efe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61d63c9-b7ea-475a-a04b-9045d0537eae",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7a33ef-90c9-4842-92db-53a71454d949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8752cfe-1633-48eb-abcc-6a88cdb70681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0cd624d-9dda-4d9b-ac35-c8b404738723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3073df4e-55ab-45d5-8d42-d3b225a1515c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ecac6a-ff48-4ea8-b92e-6f91e976c546",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d737525e-c31c-4197-9cbb-9f4f53dd3110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d97f6416-c10b-4727-9433-0b55f4106aff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d773f9-56dc-4c58-83c2-e3f575fc374b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "99c2be9e-c800-4786-a6ca-aa0f4e2960fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22481e6d-dd1c-4ecc-9470-5207c1676954",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900fc91f-0ad4-49b6-ad08-27fa1f86c1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2fea22a-f882-4385-9936-615ccf08e011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8d6a22-9ba1-4625-ba10-32453cd11135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6059da7d-9c8a-49e1-a593-32a4e146030c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb018d0-dc09-4e78-9dd5-1d5eda627096",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed282d0a-59c7-47f1-8ca7-84f12d32feda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00675bc8-ecdd-4887-a8a9-edf2d3bd1dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac72278-e39e-4f1c-be77-ad7c1944ea43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c0d01b9-d79c-4d1b-99f6-0c42d71903ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2881f5-de39-45ac-8a98-47f2ab214be2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e001cfd-55af-4e4d-bf2e-f6fb763b7f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d04a02c8-b3f6-4f37-b7ad-f45504ae5310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6581556-4590-4614-a681-677feece42dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f07f79a5-aaf2-4de7-ad0f-e9670f44b8db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3933ab7a-70c3-430e-b319-74fbc0fd02b2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "875e1777-a23c-4ed9-9911-f9503ab43e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5873845-9dec-49b4-8f21-11c0b386e0dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3cef53-4df6-4547-9aae-d2579dc4d244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7867c330-7626-4525-9644-e7eb4122096c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605f977c-73de-4dc1-b1c7-76473aeea81c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16387052-bbcf-4195-97df-e6bddda4434b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "557b265f-2b18-4922-8038-4969730c11b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce33d7c-93d7-440d-8965-b347a07ecb3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "abbbad12-a163-4491-907c-9b7a7419d5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93cbe8c0-ac3b-441b-af42-b252d9022ca0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6528cdf5-8d9f-465f-af72-63875f040a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bfeac85-246f-4b0f-ba98-f055ee742b3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38d4ca1-6313-47b9-ba49-ea861160bfc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "edaf9c4f-5717-4282-91de-b84d8185a53b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3299d16-ce7e-49b8-a064-f74949ce5e63",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8542e0e2-6c1b-448b-af4b-bbc584f1f01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd085b74-1ffb-4e39-b88c-66200b5f445d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f8ab58-593e-45dc-ba0b-f349129f2aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f62a135-5d43-4a68-8b66-b6a84d1bf8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c6b138-301e-4486-ac00-dc79d5788203",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c572af5b-6f76-4051-89c0-c670b147cd27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "278ab35b-3d51-4d10-a383-0163f06d6a43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2776dda-fd25-4a00-893b-5667c264769f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b27d504-1bc9-4fc9-9d64-f089d0f61b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2869b8be-f6d6-4cdd-a05a-942d18b959d8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87fda105-f029-40f6-a83e-95576b862f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06c1f76e-a1fe-4588-97e9-ca3a3cc2f694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb31ed26-0a14-4f22-899e-2f8693b0d47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c40c5d5-ed0a-4527-8088-d6a6bdaca354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c692a2-9b73-49ca-aa93-91e2671c2a6b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb04d07b-eb21-4779-a75e-9f3a6fc934a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba119cdb-4a85-46f5-bc5a-21cae0dcf992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e344f8-aa3d-42ef-8032-f499fb98e640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14cc5a37-abc6-47f4-a449-d41c555cfc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84abf002-a05a-4e19-a75b-7bad74549457",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c045c66b-68f3-4c52-b8e3-92dbe67675ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d08df51f-815d-4d59-87a2-116a4fb591af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13bf79eb-e78d-4de1-a377-0932ee4baa39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf303240-c07b-47b1-9681-11d89820c5e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04195a02-e475-4198-8d9d-8775f408bc29",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76475d49-42fc-491b-99fd-eaafa329120e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d9c9b2c-ab79-4f34-bdd1-54d696867f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c634b8-56e1-44e0-803e-400a8464c56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d35c9e48-7d46-4386-87c4-0ed690461be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7696ddb2-7c35-41f1-9ed2-ca922d388967",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2d8c49-6e3b-4115-9971-b81561e23d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aae9825-d1a1-4fdc-a545-2e4e00ac8611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54b0cbc-86e1-405a-9fd0-ec518919b655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b57a1cf-af95-4e63-aebf-dd321254c875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad54b00-a974-4afc-826c-4bc8b875f86f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c790438-294b-4733-8aab-cb9c2aa56732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e073107-88e5-488b-8975-f2d78c9dd8c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9677a67f-f2a1-4e88-9a3b-f4d7b5597a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e1518bd-5221-4f6c-a43a-30fa65768619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86f43d4-7064-487b-b57e-f703a258e309",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b67d06-0208-43f5-8262-ca9f6d205cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea724d6-1ab4-406b-b66d-bb122c18e47f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd2faf1-7a0f-4338-afc5-6e80fc7f88d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a96f8978-b2f9-460f-a79e-905d0127160a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131b49c7-3965-4fd9-be0a-df3b4b03324d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b267db75-5542-4dfd-ad92-999ab26b77e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d015298e-1bb3-4154-a30a-0a06994221b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5c936e-ccb0-402d-a7cf-22a6fc742099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "650ddb4b-7186-4eba-96c9-fc76674aec49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65ea3ba-c9fe-42d0-8654-ab3707951b6a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc48c16-d391-44e8-92fe-2f63b25cb003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49690f24-d843-46b1-857d-083be68a7d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7911f9d3-db56-4457-88cc-b1c893cfd77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a551f43-2b6b-4582-903b-bc5d4eb73aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "036d5ef5-02ab-4070-960f-4031ceb8d7f9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b63ef0-44b9-4684-b6e9-09550506b389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34dd4f2e-994b-49dd-99ef-872d9368eebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b9d6a2-58e9-4dc4-888c-e46892b4509f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea72cf17-cc14-4121-9406-41fa7d7adc67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c720b8-d3f5-4226-9154-16b58bbf1e31",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b90207-d0f2-4638-afb4-9750214993db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c750564e-e422-4265-a484-c6e1d83cfaea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710c89f9-6525-40ba-9bc6-89c100cbab0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d957a0fc-a1f7-4358-9c9f-7a4e8dd709b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d0cedf-bf9c-4a3e-91fb-cbe17768df7c",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "047293a3-eccf-4a49-9d06-1315a9937a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5410e00-430b-406b-822b-2da2c1583a02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62284cb7-02e8-4c5d-8631-7662dd318471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b65b8567-d672-44e1-b462-e7432168c01a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0f0667-d146-47e2-b2de-51a34de1c1fd",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38cac0b-0dad-4adc-8760-97eda464e8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1384e96c-e97f-4e71-b35e-64792a4fbfa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3651fb5b-92f2-4394-b36b-ee96078bc134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a59cad7-96e9-4ce9-a0ef-0a7f51eb700f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff42373b-3b0e-452c-b029-f48120bdb754",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb716ab8-e22e-4abf-8214-ae1681b24e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4f29879-a687-414e-8c7e-b5d18b9afc62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52752db-60b6-4917-b757-69eca9d9eb1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63a9ae03-069c-498a-9f3a-e585695988d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22847c90-013a-4ef7-856f-653ecf1bfca6",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad005b5-d610-4248-b4ae-a184f65b4702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c523eb-0561-4908-9137-2d24671a78c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02db252-e04f-42eb-87bc-4b471fe562be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41dd1271-59c6-4bcf-9cb1-7cb12e70c67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb7fc83-2fb0-4237-9309-2974e2f8088f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68aadcde-794a-40e2-a232-fb95feaccb35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5163592-22f9-4bb3-bece-8848d310379c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4048e0a6-a699-4ad2-a076-ad2f99d85092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f52f808-0a79-44a8-9ee9-05dff579ff24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3cebe7-9c24-47ed-b5f8-9304f46a89bc",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96c6763-2e11-40b7-a5b4-e2822e39443a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc87517-b7f1-4718-87be-438b640e6aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba1c74d-b3fb-4e9f-a037-58da53eb112f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76760374-be7c-406c-bb31-e815b3388c51"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e60bae3d-874a-4c1e-83a4-2b589ec884b8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a5bdad5a-de22-4b70-82b1-6c6706b3fa80",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ddc29ad-0459-4a5d-97cf-638490ff84bf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "013cb4ac-bb0d-4ea3-aebf-a37ad71edb5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1e85a1-68de-4bf0-be4d-da67c25a3eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb186681-5b30-4f03-b15e-36e4d4fdb8e2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6d765f0-55bb-4b58-9913-a40e67b198c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f4ee29e-173d-4ea8-9657-0ed87c1fa449"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7599f32e-30a1-43cb-a421-1bdd8a1552bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eddc5a2e-0cfd-4d8d-a873-26668fcc6aad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6366c846-de32-4548-afce-49e36c27291b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4c024263-44dc-4e09-bb89-12fff2664ca3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "74e46ca1-71c9-4c66-9f10-22dbb74b1693",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3968a83f-89f5-4621-9b0a-666f371e93fe"
            }
          }
        ]
      },
      {
        "id": "84d83f4e-86fe-4a30-9813-b1b6e281b275",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bcd4c754-0961-4b6e-b48c-7ce89009429e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd0a4f2b-ade5-463a-b7d4-465604665d95",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "855d8ec3-c3c4-48df-b3f2-520d73d40dee",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace6043f-dcc6-4171-9f1b-e8c356a8ec6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c61110da-d027-4833-8fdc-c0437c96fea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a515a8-b78d-448f-a246-fba35c158c4f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf27ea5-2719-4d33-8137-76ac8db50ca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cb74738-feb1-463c-832a-7634b7bd4eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3628fe58-546f-46e6-8814-603d0e2aec6a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a9f64eb-007f-4366-b008-6e514a3ea21b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a26849e3-64cc-4696-a6a2-886b7806455a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f030a675-aa29-4880-8846-0e7773915d15",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf667050-baec-4974-9296-abac3b7655c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e4e631-d29a-4156-9f6c-14c1970b884e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b90ee6-d08f-4ead-af9a-a07e013f7f61",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee47d3c-63cd-4c40-b355-eb41f01816ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312bfd16-097b-4666-af6b-69438aba40dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c98b01d-454f-46d7-b1c2-91232baf0e88",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ebec57-1019-480b-a95c-4bdfd8561739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38564f11-fb22-4e09-97b5-4b1c435708b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d40236-d116-4e70-8bea-7cd6944410fd",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2085c86b-3728-45d9-b3e5-e04f0d245c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823a3ed8-cef8-4968-bc7d-ef8bb0b1421a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e813072d-3c58-4ea9-8fdc-08df2e4de9f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99a61086-6c78-4949-a5d5-6c65c6aa437b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74e1a81-4fc2-4858-bfc6-69282819010d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100cc627-00fa-4100-a819-26f98144eaa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a559e10a-4456-4944-ae86-a50eb899db12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c184e527-eb08-4224-bd9f-0925779b8723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d56a1cda-dca0-4636-b2fb-2a1adb081b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e579e909-6898-4eac-a2c3-4020a747e688",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd8629a-d1d1-41a0-a9d0-09c71160c4f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53bbcd2d-57c4-4743-968d-afde0e1b834c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de819f2b-d07a-4852-883d-0d798fc7ad91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36322050-836f-4e9f-9865-14540e459cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e95875-7699-450a-b8ba-a4136a5c8e01",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e377b3f-a1bc-4ec2-806d-3ac51f21fa91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3077549-f831-4fa7-a4ae-db28cc3444e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ce5ae1-22db-4978-9ebf-78f182c95752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9236e8a6-bbef-498f-87ec-7ed655d633f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955dc67e-bce2-404c-971d-8ad11774116a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd84bb3-8740-46fa-bd64-dfa177896100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e30355b-df6a-4eaa-98f2-85a7999d3c88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "731f5637-3807-4cc7-8ca1-6d37d7ad3dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e6ff8bc-fc65-4357-a464-abef8cb03438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b961a13-3494-44d7-93b9-f97d468caa89",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f32bb90-3b16-4922-8e09-bf75222729f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84451bff-e545-4ac2-afad-7e04cd1a7482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab693f0f-36bb-49e1-a6eb-4c1e0e7fc99a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1c865cf-889b-4a65-bd2b-1e435a34a3a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c9e4cc-13e5-4d65-b64f-bbe5bab3b5ce",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf52e15-6500-48bd-9ca0-0ff17f702972",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3c546e7-652b-446a-b812-0e7bd849585b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77bf54c1-17da-47ab-afba-ddfd1ae5941c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c43d3b5b-5df2-422f-8078-9546bd04d12b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451c6f04-6b2f-4779-ad29-b2fb5027ce22",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5050253-e748-4ab4-a043-f8663619fe75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfcd24f1-3e45-40e8-ad13-6bb64024b85e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a23a57-e72f-4824-881f-9dde0e4dafe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abad1d28-c593-4b50-8756-44496b21bcf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c863f0ad-fc8b-40ea-ac2a-3963babc6161",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fdc8506-7f0f-4ed2-8e4f-7ec732fa17b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd443796-c20d-4c31-931c-7feeaf02175e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "311ce74f-6324-4d67-b4f4-55f372b159f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba34f8aa-2c94-4c8c-9005-db1f58d1cbcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae920398-4f43-4d31-ac43-392b19ba55a5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f82802-6a8c-4731-8b1c-5f2dbbe4bf2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16067732-fa5c-4cf4-99c2-96727a6a4135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "793a172d-a679-4af3-be53-d87008ab9e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9de17dc-ed2e-4182-b22b-fac65a51f041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d074bd00-06a1-4d08-abde-b17afbaa9dac",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93208f12-5874-46c3-8344-ea5dcc969f32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be87adb0-7b08-4d85-82b8-7e83f87309f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b895c61a-0194-4979-8c8d-3e7396b3dafa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a0115ea-070f-40d5-9954-7624e298507d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772b7372-f747-4c5a-b65e-a59f94b5a301",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c7c769-52e5-4778-910d-7713317a242e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e8f1635-0577-4840-bda5-0c978f638cc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f3ff1d9-a730-4b98-9e79-4cdff4206c78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67b50c6c-7249-44af-8676-464cbea12671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215c3b5e-87ba-4d6c-8a2c-8707c9598253",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ff45b4-122a-4e97-882e-9642d206fdcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bcd01cc-f66b-4c40-b2a8-2d207c344a28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d249954e-68ff-4532-a1de-be9aad1d0521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c43a4b-28db-4962-a62c-4d40d8238f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a481b3-358c-48a1-950c-7f10a254a4f5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2a53e2-c471-4337-a0b7-cdd1f96bfeb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a3e6de3-1271-421f-88d8-f35fef047c11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "782de03d-c16b-4ed3-b7cf-5d0c594a6467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8388cef8-2be6-4154-8b5a-5618bdc69cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd7b604-109b-4bf3-8325-f5899fe61d9d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7876f5-26a5-4285-97f5-62ac2ff732f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc58943-f0db-4edd-a3e1-15b46e1b96ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a57a59-cd72-4275-919d-50dd62c859ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a993b80d-13b0-4780-9013-029d0d414889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6165fd1e-fa1b-4caf-9139-6d52b9dc2ac5",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a715c91a-ec50-41f0-907f-3bba50dc6d05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "320b3adc-3651-4715-9f5f-4f80cf455082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "167440e3-032a-4fc5-ab9c-d471a9107771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "776ae817-9336-42bb-a31b-6303392dd512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46632dcd-7a62-4ebd-94e8-05fe2fc6daea",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97d6aab-73d0-441e-854d-b9745ce3f1ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9db86da5-af87-45dc-936e-471d1bbbd812"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34475032-d0e7-464a-a8d5-a9378d14bd00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd89a61d-45e3-46a4-abdc-77adda0e2516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac9be74-6fd9-41f4-8309-56811cb389f0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd371740-47db-44a3-a779-07c6f7d5d898",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adefce0d-2463-460b-8b87-b330f358e56c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25d6e77-7fc4-4374-9be2-ce7aeae85260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9983994e-b74c-4b21-9d64-528ccd2e5620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2692a23-aa46-4db6-90a2-3352a37f5301",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09597fb-c7bc-4e42-8e56-67c5ec5bc934",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56ff228d-f9f4-472a-9b36-69e71455d630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7559aa1-0f5f-44ec-b364-56af87aeca80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06aab8b1-1aae-4894-842d-476e55d16360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c309cf-76e1-4779-b217-7345a0e5662a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad916a89-6da2-497f-b359-72be389b0568",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "242d3e91-6bfd-4a1b-b325-4a043c123d7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3508b71-24f1-4584-b461-04c88c1a60ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b0132de-6feb-42cc-8c0f-a94084841a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52a2615-4fe5-488e-972b-aba36eb93c35",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f76400-508c-40c2-845c-0ef051c4446b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ff2d269-3f56-4a20-844b-119761156bad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b46c52-7051-42a5-88c6-b1a1a1b2b91e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf3ba969-62f0-4e9b-8a21-2a9ad6eb03a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edab42f5-7d94-45a1-902f-aed0c53da970",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826dce82-794a-4615-b4a1-eb05a505745f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf632140-82eb-4952-87d5-8e8344170e5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e31f84-d139-4519-86ee-3c49021d8af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81be1001-d69b-4950-ac15-f148c1b0b15e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dfdb349-c5d4-4832-bfe8-349fb3e0cf43",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe60b653-4454-4e50-b635-84168642551c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41f94938-f61a-4552-ac00-6ef7ce63df26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b38d7e8-940f-409b-b692-7d530b50241d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f168fd-de17-40d4-97f4-18cbceca0b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a58ab0-0581-44fc-b5a3-bad877a60d70",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f427c73a-66ab-4634-8599-dda1b64e06a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ebc0d63-7ed5-4ca7-a184-5164d841eb8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99d0d5d-910f-4cb3-9e19-6f21664bd118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccbc61b2-da72-4404-945f-0d24cab448cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16e4e59-c59a-427c-a399-84d1fded4132",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a131054-ba62-462c-992e-51933670ea1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f0a977-23b7-4f17-9b2b-2fb7db4cf604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d637f9-611c-4727-9685-62f6014c06b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f5cbb4e-c13e-4f92-8b45-ccdab5bf69d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ecf076b-67dc-46bb-b7a4-ec8acc9bf493",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4127e9d7-043a-42ea-b805-c3e3dcdb700c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ad175e1-7131-4638-8fc1-1938a9a9b515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5688519-3d0e-4b03-aeb9-010aa01a36ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "620690be-9732-468b-a10d-c41a18965297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bbc316-cc31-4a27-aba5-03f0f225e0d1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62479a5-719c-4a15-a230-54e848ff2639",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d7ac6e1-fb0c-40e7-9f13-1d13add6b50d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abeb47cc-6dc6-4809-a3c7-cf4c4982c73c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5391947f-fb78-4bcd-9bcb-b1728660555a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473987fe-21f5-4348-b600-d8c2c4017872",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a815431-cf56-405f-941b-8d01a43e8f32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "885af6fb-1d6e-45dc-9d4d-dc709798e8f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47b0399-707a-4d59-8d5f-836381b0022b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9bb5f68-d4bc-484e-b04b-34fe83c08835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741fc909-3b9e-4e36-830c-629e917f49c7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee76526-641a-4d4e-bbc1-09a1bbbbcf9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfcd1a45-b114-471d-a7ef-7afe632c08c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7a1eac-2e78-4ba6-afd5-5b297fa07b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88be02dc-6863-423e-810f-6cc89d097e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c75840-baee-4fbe-b0cb-cb3aefaf9db0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182f0ce0-8053-4bd1-bb0e-912df912f54b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "857a3df1-b455-44ac-8803-962364851bda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96148f57-3fae-4a64-9213-52424741b209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9209c680-db1c-4e56-9836-50720ba952c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff90796-d049-452c-bc1c-2c0985177b2b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dcd7696-42b9-4173-b900-0cf34327f530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8bd4fb8-7e69-4e62-b3d2-0544236c2bc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c8edcc-9a88-422f-878b-3ce7ad690dd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb58d0e-08dc-4c11-a168-fb0711fc3587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8956afa2-7edb-47dc-8b96-ac7247c5c14e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a47a04-4cc3-4e01-ad36-2658f5ab089f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06b25910-a11e-4a16-9799-3d4f60563c5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87914afe-472f-467b-8204-0e34af98c694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca8fb973-6301-425a-a8f2-f82c5544ba5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c462709-36a9-40b9-8e2d-fa862b1fcc2f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6db850-a23c-4b24-ab18-1f760ae51de8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a48b8d17-75b8-4a69-9599-ffb9fb8d2064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9745c249-f156-48c8-a538-9c327827144c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef334915-49ee-448a-9e4a-24de89820ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7572a3dd-1d39-4241-a5ad-be7d450b61e4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cfd69d9-cca4-44f5-a3a6-564c303bf9b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9342cc48-9fd5-4fdc-93b4-f6837541830a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "262667b2-5817-4086-85b8-a33ea9cbba15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "572f1a50-b60a-475e-bd38-d548e02f4414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2bcf6dc-7d7b-4bd9-be4a-41062cda836b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bd7c2d-11b6-4b76-9f76-c0d9dc970db5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de7fe7f-418a-43f9-93b8-ae8f7d4dbea7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28154c2a-749e-4b4b-a3f9-eac693c5b512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db134af-a229-41c1-ae3e-7f06cf1bb80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "240ecbfc-bf9c-44f2-ba08-571ddb6a67cd",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573556ff-cb86-4372-8556-710d333648cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d93e04d2-e1e7-4a13-8a04-02b201c44162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5d8bfc-6e02-4fe6-8c5c-0b657a7af4c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "391881ed-0030-4d07-876a-6ead71da0933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b669a8e7-ebf2-4ade-82b5-6918cb1bf926",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc87872-9a52-4bfc-a5bf-1b31ed0aa76c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374cca9e-b0c0-4aa7-bd14-a03fe1de27e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1b07e2-a792-420b-a373-7510f20c7159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea471009-eb21-4542-9214-02ade8c48c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e328cb5b-3034-41f0-b8fa-90cd0e0fe73e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb5f1cd-baa8-4295-9932-5ce5fd18980c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2462e2e-e09f-41d6-890c-018cdcd15ea1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f961d04-423e-468e-abe7-c2163fb6e5fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15c5821-6226-48b0-882d-20d432a7eaa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e59450-8749-4c5a-8b03-37c87cb9e1f7",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d39298-6b85-411e-95ec-cdc3b9294665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c6479d9-865a-409a-8117-5eb50dbd23c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c109536-7f32-4bda-9059-1113a3e2558f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e134e8b1-03fc-4c2f-b9d5-2278b1a810e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d859ca1-f6d7-49c5-9cac-a91d152d30bb",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524e2b35-d5c9-48c9-a1ee-c2af5abdbdc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5735b43d-9001-4c7f-b9c5-7eb55c7f4f97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd08a7e-ccad-43f3-bcd1-b76308c3e1dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e4a76f-4c11-4e11-9e62-8f4eb42f9fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9568a6c6-7fc5-4ea0-a934-5ff495336aa5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a5fd31-7658-4e6b-a3f0-07d295e94560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2549982a-a157-4f49-a433-52fc8bf0482f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76fc90c7-078b-4e0b-8525-45962d7b1d98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ef077a4-dd84-4266-896e-9d2896a08767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0867a99f-fd9a-4d7f-b55e-908fe729b142",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268da5ed-cb14-45fa-99d0-0dee82f984d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad1e92f-cd93-4b44-90a0-1d4a896f1a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "654ef6ae-8d70-4bcc-8b48-dc6900887a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "594756fc-9bae-4ef2-b401-4992404d8821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5f63b6-4ea4-4f61-baa4-b89863cc21dd",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d2a255-7887-47fc-9515-79b8ef66efae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83709ea7-49ab-40c3-9ad0-1cf73f70947c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b366e303-4ae1-48e3-970c-d6f326e2ff96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8076f24-4c88-4aa1-8303-8d7a9317e9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06214921-2f2a-4bf5-b9c4-679762435c4e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a670545-a816-480b-9405-51640599840c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08bae9b6-89ab-4a80-a27b-8215cd0d7eb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625e7789-5e20-4923-8603-39187f64df47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c146b689-8037-4bd9-9a31-5c27b507f48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfca442-8351-4769-9040-cd375331d14d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b1c1f4-cda1-4af0-86df-b72340dc8b39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87893e8e-c61b-444f-803d-f2a24f3ff2dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaee7737-6857-4a5e-84e3-4a6f95b875f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "456b499e-cb68-48a2-993d-66f8b072d1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535e6765-f0c7-4cee-b601-70078ea82fa7",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25589b68-9eda-4388-af8d-fd04acdf0eb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82d701cd-456e-4e74-84c9-2c411eca6a4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e909938-8eef-44f3-acfa-18e834799087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48cb96a9-6df4-4c12-a2b8-12126acc8269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda04fa8-3b16-4bfa-aa39-5b26244db69c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd23f0c-13d7-43d5-bc2e-838686f2f238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00315f0a-cf08-416d-83ff-12d291e4a014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf71cae2-eb14-44d2-996b-ddd9991dfd7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4df013c6-bfb3-4f73-bc9e-90f815ca8518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19871a39-1d1c-4565-adf9-a2212c57d752",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e350ba2d-6014-43c0-9ca7-6256099b1284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced430a9-e34c-4016-9ade-81a8cc40e1ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fa1944-9063-474f-a96e-29f45a48a31c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "990831a7-adfc-4f0a-835b-d9c30e8f52f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d53276-dbc7-447a-b280-0f0968cf7885",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179a13f3-b3ee-46c2-ac54-26ac554b92b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bafdead5-2995-48b7-8525-c9b52ccb4783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f7477e-5e7f-453a-a888-07804016702d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae08d3dd-f455-478f-a2ac-4a79a4730e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e5dfea-6e1d-495c-aa45-a1a244d3e97b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b520b02-e8f1-4d41-8a12-e4c65dece5b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d7f93a-aaf0-4f1a-9ed5-80a025e18f21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e1cf9f-b0dc-4d93-81b7-6d878c0588a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91b6c4a0-3c42-499c-a460-d81330bed57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807574d8-2c48-47f9-aa01-59fc4fb279f1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22492193-cb25-4b27-9407-fb13d3be132f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcae5f02-24ab-4ba6-8ac8-eb6e399c4406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62dcf6d2-2f2a-4c8a-9788-cd52ef4ce3ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd3ea14-0027-4054-a018-14bf7a1a9d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63395c9-57fd-48a5-93ed-f6f2ecb2e09e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62cd80c7-2c70-41e6-833f-ace90ded2751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "238c5bc1-b759-49fe-8851-068279fc4b28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d426ba-2135-49ff-9735-244df8f4840f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2204a509-6a73-4602-9924-a7e029ab5b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a2baf1-f269-43f8-9b23-bc5382270b2a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81eea604-573b-47ef-9478-4165ed4dbd60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c259c07-539f-4892-affa-49df6d7a244d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "784bf46c-a78d-4e25-b362-2d7cb069865d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255bc85f-e62f-4a01-bb37-61377ba4e13a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e57d05-4195-48a0-88ca-084ad48f9f3c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e92110-1625-41f1-a165-43870e7e0bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae116f2-9901-4115-86f5-970676777532"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03151c08-d935-484d-b6b8-5bd52dc4896e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b37ea8-837a-48d1-8841-ab0b38fcdf44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ab0754-3314-4080-9cf2-7a59cca47090",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338544de-4de9-4fe5-b266-53b22f839432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c2f767-769f-48c1-bd53-1521214318e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8e6a4a-4d81-4f94-bbb1-65ef98d6df08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "606e4664-1ddb-4201-8312-e3d5ed9ae646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe30662a-9c7d-4a8f-8ed4-217dc76aa7fa",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de648128-2877-46dd-a1ca-1a6d2448b0b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5120c7a4-9c7d-4a0e-b2e2-2e653350b998"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12a2ecc-09b0-4aeb-b18c-de12bf2b2aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "430f5881-9258-4875-837c-21cf45df7cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a74937-7ea2-421d-ad55-acefd3f2aa0f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d1f5e4-9500-48c7-9ab4-3155bfcf1e62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6731bc2b-0949-4eff-8a58-2d29d36a33a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b62094-556d-4912-b64f-7678c8b85670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64fdb49a-1702-47ce-b42e-1e88e79e29fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cd7a80-c138-43bc-a432-711d69b50274",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d243c5a-d822-45d7-9419-f53407c70973",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f4a9efc-4b7b-4c2b-9d1f-1678e17777fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7ae23b-f416-4b9e-b34c-07e319e1cb97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8525e6b2-c9c0-42d2-a00e-14fbc74ef51c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2866199-43e6-4de7-bed2-7540034a3426",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a512310-6ec6-45b1-9e33-4717f53edf4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18e1f03c-2428-42a7-8f1a-2d75417cb0f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46655b6-bf6d-4131-a421-6b02b5e37c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c00e3105-5480-4311-86f4-c2e0fa38eb38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab560eb5-b8a1-460b-9ea2-1fa6d259233a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047c4fe1-b814-4c6a-9e92-e4318a3a70a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dfe7eb3-1762-48e3-84d5-dfd3adfb0aed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22dff264-63d2-46d4-a316-17153f29929f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3df77fc-d789-4287-85eb-94e0633656ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c32d38-2aee-4908-8ecd-efa061bc7cdc",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50775fb-558e-47c1-b1c4-e2fd098fba5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43e99a16-e5ec-481e-92c1-34ca5f4675e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00069bc5-8dad-4153-a142-3e3794de6273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16702ea2-1238-48fb-9180-2f7786e1437d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc98fc83-8a02-4fc5-b420-df7efefd4369",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8777a8d9-c842-4fa2-bcdf-52f759fa6df9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52732015-6970-4a43-8571-1d563327b8b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0624911b-2e2d-43ed-b765-43fc7c96fe0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5dae70b-c16b-4a8e-8e95-e6bc82ecef83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a721e5-bc94-4082-84a7-0ab3e2ccc36f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7cdcdf-d673-4a9e-b555-733a896ac3e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf3288c1-a173-4b5b-8c97-07921c7e53cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d856cc-1de9-435f-a019-a2dc08be7504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "322d172a-d61b-4ec4-9d45-92b027dc9e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12229fb0-2eaf-4ecc-ace2-9e692260ee00",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e42cc18-2ed7-4406-be20-95e1f298edc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12637c94-6fa9-4f35-be19-e53a4ac8b754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd85000-88f7-4937-a04a-c9e86ef89b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a065faf-68cb-43f9-a669-2a8040c171ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68975c7e-6ed4-461b-b544-c92fa8b251ba",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00286e8-95ca-4887-96d1-66de8f5aec31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2673cd82-203d-4f55-a565-ddc9902b8f2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6678dd64-6c5f-45d0-8b3c-8bf4865e4ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a553b56-46ad-45f7-961c-2b41c79fd3a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8297782e-2bab-42ee-b2c6-eaabf9cb2c6e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc83f85d-d6a2-4025-964f-6a4444ce2a2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "152bd6d6-53fd-4c42-bfac-5abc8b2241cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5192d8a3-1be2-4b56-8c4d-28b5b37ffef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa8751e3-d9e8-4095-8d85-8901b74c29d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730173f4-ea8e-4606-a3fd-80cf4459e034",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b79857b-94d9-4123-8499-8d73ac471265",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02293d80-b452-4a1c-8f3b-7d1b569d90e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42075bb-3302-4d7b-97bf-eb6fae6a1687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cf12c34-1c18-47ed-b2db-8276a81eaa5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96567a42-d593-44c8-bf2f-86c4a1ad53af",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10195617-268b-444d-af96-c91a0c4fdc71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f13a345-a579-4424-ac1a-e386f19b3926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "391ee2e8-a609-49d6-9871-bb5d7d4a0ef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7bab929-1d75-4e35-9c00-5510d787a00b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33c25e7-e822-476c-8d75-90979d9fe7f2",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6e1fea-3997-45d8-8d75-d7f04883aee1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acdaf4d2-e84d-430c-ac43-535db3797b97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "043a65c4-e2f1-4524-aa25-600184c820b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdcf65e5-e1e0-4a69-a5b9-fefd76f207c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aea297f-1571-4be0-ae04-01d1f48ef0cb",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853b22b3-44d0-4a77-bf69-7209b1e63416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f610547-a71d-4358-8c9a-72b965fc2dec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f5c849-2196-41d5-a941-165f79a31c3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f1724c9-53dc-4dfc-b29f-1a53a86795eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3b78ab-60a2-42b4-a5c0-a3591f945827",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d9482d-0b44-4c6c-a037-b3b82353e052",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c1f0d0f-3220-4d33-8705-86cfc641ff51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d74261c-0a4b-4e04-9006-b52553d6dced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95431cd7-e847-404d-a286-c518beef0e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ce1c37-0733-4236-bb78-82865c59a400",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce6e28d0-1a29-41a6-910f-da9295d4442e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d0e63c5-8f8a-4626-821c-a39289128ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be64a52b-76a1-4f17-85aa-91deeb03a434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bcc1f0f-ffa7-4af0-b420-4d6524c044a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1524231-56a9-4d56-a34f-52ee456e1f1e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a347cdbe-656b-4ea9-ab34-b697a50aa344",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9180f103-9862-4211-be63-88392e3bb726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02eb154c-e13b-4ba3-9714-13f1caf8a901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4437bfba-13c1-4100-b7ea-dae68096050b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1566e39-caab-4cbf-b9b4-6bd3923c0394",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe2b8611-cb0a-431b-ad95-d6df56934fe0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d5fb0c6-e112-482a-b080-5396c73036e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b99d11c-c300-4574-adb2-4f07152bc931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c341a3-4335-4f30-9067-b41455118bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924230dd-892d-43df-a3e3-8330fb2bf6b4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce77f430-7060-45d4-a64d-ffc7cffa9490",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b6220f5-ee29-4e7d-9d7a-18d7ff80a8a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b9f999-36b9-496e-aae9-b32176df50dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "475fc512-52ef-46e6-a105-f52ef21ac13c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd792bf-44df-4c00-9839-77049db83c7d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22bbc3dd-f1ee-4b5c-a462-7406b345ee2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a2dacb0-2acb-4e92-bda5-d05ff0cebf70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e3dd5e-7c34-4189-b21b-8cf6d7bb2803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ada87266-7a44-40a7-a424-ef68c2aa7df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f22b8ee1-c557-45b4-8a73-ebf0d913330a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb02e00-bd31-4dfd-aca4-0ad616eb761e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16746e47-51f5-47a9-9ae2-f2107a6cf3e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b409222-46a4-41b1-9675-3730edcff5c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2461a979-6120-49bb-9ba0-549c683a408f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27858329-ad1b-4138-895b-2e89a1498444",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a03a1c-5722-4259-9ca3-eefa847468c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afe25a95-fc50-47f7-af43-2c97442d6544"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a77a56-aa98-4819-b25b-baaf1faa0ee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9151dd74-5e0d-40d5-a541-e13cb85cd668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e28e90-0752-483d-b234-5a3294a9b1e5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a9fd68-bfba-4fbc-803a-2363b104a2d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2f2d40f-44bb-4fe3-94af-52bb51f13ac0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98dae6c-bfe1-4fcf-8f6e-61bae66393f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0897d01c-f1d9-4181-9c65-242287a00cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1bddd0-8488-48e2-be0b-41a0b77e9efc",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e54f86b-6ca2-4324-a954-837874d42928",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c30ddb48-6f81-4a0b-9c44-b4c54d50ed4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa0f4ec-14db-424a-a93f-b1d9b79da5e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a98d85-274f-4bf6-9a3e-baeb33bfa8e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f26c2e-fd17-4a1a-9482-9a5be90af50c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69315600-1b95-4540-88a8-ef80d2e7644f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c5b92a6-1387-42c6-beb9-9b31c0408201"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b6d732-d99d-4029-993c-0417286f288b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14b6a8a7-9acd-4a90-8032-d01fe604e28d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ad205f-21eb-46b4-b119-fe5dbf923c71",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2bd92c-5755-4004-8343-8308ba50cfde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47195397-b78d-408e-acfd-44b75ed19d85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab08a47-32db-438a-af48-7ea61f1cd64a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48fca95a-73a2-4f3b-9400-889458ba146c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa6b410-129a-474a-80ba-bfd6b44ab5ab",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94829771-03a3-4bfd-a86a-874ed303238c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23285477-1c9d-4a71-850e-053e4cd151fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3013566b-e600-44ac-a5a9-5e1ed5536509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3309d9ed-a036-472f-8523-b18ea92e1e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3860f718-b01c-4b45-9c74-a3345777aef2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07682222-80a0-4f5c-b49c-0bfe475b807a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e513ff2-4766-4ebc-a81c-b205d41f0f74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25975f8c-85a6-4e4c-a108-efec9c1e8b4a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2461b30-f359-4e50-adf9-fea4fb4af7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9dd80b5-905a-44fa-b26d-1b59bde65136",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745406f5-bac6-46c7-a372-9092ebde3b4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d01de249-6fc4-453e-bdcf-6b54cd401c9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4bdb65-d058-41b1-910f-ed107fef7f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0868a45-5774-4e39-9187-bc2b74d48d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca06dc9-a9cf-4b99-b0e6-1e98513d09b9",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068bd3dc-c859-458f-b930-4422923ef33e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8ef8c51-d998-43df-b913-dfc86ea7cf02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "944bba23-73df-4c78-b49a-4770e037c293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5854230-644e-400e-89b3-46d71540d273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe3a14b-9944-40fd-9315-825705193a90",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c7f368-81f0-456b-8677-5148e7fec8a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b505726-53fc-49c3-9a16-f813980944f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98300681-87dc-49cc-8cf6-640861d29111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90b9ebc1-0903-43d1-81cd-569d64e9baf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ff0600-e65f-40b0-88c7-8bbe254b1368",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25fda061-2547-4317-879f-0b4108208b55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fab264bc-cb37-4287-beb3-ec5da1b9fcb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3803bffa-a123-4c2d-9f4a-86662bf02ae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c99feb9-0df7-48ee-a596-b4ddfbe202c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a55205f-8e3a-4b23-a4eb-d53b4c75aefa",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb720279-4a17-4223-9bb3-b007793d4f4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f65f53a-0290-4008-9d6d-671a7fe3c00a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "541542de-f3e4-4765-ad3f-d65ac0fb1557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e5ad9ed-cb8f-4fce-9212-cca5ac841ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e4d5ee-bd2e-4c90-a774-fef9aba57221",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1594625c-4b37-4b61-89a9-e0e3d4a93625",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b56484ff-642d-4cec-9678-f275b2f298bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75760d78-2cdf-4f70-9458-af1483ae0b28",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb928657-7415-4b11-9a0e-0d48307d66f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28f420b-5e39-4b12-9c85-5651a1ba9b03",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69588cb9-d4d1-44e7-bf53-a9cd16e73584",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a5284e7-bfa7-4c76-9f0d-c855aee9a0cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47df2b6-58bd-40a9-886a-67a5b7dd18d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6166b9f7-d6b1-4aad-9a34-c0b78fe1dff5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ffccb8b2-98f7-41e3-b223-08a30f2414e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce684000-4ed2-49f6-8540-dfac6a8f6b7f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "759ef572-8466-40d7-88a5-ec5ae2bd0b26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "db4ee11c-ea38-42e3-8918-418e2121c349"
                    }
                  }
                ]
              },
              {
                "id": "9dad5e68-05e8-4405-b94f-20b1635c4218",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d8c26794-27bc-476c-b2d3-e99150e28e9c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f9a2b1-065a-4c6c-90ae-34e4bd1a503c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a4e89a2c-2319-45c5-b47f-d81c3dd7a394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "310c9bc9-93b1-4450-b1c6-14579a43b57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e8adf2c-5d19-46bb-9f6a-87bb9b7035be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19e7d3ca-cc7c-4770-9c3c-82823c1f3740",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b7ef84b-2951-4086-8dbd-a99ea30cce55"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e331e78d-cb66-47b8-9dda-57275ba6f0c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "752cb6ce-6af4-425d-b04c-abaf30f3f168"
                    }
                  }
                ]
              },
              {
                "id": "50aa2aaf-caf9-4972-966a-cc8e7553220d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f9b2fd87-2fad-45bd-a764-f491e492f4f5",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "256846ef-d721-4f18-bfbc-a7d40a643c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "93752270-663e-4abc-8244-3d084c09d5b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1ff763-27bf-4180-b977-315080f0c8b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f3dcd8a-f134-4870-b131-558ecae1192b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ebaf4f48-fe0c-42d4-a2cd-c1ab4ccc9223",
            "name": "Positive Testing",
            "item": [
              {
                "id": "17ea6a09-a101-46b1-9fa1-1305824d92b6",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bed326cc-6016-4ad9-aa29-85aacc023f52",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2c3fd08e-46eb-4b71-8f3a-bc45d8c703cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a89c0ee7-acf5-4857-8230-5f6d2e991b5d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7439d9b9-8bb0-44aa-886a-c7a3c9c5238e"
                    }
                  }
                ]
              },
              {
                "id": "0f873566-bde7-46a0-a738-c512a0961584",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a224eee-2abd-4a18-a927-74f13107cc71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5140469c-c90f-495f-9b16-7e54a046a2b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b72381ea-5288-4a2a-bd1b-dba188cc95e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df5eb6f5-f6dc-4ba1-9457-a2c9d21dcb3f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cbe910b4-93f4-4df3-89d9-65504fe68782",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "da5e44f4-da60-4bfb-85b2-bdb411fdeb75"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7434b533-ad8f-4b00-bfdf-fde632d62467",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b2f090f-5467-462d-8aed-891504f90958"
            }
          }
        ]
      },
      {
        "id": "150c1d77-d1d7-4c64-bec3-f8a62ea8c71a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "87f589c1-e559-4bed-a96b-f86968b1d58a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e3331f22-927c-4527-9143-21b81ab95bcb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3561761f-626d-483a-96e3-1a3bdcc17b85",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4248bb08-f5bf-4ecd-8413-27d3a4c30825",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5d1ba0a6-d0c5-4d15-931d-2eb1a4a15a9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce3e96b-0075-4f1f-aff7-abd91fbcae8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10af7010-86a1-43e0-98a8-03ae2920948b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "effac39e-643a-4f51-b26b-706a5aeca5b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "708b9443-f04e-4c60-b4f2-99b8c4884212"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b26af313-acd8-4b87-814e-ec3fd8fe96ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1aeafbf-ba7c-47bf-8685-8345e4ca10c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "adc60c37-b8de-4c9c-b76a-56ecc9d0f1bf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "61bedd36-71b9-4c4b-81ba-587cdfa82b0c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39c93138-84ba-4b14-9386-19e0446330f1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe2f13f5-f4fa-42f6-a3ac-0ab7c913655c"
            }
          }
        ]
      },
      {
        "id": "5d5783ea-ebd0-41ac-a8dc-a746d308913d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c8ca0ef1-4c7a-4f3b-811a-7473e05578d5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4bcc5aba-5029-41ec-b4bc-6fd12c4d9caa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9cdce556-2211-4725-8c3c-7856a7dec216",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114d6064-dc55-4c6a-9453-63c1c4c4d1d3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ee4cf0f-cb99-4902-9703-791612dfc6c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebb5ea3-dfe5-4e8c-bfd5-a970e18de25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4583b707-8844-4e87-8edf-a4e6c627fd44"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64e6f89f-8fd2-49cd-a8a9-c26d300757b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67590631-7933-46a2-a318-a528bab217f3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2d4f2fa-08cc-44df-a70d-582ec0e852aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eee5dbd5-39a4-4b4b-a66b-367e5ffe62b8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a48d7c90-f0ca-4605-b7d2-b292b56c6afa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "396afa37-454d-4559-a4c8-5392ae37ba73"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "224a76fc-5eb7-44d2-8484-89bb35781b8c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4baa6622-15f1-4aed-abda-618ac8c1d2aa"
            }
          }
        ]
      },
      {
        "id": "7474415c-f943-49e1-887b-0134c8d50ebd",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "257cddbb-4241-4d18-9e21-e9340224a357",
            "name": "Negative Testing",
            "item": [
              {
                "id": "afae79a5-4532-497e-8b89-e1e5791e36bf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cfedd327-092d-467e-a213-34bb3d9224e5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0bc08b2-b214-4328-913f-eb797b54da14",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fecb5ab-a317-4503-9b9e-1a083b674eed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3e574b-fe69-418b-adc7-4f28ec5d2255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21348060-d672-4755-a87b-6aff83589ad3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "118ff3c2-a44b-44fa-a227-a663b55c7a4a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31322353-c47c-4bdd-b531-5365e9969a18"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9a73ae9-77d5-49a5-9755-a0e97211a329",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e88aa84-dc3d-4e81-9c9a-e773f4711359"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6745eb0d-e701-4deb-8560-d20212a2a262",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c4ef89bc-311e-43e6-af83-279d541aa892"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93d24848-ded8-4a78-8628-78dd156195d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4f530ae2-9485-46af-85e2-08458474b020"
            }
          }
        ]
      },
      {
        "id": "5accabe9-0442-4d7f-a1cf-647ad1723571",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4c3b1da-0df8-47ca-b6da-c8e006666d56",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b0f3957e-1600-42b8-a72e-a8918fb3b0c1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6db8d63c-df05-4877-8fa1-000b3b03bada",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b9061dcf-a1a7-4ed7-996c-d0b01eb0e6f0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f3c1085-33e8-4f63-8d75-eaec69d3147a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 51.90175438596491,
      "responseMin": 9,
      "responseMax": 718,
      "responseSd": 64.6018100100241,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1712018109522,
      "completed": 1712018133745
    },
    "executions": [
      {
        "id": "833134de-2d31-4101-ae08-bb2448875818",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "14c94d3c-1794-46bd-87f8-f9e0390fd8f5",
          "httpRequestId": "955c663f-51e2-4f79-b264-6b686d96e181"
        },
        "item": {
          "id": "833134de-2d31-4101-ae08-bb2448875818",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "73c42780-8269-4707-a456-5abc75642ae1",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "25532c58-97a5-47d2-889f-ee82aa740938",
        "cursor": {
          "ref": "14c4a3f3-254e-445c-8646-9f2ca9f39494",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "81c02965-616c-4688-b172-b1497ec75d1c"
        },
        "item": {
          "id": "25532c58-97a5-47d2-889f-ee82aa740938",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "197645c7-895b-49a2-ab3c-4a07669f1b60",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "d0cc054e-c4b5-4863-ac25-b40c2bcbafe1",
        "cursor": {
          "ref": "22e21464-c9d7-495b-b85a-6f20fa2dfe68",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ee95bed7-21e6-4c1f-861f-0f91e01589ec"
        },
        "item": {
          "id": "d0cc054e-c4b5-4863-ac25-b40c2bcbafe1",
          "name": "did_json"
        },
        "response": {
          "id": "9b73087b-2250-46f9-a650-a4ee950e3596",
          "status": "OK",
          "code": 200,
          "responseTime": 216,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b940c5-160b-453f-9a3b-acde247a9560",
        "cursor": {
          "ref": "527e7d50-a951-4a01-9bd2-44c87bc0985c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "061f810b-6c53-4823-8139-848ae6218237"
        },
        "item": {
          "id": "60b940c5-160b-453f-9a3b-acde247a9560",
          "name": "did:invalid"
        },
        "response": {
          "id": "6b43e676-1f0c-4c84-ac40-b17ca95e831f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b940c5-160b-453f-9a3b-acde247a9560",
        "cursor": {
          "ref": "527e7d50-a951-4a01-9bd2-44c87bc0985c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "061f810b-6c53-4823-8139-848ae6218237"
        },
        "item": {
          "id": "60b940c5-160b-453f-9a3b-acde247a9560",
          "name": "did:invalid"
        },
        "response": {
          "id": "6b43e676-1f0c-4c84-ac40-b17ca95e831f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3266a1d9-2935-40ec-876f-f48ccec726ca",
        "cursor": {
          "ref": "4514798b-b22f-4c68-8b70-5eb46f1b1c58",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1a831c38-007d-473f-9af3-086c83e00978"
        },
        "item": {
          "id": "3266a1d9-2935-40ec-876f-f48ccec726ca",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1f067d83-2b46-44b4-9919-e709b67c3927",
          "status": "Not Found",
          "code": 404,
          "responseTime": 309,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc8ebff-d733-42a6-b8d4-69b52118629b",
        "cursor": {
          "ref": "2774958c-edb4-469f-bc9f-43570fe2b2ed",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "764179f7-90a1-4f2d-8eb5-f8ed2ca0a7c7"
        },
        "item": {
          "id": "cbc8ebff-d733-42a6-b8d4-69b52118629b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4e2e9fbf-effd-4ff2-8ca3-1f20d98f5457",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8917bfbb-cc48-4074-bb72-ca56da737876",
        "cursor": {
          "ref": "b5a79e01-a93e-4427-b458-572df33576a7",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "086402a9-615b-4c05-9307-5ed83239df50"
        },
        "item": {
          "id": "8917bfbb-cc48-4074-bb72-ca56da737876",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "20761e4b-8119-43d5-be7e-e65a227cbe5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760814f2-219d-4851-968d-f9ed36f07804",
        "cursor": {
          "ref": "2a1da47a-3470-40c0-a52a-b1670e0b1a37",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6aab88bc-4c0a-499e-972f-0d63e3c85a4c"
        },
        "item": {
          "id": "760814f2-219d-4851-968d-f9ed36f07804",
          "name": "identifiers"
        },
        "response": {
          "id": "85ce66e7-aa4b-48b1-811b-3f272392f0b9",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c328718f-75f7-4462-8240-4195e05d8559",
        "cursor": {
          "ref": "c01fbe12-afd6-4c51-abb5-a53345d9822e",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7f73e266-2e7b-41d7-b169-4fb7b079e1b7"
        },
        "item": {
          "id": "c328718f-75f7-4462-8240-4195e05d8559",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "db083794-d46e-4abb-8c9d-97d72dfe01cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4b85df-786b-45ab-bce5-18e3d4224f25",
        "cursor": {
          "ref": "37626afa-6955-49ba-8cda-c96d0a8c528b",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6ca69cbf-eea2-41fb-b06e-a8379d6a5a48"
        },
        "item": {
          "id": "eb4b85df-786b-45ab-bce5-18e3d4224f25",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f2df82fe-3271-4eff-99e1-e85697df13d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b12f601-f513-44f0-9e49-72a4bc5479d6",
        "cursor": {
          "ref": "205ae1c0-d54a-41fb-840a-1a176d5013c3",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bcca9fcd-05b4-41d9-97f8-356f16d0e580"
        },
        "item": {
          "id": "6b12f601-f513-44f0-9e49-72a4bc5479d6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ca406753-99d4-4b08-b099-b240e42db27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4a5fe2-2551-435e-a0ce-3e101ffcc53a",
        "cursor": {
          "ref": "9c3f31c5-d03d-4db1-89f4-b20ab92825e1",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3b60bc76-cd08-4210-a161-6c681c40068b"
        },
        "item": {
          "id": "0e4a5fe2-2551-435e-a0ce-3e101ffcc53a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "84b7f1ce-cf63-46dd-a5a6-073e01eab30c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9028fd9d-fa18-4520-85f4-daacd1237926",
        "cursor": {
          "ref": "0a9e7454-cd9b-4018-824d-feb4b208f16c",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "dff58293-3dbd-4f60-afe7-026affff809b"
        },
        "item": {
          "id": "9028fd9d-fa18-4520-85f4-daacd1237926",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "10f8c6b1-3386-4b85-9ee8-259674e9bef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30f5a9b-a806-4083-a935-8398389dfd66",
        "cursor": {
          "ref": "294d3553-4439-4298-af8d-ca8a3eb26652",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3bc09f05-4958-48fc-b5d7-7aa17d13fa8a"
        },
        "item": {
          "id": "f30f5a9b-a806-4083-a935-8398389dfd66",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a257bf85-911b-4514-9a6a-33f650fefcf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9bbf89-765a-4ce7-ae12-63926088a00f",
        "cursor": {
          "ref": "a4c92004-11f8-4c10-aad9-2a32b52bc836",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9e31bed8-5195-4df4-b4b2-0a80c2a2b6c3"
        },
        "item": {
          "id": "cd9bbf89-765a-4ce7-ae12-63926088a00f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "41efc502-7dc5-4a1c-a6c8-c1977fddaf60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50984301-358a-4455-9c81-fe7ef6d82541",
        "cursor": {
          "ref": "a711615d-254d-401a-8ea0-4fe5fc4846c7",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3cf9e3bb-0bf4-4554-8737-e986fb02d8a6"
        },
        "item": {
          "id": "50984301-358a-4455-9c81-fe7ef6d82541",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9fd80b72-86be-4990-8364-5b0a827b60fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d30bb0-4438-4570-b7fe-34225fdf8acf",
        "cursor": {
          "ref": "874d8e4d-363c-4280-b25d-df7fc7ecd016",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a9d8dc49-6d7c-47b1-b0fb-e2f41d76355e"
        },
        "item": {
          "id": "e0d30bb0-4438-4570-b7fe-34225fdf8acf",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "75934a81-ab91-4696-a831-229b1cb6c143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78a3c703-595a-46bb-8c3e-52ab007b4351",
        "cursor": {
          "ref": "d711e3a2-4c9a-49bb-b7b3-3107db10a0e8",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0070d6c1-502c-436d-857d-2c39e9b1dbe4"
        },
        "item": {
          "id": "78a3c703-595a-46bb-8c3e-52ab007b4351",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "cd108763-fc7e-4648-aebb-4625ff1d025c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca3e362-0520-49cc-a7e5-51f03b1106d0",
        "cursor": {
          "ref": "1f770545-0b58-43a7-811d-d16fa0126b35",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1fc75304-d817-4296-8e0d-c3a038d1ebda"
        },
        "item": {
          "id": "8ca3e362-0520-49cc-a7e5-51f03b1106d0",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "bfc683db-0091-4f10-8aa3-bde0b02e2ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed6367e-8105-4c5f-abe8-ed4ddff8c492",
        "cursor": {
          "ref": "48437852-c65c-4e87-8791-88560522aaf7",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "81b0ac4c-34f5-47d5-a4c0-369d09f5f6b2"
        },
        "item": {
          "id": "7ed6367e-8105-4c5f-abe8-ed4ddff8c492",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "99f24d5b-b6e7-4d03-b332-39be9b8045f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc5c84f-df2c-46e5-9951-74dd86006b81",
        "cursor": {
          "ref": "63b389db-0716-4f14-aea5-dd4513cc3088",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "eaf806e2-e74d-4967-a21c-dee49123af71"
        },
        "item": {
          "id": "fbc5c84f-df2c-46e5-9951-74dd86006b81",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "382e2480-a067-4b86-b470-a1ac8f5a98c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2471d24-714c-4984-9567-43df8c337677",
        "cursor": {
          "ref": "8dbf2c18-34e1-426d-94e1-22471cb484a9",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fbb2fe25-55f7-44cc-a9d6-c6c8823978ca"
        },
        "item": {
          "id": "e2471d24-714c-4984-9567-43df8c337677",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9dcbcc19-2c0b-470b-88d4-ae301578c72f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88472269-2cba-48cc-bb82-c19ad188ed31",
        "cursor": {
          "ref": "e69d9512-75c8-4771-af61-3a381fb5a7e6",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "19d92856-87b5-4f4b-b9a2-b5e734fab753"
        },
        "item": {
          "id": "88472269-2cba-48cc-bb82-c19ad188ed31",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "82613525-7a40-4d33-93da-3ea0f6026004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a730990-1704-4bec-bb81-d9b2dc885213",
        "cursor": {
          "ref": "c71cec28-082c-4137-a6b1-a495eac19406",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "04433d56-526b-495d-b12f-9c2f0af2a44d"
        },
        "item": {
          "id": "2a730990-1704-4bec-bb81-d9b2dc885213",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "15c7b822-7df4-4954-ad30-690bb1aea3d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01e4dfe-c9c0-4371-8b79-0ff4c0f9fe02",
        "cursor": {
          "ref": "5cd1a005-ac9d-426b-a86e-e9fd92df66c4",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8c321826-9f10-42a0-a18b-df5427d4a857"
        },
        "item": {
          "id": "c01e4dfe-c9c0-4371-8b79-0ff4c0f9fe02",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "75e3e6a1-8756-4bcb-8bfe-77a4eca359b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16fdff42-dcd2-46c8-bf9f-d70ad7e3606e",
        "cursor": {
          "ref": "7fd12a0d-5ccc-4fb2-ba31-4a8abc0551ae",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a854e7d8-7281-49dd-a141-976fe5577d5c"
        },
        "item": {
          "id": "16fdff42-dcd2-46c8-bf9f-d70ad7e3606e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "828dae6f-26b1-47bb-947a-a0552ace377e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c2bb6a-b3a6-486b-a6f2-f2cb8238d623",
        "cursor": {
          "ref": "d826d3e1-94ad-41f4-ad1e-1ca5f2e908da",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "847bc277-0df2-40e1-bcef-2984774a1c0b"
        },
        "item": {
          "id": "88c2bb6a-b3a6-486b-a6f2-f2cb8238d623",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "90f9a50e-5284-4671-9c27-f35ab0f1f0fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf499f44-4052-4fbe-aa52-c53cdc688814",
        "cursor": {
          "ref": "31d6d0a1-1cd6-4576-af35-f9fd2c8f45f0",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c6c4e5c1-7bf1-433a-b216-9e1f823eeba3"
        },
        "item": {
          "id": "bf499f44-4052-4fbe-aa52-c53cdc688814",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a4a5a79c-bfb1-4340-a318-11665a5952c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dade619-0a8c-435b-9233-84da858e8989",
        "cursor": {
          "ref": "188a0b4c-5ef9-4891-a012-aea399c9d0da",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6469d794-f526-4d3b-9770-ef8e7c4508aa"
        },
        "item": {
          "id": "3dade619-0a8c-435b-9233-84da858e8989",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f76c3e65-ac9c-41f6-ad29-bf5f50b651e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dacdecd-4968-4bc9-8ad3-d6bb0dfdc84e",
        "cursor": {
          "ref": "f88aa9f8-b52a-471c-9709-645b005dd7ca",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6e7fb77f-05f4-470a-8058-4206ef2f4738"
        },
        "item": {
          "id": "1dacdecd-4968-4bc9-8ad3-d6bb0dfdc84e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8f6c8132-53ab-49e9-a620-45a8efb82a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af48b905-843c-406f-a316-c19bc7a67ca6",
        "cursor": {
          "ref": "fec1f915-9a12-4f1e-ac89-2f3878fbbd93",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b60c88fa-7aeb-4eae-a1d2-801ac4555a05"
        },
        "item": {
          "id": "af48b905-843c-406f-a316-c19bc7a67ca6",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c3105b5d-9a70-46a4-beb6-2004d7129933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5aa4e4-071d-47c4-88a0-328348c20921",
        "cursor": {
          "ref": "e095ed74-8da7-459b-afa5-8ad81dc083e5",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a85df560-ac98-4fd7-ad73-6d9f0d8e3a71"
        },
        "item": {
          "id": "df5aa4e4-071d-47c4-88a0-328348c20921",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d3d4a2d7-7f63-45de-ae39-06fbe67294b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9e1f88-42aa-4588-bd98-0206f9c420cc",
        "cursor": {
          "ref": "0cf6acbc-0457-4c69-9421-eea40cad43bb",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6cbfdf39-6c62-4244-ae13-2b457e64e934"
        },
        "item": {
          "id": "ca9e1f88-42aa-4588-bd98-0206f9c420cc",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5a0b7ca0-a828-46df-a783-79c8fc0feed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a508ee-8560-4313-b91a-c905c2a0a276",
        "cursor": {
          "ref": "c7262152-f049-4958-8bae-77a9fe26e4f0",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "06938032-e1b7-4625-8b4d-a281892bc5ea"
        },
        "item": {
          "id": "70a508ee-8560-4313-b91a-c905c2a0a276",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a5001fb8-ecd4-4848-b003-00af65781af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24976f8d-20c7-44a7-8e72-75a9d31d68bf",
        "cursor": {
          "ref": "f05fbfab-1e4e-43bb-ba2f-810493028a42",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "619385f9-0393-4c22-8596-c1b9f15b42d6"
        },
        "item": {
          "id": "24976f8d-20c7-44a7-8e72-75a9d31d68bf",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3f8f85cd-6a58-4ed5-8764-1c2dc8d417cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db4c764-538d-4047-8631-f2fa6ebded99",
        "cursor": {
          "ref": "0cebb578-e7c4-4c97-8f56-e4e06c34ce45",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e8603467-7cf7-4e49-a18a-18d9fcb5f440"
        },
        "item": {
          "id": "9db4c764-538d-4047-8631-f2fa6ebded99",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b4cf895c-6587-482f-bf91-a7c93f64048d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0755751f-746e-4003-ab6b-250a9bcf3047",
        "cursor": {
          "ref": "5be4d0aa-8dd1-4dcd-9c75-c3c90aac60ff",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b04cfc68-ab1f-4a34-aeb8-1ba62143efd5"
        },
        "item": {
          "id": "0755751f-746e-4003-ab6b-250a9bcf3047",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "bca4fc60-73f2-4b4c-8e09-aaf1037594ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e418bca-82c2-4348-93f6-26e863ca128f",
        "cursor": {
          "ref": "97c2f0e0-287f-414c-95f8-cef7ea155fe9",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9e792197-545c-4e0e-8310-cb73d61c2a5e"
        },
        "item": {
          "id": "3e418bca-82c2-4348-93f6-26e863ca128f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a2d57ab1-f54e-47b5-8e9e-f3d069965d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364e5d3f-7964-405e-b2e2-2c41241a3e6d",
        "cursor": {
          "ref": "99e2ab6b-a6ec-4d1f-ab0e-212f6f4772af",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9d70afab-846d-40eb-a4f2-da212f733246"
        },
        "item": {
          "id": "364e5d3f-7964-405e-b2e2-2c41241a3e6d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ae4ba8f7-816e-4adc-9d2b-185886d476b0",
          "status": "Created",
          "code": 201,
          "responseTime": 718,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "8693ac55-9c83-41e4-8073-e480855e71a6",
        "cursor": {
          "ref": "4778c2e2-0fed-4fd5-ae37-c2f561f222ed",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d9c3a554-98b6-4a24-9238-d74ec45e6c20"
        },
        "item": {
          "id": "8693ac55-9c83-41e4-8073-e480855e71a6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1083e710-7672-44af-8ba7-a09b6bf68190",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e12ec9de-7051-4a7e-bfb8-01895d139a2d",
        "cursor": {
          "ref": "397be630-2159-468c-848a-7f9bde2090ee",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "821ba07e-c8a9-4cc5-82b5-cc372db4bf7e"
        },
        "item": {
          "id": "e12ec9de-7051-4a7e-bfb8-01895d139a2d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "54d3daa9-5903-484f-a39c-3c5fb355c550",
          "status": "Created",
          "code": 201,
          "responseTime": 209,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "67de54b2-0a21-479c-bf97-ec4370ee2a31",
        "cursor": {
          "ref": "206b35ab-ca7e-4c62-8a5d-b107905466e0",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1237c396-329b-4925-935b-c5105c83f063"
        },
        "item": {
          "id": "67de54b2-0a21-479c-bf97-ec4370ee2a31",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "04415957-9f89-4c28-a5e4-0d11c1532884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e0f42af-684f-492b-af8f-eda1acb4117e",
        "cursor": {
          "ref": "26654cb5-7504-40cd-b825-2dc23bdda419",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ecc5d516-9e6d-46d0-af04-6b6ef0e3dda0"
        },
        "item": {
          "id": "7e0f42af-684f-492b-af8f-eda1acb4117e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "56e1bb8f-8209-46c5-a504-6337180cad14",
          "status": "Created",
          "code": 201,
          "responseTime": 187,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "4fa53327-d65d-4b2f-a8d0-4611002853b7",
        "cursor": {
          "ref": "f7fe200a-a679-41ea-9a6f-c71e8b553879",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a97502d6-40ca-47a2-90c0-eababeeaf518"
        },
        "item": {
          "id": "4fa53327-d65d-4b2f-a8d0-4611002853b7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "244742fe-02fc-44a2-a189-504277cc93a2",
          "status": "Created",
          "code": 201,
          "responseTime": 194,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6d3517eb-80c9-4ae7-8ddc-12863d52d2df",
        "cursor": {
          "ref": "f60d40ca-263b-4a00-9f81-8a8fcbcc8458",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7297b499-8c5d-481c-9433-7eee6371e2b0"
        },
        "item": {
          "id": "6d3517eb-80c9-4ae7-8ddc-12863d52d2df",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5825e6d5-27ad-4d8f-8125-aa1ebcf93149",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5aff011e-502c-4871-819e-eb496caced31",
        "cursor": {
          "ref": "4ead8265-43ea-4f60-a437-f30cd06eba43",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5ef5f3a2-3af6-4530-9fab-43e9389efaf2"
        },
        "item": {
          "id": "5aff011e-502c-4871-819e-eb496caced31",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0959b26c-86d1-4050-8902-f8ec2725482d",
          "status": "Created",
          "code": 201,
          "responseTime": 201,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "3a640fd3-3ab4-4b93-9746-a15314e597ee",
        "cursor": {
          "ref": "c888c6f6-33cb-4669-a7a4-adfafb33fe77",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f3857c8a-2654-45fb-9ec0-4c8b87614075"
        },
        "item": {
          "id": "3a640fd3-3ab4-4b93-9746-a15314e597ee",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "06a78a7e-b408-42e3-a879-10486795e1eb",
          "status": "Created",
          "code": 201,
          "responseTime": 205,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "cede07d3-dcb7-44fc-9aad-44a7844dfd4d",
        "cursor": {
          "ref": "11eff7bf-d212-45b6-9c69-fb14d9b76aca",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1bc93c3f-6fb9-4abc-8209-25ccc33e2c0e"
        },
        "item": {
          "id": "cede07d3-dcb7-44fc-9aad-44a7844dfd4d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6922fead-67aa-4768-a3e2-38846f62cd6d",
          "status": "Created",
          "code": 201,
          "responseTime": 189,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f229c5da-6d4f-4ae6-b959-3431895b251a",
        "cursor": {
          "ref": "08610599-fc73-46a5-9291-240e3c53399c",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "af991ab9-d1ba-4441-9875-abde636bd294"
        },
        "item": {
          "id": "f229c5da-6d4f-4ae6-b959-3431895b251a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2d8a73ff-c6e0-4b04-91ff-13427ff507de",
          "status": "Created",
          "code": 201,
          "responseTime": 183,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "093171d1-eeb1-414c-a79f-9cc98dc47320",
        "cursor": {
          "ref": "bf00ba8d-c098-4880-af20-7724f8e8ef5d",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b0df4fc0-5873-4139-b4df-0ce98bef6d66"
        },
        "item": {
          "id": "093171d1-eeb1-414c-a79f-9cc98dc47320",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "be7bc776-a7f7-408d-b6c0-17215ca51cc4",
          "status": "Created",
          "code": 201,
          "responseTime": 191,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "8c1a3cf9-27dd-4ff9-900f-11df771ab6e2",
        "cursor": {
          "ref": "21bebd9b-d294-45c6-8f91-c6e9d9ad4a7e",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e8328dfa-34ea-4bee-a8c5-8fb09316133c"
        },
        "item": {
          "id": "8c1a3cf9-27dd-4ff9-900f-11df771ab6e2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "adb13f63-83d1-49e3-a829-9d83800ea6db",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "24f0e869-b3e0-46e5-87bb-9179b84224f7",
        "cursor": {
          "ref": "d9394779-5da8-48b9-b50b-2388ef3c0c09",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e6269b40-d90b-452f-8ad0-2bdbb80f054e"
        },
        "item": {
          "id": "24f0e869-b3e0-46e5-87bb-9179b84224f7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "647cd0a0-08b9-46c6-9944-1feaa8c7ed78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e569497-48b2-4c93-8a7f-6135ccdaaef1",
        "cursor": {
          "ref": "804525a6-ab86-4d7a-bb4a-25efff4ea4ce",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "336e9a99-64b3-4c9a-bb21-ae76ccba5a0f"
        },
        "item": {
          "id": "7e569497-48b2-4c93-8a7f-6135ccdaaef1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "bce3d852-85fe-48ba-8eed-743583a5aa05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4781cfd-0b3a-4368-ae19-423b777cbf0d",
        "cursor": {
          "ref": "4338a304-f34e-4ca0-9b78-c0a730db9865",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9a533097-ef97-4274-a718-c5668452fe98"
        },
        "item": {
          "id": "b4781cfd-0b3a-4368-ae19-423b777cbf0d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a87c704b-ce6a-45de-8ee4-9b08249ecd5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f4636b-4ada-45ea-a54d-ba632a907abf",
        "cursor": {
          "ref": "023d9232-6333-4bba-97fc-8bdc33972dd0",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4b036f4e-eacf-4e45-ba52-9fa91c9bf863"
        },
        "item": {
          "id": "92f4636b-4ada-45ea-a54d-ba632a907abf",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "31b42480-7cc9-46fc-98ed-38650427ff5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b011189d-56dc-4428-a83d-c2297b4ddeaa",
        "cursor": {
          "ref": "026a1bed-7769-4088-bff0-838cd1b3fcce",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ac2c0a46-746d-47c8-b48b-0d3ae9c17aea"
        },
        "item": {
          "id": "b011189d-56dc-4428-a83d-c2297b4ddeaa",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2d232762-7e57-497c-a810-a15672cfc47a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7815951b-746e-4bec-a980-fec71c655746",
        "cursor": {
          "ref": "1803c214-f52d-448d-b6fb-82281630531e",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "27418dcc-2b9a-47d4-8120-f86fa6088116"
        },
        "item": {
          "id": "7815951b-746e-4bec-a980-fec71c655746",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "aca35d5d-6026-45b3-a870-057c9b8b54e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbb1511-da64-4fb6-9dde-2b86e05c2ea1",
        "cursor": {
          "ref": "b25d61a7-48ad-4cfb-ab3b-007f8d1f902e",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b5a21098-d987-43a9-95e5-f1aab560b764"
        },
        "item": {
          "id": "5dbb1511-da64-4fb6-9dde-2b86e05c2ea1",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "709141a2-f1fa-4e0c-b6c7-8c6f6a155290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b547ed-7bc5-4293-9940-e139984490ae",
        "cursor": {
          "ref": "99bf5a48-d45d-48a3-8440-fc2c57d11d6c",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f3dcead4-3541-4e08-9386-699a2a4aad4f"
        },
        "item": {
          "id": "a0b547ed-7bc5-4293-9940-e139984490ae",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "81833988-0a79-4dc0-adf3-3cffeb34fd2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541ddd7a-43cc-42d2-986b-ab5256e4e26e",
        "cursor": {
          "ref": "15ccdbaf-480e-42d2-9b08-1e4920277361",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2a273617-8096-4c71-b751-1ba60b4200dc"
        },
        "item": {
          "id": "541ddd7a-43cc-42d2-986b-ab5256e4e26e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1e355b80-2297-4085-8d8f-e3476e087a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cd065ca-32c7-4385-a383-5dc41e37105a",
        "cursor": {
          "ref": "e11e59a1-4007-4471-8991-aafae6a69578",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e2a587da-24de-4757-9a60-6a772344b198"
        },
        "item": {
          "id": "1cd065ca-32c7-4385-a383-5dc41e37105a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "672ab51b-0829-415c-b165-9a3312fabe19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d764df9-e4eb-480c-b845-244e2828feef",
        "cursor": {
          "ref": "fd74f97e-2c5c-4f87-8bab-b1e381b2cb6a",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "95422a1c-6f90-49d8-a8ef-0e08ef5c2f23"
        },
        "item": {
          "id": "1d764df9-e4eb-480c-b845-244e2828feef",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0fdfca9c-5768-4bc8-8b52-8b3b4ac9a6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c08b3f-035e-4db8-a679-0832257b0285",
        "cursor": {
          "ref": "09beeb78-5fc7-45f8-aa99-58ed467fc8f8",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "50286fc0-72e3-43a3-8b60-2852644dbd5f"
        },
        "item": {
          "id": "57c08b3f-035e-4db8-a679-0832257b0285",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "059a9f27-ffb0-48fa-9b4f-cd40d5352a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7391b686-edb5-499a-990d-8e292d9f9698",
        "cursor": {
          "ref": "37fc3f49-a17d-4c25-ab3d-f016d2a58c04",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9b71f7b7-be7e-4f40-a074-99947b6b67ef"
        },
        "item": {
          "id": "7391b686-edb5-499a-990d-8e292d9f9698",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "03b8ff38-d5b4-4b8a-9869-67b7f8b2e82f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6028f00c-2b65-45d7-8008-ea218c636721",
        "cursor": {
          "ref": "f8eb3c89-0e21-430b-a609-439c86c6f39e",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e0344259-0d8f-4d01-b68d-2b0c3b9d91e8"
        },
        "item": {
          "id": "6028f00c-2b65-45d7-8008-ea218c636721",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "df7c117d-06ba-430b-b6a8-731dbbbaca91",
          "status": "Created",
          "code": 201,
          "responseTime": 188,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "debbfd74-c441-45dd-97b6-9b14c96a705a",
        "cursor": {
          "ref": "e716eefe-8218-4e00-927d-23e72fc3f6c5",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "597f69a3-d8a2-4212-96ea-254c6d90386d"
        },
        "item": {
          "id": "debbfd74-c441-45dd-97b6-9b14c96a705a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d22cc545-267e-4f1d-a513-5812efa78e13",
          "status": "Created",
          "code": 201,
          "responseTime": 208,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "e7176f0d-b7f4-47b4-aaea-0b324571e290",
        "cursor": {
          "ref": "99bf76d6-2492-466c-adf9-d42fa02038ce",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "faf2653e-f78b-48f3-94fb-5a65915266a8"
        },
        "item": {
          "id": "e7176f0d-b7f4-47b4-aaea-0b324571e290",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0b7f5f19-7476-4edb-a98b-08a665db7c08",
          "status": "Created",
          "code": 201,
          "responseTime": 189,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "2340e1f6-891a-40f6-b5af-91079e0eb079",
        "cursor": {
          "ref": "016551ce-4d70-4ec5-a1c5-b0cb310483aa",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6cbce9fb-90ac-4de7-b497-333f3b231941"
        },
        "item": {
          "id": "2340e1f6-891a-40f6-b5af-91079e0eb079",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "208f1598-ee9c-4933-af11-9f2dc3ee2775",
          "status": "Created",
          "code": 201,
          "responseTime": 191,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "4085cf1c-1b78-4888-939d-28fc6173d65e",
        "cursor": {
          "ref": "aa290be0-7285-4484-a1f3-3e47de19086a",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a7ffed33-c829-4215-8434-0d8fc1ed7849"
        },
        "item": {
          "id": "4085cf1c-1b78-4888-939d-28fc6173d65e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "510f5bfa-4662-4dca-8081-7a8201576bfa",
          "status": "Created",
          "code": 201,
          "responseTime": 182,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d5dc9132-a279-4631-b338-fd9e18ef40c4",
        "cursor": {
          "ref": "e50addc2-ff5a-4bdb-a28d-7598e42e8472",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fb7a579c-af8b-41dd-bff6-94377c1a4704"
        },
        "item": {
          "id": "d5dc9132-a279-4631-b338-fd9e18ef40c4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "82b0b12c-47f6-443c-a6e7-24275b90214e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa110a2d-8f47-47fc-b47c-9318dd41dd4f",
        "cursor": {
          "ref": "c2be24dc-2a1c-4e58-82eb-174e2d4b0160",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "33b56604-5eb0-4bb1-a032-25ae784eda8d"
        },
        "item": {
          "id": "aa110a2d-8f47-47fc-b47c-9318dd41dd4f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "468534b5-8768-42c4-9503-27b82b8a2fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8a191d-5171-4ccc-9fa5-c4e632681018",
        "cursor": {
          "ref": "ca16beed-d7d4-42f3-bc50-d88561ea974f",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "db3afc85-845b-42a6-a846-7d04cb626cf8"
        },
        "item": {
          "id": "db8a191d-5171-4ccc-9fa5-c4e632681018",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d8d45c85-6208-4ef1-8ce2-b1375dfbd8bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d3ba17-df20-4ba7-8fb8-54ac9a102c17",
        "cursor": {
          "ref": "39e0fbad-ee9e-4faf-bf25-6ff8cd32e4e2",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "11c0de67-49b4-4717-980c-c5e23f9111b4"
        },
        "item": {
          "id": "52d3ba17-df20-4ba7-8fb8-54ac9a102c17",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "477c1365-4333-4369-b2d7-d2add03a914e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e83b1ae1-cfa4-4d5a-8626-8ced1a679cd7",
        "cursor": {
          "ref": "ed1162a6-f287-46dc-8777-b08f5802a63b",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "41fea8c2-bdef-401f-ba53-ff84786f81cd"
        },
        "item": {
          "id": "e83b1ae1-cfa4-4d5a-8626-8ced1a679cd7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0c388218-a3e3-4581-86bf-51cf60074cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6421e3-2ff4-4c43-a79a-9df9c032e635",
        "cursor": {
          "ref": "35b248b6-719d-4dfb-8ec6-54b3b7007f01",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9e4575ff-378c-40ca-b631-736227930a64"
        },
        "item": {
          "id": "ea6421e3-2ff4-4c43-a79a-9df9c032e635",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b43c96d7-2ab2-47a5-9071-1bb1fd5ab5e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ddef121-38c2-4e0a-8a35-e44354596910",
        "cursor": {
          "ref": "8ab1cf91-93a0-4474-a2e8-275eefc85790",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "26e308a3-59b7-456a-b092-438651222656"
        },
        "item": {
          "id": "5ddef121-38c2-4e0a-8a35-e44354596910",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2eb70afb-8f86-487d-ac6b-30c28f61122a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff5d133-8ce4-478a-a47d-b4095fb1231e",
        "cursor": {
          "ref": "daeada23-3876-4b98-bebf-cf4f28939016",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "31cea19a-5b94-4745-b7d7-e8ed35c3ddd8"
        },
        "item": {
          "id": "fff5d133-8ce4-478a-a47d-b4095fb1231e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "883636de-d793-4183-8ce6-86967f9c4a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcbbf540-f008-4e15-92d7-9e7a1350274b",
        "cursor": {
          "ref": "bc4b2003-d1e3-4bf2-bcbd-cd88a5ae6b2b",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4fd282e9-f2e5-489e-80be-86d57a2f593e"
        },
        "item": {
          "id": "fcbbf540-f008-4e15-92d7-9e7a1350274b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4eb574d5-d2cf-40e3-b54b-fe341d44176a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ee4ed4-ea0c-4d1b-b7f5-d15b2380292d",
        "cursor": {
          "ref": "f5ab35a2-ff00-494b-8bd7-b257d6d86e5b",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "be6a73df-83d0-4b65-856f-0f71597ef897"
        },
        "item": {
          "id": "d1ee4ed4-ea0c-4d1b-b7f5-d15b2380292d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "53159fda-2a36-48d5-9b60-03ea5b931f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26530a8e-e8c5-4041-9ba8-113d1b4812de",
        "cursor": {
          "ref": "647a5b01-bd30-4e90-bc0d-57cbdfbe0589",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ed7ad7db-3322-466c-add3-87fa890a2da9"
        },
        "item": {
          "id": "26530a8e-e8c5-4041-9ba8-113d1b4812de",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4f5ac166-96a9-4d10-8f11-b2272b88bc82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9171cce-4397-4cc9-8035-97f3632d55b8",
        "cursor": {
          "ref": "2d3a029a-0349-481d-8fd1-c18f5d5e5f10",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c0c63cec-506e-401f-8201-3142f1ba7d29"
        },
        "item": {
          "id": "c9171cce-4397-4cc9-8035-97f3632d55b8",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bcf43a33-c434-49b8-9909-39f4ef982c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7808b75c-f9a2-44bd-872b-bb8c8065a8e9",
        "cursor": {
          "ref": "50fb5574-6e3c-4fb0-a1d4-c8242851acde",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7921b73a-499d-410a-b5e0-8ad0fa3dcaac"
        },
        "item": {
          "id": "7808b75c-f9a2-44bd-872b-bb8c8065a8e9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "37befa6f-a63c-4699-8008-d54f6fc98c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4fa26c6-afd0-4572-b200-3a63c250c275",
        "cursor": {
          "ref": "34391d71-af02-4ea7-bb63-ea2577f8dff8",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "38d68279-af31-425d-9e66-9edf0b3b5c09"
        },
        "item": {
          "id": "c4fa26c6-afd0-4572-b200-3a63c250c275",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7eb6a46c-dc8f-47cf-ba14-83a974aa4f8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d0f82c-4b6d-49b6-974c-6b4cc624a3ff",
        "cursor": {
          "ref": "96a59c18-1247-4fd9-b661-3955430372a9",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "493d93a1-b84e-4cdd-a26f-c55d4a12380f"
        },
        "item": {
          "id": "04d0f82c-4b6d-49b6-974c-6b4cc624a3ff",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ecd79653-40b7-4375-a40b-f17828c9999d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b6b20e-a8a0-4d95-a2fa-39fcd0d742a9",
        "cursor": {
          "ref": "ca7568bb-3130-42a9-8870-bdf52625cb05",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c55f360a-fc53-4bf3-b9bf-43acad31be8a"
        },
        "item": {
          "id": "25b6b20e-a8a0-4d95-a2fa-39fcd0d742a9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "41e85b4a-9cc0-40da-8eec-5924fe814d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a720dc2-8c36-484e-b031-7ad2dd79b7a9",
        "cursor": {
          "ref": "4baee49b-e4db-4f10-9d1c-79b866378ae0",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "73c1a8ac-07db-41ae-9f2e-16691c6d6248"
        },
        "item": {
          "id": "6a720dc2-8c36-484e-b031-7ad2dd79b7a9",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "cc6037e5-f18a-4155-8bc8-2074d79177d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ea1c33-a437-4b38-bfdd-089a4a8e70e4",
        "cursor": {
          "ref": "c3ff3af1-6ca6-436a-b2eb-0f3c04676f7d",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2b833e0d-811b-4ef5-ab0c-9ca92a42667f"
        },
        "item": {
          "id": "10ea1c33-a437-4b38-bfdd-089a4a8e70e4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2c3ba57b-0ea7-4b76-9309-c6d3791fda12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38afcab-03c6-44f3-8c3b-d33f34fda9ea",
        "cursor": {
          "ref": "2f90160b-cb08-4186-8092-0d09d8825134",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e1a6f155-14d2-43eb-812b-ef1a0af6ad8a"
        },
        "item": {
          "id": "b38afcab-03c6-44f3-8c3b-d33f34fda9ea",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9b1f2cd0-4af8-433f-90cf-1d6f0351ee31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68dbb6f-df00-4d2d-b9d1-a20a99eb3fd4",
        "cursor": {
          "ref": "0f3573f0-ae30-4960-90e5-e06648cd345e",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "025d134c-511a-4494-a48d-3d0aef1318d0"
        },
        "item": {
          "id": "f68dbb6f-df00-4d2d-b9d1-a20a99eb3fd4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "28157266-6c09-4569-b168-42c3b994a4e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494f6e8a-9377-4b1f-ac4a-da1c1fc4b852",
        "cursor": {
          "ref": "98568436-22d7-4e7e-8e72-c91c93655b70",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a23b4b6e-ecf1-4c6c-8f64-2b03e5cbcaf7"
        },
        "item": {
          "id": "494f6e8a-9377-4b1f-ac4a-da1c1fc4b852",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2fb4da57-c0a1-4d58-ba29-d1eaea9b00c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1569238a-045a-475e-ad36-f414ce2e84df",
        "cursor": {
          "ref": "c77c741a-325f-4108-bc59-5febad83b55c",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5b0d6fcd-db34-4b2e-a43c-92a8bd6ac584"
        },
        "item": {
          "id": "1569238a-045a-475e-ad36-f414ce2e84df",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "31bed4c5-1228-41f0-aa52-d230cbad7da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048389bb-e570-43b8-bba8-19c65721d37b",
        "cursor": {
          "ref": "34652083-60c4-497b-8dbf-51e8279219eb",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6b35fa79-1958-45b5-9e7a-3e8cac3e3776"
        },
        "item": {
          "id": "048389bb-e570-43b8-bba8-19c65721d37b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d918b0a7-a515-4af3-a21b-e35170710dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b4a59e-8dcd-46e9-ad9c-0bb4429cb6df",
        "cursor": {
          "ref": "6a6f6d11-dac6-4929-a9f1-05bd7c8f0135",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "02b2da5c-a079-4c79-8863-e2c0abfa99e5"
        },
        "item": {
          "id": "d2b4a59e-8dcd-46e9-ad9c-0bb4429cb6df",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "79a521cc-cfaa-429a-a093-7956fcf63379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c0be98e-8e00-4466-9df9-4bddfdc26ab0",
        "cursor": {
          "ref": "219389ca-be27-4d0a-b8be-dce6df546049",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4eebcb9e-b8bd-4282-b64f-ef85a0ccf9b7"
        },
        "item": {
          "id": "2c0be98e-8e00-4466-9df9-4bddfdc26ab0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fb8746f1-57f9-41af-9cea-6d40006fed7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "283da5a4-1b5d-4c56-b6b3-132a464855b5",
        "cursor": {
          "ref": "977cae80-da4f-4614-ab19-246938c7d8c3",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0da6e4aa-380c-4625-8d89-acb239ac34b2"
        },
        "item": {
          "id": "283da5a4-1b5d-4c56-b6b3-132a464855b5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "bb2426de-8669-4f06-ad54-5f435c341b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4561d70a-6047-4458-976b-a3d39e93c706",
        "cursor": {
          "ref": "816986df-5732-4c92-9f21-468cecfee9b0",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a4592971-afca-41df-8b40-82d1f04452e0"
        },
        "item": {
          "id": "4561d70a-6047-4458-976b-a3d39e93c706",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ed2f554b-fb75-4bf2-9331-a722351b4954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27503d98-99e7-4483-8a53-7c2d3ad66a60",
        "cursor": {
          "ref": "c77c8677-14fd-4dcd-8529-6de20fcb3f8e",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1037cd7a-fcac-4754-8622-3ff7d223b33b"
        },
        "item": {
          "id": "27503d98-99e7-4483-8a53-7c2d3ad66a60",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d4a97d2e-5a80-4c7f-9ff8-00874696b46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddcba938-e7b0-4ad0-8686-e9b179973d6b",
        "cursor": {
          "ref": "6f9f8692-02bc-4c8e-876d-98c211399652",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "58dcaec5-d8c8-4dfb-bc32-9fc99e20cee0"
        },
        "item": {
          "id": "ddcba938-e7b0-4ad0-8686-e9b179973d6b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bf3f82ab-f08a-45d3-9d79-d812e2257467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5493ef07-15b2-4cb4-91e7-41aa3f1b3198",
        "cursor": {
          "ref": "cf334e27-0ea7-4c43-939c-7a37f876d904",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "703bb7fa-360c-4419-9107-9bbda8952f4a"
        },
        "item": {
          "id": "5493ef07-15b2-4cb4-91e7-41aa3f1b3198",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "48ac683c-85df-42c9-859a-ab4a7fc65b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c2c4b68-e64d-49ce-943f-2f9674ad158d",
        "cursor": {
          "ref": "da8cb22b-037b-4370-b09b-43619bc14031",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "265e0730-a0da-4922-accc-30fb2b608f7d"
        },
        "item": {
          "id": "1c2c4b68-e64d-49ce-943f-2f9674ad158d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6eaec527-9972-49df-8122-e902972a3135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b5a59b-fcfc-494f-afa7-d91bfe89e764",
        "cursor": {
          "ref": "00c1e857-078f-4b06-9a00-9c550080a947",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a3b88937-b4f2-4031-8cb8-c6226783550c"
        },
        "item": {
          "id": "e5b5a59b-fcfc-494f-afa7-d91bfe89e764",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "dae71628-dfd2-4ca4-9707-4c342d272513",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbe31d3-6348-40d1-a1db-3e2c2d312c60",
        "cursor": {
          "ref": "ed49baa1-35d6-4c0d-a9b0-ad2d5ca50f39",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d13c35aa-9d1c-43d1-9426-b4a369ef67de"
        },
        "item": {
          "id": "cbbe31d3-6348-40d1-a1db-3e2c2d312c60",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "6a9f1c04-d8f1-4294-88b8-f51b536dba57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e8d2d00f-c41d-45da-89e0-3dc0990b17cd",
        "cursor": {
          "ref": "4ccbb0f1-ca1b-4279-ad12-e5f91004fdab",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0d8e177b-3b00-453a-a7ee-0318ae4f9278"
        },
        "item": {
          "id": "e8d2d00f-c41d-45da-89e0-3dc0990b17cd",
          "name": "credentials_issue"
        },
        "response": {
          "id": "bb386356-97ad-4089-a5d2-7cb1b14a333b",
          "status": "Created",
          "code": 201,
          "responseTime": 190,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "12cc6888-b1a4-4afa-bf55-5e20e01b6c86",
        "cursor": {
          "ref": "25531fd0-db1c-48f1-b1cc-f499b6b0e45f",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "aa888431-87f5-49a8-857c-0cb90bcc7501"
        },
        "item": {
          "id": "12cc6888-b1a4-4afa-bf55-5e20e01b6c86",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a5ba829d-8c04-44a1-bab8-764bc2a2734f",
          "status": "Created",
          "code": 201,
          "responseTime": 189,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "56fbc7ec-8443-412c-9857-0411294db156",
        "cursor": {
          "ref": "d7f2f9bc-d705-4b56-a142-cf609704782d",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7aa23372-0b20-4535-ad64-0363d8752478"
        },
        "item": {
          "id": "56fbc7ec-8443-412c-9857-0411294db156",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "97eea265-c880-4968-ac9f-37e2dc7e2161",
          "status": "Created",
          "code": 201,
          "responseTime": 189,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d353eb5-91a5-4218-bc9e-f03b9276ca8d",
        "cursor": {
          "ref": "99683e7f-fc08-411c-95cd-3c0d738685f9",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "226f849b-1c68-4e81-b808-39c3e1bb5cec"
        },
        "item": {
          "id": "0d353eb5-91a5-4218-bc9e-f03b9276ca8d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "68110f0f-449d-4db3-9d8e-b11e7c533bee",
          "status": "Created",
          "code": 201,
          "responseTime": 176,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c88f93b-6148-48ad-b535-2b831224e9a0",
        "cursor": {
          "ref": "905dda2c-bcf6-4c7a-96b2-fe23246abe70",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8192ada3-b50d-4adf-b082-ba6e3e84f2e2"
        },
        "item": {
          "id": "8c88f93b-6148-48ad-b535-2b831224e9a0",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "50d4d58c-3527-4f7d-b8c6-486ee8c3f952",
          "status": "Created",
          "code": 201,
          "responseTime": 192,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-02T00:35:21.697Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-02T00:35:21.697Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d17a995d-850c-40b9-869e-6dc693787f05",
        "cursor": {
          "ref": "4ccab0b3-5717-4fe5-99cc-69c985d475f4",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "35915cd8-2c84-49bb-b6c3-8f0ad345d9cf"
        },
        "item": {
          "id": "d17a995d-850c-40b9-869e-6dc693787f05",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b69bccdf-d665-47ad-8285-b042fa4322e7",
          "status": "Created",
          "code": 201,
          "responseTime": 208,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90c3611-6c06-42c9-89d0-11fefc7f69b5",
        "cursor": {
          "ref": "1a547352-9e33-455b-9973-f80be1709b7a",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f09db937-0a1f-490b-8411-4155dc6baa1f"
        },
        "item": {
          "id": "d90c3611-6c06-42c9-89d0-11fefc7f69b5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "248f8eb1-50f8-4eb0-851a-5914e0f823ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f4ad43-e449-4974-9492-133e8f5c573f",
        "cursor": {
          "ref": "5ac954a0-9864-4ce6-b226-be398dfe529e",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2ca0db54-d873-4b8c-a73f-4775007c9cc1"
        },
        "item": {
          "id": "61f4ad43-e449-4974-9492-133e8f5c573f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e7b2bff3-24a4-4daa-b4cb-54a7246c5176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d28f70a9-9c7a-4c5f-b04f-7794ab733238",
        "cursor": {
          "ref": "6cbc9554-5eba-48f3-af35-3d5e88333eb1",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2a122444-853a-4de9-9354-3999bc9f3c0e"
        },
        "item": {
          "id": "d28f70a9-9c7a-4c5f-b04f-7794ab733238",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1c5e2a11-ac99-48d2-85c2-788bc4d72d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62899105-1434-4a6c-accb-0de041c6e9ef",
        "cursor": {
          "ref": "10ab0bfe-117d-4f13-b37d-9bc29bf54d68",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fc38d017-5b0c-44f5-88a8-9da720108475"
        },
        "item": {
          "id": "62899105-1434-4a6c-accb-0de041c6e9ef",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e71af3c1-3931-438c-957d-1a19d40fac48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fbf71da-d1b3-4a4e-823d-6ad515f6597c",
        "cursor": {
          "ref": "f7ce5ab9-39a9-4693-974a-b2f98c302cfa",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3985cdde-cc53-446d-8515-774ef2180ab3"
        },
        "item": {
          "id": "5fbf71da-d1b3-4a4e-823d-6ad515f6597c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1a5f68c5-4c73-4498-8376-a1ebfde5661b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa2a74e-c4d1-4dd2-8b95-8246860eca26",
        "cursor": {
          "ref": "0537684f-74bb-4e69-b783-cff4469fd931",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "9a69cf14-a3f2-4c31-89f4-e594470e120b"
        },
        "item": {
          "id": "0aa2a74e-c4d1-4dd2-8b95-8246860eca26",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ca376fcc-1f54-4f78-ad5e-20155f01b004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7162ade-edc6-4563-a854-c43fc86be967",
        "cursor": {
          "ref": "739cb315-f9a6-4a8b-8145-fed6599b7d25",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "bfc828e8-794f-4217-a4c2-867ed9d3bfd2"
        },
        "item": {
          "id": "f7162ade-edc6-4563-a854-c43fc86be967",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1bec20f4-a17b-4aee-8f5f-4158f5880deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe90a52-808e-4590-a665-2574d1647673",
        "cursor": {
          "ref": "5cf81758-96fe-42eb-b1ba-70a9ef76f226",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "47d45777-5fea-4eff-963a-7e801e93dfa5"
        },
        "item": {
          "id": "bfe90a52-808e-4590-a665-2574d1647673",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ea99c811-f94a-4e98-8d38-3fe6b28277ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d0b16a0-7ab4-4029-a61f-4b7e3699b580",
        "cursor": {
          "ref": "1a77c093-0b95-4bdb-adfe-b5347be9a2df",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "37f0e774-1753-4600-8f89-c80591d89bff"
        },
        "item": {
          "id": "8d0b16a0-7ab4-4029-a61f-4b7e3699b580",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "578643ec-9589-4e16-bbee-20250c0d200a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc6a025-54e1-4e16-a256-9d462f216355",
        "cursor": {
          "ref": "8220639c-8882-4277-b598-f69164487a9d",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "291b2b3d-5f55-4483-bad0-1a604d126e1a"
        },
        "item": {
          "id": "0cc6a025-54e1-4e16-a256-9d462f216355",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "36c2e624-ef17-4158-906f-7b5be64546d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0bfa7e-d77a-48ae-8e65-aa53fe22f904",
        "cursor": {
          "ref": "c482535a-1fd5-40a1-81cc-23564145c04c",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9fbcd11b-3a01-4973-8bab-ce36d134444e"
        },
        "item": {
          "id": "fc0bfa7e-d77a-48ae-8e65-aa53fe22f904",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0880a923-2617-41b7-aafc-03571e91bdad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad20ef8-38ba-4262-beb2-5b0704760275",
        "cursor": {
          "ref": "a5074b63-127c-41cc-8d05-0fc9585ff89a",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d96c10ec-d044-4448-85e2-6a3292594fff"
        },
        "item": {
          "id": "cad20ef8-38ba-4262-beb2-5b0704760275",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "590de77d-18ee-4c57-927a-9910aa06bebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f93d87-43ef-46b5-bbcc-466718fb9999",
        "cursor": {
          "ref": "06627f6a-f2ff-4d90-96b6-c47b69223225",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9761770d-5132-4fa6-92bb-5d359ed085fe"
        },
        "item": {
          "id": "79f93d87-43ef-46b5-bbcc-466718fb9999",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8b352340-e991-44c6-9964-f3d727d2ee1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "c5afde69-0a76-44e6-8d94-1f59a6970adf",
        "cursor": {
          "ref": "2d4f2567-f0f9-4aec-9266-519721a7a76e",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7e0d35d3-2fbb-4bb5-95d1-4e3701e2d1ac"
        },
        "item": {
          "id": "c5afde69-0a76-44e6-8d94-1f59a6970adf",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "653021ae-4f3b-46e4-afec-469d8afaf4fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 123,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "09c70d7c-b5ca-4c0a-b1ea-2903cba72d32",
        "cursor": {
          "ref": "0cdb3308-10df-4c62-8dbf-5b41fb8ba1ae",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ef413723-954c-4387-b575-ead99d8cacb2"
        },
        "item": {
          "id": "09c70d7c-b5ca-4c0a-b1ea-2903cba72d32",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b6490e08-28a6-4d02-8205-1efff4f4ade2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b887229b-8ed0-4d7d-ad20-6e43b034d2ae",
        "cursor": {
          "ref": "e2f37b9e-5aee-487d-8110-9fceb8495565",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f5d49073-0dbb-4254-a6de-8f13decd77fa"
        },
        "item": {
          "id": "b887229b-8ed0-4d7d-ad20-6e43b034d2ae",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "55879e87-4e64-4dd4-a256-b3d2f3b1f1d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179db23e-f457-42b2-b05e-f24d6895bab7",
        "cursor": {
          "ref": "97033435-bddb-4931-8b7e-9cf8e77f5a4e",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b07149eb-7320-4a3b-a72a-78164308a2ce"
        },
        "item": {
          "id": "179db23e-f457-42b2-b05e-f24d6895bab7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d64c3f6c-d5fb-407d-9bdf-0a6d00f3497d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b3c8a62-1fc2-479c-bf13-0a29f4d3ba94",
        "cursor": {
          "ref": "d9e31b53-42ba-4eec-bcfe-b43373f5a1e5",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "03590b64-70aa-4aa1-b01b-38264e178ea5"
        },
        "item": {
          "id": "7b3c8a62-1fc2-479c-bf13-0a29f4d3ba94",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e96d1208-c6e1-46d1-8a31-4427e76c9237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40543733-aa68-4595-af8d-703b2c85de5a",
        "cursor": {
          "ref": "4b8b41fc-54a0-4492-b5bf-a29a44c61897",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "72f38bc3-6660-45cc-93e7-cc1c92fa2566"
        },
        "item": {
          "id": "40543733-aa68-4595-af8d-703b2c85de5a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "94d3cf03-54a2-4933-a6a0-a64a095b4a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a59fac1-7504-44b6-9f5f-b02591682996",
        "cursor": {
          "ref": "599099bc-f224-4b1d-9715-9324350eb9e3",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4563db43-59fb-4145-b105-d2fa3232dbbb"
        },
        "item": {
          "id": "9a59fac1-7504-44b6-9f5f-b02591682996",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0757b231-2e48-4255-ba7b-daccb94b8c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a016de13-e0d1-47ca-98e2-fe8299903ac7",
        "cursor": {
          "ref": "04fa6578-0494-4509-905b-f8c783561b4f",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "727d94c1-e956-486f-bdfa-18bc6549346c"
        },
        "item": {
          "id": "a016de13-e0d1-47ca-98e2-fe8299903ac7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7cfd7c34-dd86-44d2-a9e8-418e379b48ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848305c1-b04c-46d2-a7ca-4553b2c10c6b",
        "cursor": {
          "ref": "db68314f-a49f-433a-8abe-24ae7bb6510f",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "79782b73-0e0b-460e-82ab-b61268705ae6"
        },
        "item": {
          "id": "848305c1-b04c-46d2-a7ca-4553b2c10c6b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cd0ae169-0312-4280-b8f6-61124b760eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c787f8e-cb48-4759-a3e1-a9f7dfc6966d",
        "cursor": {
          "ref": "80590b5d-e166-437f-9182-7854de16b6a8",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8f23c73e-bb35-4bb5-9f47-940b77a392de"
        },
        "item": {
          "id": "6c787f8e-cb48-4759-a3e1-a9f7dfc6966d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7cbdf471-0741-4337-9c08-13b1de314946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd529b7-2cbb-40d3-8bff-3d27ec81ca99",
        "cursor": {
          "ref": "cbdf0f1b-3e35-4c7e-9854-7db8fd93410b",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "14089273-086a-4302-a392-92f5f8735d1d"
        },
        "item": {
          "id": "fbd529b7-2cbb-40d3-8bff-3d27ec81ca99",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "dd4bfc2d-2db0-4e2c-bf04-a1cf9ebf33f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b096abc4-cea9-45ec-ad9b-a2d9f5db3350",
        "cursor": {
          "ref": "84bdf6f9-d2d3-4737-b247-e6471672c379",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "73f08f97-9ab2-4ce0-a4f7-12c3adc055f5"
        },
        "item": {
          "id": "b096abc4-cea9-45ec-ad9b-a2d9f5db3350",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "aa3dc4c4-1610-4355-8f55-5eef203c618d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3931182-0dd5-4e36-a363-6b500d89365c",
        "cursor": {
          "ref": "4e6f04a4-3709-454b-b0c1-cc38bcfaab7d",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c28ae1a9-6247-4705-8007-05a47681a409"
        },
        "item": {
          "id": "f3931182-0dd5-4e36-a363-6b500d89365c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "85dd842a-b5d9-4490-a369-33adce2224b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3af0d17-cfbb-41df-b55a-08090a879239",
        "cursor": {
          "ref": "daf21138-4bbd-45cd-a7ed-6bd5b116a48c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "492a9f83-60e4-4c40-8b9b-019ee62c9d92"
        },
        "item": {
          "id": "e3af0d17-cfbb-41df-b55a-08090a879239",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5221fb16-c9b0-448b-a77e-99a50a3d68dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5cc1a3c-52e6-43b9-a53b-38cf6ae6206e",
        "cursor": {
          "ref": "6bfab346-be67-40aa-98c4-b28017f421c4",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a853cf7e-46fa-42d1-bc0d-b0f04a2c60e9"
        },
        "item": {
          "id": "b5cc1a3c-52e6-43b9-a53b-38cf6ae6206e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "536ec18f-84d1-4a68-bbf7-166797fcfe96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20996bf9-2595-487e-b2d8-abb0a604f6a9",
        "cursor": {
          "ref": "495b02bd-47e3-47aa-b9d3-87f796e63089",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e946c134-16fd-4f14-a05f-c2e4bdedefd7"
        },
        "item": {
          "id": "20996bf9-2595-487e-b2d8-abb0a604f6a9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "eb982783-8bb5-49bb-bfe5-6eff4c7a70e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20dccb5e-67bd-458b-b512-79537b689742",
        "cursor": {
          "ref": "9cb17b62-4364-4156-af41-61d2c117acff",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7128e044-48ee-4356-bf67-03ba195ab7ff"
        },
        "item": {
          "id": "20dccb5e-67bd-458b-b512-79537b689742",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6e1c738a-fdf6-4d3f-ae56-9605931f279b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91edd766-c2ea-4d41-8ce7-55912c1ae72d",
        "cursor": {
          "ref": "5acced62-ebda-4e84-9255-f36e5acb57bc",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7bded3fa-b52a-46bd-819f-fd5dc784de4a"
        },
        "item": {
          "id": "91edd766-c2ea-4d41-8ce7-55912c1ae72d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "584bd147-7c25-49b9-ae97-578d54219764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6bdd7de-1a03-4f51-a08c-ed71d3ca7f93",
        "cursor": {
          "ref": "0a39b670-f95b-4022-9a5c-78f9ce90a9b0",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "85fd9839-ea8d-4905-afb2-61d7745bc200"
        },
        "item": {
          "id": "b6bdd7de-1a03-4f51-a08c-ed71d3ca7f93",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "20495e96-b2f1-4fac-8044-5be2037f57dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "e401806e-ea25-43f0-ace1-f49fd19ca392",
        "cursor": {
          "ref": "605b0090-a4cf-4593-af89-bfe828d00b6d",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6bbc0f9d-1119-4367-a118-8ecbe1b0ccbf"
        },
        "item": {
          "id": "e401806e-ea25-43f0-ace1-f49fd19ca392",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0369c680-9bd7-47ba-9e69-1927c3ad254f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2fe1fb-f11c-479e-9ac3-1695d68156bd",
        "cursor": {
          "ref": "c6de4945-f46b-4b1c-8a19-32fce42467d8",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b43331fa-6163-40ae-88a0-44e3556bce83"
        },
        "item": {
          "id": "fe2fe1fb-f11c-479e-9ac3-1695d68156bd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "376133c0-df27-480d-b3e3-1ef35cc85b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d66682-131b-4e59-8961-1fdc92c693b4",
        "cursor": {
          "ref": "f6e06bca-d3ec-4c1f-afcc-2660bca4ec33",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "aeb860bd-e7e8-475b-bf90-7487368d1d11"
        },
        "item": {
          "id": "14d66682-131b-4e59-8961-1fdc92c693b4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b6b29abb-6f72-47ad-9944-b3672a58c435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c4d695-e7c8-48a7-a177-50e901025b84",
        "cursor": {
          "ref": "69cae618-b4c8-4eac-bd37-71311da482b3",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0274836b-2380-4ec3-a2b4-441ad95d7c34"
        },
        "item": {
          "id": "90c4d695-e7c8-48a7-a177-50e901025b84",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "eda4e45f-3c2c-4f54-b126-69f47e74d97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff8fd64c-c5a2-4cde-bee3-ef40f40bb916",
        "cursor": {
          "ref": "cf76688e-c62b-4e67-ac36-7660bac5810e",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "fc6b1502-6637-41bd-98ad-8155bcb8ea65"
        },
        "item": {
          "id": "ff8fd64c-c5a2-4cde-bee3-ef40f40bb916",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "dad12b29-89c8-47a2-adaf-ced56f652ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0cf80e1-18d8-499e-801f-c58d27c17bb7",
        "cursor": {
          "ref": "e2e4a142-1560-41ee-8b9b-856d540a376b",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e1f7cdb5-01fe-4d26-a293-1a59693b09f0"
        },
        "item": {
          "id": "d0cf80e1-18d8-499e-801f-c58d27c17bb7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "82795c9c-f3c9-439d-8d88-8e971f38a1b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e6d4ad-6964-4426-baa4-d499c0691879",
        "cursor": {
          "ref": "88241cff-77aa-41e2-84e7-8a16a6de13ac",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c4f76b3e-de49-45f5-aece-59bf7b3659cb"
        },
        "item": {
          "id": "f3e6d4ad-6964-4426-baa4-d499c0691879",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0174220d-613e-49b1-8861-982181dd77d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55197f30-f9aa-4dcd-9fb4-2d6019754a1a",
        "cursor": {
          "ref": "71300e52-cde6-4d4d-9c05-fe980a369cce",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b6a49822-02db-41c4-8321-96b8903405d0"
        },
        "item": {
          "id": "55197f30-f9aa-4dcd-9fb4-2d6019754a1a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "98f17594-5486-42d0-9032-057982f83f29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bedb6da5-9a18-4a46-a1c0-09c28e9e6954",
        "cursor": {
          "ref": "b5e9bb9a-a0c0-435c-bffd-35cf2f91b99b",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e4d3315e-80d1-4980-ba78-2692e9442a84"
        },
        "item": {
          "id": "bedb6da5-9a18-4a46-a1c0-09c28e9e6954",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "afd4d66b-6b2b-47b0-a04f-b02af4661dae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ada2b3-3df1-4f27-a307-7a5760996636",
        "cursor": {
          "ref": "ad653eec-499b-401f-8508-137cd9f65cb2",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "bdbd0cd0-f337-4fbc-8938-dab9d5504e70"
        },
        "item": {
          "id": "34ada2b3-3df1-4f27-a307-7a5760996636",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b46fb983-903b-4d74-8951-5c16e9459a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9e3959-7d4c-41dc-b058-a15c5370881a",
        "cursor": {
          "ref": "9d2c7548-ad4b-4f9a-8a59-afe0d4fa74b5",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "466fcccc-b237-4e23-9c21-bea47d8e86ee"
        },
        "item": {
          "id": "4f9e3959-7d4c-41dc-b058-a15c5370881a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5bbded14-4282-4a1d-b362-7c63d0773bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61d63c9-b7ea-475a-a04b-9045d0537eae",
        "cursor": {
          "ref": "36d277f3-2b57-4112-b61d-95777820b966",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c2908570-ad94-4e44-8237-19d4a8d02f2e"
        },
        "item": {
          "id": "c61d63c9-b7ea-475a-a04b-9045d0537eae",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "af992f13-ab92-4da0-8329-a1f2f53e8ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ecac6a-ff48-4ea8-b92e-6f91e976c546",
        "cursor": {
          "ref": "3bd7eeb3-9d37-41a8-8d22-ae1a6037a3b0",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "20f3e09e-44a3-4114-9716-94b9d5256dd8"
        },
        "item": {
          "id": "80ecac6a-ff48-4ea8-b92e-6f91e976c546",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e38ee07b-ec00-4b83-873c-30bb8e025343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22481e6d-dd1c-4ecc-9470-5207c1676954",
        "cursor": {
          "ref": "d3f9a9e0-666e-4b7e-a8a5-a7b82762192a",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0fe5105d-205e-405c-a608-25e763a2d1af"
        },
        "item": {
          "id": "22481e6d-dd1c-4ecc-9470-5207c1676954",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "efb4ccb9-8347-4ec7-8858-fafb820ecc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb018d0-dc09-4e78-9dd5-1d5eda627096",
        "cursor": {
          "ref": "70271e4b-0f73-480d-b12e-2730f1f91594",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "52a5df4f-1c7a-4107-98ff-1f6bee1d77b0"
        },
        "item": {
          "id": "5bb018d0-dc09-4e78-9dd5-1d5eda627096",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4e2eff4a-2035-46ca-8e41-ddd4de50ee9e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "1a2881f5-de39-45ac-8a98-47f2ab214be2",
        "cursor": {
          "ref": "74437d10-b01b-4186-a584-83e0667ccd72",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b43308bb-628a-4e8a-9848-0fde68a28fc7"
        },
        "item": {
          "id": "1a2881f5-de39-45ac-8a98-47f2ab214be2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5d7a2157-b3db-4b21-99c0-c4e577921334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3933ab7a-70c3-430e-b319-74fbc0fd02b2",
        "cursor": {
          "ref": "df93da80-572b-476b-b4b1-e0c7cd184030",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d8537eaa-8eee-4a8c-9d92-17a7e7fad449"
        },
        "item": {
          "id": "3933ab7a-70c3-430e-b319-74fbc0fd02b2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ba377ccc-a42d-43b6-affe-c0a4df943a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605f977c-73de-4dc1-b1c7-76473aeea81c",
        "cursor": {
          "ref": "1943fff7-8e7b-4dfc-97b1-095872383a3d",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5787eb22-109b-4ead-a19f-2920b0bf935a"
        },
        "item": {
          "id": "605f977c-73de-4dc1-b1c7-76473aeea81c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cae6c8d9-f3df-42eb-89fd-55ad29d97e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93cbe8c0-ac3b-441b-af42-b252d9022ca0",
        "cursor": {
          "ref": "9f0e7b0b-b14f-4885-9660-2652662f4489",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8b44d80e-8b46-4e95-9f30-c0461307a0c6"
        },
        "item": {
          "id": "93cbe8c0-ac3b-441b-af42-b252d9022ca0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9421324d-793f-4956-8529-5c7289a9a4d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3299d16-ce7e-49b8-a064-f74949ce5e63",
        "cursor": {
          "ref": "886afb12-0786-469e-a790-43072a1c54a9",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7502bd52-0d90-43b0-924a-e9c3874275aa"
        },
        "item": {
          "id": "f3299d16-ce7e-49b8-a064-f74949ce5e63",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "34f0154c-0561-463e-8245-c3c319e7787b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c6b138-301e-4486-ac00-dc79d5788203",
        "cursor": {
          "ref": "4bec92d4-bb64-4cb7-a0ab-7980902f50b7",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d6a59f9f-f582-4f08-a395-6b9d2b1b4496"
        },
        "item": {
          "id": "64c6b138-301e-4486-ac00-dc79d5788203",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "152505e3-1540-4f7d-b134-e804bb3dea80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2869b8be-f6d6-4cdd-a05a-942d18b959d8",
        "cursor": {
          "ref": "70269f4c-e00b-4fb0-978d-4d0e3fa36a0e",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b2d4fa3a-5c16-454b-a096-9ba09a54679d"
        },
        "item": {
          "id": "2869b8be-f6d6-4cdd-a05a-942d18b959d8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "569ef116-61ca-4538-80d1-c4c05153521a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c692a2-9b73-49ca-aa93-91e2671c2a6b",
        "cursor": {
          "ref": "b5fad6be-55fa-47f0-b417-47525b78db80",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "853b54bd-0d6e-43cd-bcd0-63c24cc4c5bd"
        },
        "item": {
          "id": "f4c692a2-9b73-49ca-aa93-91e2671c2a6b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "089b42cd-a6a1-484d-bf47-55328607a12a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84abf002-a05a-4e19-a75b-7bad74549457",
        "cursor": {
          "ref": "4adc38a9-946e-46f4-8656-d4b712ccc53d",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a025aca2-827a-4545-a9ac-3430b24391a0"
        },
        "item": {
          "id": "84abf002-a05a-4e19-a75b-7bad74549457",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "210a9a2e-d7b7-48fa-aa71-a075f8bfad0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04195a02-e475-4198-8d9d-8775f408bc29",
        "cursor": {
          "ref": "39733bc9-5619-4c69-88d7-72e4c25ffd9c",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "57cce3b5-f2ad-40bf-ba98-e33b0337f8c4"
        },
        "item": {
          "id": "04195a02-e475-4198-8d9d-8775f408bc29",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "42bb7980-4859-4174-b778-ff65df7d6a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7696ddb2-7c35-41f1-9ed2-ca922d388967",
        "cursor": {
          "ref": "15406d4b-9280-4d26-8eb5-2080f12d1f61",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "191872ac-6afd-4ede-8c0b-3f4572ba47e8"
        },
        "item": {
          "id": "7696ddb2-7c35-41f1-9ed2-ca922d388967",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4a0aae76-63a4-4ef0-a3c4-0957d8ba059f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad54b00-a974-4afc-826c-4bc8b875f86f",
        "cursor": {
          "ref": "093e73af-1d27-41b2-be4e-9c2bead471f6",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4d0d5c03-9446-4753-9887-562a3689e24a"
        },
        "item": {
          "id": "2ad54b00-a974-4afc-826c-4bc8b875f86f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5fc280e8-3dd2-45c0-8a36-73dff60c76d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86f43d4-7064-487b-b57e-f703a258e309",
        "cursor": {
          "ref": "cf40d927-c618-45ee-b40c-6677f4c521da",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c9e83e00-3fe8-4f94-a10b-22c4e8cf3b56"
        },
        "item": {
          "id": "f86f43d4-7064-487b-b57e-f703a258e309",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2e09cf01-262e-4d63-87d9-85c7bc1a14e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131b49c7-3965-4fd9-be0a-df3b4b03324d",
        "cursor": {
          "ref": "2beaffa6-8a5d-41b0-9245-1dd1bac3c9b0",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ab36a3d7-a451-4437-a14e-f2f37333b1e3"
        },
        "item": {
          "id": "131b49c7-3965-4fd9-be0a-df3b4b03324d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "bf1fe7bf-4f7f-4376-82b5-83d484c2cd73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65ea3ba-c9fe-42d0-8654-ab3707951b6a",
        "cursor": {
          "ref": "5e23d507-ee37-4c59-9a24-f3cb3f022aa0",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f507c446-eb87-46b0-857a-5a97db1af244"
        },
        "item": {
          "id": "c65ea3ba-c9fe-42d0-8654-ab3707951b6a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ea9868e7-b585-45e8-a815-7138c8967445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "036d5ef5-02ab-4070-960f-4031ceb8d7f9",
        "cursor": {
          "ref": "eed62d72-cd85-4e8f-acd6-5491e6ebd68c",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ff990437-384a-4860-ad60-9dd5c5becdeb"
        },
        "item": {
          "id": "036d5ef5-02ab-4070-960f-4031ceb8d7f9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "42dcd2f8-b6b0-446b-972f-a204af49b4bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c720b8-d3f5-4226-9154-16b58bbf1e31",
        "cursor": {
          "ref": "12b9f716-0709-4434-996b-95b0c48e49ec",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "2524ade7-4687-41d8-8c27-bf3108e0b537"
        },
        "item": {
          "id": "98c720b8-d3f5-4226-9154-16b58bbf1e31",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a408791e-d9d0-4735-aee8-96d005fa642f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d0cedf-bf9c-4a3e-91fb-cbe17768df7c",
        "cursor": {
          "ref": "809006ec-3975-4e61-b6b7-12fad0ad3404",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9878724e-8478-4cd1-9ca6-1347893cd53d"
        },
        "item": {
          "id": "e0d0cedf-bf9c-4a3e-91fb-cbe17768df7c",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "57f2067d-c016-4baf-894c-8e6d244f6ca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b0f0667-d146-47e2-b2de-51a34de1c1fd",
        "cursor": {
          "ref": "1192caee-f8b4-47ce-b71e-5b5b92c79252",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "11b40cfb-ea9d-4934-904b-fba2c2df8676"
        },
        "item": {
          "id": "5b0f0667-d146-47e2-b2de-51a34de1c1fd",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "024eaa8a-ede3-4458-a911-ecc006e158bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff42373b-3b0e-452c-b029-f48120bdb754",
        "cursor": {
          "ref": "b5d6cc1e-5a6e-4601-8086-6eccda9d034e",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "34e760e6-b994-4c23-b848-270045cd59c3"
        },
        "item": {
          "id": "ff42373b-3b0e-452c-b029-f48120bdb754",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "7dd57a0a-3469-4856-8bc2-ff426daf7b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22847c90-013a-4ef7-856f-653ecf1bfca6",
        "cursor": {
          "ref": "f527eba9-64cf-4ee5-8e46-36568e7e6a6f",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "58c0d0ea-a8cf-4eb8-b495-f0547e24f32b"
        },
        "item": {
          "id": "22847c90-013a-4ef7-856f-653ecf1bfca6",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "0718ba45-56a8-4e40-ae43-7f782febe701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb7fc83-2fb0-4237-9309-2974e2f8088f",
        "cursor": {
          "ref": "d6072283-5c4a-4672-aa0f-d25fb7120b06",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c190c8c5-e8ff-4f73-ae4b-735b242547ba"
        },
        "item": {
          "id": "4bb7fc83-2fb0-4237-9309-2974e2f8088f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "176f8ef2-f8aa-457d-bb13-64ff5a1a16e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3cebe7-9c24-47ed-b5f8-9304f46a89bc",
        "cursor": {
          "ref": "12f59b4d-26de-4336-b165-75458debabee",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "63198936-9ec9-4628-93c3-5920d5cdde78"
        },
        "item": {
          "id": "ea3cebe7-9c24-47ed-b5f8-9304f46a89bc",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a10d85ff-ea6b-47d0-902e-e63d1d88e09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5bdad5a-de22-4b70-82b1-6c6706b3fa80",
        "cursor": {
          "ref": "e36e4a96-5155-47fa-ba27-98a4c24d5932",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5f49317a-9eab-4c0b-a9d8-d687dad42812"
        },
        "item": {
          "id": "a5bdad5a-de22-4b70-82b1-6c6706b3fa80",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7a04008f-7cea-4d4b-881e-dec793d4fdd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855d8ec3-c3c4-48df-b3f2-520d73d40dee",
        "cursor": {
          "ref": "3d5989b4-636c-478f-8340-025872b8d1f4",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e20c75ab-240c-4f60-8a16-78efb1bd85eb"
        },
        "item": {
          "id": "855d8ec3-c3c4-48df-b3f2-520d73d40dee",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "71dbe2b5-1b54-4691-bef9-72b10f1e4b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a515a8-b78d-448f-a246-fba35c158c4f",
        "cursor": {
          "ref": "c8c6b735-dc37-4165-ae63-6143a506e298",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "53ed3808-bcaa-4447-956e-25859d01ff1f"
        },
        "item": {
          "id": "24a515a8-b78d-448f-a246-fba35c158c4f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f90ca44f-c7b5-415c-8d39-129bfe810074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3628fe58-546f-46e6-8814-603d0e2aec6a",
        "cursor": {
          "ref": "f1a8e34e-b973-4070-9eb0-5042e261378d",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "43d0f433-80a3-4aca-ab44-da54ccdcc419"
        },
        "item": {
          "id": "3628fe58-546f-46e6-8814-603d0e2aec6a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8b39d53e-d6e6-4ebc-9ced-bbb6f0a223df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f030a675-aa29-4880-8846-0e7773915d15",
        "cursor": {
          "ref": "e9ff18c6-1287-439c-a424-3c9b89fe96a6",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "667ff8d2-57b0-4384-a4ee-ad0acc7be5c9"
        },
        "item": {
          "id": "f030a675-aa29-4880-8846-0e7773915d15",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "28cbe35a-74d8-4b66-b84b-5ff1c46ca44a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b90ee6-d08f-4ead-af9a-a07e013f7f61",
        "cursor": {
          "ref": "0be7dacd-f4d1-49df-a003-9d342e81e2ea",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "71023f7a-acd4-4f20-946b-86320a76d1b2"
        },
        "item": {
          "id": "49b90ee6-d08f-4ead-af9a-a07e013f7f61",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d7f1d5e5-8859-4e90-b9f9-82a8f5f169a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c98b01d-454f-46d7-b1c2-91232baf0e88",
        "cursor": {
          "ref": "efdcb733-664b-4c7f-9da1-f10a7b66b75e",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "06172889-4807-4784-8d83-af2f577f5e23"
        },
        "item": {
          "id": "3c98b01d-454f-46d7-b1c2-91232baf0e88",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0bae2a36-64e7-4cf8-aa20-0de5ff139dd7",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "70d40236-d116-4e70-8bea-7cd6944410fd",
        "cursor": {
          "ref": "7f13a9e9-f84c-4df9-9f17-c714e935e4dd",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "17f462e3-7d2e-44e7-af4e-645ca9bba9b3"
        },
        "item": {
          "id": "70d40236-d116-4e70-8bea-7cd6944410fd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "aa67af58-cad3-4716-a908-c75d87fcd1b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74e1a81-4fc2-4858-bfc6-69282819010d",
        "cursor": {
          "ref": "9c890c17-cbf9-4db7-b50c-8a352a8f9dc5",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "786ab872-3b8c-4edb-b01f-23eb5af3c4f6"
        },
        "item": {
          "id": "f74e1a81-4fc2-4858-bfc6-69282819010d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "61ca9ba5-8a5b-47af-acb4-490c62cd88ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e579e909-6898-4eac-a2c3-4020a747e688",
        "cursor": {
          "ref": "a81d9b2b-b8f4-4b23-9604-ae30dba7d545",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "72d57dca-5914-458d-aed3-a58871babbf9"
        },
        "item": {
          "id": "e579e909-6898-4eac-a2c3-4020a747e688",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1de5aeec-dc5e-4fe3-8ecc-fc768c2f9bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e95875-7699-450a-b8ba-a4136a5c8e01",
        "cursor": {
          "ref": "8651072a-0df3-46f1-869b-2a76b0181a8b",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0e922d91-306f-434b-98cb-478d300973ce"
        },
        "item": {
          "id": "67e95875-7699-450a-b8ba-a4136a5c8e01",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b0d10ba6-7b30-4dc8-a826-5e14e1eed7d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955dc67e-bce2-404c-971d-8ad11774116a",
        "cursor": {
          "ref": "f02fb49e-c903-45c7-83f1-27092b5cbd52",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ab985fd0-5235-4eb1-b790-14d3189ee2e4"
        },
        "item": {
          "id": "955dc67e-bce2-404c-971d-8ad11774116a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "21a8a68e-dcae-496d-973e-5817b39beaec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b961a13-3494-44d7-93b9-f97d468caa89",
        "cursor": {
          "ref": "83da3fa2-01b4-4b5d-b728-55691ce9b4a2",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6b55bbe5-c98b-435d-8af8-253de7cc5da5"
        },
        "item": {
          "id": "6b961a13-3494-44d7-93b9-f97d468caa89",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3f054e47-9fc8-4b59-8827-0af1fc728d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c9e4cc-13e5-4d65-b64f-bbe5bab3b5ce",
        "cursor": {
          "ref": "c6ff41d7-09fd-4cfc-97a9-a86435568a91",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "02296d8d-cd04-4e37-b34c-ddba969b55e0"
        },
        "item": {
          "id": "d2c9e4cc-13e5-4d65-b64f-bbe5bab3b5ce",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b024262a-12bd-4acf-ab97-7fd11a359301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451c6f04-6b2f-4779-ad29-b2fb5027ce22",
        "cursor": {
          "ref": "9115104c-62d1-4c03-bfdd-00350b20aa45",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b4895873-7621-4d7d-9a73-0529a5738a49"
        },
        "item": {
          "id": "451c6f04-6b2f-4779-ad29-b2fb5027ce22",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "30291204-db9b-424b-80e8-0a8024b9f2ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c863f0ad-fc8b-40ea-ac2a-3963babc6161",
        "cursor": {
          "ref": "f9356871-3595-4740-ad0e-f6b11699f04d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "254b51a5-ede4-4f38-a905-4a45653aec24"
        },
        "item": {
          "id": "c863f0ad-fc8b-40ea-ac2a-3963babc6161",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "36bb8365-fe3f-4739-9207-19dde49b5d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae920398-4f43-4d31-ac43-392b19ba55a5",
        "cursor": {
          "ref": "6a7842ee-5c48-4bc6-96da-515417d080a1",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b3a945d4-d2a2-4274-9e5a-bb1143dde895"
        },
        "item": {
          "id": "ae920398-4f43-4d31-ac43-392b19ba55a5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8161477b-5d79-40fb-a0ba-81edac4a8879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d074bd00-06a1-4d08-abde-b17afbaa9dac",
        "cursor": {
          "ref": "68abc448-4511-4646-b974-67a5d1bd4a2f",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a5077be1-bbb7-442f-907e-7d4020e46767"
        },
        "item": {
          "id": "d074bd00-06a1-4d08-abde-b17afbaa9dac",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f28bd840-49bc-4c75-9d86-d93a8c4687f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772b7372-f747-4c5a-b65e-a59f94b5a301",
        "cursor": {
          "ref": "597c5075-810d-4881-876c-eb2fec9956c8",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "80ccf673-9c38-4f0f-959d-7936478dd537"
        },
        "item": {
          "id": "772b7372-f747-4c5a-b65e-a59f94b5a301",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d45d2e50-23e7-4bf4-939b-35f5177a5497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215c3b5e-87ba-4d6c-8a2c-8707c9598253",
        "cursor": {
          "ref": "e257f5de-21bf-4e94-823b-56d1844dae9a",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "012fa9a0-f182-41dd-be7b-5745445f725a"
        },
        "item": {
          "id": "215c3b5e-87ba-4d6c-8a2c-8707c9598253",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "45768a5c-a46c-4247-9214-2881992585f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a481b3-358c-48a1-950c-7f10a254a4f5",
        "cursor": {
          "ref": "dbdd43ad-ca60-471f-8272-166c94c6edcc",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e829f018-fff6-49bb-b5d2-a512165a397d"
        },
        "item": {
          "id": "d2a481b3-358c-48a1-950c-7f10a254a4f5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5a5dd397-4101-49ef-95f4-77d9b7edf083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd7b604-109b-4bf3-8325-f5899fe61d9d",
        "cursor": {
          "ref": "a80a9ced-eb7e-47a7-ab2c-ee43beed80c0",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "39a7414e-e02c-440e-a4d6-4abfd5d47d65"
        },
        "item": {
          "id": "ffd7b604-109b-4bf3-8325-f5899fe61d9d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9a238ce8-82a4-48e9-9bbb-b4cef5049f8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6165fd1e-fa1b-4caf-9139-6d52b9dc2ac5",
        "cursor": {
          "ref": "3226c6a8-2607-4f53-a8ba-dfaf3a3a4c63",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "20658f07-e09b-401d-853c-dac54dc2c059"
        },
        "item": {
          "id": "6165fd1e-fa1b-4caf-9139-6d52b9dc2ac5",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7fb617ea-aa00-4813-8332-60ea9ba5117e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46632dcd-7a62-4ebd-94e8-05fe2fc6daea",
        "cursor": {
          "ref": "3dff6614-f212-4301-8974-4676e4d38060",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e0c6721c-cad8-4983-9cb4-551e41e399fa"
        },
        "item": {
          "id": "46632dcd-7a62-4ebd-94e8-05fe2fc6daea",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c1d3893f-0a0e-4d58-b05a-cd7ce44a2db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac9be74-6fd9-41f4-8309-56811cb389f0",
        "cursor": {
          "ref": "3ce125ce-1a4f-43f6-b435-d5ddf30313a8",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "06ebbbed-f389-4dac-bbf7-1449118078a5"
        },
        "item": {
          "id": "1ac9be74-6fd9-41f4-8309-56811cb389f0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "42e986f7-8ecf-45cc-992a-a728c70e2713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2692a23-aa46-4db6-90a2-3352a37f5301",
        "cursor": {
          "ref": "8fc24440-adc1-46f2-ad40-073648234126",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "544e91c6-7aec-4e4b-ad90-58845703b244"
        },
        "item": {
          "id": "d2692a23-aa46-4db6-90a2-3352a37f5301",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f73458fb-b3c9-41d5-ac90-7a94356c6dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c309cf-76e1-4779-b217-7345a0e5662a",
        "cursor": {
          "ref": "7c12fbb5-8d1e-4681-832f-1e9ae909244b",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0136cfd7-bc89-40b0-b574-1b0123a8624c"
        },
        "item": {
          "id": "c3c309cf-76e1-4779-b217-7345a0e5662a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9f6ae4c0-c01c-4183-b52c-33ece486181d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52a2615-4fe5-488e-972b-aba36eb93c35",
        "cursor": {
          "ref": "54628eec-4638-40e8-ad82-0bb3163f19c2",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "db300073-c069-4813-9d5c-9c1f8067f8cb"
        },
        "item": {
          "id": "d52a2615-4fe5-488e-972b-aba36eb93c35",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "79db3f85-84e0-4235-b2e7-c37f5dd12644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edab42f5-7d94-45a1-902f-aed0c53da970",
        "cursor": {
          "ref": "9728592d-53d2-427d-b1e1-bbaab6565263",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1478e71b-5fd3-4abc-a4d6-f2d2a53b3db3"
        },
        "item": {
          "id": "edab42f5-7d94-45a1-902f-aed0c53da970",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f59e78d8-cb21-4f23-a32b-87ee04c2995e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dfdb349-c5d4-4832-bfe8-349fb3e0cf43",
        "cursor": {
          "ref": "96ee4861-9bb2-4982-8057-4511a3705998",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "405dd96f-76c0-4b3c-bb50-6bb8f22423ba"
        },
        "item": {
          "id": "0dfdb349-c5d4-4832-bfe8-349fb3e0cf43",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c4c7747a-9b30-41f1-9e75-69e112489ad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a58ab0-0581-44fc-b5a3-bad877a60d70",
        "cursor": {
          "ref": "487cc7e7-6a0a-4eba-aed0-363b0a10202a",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "722a8d18-21c8-4d99-86ad-1b9164173cd6"
        },
        "item": {
          "id": "c3a58ab0-0581-44fc-b5a3-bad877a60d70",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5033426a-6f3c-4785-8a88-ec790cff1593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16e4e59-c59a-427c-a399-84d1fded4132",
        "cursor": {
          "ref": "f8d5cebe-b16b-418a-96a7-92c76521fe13",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e5c4ea51-8584-466c-bb64-362fb2c27563"
        },
        "item": {
          "id": "c16e4e59-c59a-427c-a399-84d1fded4132",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "360ff9f8-9bbc-44de-81fd-481e124c9b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ecf076b-67dc-46bb-b7a4-ec8acc9bf493",
        "cursor": {
          "ref": "e85188e8-fdcc-418f-abbc-aa626b81cc86",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d37ae4ea-c554-4deb-9d14-0dd5d2dcf45b"
        },
        "item": {
          "id": "9ecf076b-67dc-46bb-b7a4-ec8acc9bf493",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "18cb0596-ea5f-4729-9ef7-fadfbef4abbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6bbc316-cc31-4a27-aba5-03f0f225e0d1",
        "cursor": {
          "ref": "877aac90-7507-42e1-87e3-a04f79e043b7",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1faa2989-617f-454a-8efa-1779fe05a168"
        },
        "item": {
          "id": "d6bbc316-cc31-4a27-aba5-03f0f225e0d1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "743d4ccf-4b06-484c-a588-7529c9c3d95e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473987fe-21f5-4348-b600-d8c2c4017872",
        "cursor": {
          "ref": "b41fc302-dae1-4d81-8a46-e96f61422b64",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2d8d89dd-6e51-46c8-81e7-4c89c04cd995"
        },
        "item": {
          "id": "473987fe-21f5-4348-b600-d8c2c4017872",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "93945127-ac33-4b30-b130-d9512cf67b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741fc909-3b9e-4e36-830c-629e917f49c7",
        "cursor": {
          "ref": "ebd01767-1fbc-4981-a103-2feb70284ef4",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b2adfecf-50c4-4b65-9d79-8b1eabe33917"
        },
        "item": {
          "id": "741fc909-3b9e-4e36-830c-629e917f49c7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "559ce4d6-a9fb-41ef-9223-f623c27667d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c75840-baee-4fbe-b0cb-cb3aefaf9db0",
        "cursor": {
          "ref": "2f7b65e9-9369-4ecb-825b-8159e6ed9e3e",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1c00b229-001e-4ac7-9cc2-7ebd5f2cb3cc"
        },
        "item": {
          "id": "95c75840-baee-4fbe-b0cb-cb3aefaf9db0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ba2e6994-ef78-496f-bb32-3418a5295185",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "2ff90796-d049-452c-bc1c-2c0985177b2b",
        "cursor": {
          "ref": "ff9747fb-4b99-4c3f-936d-5c1702043675",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4974d015-0e97-47f7-8c89-b8de8be0c169"
        },
        "item": {
          "id": "2ff90796-d049-452c-bc1c-2c0985177b2b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "03862408-ffa9-48d5-abed-76a479aee122",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "8956afa2-7edb-47dc-8b96-ac7247c5c14e",
        "cursor": {
          "ref": "73253cb8-4ed9-4973-9ed8-e00717e2aab4",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "72320007-fe0a-4c65-8bd2-b82e5d2b9174"
        },
        "item": {
          "id": "8956afa2-7edb-47dc-8b96-ac7247c5c14e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fe00fee4-7a00-4b2e-8f17-31dfd4c72eb3",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "8c462709-36a9-40b9-8e2d-fa862b1fcc2f",
        "cursor": {
          "ref": "7ecbdb77-68ba-414b-aeb6-f8ebb2486a0b",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f9f6dee2-05bb-410f-b6f9-ea4dbf49d624"
        },
        "item": {
          "id": "8c462709-36a9-40b9-8e2d-fa862b1fcc2f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ed9d58c7-fde0-4fb6-a098-ce42e86d2796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7572a3dd-1d39-4241-a5ad-be7d450b61e4",
        "cursor": {
          "ref": "a37c058d-8459-44c4-99b9-291ac27b461a",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a84110cc-7e1b-4899-968a-f2597f6663a1"
        },
        "item": {
          "id": "7572a3dd-1d39-4241-a5ad-be7d450b61e4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "149c6967-7d0d-4ef1-85e4-9b18fbc4af3d",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "c2bcf6dc-7d7b-4bd9-be4a-41062cda836b",
        "cursor": {
          "ref": "eeadef62-3bee-4373-86e0-53429db8b69f",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "713a88f6-0d1e-42d6-b014-53ab602ac765"
        },
        "item": {
          "id": "c2bcf6dc-7d7b-4bd9-be4a-41062cda836b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b00e72f6-121d-44fc-ba61-ba074e2bb228",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "240ecbfc-bf9c-44f2-ba08-571ddb6a67cd",
        "cursor": {
          "ref": "b0854d56-9ec1-4d87-a883-24f12dcbfad7",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a5ab9aed-fee9-42d3-a648-067eef731c2c"
        },
        "item": {
          "id": "240ecbfc-bf9c-44f2-ba08-571ddb6a67cd",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4253965a-9a81-4533-975c-1a604c05c529",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "b669a8e7-ebf2-4ade-82b5-6918cb1bf926",
        "cursor": {
          "ref": "3c54b641-8bbd-4850-a247-ae3960751f34",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "30112269-f120-4b73-9a47-03b4651b75c6"
        },
        "item": {
          "id": "b669a8e7-ebf2-4ade-82b5-6918cb1bf926",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9f50079a-ecfb-4857-9fae-d32cb34c3a21",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "e328cb5b-3034-41f0-b8fa-90cd0e0fe73e",
        "cursor": {
          "ref": "ae85b2c5-f619-4ae0-aa8e-f59245c19c2e",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4fbb0193-383b-48b2-93c1-78d063e12987"
        },
        "item": {
          "id": "e328cb5b-3034-41f0-b8fa-90cd0e0fe73e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4788032e-a56a-43c4-867c-464f0f660a9c",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "57e59450-8749-4c5a-8b03-37c87cb9e1f7",
        "cursor": {
          "ref": "76a40d45-b74d-4843-90ef-b907d6d9c723",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "be52b56e-6305-4284-9fa2-9dbc186d4472"
        },
        "item": {
          "id": "57e59450-8749-4c5a-8b03-37c87cb9e1f7",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0e1ea94d-5e68-46b9-9a78-06e96171e0fd",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "8d859ca1-f6d7-49c5-9cac-a91d152d30bb",
        "cursor": {
          "ref": "28c1bed3-4c66-4c4d-8e33-ea79e487311d",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "631493c4-a025-4bca-8ae7-97c1d2a7c8a1"
        },
        "item": {
          "id": "8d859ca1-f6d7-49c5-9cac-a91d152d30bb",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d6231416-94cc-43e3-ab39-f0f616cae20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9568a6c6-7fc5-4ea0-a934-5ff495336aa5",
        "cursor": {
          "ref": "dc9a847e-c6df-4f16-963c-46b6933fd7be",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "26c45f07-31c0-4128-b1ff-9f5d2733380e"
        },
        "item": {
          "id": "9568a6c6-7fc5-4ea0-a934-5ff495336aa5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "38b101fb-3ab2-4a29-8d79-54cd4f8363c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0867a99f-fd9a-4d7f-b55e-908fe729b142",
        "cursor": {
          "ref": "4e66c37a-9a8f-44eb-9d19-387a7b6b1696",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6e8ba59c-73a5-4163-96f7-7c2fa1a433b4"
        },
        "item": {
          "id": "0867a99f-fd9a-4d7f-b55e-908fe729b142",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "25360015-b2e2-4df0-9795-e947b8287fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b5f63b6-4ea4-4f61-baa4-b89863cc21dd",
        "cursor": {
          "ref": "8fb7a283-ecca-42be-ad93-48a9713f59c7",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c093abfd-b107-4ffe-826f-183c42c6c5be"
        },
        "item": {
          "id": "5b5f63b6-4ea4-4f61-baa4-b89863cc21dd",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a1bd1345-30e5-4c44-8c59-c636e28077cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06214921-2f2a-4bf5-b9c4-679762435c4e",
        "cursor": {
          "ref": "d3c733e6-6db6-44fe-a3fb-ba867d91462f",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "88327cb9-0753-40b3-bf5d-b1a70e354759"
        },
        "item": {
          "id": "06214921-2f2a-4bf5-b9c4-679762435c4e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8733210a-449f-4d5e-8ab5-abab1641320d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfca442-8351-4769-9040-cd375331d14d",
        "cursor": {
          "ref": "e0c0716a-9541-4d6b-9b3d-108d1ac609c0",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7092ede0-37a6-4f04-a01c-76a85fc81039"
        },
        "item": {
          "id": "8cfca442-8351-4769-9040-cd375331d14d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2bd2dc70-95d6-42ae-aea3-fc6576dfa316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535e6765-f0c7-4cee-b601-70078ea82fa7",
        "cursor": {
          "ref": "4de534f3-a220-4725-b6ed-c7a099eff038",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "496e85d2-805c-4206-a06e-41294d69d0cf"
        },
        "item": {
          "id": "535e6765-f0c7-4cee-b601-70078ea82fa7",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2c7932bf-96c3-4f3d-82f7-400bab6b7a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda04fa8-3b16-4bfa-aa39-5b26244db69c",
        "cursor": {
          "ref": "a41ad179-e151-4d72-a3ef-52fcc66fe578",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "de02c904-90de-4272-8432-8c855a15e4b7"
        },
        "item": {
          "id": "eda04fa8-3b16-4bfa-aa39-5b26244db69c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "93717e69-e38e-4ded-a52f-0fd263d16e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19871a39-1d1c-4565-adf9-a2212c57d752",
        "cursor": {
          "ref": "05afb579-ada6-465e-91d2-146b62742f49",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8cf307ee-1a02-41de-a8e2-813572551e3f"
        },
        "item": {
          "id": "19871a39-1d1c-4565-adf9-a2212c57d752",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "bd3717f6-b16c-431f-b95f-0f331932b93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d53276-dbc7-447a-b280-0f0968cf7885",
        "cursor": {
          "ref": "286d1b98-9bff-4e3b-96ba-6f0d91cd5a22",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8e6534cc-1863-4021-bc4c-a2878d049730"
        },
        "item": {
          "id": "49d53276-dbc7-447a-b280-0f0968cf7885",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4f30bf5e-185c-44fc-93d6-fbf4711ec48b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e5dfea-6e1d-495c-aa45-a1a244d3e97b",
        "cursor": {
          "ref": "433264fd-9a15-471c-aad0-74fbb703324d",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "49f5f948-0aab-4071-84cf-e74a27491735"
        },
        "item": {
          "id": "07e5dfea-6e1d-495c-aa45-a1a244d3e97b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b3362261-40b9-4c34-bd4f-fb28649ecc58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807574d8-2c48-47f9-aa01-59fc4fb279f1",
        "cursor": {
          "ref": "11c16461-c137-498c-9cf7-339d94b99769",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7031caeb-605b-4a87-a24d-06fc4ae0a284"
        },
        "item": {
          "id": "807574d8-2c48-47f9-aa01-59fc4fb279f1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "aead50be-b0ab-4520-9ca3-f048a7d00e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63395c9-57fd-48a5-93ed-f6f2ecb2e09e",
        "cursor": {
          "ref": "0443557d-0c7c-4a7f-81b0-af06939e0647",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "220e9417-d2cf-4482-85c2-c7652c561e89"
        },
        "item": {
          "id": "f63395c9-57fd-48a5-93ed-f6f2ecb2e09e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0985b679-e692-4b2b-a047-f77f574c896b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a2baf1-f269-43f8-9b23-bc5382270b2a",
        "cursor": {
          "ref": "bb9af194-5bca-4f3e-b72d-17865e913ef0",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "39ad1c1d-9c40-43cf-834e-ed3375b7a6a0"
        },
        "item": {
          "id": "02a2baf1-f269-43f8-9b23-bc5382270b2a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d8dfbf5a-6dff-420e-b7dd-fcd83af4a59f",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "14e57d05-4195-48a0-88ca-084ad48f9f3c",
        "cursor": {
          "ref": "2c9592f4-b179-4f57-b923-3f0eb815e2f6",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "83fe62fb-f433-4af3-9d15-d06ced206d69"
        },
        "item": {
          "id": "14e57d05-4195-48a0-88ca-084ad48f9f3c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "44f1e09f-5d22-4675-aa21-49973fd5d06e",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b8ab0754-3314-4080-9cf2-7a59cca47090",
        "cursor": {
          "ref": "cddb749b-bf3c-4876-abaa-8def07df66d5",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c0639cd9-a0f9-4ea0-b496-240e3a05fd56"
        },
        "item": {
          "id": "b8ab0754-3314-4080-9cf2-7a59cca47090",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d048c8f1-df49-41b5-b62f-dd2816079e6f",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "fe30662a-9c7d-4a8f-8ed4-217dc76aa7fa",
        "cursor": {
          "ref": "a9f38fd4-2288-4b56-bdd5-8e462cd777a1",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "693e775a-3d49-4283-b569-d221de023146"
        },
        "item": {
          "id": "fe30662a-9c7d-4a8f-8ed4-217dc76aa7fa",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5b177bcf-42f4-49e0-a53f-e28f9ac15301",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "35a74937-7ea2-421d-ad55-acefd3f2aa0f",
        "cursor": {
          "ref": "bea83c8b-cf2a-4a69-a52e-baa222308da2",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "80a9d99a-e924-4af2-ad54-85786ecd69e3"
        },
        "item": {
          "id": "35a74937-7ea2-421d-ad55-acefd3f2aa0f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e0453e53-d711-4439-b056-2f6979f92cda",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "f3cd7a80-c138-43bc-a432-711d69b50274",
        "cursor": {
          "ref": "52ba4a68-5a1d-4683-9a30-3affd1200e22",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a543809e-3130-4a78-9b97-f15ec28fd489"
        },
        "item": {
          "id": "f3cd7a80-c138-43bc-a432-711d69b50274",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "68e21d59-6717-409c-9f93-7e3653a9cec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2866199-43e6-4de7-bed2-7540034a3426",
        "cursor": {
          "ref": "9c63639a-43bc-4940-8ab8-f97b1b9695ba",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c2621b2b-dc80-4f3b-80a1-4d17c060776c"
        },
        "item": {
          "id": "e2866199-43e6-4de7-bed2-7540034a3426",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ea95c9ec-58be-4f86-b1c9-7847b7b02ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab560eb5-b8a1-460b-9ea2-1fa6d259233a",
        "cursor": {
          "ref": "64016e18-9a81-49de-9d5b-3ecb943b6ae0",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "16ce6e18-b6d8-4e53-814a-c3faa11b3ed5"
        },
        "item": {
          "id": "ab560eb5-b8a1-460b-9ea2-1fa6d259233a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "24317f1e-d470-41a1-95d2-c9d7fec72976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c32d38-2aee-4908-8ecd-efa061bc7cdc",
        "cursor": {
          "ref": "4da98814-d5a5-4cdc-9a18-26314943f57a",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e14af3cc-a69d-46b2-833c-81c419d57b92"
        },
        "item": {
          "id": "f7c32d38-2aee-4908-8ecd-efa061bc7cdc",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "673ad0d8-7731-4bea-b60b-b43315be9bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc98fc83-8a02-4fc5-b420-df7efefd4369",
        "cursor": {
          "ref": "0e7fb319-b75c-4c59-a127-f3116e3d6149",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "db1ad858-9be9-4b40-96d6-63530f1126d9"
        },
        "item": {
          "id": "fc98fc83-8a02-4fc5-b420-df7efefd4369",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5766a45d-128e-49a2-b98f-503fe55ca16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a721e5-bc94-4082-84a7-0ab3e2ccc36f",
        "cursor": {
          "ref": "00f46b89-6793-45a1-93ec-5032cc157ed6",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "cbb7f6f7-7878-439a-add8-0f97778e6a32"
        },
        "item": {
          "id": "f3a721e5-bc94-4082-84a7-0ab3e2ccc36f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "61db069b-0e8d-4aa4-bd6c-93d3244264ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12229fb0-2eaf-4ecc-ace2-9e692260ee00",
        "cursor": {
          "ref": "e5e4c878-aabe-4098-88bf-4d645a7196b3",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a9b3bb0e-9f06-42b3-b075-186c4fa2d759"
        },
        "item": {
          "id": "12229fb0-2eaf-4ecc-ace2-9e692260ee00",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "a3331366-de3d-4979-ad71-5d5d9f74e416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68975c7e-6ed4-461b-b544-c92fa8b251ba",
        "cursor": {
          "ref": "c69881a8-202b-4329-8163-06f9dd544f69",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "43267d42-fd27-4267-952e-92dcacb2225a"
        },
        "item": {
          "id": "68975c7e-6ed4-461b-b544-c92fa8b251ba",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d40e5f68-9346-44c5-b5fd-b9bbbf1b9906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8297782e-2bab-42ee-b2c6-eaabf9cb2c6e",
        "cursor": {
          "ref": "87a5dfcd-c995-4eb3-b0b7-5e813f4afdc7",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a6fa5445-78f0-4df8-b705-880dc99fa9bc"
        },
        "item": {
          "id": "8297782e-2bab-42ee-b2c6-eaabf9cb2c6e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2ee1ddf9-7f64-4052-8c68-3db54b35fc8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730173f4-ea8e-4606-a3fd-80cf4459e034",
        "cursor": {
          "ref": "096e8dfc-0bdb-4143-9d30-8ab515ebed1e",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6622b9ed-3832-4ced-84d6-326f1de6fa8f"
        },
        "item": {
          "id": "730173f4-ea8e-4606-a3fd-80cf4459e034",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "29b1e6ef-4409-435e-8cf3-aaf4fde13976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96567a42-d593-44c8-bf2f-86c4a1ad53af",
        "cursor": {
          "ref": "4ce5ebd8-fc2e-432e-b238-87c5f2ea91f8",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c54230cb-e754-4d64-bf90-4074636c67d1"
        },
        "item": {
          "id": "96567a42-d593-44c8-bf2f-86c4a1ad53af",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "dc9cbaef-a095-4c41-bbd7-c4da4b542e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33c25e7-e822-476c-8d75-90979d9fe7f2",
        "cursor": {
          "ref": "21b1fdfd-ac75-4933-ba80-20e5e6470369",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "c2fad43c-c1a3-4b07-b89c-ea3b37012b9e"
        },
        "item": {
          "id": "b33c25e7-e822-476c-8d75-90979d9fe7f2",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7d12c166-8390-4d0c-a4ed-cf17c2b26153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aea297f-1571-4be0-ae04-01d1f48ef0cb",
        "cursor": {
          "ref": "5c47cb1f-ff64-4686-972d-c6e4fd467ca4",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "9ed89d6f-b970-44eb-aaca-8a58eb0889af"
        },
        "item": {
          "id": "3aea297f-1571-4be0-ae04-01d1f48ef0cb",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "2424481c-bf76-48e4-bd09-e32bae72860d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3b78ab-60a2-42b4-a5c0-a3591f945827",
        "cursor": {
          "ref": "5a620d59-7760-44db-a6c1-9530e08f4391",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "2f408394-f7b8-4e57-a6d8-41f86f5d45b6"
        },
        "item": {
          "id": "be3b78ab-60a2-42b4-a5c0-a3591f945827",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6cfe8a9d-9277-4558-8631-ec4a78eddda6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ce1c37-0733-4236-bb78-82865c59a400",
        "cursor": {
          "ref": "9db75b13-9425-484c-b7d5-baaded9ad5bc",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "1451f3f1-1371-4fcf-b5fc-8b5024ac1980"
        },
        "item": {
          "id": "d1ce1c37-0733-4236-bb78-82865c59a400",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "50ad7430-5f8f-4fd8-91d9-d51d08950c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1524231-56a9-4d56-a34f-52ee456e1f1e",
        "cursor": {
          "ref": "606e943c-fe4a-4e35-b160-5c2b10759ded",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "198a9c42-2e4c-454a-95dd-dc4449f20ce1"
        },
        "item": {
          "id": "e1524231-56a9-4d56-a34f-52ee456e1f1e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9993f0c2-34f8-4f36-8227-5914252278b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1566e39-caab-4cbf-b9b4-6bd3923c0394",
        "cursor": {
          "ref": "fcbd22ff-66cb-49fc-959e-3464fce9049a",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "051ef470-fcb9-4bcb-9238-e3bda68f9072"
        },
        "item": {
          "id": "e1566e39-caab-4cbf-b9b4-6bd3923c0394",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4173baff-fa13-4b64-bc10-273feb072d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924230dd-892d-43df-a3e3-8330fb2bf6b4",
        "cursor": {
          "ref": "1d590366-2fe9-431d-9a2f-cbcfbfe05d8b",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "ae8e98ea-1c1b-4956-ac80-b942ebd9a88d"
        },
        "item": {
          "id": "924230dd-892d-43df-a3e3-8330fb2bf6b4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "49894959-f32c-42c0-ba41-fee7853a80d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bd792bf-44df-4c00-9839-77049db83c7d",
        "cursor": {
          "ref": "30008ad0-f007-49a1-8af7-ef44c35d1c18",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "6a7b9c48-9ad6-46d9-a367-54d70bb53f0e"
        },
        "item": {
          "id": "8bd792bf-44df-4c00-9839-77049db83c7d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4a396834-828e-4581-b07f-33723cda8b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f22b8ee1-c557-45b4-8a73-ebf0d913330a",
        "cursor": {
          "ref": "051e4416-068b-4ce9-aae7-d1346d763279",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "79b6f8e8-cc7d-438f-9f04-5716f0007ce9"
        },
        "item": {
          "id": "f22b8ee1-c557-45b4-8a73-ebf0d913330a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6c6e9d3b-4c95-486f-bf50-d0d288f25f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27858329-ad1b-4138-895b-2e89a1498444",
        "cursor": {
          "ref": "ce7e57a2-428b-4e88-98d2-fc1b7b65bc2a",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "3f6945a5-e7dd-4bc2-b1ea-49841b91a020"
        },
        "item": {
          "id": "27858329-ad1b-4138-895b-2e89a1498444",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "87b5906f-e425-4fb5-b09b-1617610eeb90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e28e90-0752-483d-b234-5a3294a9b1e5",
        "cursor": {
          "ref": "03a6fcd3-0bfd-47ab-8ed9-92bf44960a3b",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "298789f2-118e-43a3-b141-53aaf2e90049"
        },
        "item": {
          "id": "d3e28e90-0752-483d-b234-5a3294a9b1e5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ef0fb163-fae4-4fcf-b7a8-ac7761cec007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1bddd0-8488-48e2-be0b-41a0b77e9efc",
        "cursor": {
          "ref": "bbacbdee-f0c1-4403-b106-61899713d2ca",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "88e4149f-c023-4e16-92e1-43405629b8db"
        },
        "item": {
          "id": "da1bddd0-8488-48e2-be0b-41a0b77e9efc",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "63d5ddbc-b514-4294-a651-5bb66c37a035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f26c2e-fd17-4a1a-9482-9a5be90af50c",
        "cursor": {
          "ref": "fa44a8ea-9504-4056-946c-56a147e2d002",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "96144122-77d0-4aff-9dd2-4907b3d2f56c"
        },
        "item": {
          "id": "e0f26c2e-fd17-4a1a-9482-9a5be90af50c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c151eb44-9573-46f5-a8db-0408930b82ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ad205f-21eb-46b4-b119-fe5dbf923c71",
        "cursor": {
          "ref": "4c146f3c-8a4d-4345-aca3-b576ace0a455",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "f460110a-e256-4867-b0d5-1dc533307dfc"
        },
        "item": {
          "id": "16ad205f-21eb-46b4-b119-fe5dbf923c71",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9b3a3e37-3560-4734-b017-54214f73e124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa6b410-129a-474a-80ba-bfd6b44ab5ab",
        "cursor": {
          "ref": "bf69710a-9e6a-4d4f-85c4-5d23a89fc98f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "7a5dd1a2-2985-4190-b583-7bcf19dc62a1"
        },
        "item": {
          "id": "faa6b410-129a-474a-80ba-bfd6b44ab5ab",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "606660eb-333d-458a-953e-25f8150e7f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3860f718-b01c-4b45-9c74-a3345777aef2",
        "cursor": {
          "ref": "3f449a09-fbdb-43b6-a0b6-b5efad29d2cb",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "524fc3cb-21b0-4390-b291-204a55047fbc"
        },
        "item": {
          "id": "3860f718-b01c-4b45-9c74-a3345777aef2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f614c0b2-e2ec-4557-bd45-3ca41f3f7cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9dd80b5-905a-44fa-b26d-1b59bde65136",
        "cursor": {
          "ref": "e73d8ee6-8455-4fac-97f7-280c7388981b",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "e592a2d7-82d3-4148-aa8c-7c472bb6a9e8"
        },
        "item": {
          "id": "c9dd80b5-905a-44fa-b26d-1b59bde65136",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "82f73df4-5474-4315-abed-51648b26809f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca06dc9-a9cf-4b99-b0e6-1e98513d09b9",
        "cursor": {
          "ref": "ee848094-e793-4f9d-963c-f39463b60057",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "3cff21ab-08ae-4aa1-acaa-e5f3a6906140"
        },
        "item": {
          "id": "3ca06dc9-a9cf-4b99-b0e6-1e98513d09b9",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a29fc92c-6105-465e-9e0d-04d5ea56e378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe3a14b-9944-40fd-9315-825705193a90",
        "cursor": {
          "ref": "0c66c8fc-b491-4f6a-84a7-c3d1712ee1a0",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1fd7e5d7-ca71-453c-a85e-6c8176c2425e"
        },
        "item": {
          "id": "ffe3a14b-9944-40fd-9315-825705193a90",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "efa32ffd-cc48-4cd8-8674-5a1d8a49f558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ff0600-e65f-40b0-88c7-8bbe254b1368",
        "cursor": {
          "ref": "08b0daee-e7fd-4974-91ec-e1d9f14c8405",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "6f33b4cf-f853-4093-a6d7-d38ba1657e7b"
        },
        "item": {
          "id": "73ff0600-e65f-40b0-88c7-8bbe254b1368",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f4ffe46a-1f82-438a-88b5-91d608b299f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a55205f-8e3a-4b23-a4eb-d53b4c75aefa",
        "cursor": {
          "ref": "b825054d-bcf6-4ba0-b231-42f097227815",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "0e430164-3dfb-46d6-b00d-9b5c5d718326"
        },
        "item": {
          "id": "1a55205f-8e3a-4b23-a4eb-d53b4c75aefa",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "49ed0b29-5508-4225-a0ca-779a32237901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e4d5ee-bd2e-4c90-a774-fef9aba57221",
        "cursor": {
          "ref": "879ed80e-01b8-4ec6-9bbc-c874b3dae431",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "7e036e66-6d14-434d-b177-ab9834e4532f"
        },
        "item": {
          "id": "e6e4d5ee-bd2e-4c90-a774-fef9aba57221",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3d6ca7c6-3632-40ea-b4ca-1eec82b84b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28f420b-5e39-4b12-9c85-5651a1ba9b03",
        "cursor": {
          "ref": "33ce44b1-629b-47d1-a39f-369347c3fc53",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "cd49ec1f-f97b-48e5-b805-5849b770e519"
        },
        "item": {
          "id": "e28f420b-5e39-4b12-9c85-5651a1ba9b03",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "190706bf-a226-4667-9dcf-16defdf39cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c26794-27bc-476c-b2d3-e99150e28e9c",
        "cursor": {
          "ref": "762207d8-5882-4367-87eb-6aaa069712e1",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "51e8dd97-18a1-4f61-acd4-dac487ea8da4"
        },
        "item": {
          "id": "d8c26794-27bc-476c-b2d3-e99150e28e9c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "36c3cfed-f13a-47c6-8cc1-498a111e4248",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b2fd87-2fad-45bd-a764-f491e492f4f5",
        "cursor": {
          "ref": "114407d7-9da6-40a1-b395-39f7e3981c1e",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "e18367a2-f019-4774-91dc-0320942f8914"
        },
        "item": {
          "id": "f9b2fd87-2fad-45bd-a764-f491e492f4f5",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "06ac1e8b-45a0-4220-914d-0bc69eba90a7",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "17ea6a09-a101-46b1-9fa1-1305824d92b6",
        "cursor": {
          "ref": "62f8d536-a1b2-474c-898f-c10b22f415cc",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "05c21e3c-8606-447a-8edb-a0bc95b60582"
        },
        "item": {
          "id": "17ea6a09-a101-46b1-9fa1-1305824d92b6",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ebd93f29-71e4-4492-9562-cd449f48d30e",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f873566-bde7-46a0-a738-c512a0961584",
        "cursor": {
          "ref": "7ad786f9-6241-4f94-9985-91463a987aad",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0d4d377c-db83-4be6-9ac1-cec6bcf061f5"
        },
        "item": {
          "id": "0f873566-bde7-46a0-a738-c512a0961584",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0e3a6643-5475-4219-81f2-0016c8abe248",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3561761f-626d-483a-96e3-1a3bdcc17b85",
        "cursor": {
          "ref": "c84db936-e20e-4548-941b-82c198924fad",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "da0244cc-d195-413a-9800-adef7b91ac99"
        },
        "item": {
          "id": "3561761f-626d-483a-96e3-1a3bdcc17b85",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "abe6f09e-3d49-48dc-9dc3-7dc741f5c73b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3561761f-626d-483a-96e3-1a3bdcc17b85",
        "cursor": {
          "ref": "c84db936-e20e-4548-941b-82c198924fad",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "da0244cc-d195-413a-9800-adef7b91ac99"
        },
        "item": {
          "id": "3561761f-626d-483a-96e3-1a3bdcc17b85",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "abe6f09e-3d49-48dc-9dc3-7dc741f5c73b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cdce556-2211-4725-8c3c-7856a7dec216",
        "cursor": {
          "ref": "3c17cd18-20b8-49d7-8ce4-090c4633b2d6",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "927724f4-accd-4f97-802b-cc610d70b8c4"
        },
        "item": {
          "id": "9cdce556-2211-4725-8c3c-7856a7dec216",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "28c91c63-739c-4982-95f0-35b2a28c634c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfedd327-092d-467e-a213-34bb3d9224e5",
        "cursor": {
          "ref": "145821fc-8bcd-4e5e-b8f8-1246609794c6",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "8805e3f3-0952-460b-91ab-4517d510080a"
        },
        "item": {
          "id": "cfedd327-092d-467e-a213-34bb3d9224e5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3f9dcd39-7f65-4a77-afab-9d8205e2367f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}