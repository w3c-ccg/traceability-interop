{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fbef4738-471c-469e-bea9-1ab308fcb00b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6eb15e16-68e3-4e41-b7ed-f748187a2d60",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bb701364-fdac-4c7c-abd4-5b0126a89313",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "30072a26-a065-46a6-8990-063cd5b7dbfe"
                }
              }
            ]
          },
          {
            "id": "f6ca3f1a-3170-4e3f-bd90-c160293c98db",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fb292f61-586f-4737-a90b-e43fd2657124",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "84561872-a795-4eee-bcbd-986d37c1d83b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f546811f-946f-452a-892d-3f7ea47e5ec6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f56385da-e16b-43a1-a157-2330daf77ad1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5907d0ad-712c-43d3-9142-f55e54622810",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15999efc-ecb9-4d81-9e0a-e854d41ff8eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "55e31b27-d6f1-45e3-aab8-c659302a9f2a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cbc07733-7227-49d3-81f5-e6c2f9a1bab6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "51cad6e3-f381-4e09-8ca2-1412227a3d97"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cc703eca-06a6-4a05-a7c2-979bda579564",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "04efda94-68df-483c-b2ce-f9612c18fc07"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f8d4b59-dd86-4090-82b4-5bc4e55bfc6e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a34017c5-cccb-4cb8-820f-3bd8d965e492"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c137330-f155-4336-82c5-7e0aa33c361c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d8171fd5-0e23-4e5b-8b0d-add26bb0d803"
            }
          }
        ]
      },
      {
        "id": "8fad5548-9ae7-460e-bf3e-86df328b51c2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "13428c01-7940-42da-88df-f18fb1b99fe2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7eac1bda-97e5-49ed-aa1a-5437fd0b5bd2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8e8aba35-5365-4a26-b745-dbe5d1d5970f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e4eaa5-cc0c-4589-ae5a-6b844ecf803b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e0d2e92-1910-4a69-b045-66d009cbf072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24543598-4230-4286-93c8-29899e7adc3b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b440263-63da-4810-ac4c-8849ab3ad342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d90fd303-e480-44ae-b18d-7d09442d719f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce3149c-d676-4037-a1b3-a192eacd0dba",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2b8845-8a27-4050-b550-f0fe40abd983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc66c710-2314-4eba-9d26-ef1aa30bb7ef"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "64a7228a-039f-4bdf-a068-84b270d69c93",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "654400eb-cb96-49b5-b210-09f40f2e879e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d768681b-b42d-4c49-b93e-6bea84abb37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "986a0883-716b-4099-9d43-7a61375a98fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b27c8f5-d6ae-4842-af97-a4ecbc924370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "963e17d8-6fb1-4a00-9ddc-439f3f05f9b6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0e6422be-a6dd-4a76-8408-9c5903e75994",
            "name": "Positive Testing",
            "item": [
              {
                "id": "af0514f7-a7fd-4152-bc5f-1d6fce823ee1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f5c7866-25bd-491f-bb27-16a0413941ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f0c40dbc-1f55-4bef-af53-9e1f19be2352"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bc8b803f-6bab-4f36-9b27-f40d21b186b6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "42c18216-b35e-433f-a6e0-2006cc0ce27d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73f47ef0-6d60-41ae-9175-e05c401c6d86",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd36a385-0cff-4e55-aaa4-9d30d482f5fe"
            }
          }
        ]
      },
      {
        "id": "ebdb9b9d-a7b7-4edd-ae5d-4bac809e2e35",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "fa587ebc-1c1b-4fc1-97c4-cc52d7e3bc60",
            "name": "Negative Testing",
            "item": [
              {
                "id": "40fd86e6-36a2-4bbf-b7ac-218ad3605e7a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9caed3aa-5c59-4561-9a7b-61f01768e0c4",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "324ed29e-ee82-4b10-a550-43d581ddd325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b875c3-ba5e-4772-94bc-d3c3a8589242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980040d7-81f6-4787-b65a-a0cc1cb3f1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4573c886-5b4c-49df-a188-8e0bffd9f2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636dc0c1-3163-4580-bba5-07670ac5f234",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "593907f6-3796-4240-a7e6-1dc05442ad0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670d558f-3b69-49ce-bce1-ab46f6580156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce3f66f-618b-4d5c-8277-46da24403ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21027206-518e-4e9f-a99c-feda771a28e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f133229-c860-483c-ae68-e3a3868b7f44",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61589bdf-38d9-48bd-b79d-6196bb094a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a9119e-cbea-45bf-b836-3d897c5a69b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4edb7d29-0ea2-4ce9-a08c-ab329dbd5a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1558fe94-986a-4ee5-b272-ab061383081d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd574d1-058f-4e8b-8bc3-103d1fea6481",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16c291e-d6aa-4ae5-be41-72f4de037376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615cddb3-4499-431e-9981-248f174e5d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d25324-3961-4eb8-93ca-506b037f6400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4febd54-0b81-444f-8198-3d10f7e1eb9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207975b5-552a-4370-8cf3-66556c84077c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "488c065d-335c-4da5-adcd-d8d32b9b1e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a193825-f40a-409d-8f55-799b30498bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e46fb5-45b9-463e-b860-b8c6847ba676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd9a1acd-fafd-4b4a-b808-de97cac33c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afeff136-2a0d-4ad2-bb51-091f36ef6616",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efde907f-9d74-4c24-8bf5-ce7061653b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "804e3747-d7d0-4760-b3a4-63dbaf705ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2b2075-2918-4056-aa26-000d4266ee12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51fce9f6-4462-4ae4-ad9d-974795e9f075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01de0518-9b31-4cac-a69c-9297be937e4b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "574fc3a8-208d-4e4d-a2ba-3b3e44951d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07f9f7b1-0b31-456d-958b-ac75e995ccde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d08d92-9bc5-4ae7-9432-c3b94890a8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd5683d2-21de-418a-a4ee-16a88ac412d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73931d0f-0436-4cc2-96a9-851ea2724809",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00238d79-9b52-4b2e-8b2f-0cb8e58fe288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf803803-dda8-414f-b65b-51dd86df868f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8bc57f-3e90-4ab8-8894-b8172cc1a838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d160606-c071-40d3-8752-ff38351d39eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8cb4099-ff4b-4c7c-b602-18986fc60727",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042c980c-aa47-45c6-9ea1-899a351bdf69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82ee3165-0203-4a67-94ad-1b58545b8392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9c16ad-cd4d-47dd-a075-e988bf1f03b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17a6d600-72c9-4a82-828c-d9fd5d704557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7fbc187-eb2e-4a00-8050-1e5951c37a7e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c7f18e-8afd-495c-a52e-af44e18180ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7c805c6-eced-4645-ade3-045905d8905a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e73ca7e-33e3-4640-acbb-75eca53539eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3eb21e9-b125-4da3-8143-71e91fbc10dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6868bc8-a264-4d77-b137-91fb86d39d40",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6340a16-c266-4a0f-a381-06301883153c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8094666f-6143-4af6-83cd-145cecaf79c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a95ca4-8284-4216-8848-7721d2378604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8dc77056-708e-4d66-84a3-6066e667e2a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac4d448-e8aa-4fbf-9854-0d1cb3899b13",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf6971a-568e-48ca-888f-c59725b2f9d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc360528-22a8-4efe-9c51-c2fb284a1889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3598d4e9-0e47-4929-903e-1776a675b038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0126c0c-8086-4d78-8dc7-6958fe113a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5aaf89d-17f3-43b9-baee-0240d9d29c61",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a528e10f-7a07-4353-8580-0e422154290d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e191d97-5baf-4b2c-8109-aba575f0bd39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c82314-e0d3-4d81-a674-049bf2d7fdbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "482fdd31-3f8b-48ea-b9b9-8dc6648013c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3375545d-0cf9-4328-a591-4c8c15b0344f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a77d637-8acc-44ac-a2cc-4be09081f35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab33d51a-829b-478d-a1ef-84e7044ae5e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b052e02-4c51-4e0d-84b4-674a75676fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ecb0da96-15f9-4105-a5a1-2303aecbbf98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2e1ed6-55e8-4ff4-8566-ca16a0733b65",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40567143-52bc-48e1-9464-a47550a430ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f94de5b3-b970-4001-b022-3910546a2cc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54581ea3-746e-4519-8e15-a5d8a8aa6553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e5e0b4f-6f81-4e46-9105-c717c0fca6e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdb580d-bd94-43fd-b73f-659534307055",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83908c5c-4032-45ff-bd60-db1a79050122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd938cd9-a6aa-4e84-bce0-bba2186422bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f9737d-72ea-4e00-92ab-36a3f83af86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96713a5e-43d0-4d98-b220-1668da48a63f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b04649f-8d41-4378-b3bc-0236ce099894",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50ea1f2-21da-47ed-a8a2-93248292ee56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ecdd9a0-e23e-447b-ae45-6c1c67c0ccf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03910d50-67c3-4dfb-be17-20f09eb65416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "211aec24-059b-46ad-a5e6-be152cc889d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489c7e0f-f9d8-4c50-b3b6-2411d12f7a04",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37ed240-a414-4aa1-b9d9-d23a7458ea78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e19d2c-8a65-4190-8dea-59947b0598eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46600c48-b6f4-49ad-acef-a5513ed86128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b89d5360-d994-450e-a4c0-658c02b88866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a547b662-7cdd-4714-b325-0ed972b6f6de",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf7e239-229e-4c31-b884-77b09f1b3beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc47f78-ab85-4aec-9312-e2fac9f8c7a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42470a0-c9ab-4234-912c-e3119f582d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bdf700b-2d50-40eb-b62a-66591ebefdcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d644f15f-19c1-4855-aba2-92f1e2e584b8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdaf7e49-8558-4b38-8806-6076b8e448ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b97f8c08-2332-4277-95e6-3b2a91d8a963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618be346-2518-4b4d-8c19-6b93f16627f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88063f05-42ce-4f71-b1e1-3e458292fe77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c5e4cb-5b85-453f-9e57-f3f4e6ccd791",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3122c1-5bcb-4c4a-9660-201525c4e150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b1f4ba6-8896-40f3-b712-b84cd5984f37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65e0d7d-a967-421b-bbe1-4897275ae03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07f94464-98df-4017-b1a6-886cd7713863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a817720b-8f74-4a31-9a3e-70dcd9c0e2bd",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00384566-7349-4fc3-b65a-eec12a028ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce967f6-6d28-4d10-a586-e5ce88eaaf44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba6884b-1294-4682-83a7-ba4b1c7935e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a150f879-f33b-4144-a26a-819b312a1589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fac09bf-58d6-4c8c-ace7-58279d9b09a4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0318a882-a633-45a7-9f8d-fddccd591f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f51546b0-63f8-4859-a42b-1a952ef8565a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743c55b7-52cc-4167-9f26-4ab086c1e279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6e8587b2-0eca-4778-a285-102d241d5a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d442e0-1b66-4487-aa3e-1cc9e601b726",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867b8a89-63cf-41dd-9d08-e0b45073f79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f446975-215d-4872-88e5-466c82c7a5c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e650bb7f-0f8f-4398-8428-3e06049368d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "36cfe687-abdf-430c-9c01-7f4f865c2b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4597b426-658f-4acb-b4a9-d2ef93155c0b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dec0687-3d83-410d-b6fa-1d293e439bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fcc0bf8-00a3-48dd-aa3d-c7a6a3f5d74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3c348c-87c7-4da3-a3d5-150050633fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd7e805-6b83-46f0-9a3a-0bb2c06c27b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b50954c-bac5-495a-b925-380043a1171b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dec525d-ff2d-4283-9dc3-2c6a04b6d29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f8c4fa7-2566-4069-bd8d-608fbedec03c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7811bd36-5523-4f70-aa44-5dc8feaa1168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bc1f023-05f8-4bd7-9e0e-4bb7dd5d33d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7332dbaf-b297-4302-a9bf-33c1cc49aea4",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7374b6-e0af-40f1-8325-2eb4b19e21f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1b31afd-75cb-41a7-b2af-027f11690cc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929123c0-0b04-48a0-8536-10148a01a1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "acbc433a-1e68-4a6a-a045-271c07cb8097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc48c04-2b5f-4768-8124-ecdd1e663b9f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fb900b-ab01-4c7f-879f-125f1f0cd026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6905a324-e1d3-48c2-afd1-5d380cefc016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f9edfb-396a-4572-bf16-1a82132d3eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d905b7c-fe37-4d88-92e3-93b395f3d80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dcdd541-7d5c-4f72-85a3-69fe26530afd",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e04ee7c-6e4c-49e1-a27d-17b3039d4d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9182af2e-a0bb-4f48-bbda-d1041703a63c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc22076-1ca5-416b-b929-123ee90bf297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdd5bc12-033a-41f4-b23f-57107ec93f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08b4b92-1883-4555-848f-38d4f32fb48b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "876d6728-8648-47e4-ac1f-73374b616219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06dfe5a5-d5bb-4da7-9b68-ebbc15e2482b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9be08b-9c80-4d92-8be1-c718cfd704b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bdc4565-7dec-44e1-86c8-07c09071e7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf99f979-6948-44ba-b66c-73223fb644a4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35873d01-158a-4dba-9542-340fa1656b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7649e49-dc8a-4f12-9644-d030dfaf139f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca5821d-c39c-4ff6-ba45-1b0c1de626c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "065cce00-4e42-46c3-85d6-34a3ae32081c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1afc35-4902-4c7c-b12a-75f5742e2aed",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73550e9f-3cb5-4b14-bedd-d9de8839307a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf83736b-f4c5-44bc-89e9-c85977fa7f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd245c0-7a00-4555-a77b-b343f05d8645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2b61918-d207-4d60-bac8-2c72ae585a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a56c87-e36f-4fce-a0f0-175fe36eeafa",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6905ce10-a742-430e-90d7-75513ce72708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37bd5026-fca9-4058-8ea3-a1d127712e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c31e08-5bc6-4809-87c4-db3c963aa4be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e945b949-d26f-4ec5-b347-f6bac67d35b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f0335a-82c1-405e-9513-63a500011b42",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3c731d-2bc3-40c1-ae91-0941df0b282e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "111f7b75-8720-40d0-bfb1-c0386af6a4e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676e53b9-42df-441c-81ce-6b2252b58fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96ebcf7b-2328-4d7d-abe7-c9d89a3ebcc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f67621-c00c-49ac-b9ee-1e77c36b521b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e2243c-eec4-459f-9aeb-46af39a6aafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53b33c73-f1f7-4c20-af46-772ff0eb6e66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b5f456-3efa-49de-a885-419b60106134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d81f9d61-8d67-4b58-97b5-f35fd5769b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cae9323-bcca-4183-b4bb-de3a68b1764e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4e2e72-dbeb-42da-a68f-ee25d823b29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "751d49d6-cea4-43b2-a84e-539d08d6d6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753b07ba-80a8-4a89-a2cf-2507ae85a9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5edc90dd-9793-48fc-9fc1-7e0a1ab949e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8500ff06-cc0e-4b99-9426-fec35a0c03e1",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0655adb-e041-4bb8-9d2e-0fd12bbd7737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e73a44c3-af6e-499a-8b33-c44b929379f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d45407-1005-4012-afc2-1bac8477ccaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e628fd2-d773-4500-a80e-a52819422547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0e7cc2-32f1-4710-af8e-310bffaae589",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4789528b-c573-412d-bfe4-41f1df060a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06253f7b-d653-4d57-85d3-739b4ac9362d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d371efd-2bc6-41ea-8db0-e50dfa59b1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad394936-49b6-4bba-b73c-9a40c9a51527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c414434-a83a-4dff-91ec-b731eaa6f762",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb839e0-50b7-4590-9fdd-f302c1edff1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7090013-9937-41cd-8e3c-45eab8bff7c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a49a0244-a4b4-40d6-80ce-fec87bc28257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "18d03c94-cc42-441c-90cc-04cfba5b2260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a915c59-193c-48b8-bac0-97259ec91208",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3488a733-ddc2-46d0-bf5e-775ba2a269da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abc9b6bd-1e01-4bae-8d7b-0ec9b859baa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db58fd3b-6ca5-4fe0-95b8-e34d6b5a59f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "394b1a4f-c9d2-4d7e-896d-feb8bc28c052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0855dd-439d-48b7-b179-6f3848a43f90",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba02e6c-61dc-4287-b755-8fb2c15a2f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8af11d81-66ed-4eef-8c1b-c27e5e27b589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f5fc69-8b91-4f99-808f-c73da001b11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "16aca8e1-5b06-4fc6-ab68-83392e882787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993ef4b2-67ce-4bc5-a57e-a587520f16f6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfece323-15b4-47a2-aedf-f59a0f8a46ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93e1c58-6e32-4071-8ae3-bd2a944bf851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1c304a-c8f5-4255-99b7-195c5f506c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "10d1603a-d904-4a13-bee4-351f8e137169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0997c6ef-499f-43ba-a2b1-26a6ffb56b21",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2830046c-5917-44e0-8f09-a65e497cadcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0e076a1-bb25-4b40-85ea-2fb107dfd86e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed52fa0-0cec-41eb-bab6-0932bff6de98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5413044-8849-486d-935c-35e173345622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba888df4-60f5-46c1-b874-c8eed3f6246e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "848a7b3e-d635-47ef-9221-0bef9b1dbf54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d6088dc-1ffa-4aa3-aead-9c44ac422f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27c24f7-2ee7-4ebf-97f9-b7cce6dfcc65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed25e905-a1e0-4e0c-9aa4-994aa8b70666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b017eda7-f660-4205-b8bc-6c3f9cadff7e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd493b0-fbf8-45f0-9485-fa0a4fac4e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c140068e-2fe0-48d2-92c7-28fdb97eca2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3fccbf-4c48-4ab0-9016-2977f7cf5c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca8a608-1621-42f6-9129-986da522abeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b27fdf-a4ac-4645-8dae-ccf00b8f2a17",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "131d7850-b971-416b-b9a9-0844616cd27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6bc93db-d76e-45f5-ae65-98cb9f171d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117ec2f0-f89a-4e03-9ff5-9e6efe6f6394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3f35da6-13fe-485d-aa5e-d38ab5dde2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c86735-3ebd-426c-bda3-c1c0f8a8f561",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5550c39-01fd-41f9-8701-3fc9a29fcb1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba00fae-66a6-4c20-9b4f-2cb7035d8451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e5289f-6ca9-4d0a-8858-07e68090ccc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e0f769b-f201-4b70-97b8-7518ec0e46ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c88f3cf-ba89-479e-b64a-1892565139f8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a905c3df-f513-44b8-953d-f38adeb91596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940716e1-fae6-4149-b3f5-44d8a347057d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4216b3-e15a-486a-b038-6b28e31074b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "40313f9b-fa19-4163-abdd-b47ed31bb329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84405780-f2ee-4b58-861f-969b4d591a17",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a8e332-102c-4b46-9de6-0e35b9d6fe3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e59d492-2f10-44fc-8e26-abe201a1e274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce850a9-ac56-41c5-8053-7fe058bacad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "996c5c40-de8f-41b1-84d0-e08e183dedaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6dea5c-66e9-4cea-bdc3-ac685c1b3e77",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd62e23-1600-4c0f-bf79-f094532a423a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ec64d4b-035b-434b-ac2c-4a4a2863b476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e892d66-2913-4721-a8c7-2a13be13533d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e2a509-0087-4eac-b4ec-0c1797f86f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7177c40b-e53e-4e7c-bbd8-a3fd51be9ba0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07b601f-c19f-44c9-9287-9a122a69065a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978d0064-1b91-4166-af1b-82aeb6b9f949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9734144a-0223-4dba-af85-7b1f553eee91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "39361ebb-7dc7-46ff-9b72-247f2e095e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cc507a-076f-4b49-96ae-2a1ba459614a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe60655a-0648-4238-b9ef-b46fea2b4569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e147587e-f378-4a85-89a4-05551473a6a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeef6540-5a38-4050-ad6d-3eb87ad2bf48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e54e963-43e4-4d9b-ace5-35083b5311d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f800da9-b95a-4b1b-9fec-6d10fbfd37cd",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0803fbe1-8d36-427b-ad30-f791d1f9ef5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae12a0e7-8fce-4762-aa26-d2bebe353f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a9a4c8-3e23-4d3d-b92d-ce7ce45f24aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d73bae2d-5998-424d-bff5-70a44932d88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e33cce-ae07-49a6-8c6b-e32d71cc93e9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c432c6b1-c671-43a4-b9cd-fcbab207eff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "833dd0cb-da1e-4e43-9ff2-2ece69892c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e3f6e2-b05a-4756-bf82-2c7468931bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ae363c0-2aed-468a-a85a-765964ec312c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ca4b24-7eae-4780-a02e-9bea50b58c11",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6097c7-a1ec-47f0-88af-422b1312b93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec58276b-195b-48e6-b611-e8c929b2b12a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a10a5abe-f941-4372-ab8f-5460d6477286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2a82650-d047-4478-ae35-47ab24859631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b07bbb-aef9-4ebb-8724-0ee25efd6525",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7190c88-4dc1-446f-a684-a44848e8e542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "047b7cdb-81bc-4f55-b5e1-7e26c506eeea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d989b14e-51ec-4dab-9971-69e187daa7ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c795ff4a-35b7-4965-8437-e1ee8bbcb5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a622d4-8763-4514-94c6-105dfdc7f3c3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa570aa3-c0cc-4b3e-9461-dbe9b0afd798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ea5853-0555-468d-9d14-9d9780ea439c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20101ef8-4627-4e95-98c5-e6d509ff4c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8e34b75-2733-4fe1-8e11-e2c19dd7f42e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958a38cf-8cb0-4e54-b81e-716017d008ca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b6a6ac-b9c1-4477-beab-239a88a10fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7157bfb4-95f3-4b66-a8a1-460572076fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff826082-cfea-4925-bf42-e131a7db92d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d49a7735-6234-4727-af6c-4698005de3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5548a3-96d9-4b77-88db-f1c40b1eb37c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196b08f9-8beb-4b23-ad65-0208cef24530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f8eda6f-3012-4454-ba7d-a9d8a02b42b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217a301a-24cc-4746-b49e-ace2450d01de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b48d6136-defc-470f-af11-548004d0dcb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec4adc9-7065-4176-8e74-e58bbf035b3c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c60ecc-36f8-4d87-a978-05c2c3421962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee291fb4-8f9a-4994-9561-edf84b5e3c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec78f4d3-823e-4b4b-a09d-311207ab3e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "92d72b26-c0e8-46c0-95a6-bbe885297efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede433ad-afcc-47d1-947b-1f8b27f5c740",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ed827d-33ab-4613-b477-0bb490959834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a18e0d92-5218-40d2-bf10-b786714c392a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a088aee-9665-4255-b67b-c9ff040056f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4e0f006-83ea-4cc2-820f-7e626097c53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb87f5c0-9beb-487f-83e5-13f5f43b3c12",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41810ae-576c-443e-b8dc-15ae3aab557d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c5426ae-621c-4d39-9d0e-d8a7a161ce50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd3e748-ec6e-45e7-83b4-2500eb0c713b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2290fec4-04c7-4bf5-b0c1-1b7444735e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb7c611-e13a-44b9-8d76-2530800177cd",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9962a477-4a10-41ea-8175-ccc39b752ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e38ca495-2eb5-4f1e-8e79-100a5ab2b406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56398fa6-8c56-42cc-bc3c-2ce66ba6203e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f91888f-2fab-44cb-b9a9-790a2fe40981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2457bc4f-6915-4213-b48b-05225b06a982",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2b07ee-89d4-4fd3-b416-0aa4594ccdc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e98d70a-46a5-4469-a85f-acc1574d2251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfdcfd44-6a8d-47d4-a3f1-42804692a63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32da930a-13e4-4ab3-930e-648fb5b25c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d67c617-e6ac-4160-b930-f54d706dddfd",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3855309b-681e-4994-bff3-9706445c8f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3afe3ee2-2e92-4277-b030-b054c15f059f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960c3c7b-60bb-4a38-87c4-6e9e8d82f599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1973a67-e876-4400-bc4d-6ee0c082485f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33a3ded-5310-4ab8-8d3f-1ec10e0d259f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114b1151-dfad-47ac-bfe2-c14b8242130a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10096243-0911-4905-a59b-e2603156b183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1542b346-f6cc-4b35-bc4f-3dcf4441876d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9a1a33a-63b7-4fab-8a6a-e28fc557e82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8aea96-f0f8-429e-8020-a1064889566c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dec1dfe-4a80-426e-8fb5-cc88fe7b4df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2fe9d52-0a34-4c76-8c7c-1a1899382479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfed3eb-9069-4ec0-a1a4-000be71d16e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6a076025-ee16-42df-99c2-b6c1f67b7008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "820daf35-b20e-4948-9724-cec46ef9b6a3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90671159-66cf-466a-b38e-5317b9189bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f97588-23a3-420f-80f8-6ab890e52960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0a90b3-e3e7-4395-87b5-a862dd98e13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d471738-0bb7-49ee-9933-01fe45cd28db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d0a78e-dd87-4944-ba82-ff1ef5b2b228",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0121352-3514-4c2e-b30d-266f8439190a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c5f5299-bbe5-43ad-b230-d7f9c578dea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4608f7a-8ccd-4ee1-8478-21522de1884b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d55a8c60-f682-475e-ae62-f2308d821d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15d4ba0-7c8e-4551-b833-e32e53cceb5c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2ef07d-ad71-40c2-bad4-4e2a779c851b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "886a2e3e-4729-47cd-bbb0-642061d62928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf0c268-c8c6-4bff-92c8-27a9583a9c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f65754da-d240-4d4b-a487-542693e33f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc132d8b-5028-433b-abc9-6a159d5d5c3b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d942101-beae-4e3e-8292-0236613c4895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5400225f-f6cc-4408-8ce3-2227f2fa47b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f9559d-dbeb-4b35-95f8-53e7a76b2ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c199b34-98a9-4b48-9f7c-bf8c63649fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6655c9-dfcb-42f0-bf75-302401032f4f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd686cf-d778-49bb-93c4-6959fa3bf9d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f154204b-8425-4ec3-aa4c-364a8ab6f7b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba3d22c-ff23-4f33-b6c4-7933a9f99109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1348d0df-9b62-4706-afbf-f69a4f07c1a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8eb1288-7da6-46d6-a543-33197de42ef0",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7613e75c-f387-4d4b-9f0d-d14a5c06846a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1468d1b5-be0a-4883-90fc-d019c9db8d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7842fb2-b264-4b83-a7cc-9366b0278462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e13581d8-7398-4c21-87ad-d9cbd18a4cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9232265-7633-40f6-8324-e3d454ba1ddf",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "206e45b9-5caa-4ca8-b1a0-dcbf020d2cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d20ae62-7e96-4091-9466-6c2665689df8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6910ad58-cede-458f-8b6e-b437028e112c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a38b87d-5d68-4b80-8213-018bb88f86e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e63a0b-2b83-43d3-b047-eb975a0b4839",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2298564d-55b6-4f3f-bdec-adb2acd46ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f660f7a-9a8d-42da-bbf8-dee948612173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a101cb-4f80-47ef-a9b8-b3f9f9665dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af2d1c60-2489-4346-a732-8e3e4acb8acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de12d62-9488-473d-93bd-dddb017011ba",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56c44ad-4083-431c-83d5-ab3eb699e41d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2716a0f-ab42-4e3a-a0db-991661fcdb0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d4d191-d63c-4ae4-90a8-8b386194235c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "03c10ae8-094c-4c64-a4c5-3f600665dfda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0b7083-1c7e-4fc3-9ca7-12cecb7c58ef",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd69b358-f9fd-4607-9569-f02568024d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a08ce4f9-7476-49d9-8d76-0e1e62d5ded1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49aca3d8-653b-4178-9bc4-74c1ad7fdec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1354c25d-4296-46cb-b578-13b5855fae4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73ba5c2-a03d-47cb-9d8c-0d779e4923b4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3305a9c7-1257-4d95-93fa-0809280286dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ee00a5-38ae-4995-b8dc-86ca3aaec946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f0843a5-10f1-41fc-8ddf-915bb32c678b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "832adc9a-0eec-40ac-9c0a-546e57dd89c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23030b8-98e8-4f29-9a6a-c883d2c13778",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc5c7e1-072d-48f2-93de-19f25977e337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fad00f8e-dad5-44a4-b8ce-4eeec55ba7cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ec7d19-73f3-44b3-b443-1df9d3cc9824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0189f9-35b1-4688-a9ef-dc5e1f2344a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e357b138-6adb-4764-bdcd-423fc5e38261",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21b0e28-91ee-4a07-982b-aaa00ad9b058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63f204d8-c2c7-4f1f-b330-72f6de42f30d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33f8c36-5f88-42de-867d-e25e84b1a9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "17de75ae-1342-498d-bd39-4e5734565137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1487f913-8a50-4879-9970-5007696cae53",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bc03c5-d139-4bed-9eb9-0b01c5877045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52260038-f3f2-48c7-a0b5-d271b8d19aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbaf157-7fe8-4924-9242-6c03e98295d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c673e7-fa4c-4d39-b90f-f39cb16572c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d3027a-4fff-4236-9c56-3a2e3bfbac11",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "458ae2cb-cfbc-48ab-8e59-9b293e41a3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "198fe26e-875b-4d40-9c8f-23cbf3b0e762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc658752-d88a-4078-8c13-052d546ca10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ab84865-5d25-4e15-afb7-d9f8d2914250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e63f31c-de21-4ba3-be14-53d1dace3a63",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d812305b-f316-4217-b2e6-65eb12a0b3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05981352-e36f-4ab7-8861-4959dc4f77c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8d297d-71b0-4026-ab19-a31f846ac562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5f1a214-11ac-42f3-8026-ef3994aba85c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd74f757-afc4-4f1d-8f38-100ab79fd4f4",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d1f84b-baf7-490b-8f7f-5fe90f5fd25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8d52a9e-6278-4ccf-8f78-5a0dd20ebc21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167b36ea-77c9-49ba-a5c4-2adf36ecdb56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4015bea6-55a6-4d3b-859f-66e279b44dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36c3987-c195-4e59-a4a9-3812b0394ad4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ebf42f-b8de-4141-ba4b-8657c200e509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa60ac57-dcb8-40d9-866d-5b19a26bf0b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237098aa-7852-4c3a-a9a8-c207e73fbb57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f1bf06e-eab9-42cb-8ac2-7a023c312dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c81f51-6155-4580-a9da-f76e561845b3",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d430ea4-b1d2-4cb8-99cd-39256f939c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b810f426-c9c8-48d9-8d59-abd08aeb0922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e47aaba-ffd0-4bd6-93c3-f35c51be8c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6de9702-e9e4-4bf3-bf2f-6f6016719e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424263db-296a-473b-82f5-ae955c6c8b14",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c74470-d401-42ae-9eae-6d3276a96508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5108ca86-e498-49ba-bdde-bb37208c9ac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09241291-e574-4a48-a91b-0d769239fde3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "887d7cef-e107-4ccf-a274-21285c523801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f8569b-355e-47d1-b91d-84302cd0f3ae",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68003237-8cf2-4e94-b7a7-3262d94b9c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43385aa1-c94c-487e-b1b0-d9ab3d6642ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32de221b-e51e-45b5-9918-9d5b79e9de6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "aceb7196-c7d3-4f7c-ab8d-6b4822cdf146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110a1683-797b-4568-b33f-04599fe63a3f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09edf722-3659-4a6b-bf6e-ddcad2b2236c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "286a9b79-1479-474e-86e7-4e4328b140a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85740fe2-7575-4f88-ba1b-ee209455eece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "57d0df12-8f78-491c-b78b-471f331fa0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6b2234-3018-4ee8-bf7d-f967df27b4a8",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7909cc6-6769-4075-b3b0-941c62242c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d9eae75-85ac-4427-80c3-4ff11a6f02bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff488d3-6037-4576-a7ed-69820595d326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "65d1bb2c-6b30-4c0f-98e9-2abc61805e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d26ad67-b07f-4015-848f-1c8850c56b8e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d044a9cd-6848-49b9-a975-90eb92f93220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92fe63ef-8a90-46ca-a785-29cd494c1f22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55644f4-437b-4709-8ec4-fa836bf1034d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "513f78d5-eb4f-4f5f-b5a6-d69f1a3ecf1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780f7e3f-0d3b-4987-bcb2-9d3caa55ac4d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "532eada7-0130-4fca-bd5b-1b6bda2e191b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7998a07c-942a-47cb-b3a8-e3720bcc3c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3692d85a-b1b9-4b31-a220-1d2f5c436d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b431a797-471f-474e-a607-c58340b5e7ca"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "92081147-cbec-4dfa-aa9c-e1b51180b3a1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e7f32e8c-aa49-4700-8ad2-8efe69510472",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f623ddee-6e54-4e69-8a2d-249928af1645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9586057-1b71-4c84-a69d-3633fec764a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b499d3-3922-4bf3-9ebe-4dd32da0a968",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "340f3a2a-222c-40e9-8bb3-ea173a3f78ef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e1daa05-ad74-4f45-80ac-510fa7e3c84c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e4fba04-6af1-4d9a-ad85-80f479030fca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6f7c509-5d6a-4759-9942-526f2a89cca5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61228829-407c-49de-89d7-1b1110507032"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "49f667a6-63bb-441d-bef6-0912bd6f6031",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "df40635f-75e9-4d62-9540-5f803f76ad50"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b300c764-0223-440d-90f7-ef0ace18fc2e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3f694493-d2b8-4056-abb8-7ca0738302b1"
                }
              }
            ]
          },
          {
            "id": "aab1605e-a368-4e23-9764-698e7bfe54b5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0bbeb56f-ead7-43b1-b85a-4d8dfdca71f1",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "fb8f4c25-248a-4870-893d-ed730d2cdb03",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6ebaae-192e-4ad3-a902-2374876ddded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "327c8a0b-3054-4416-9e91-4d3d61b00107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8963688-008b-476a-bfa5-6ca0e4c77c5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "857939fe-7c1b-4413-a759-bbdf851222a3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "872478d6-91ae-408e-81f7-e5e52f171ae7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ab26ccc-c8ac-406f-97e1-b8b3021fd859",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31e3c58d-879f-4d82-b880-5aa94c43637d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "936d5d3f-3993-4f03-85ad-bddc5fb558cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "745571bc-4248-47cf-883a-cc6f35dfaeb7"
                    }
                  }
                ]
              },
              {
                "id": "f841d850-ff67-477a-b686-625dc28c2ea8",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d74d078b-64fa-4c64-abe1-7938d5979b56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f73bc602-3046-46f5-814e-8fa0c2406585"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d806a51-ac6b-4f05-ac31-1aa6725da86f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fb26dbb3-f1ba-4b63-9d13-79511dfea9b7"
                    }
                  }
                ]
              },
              {
                "id": "b1078eed-030a-4f26-856a-4d72a10884fa",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a3d3136-3a08-47e2-b8da-64165d3f290f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ed5f7fbe-520f-4b27-9fbc-f82f410d3f15"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1c6fab0-c12b-4010-bc38-78fe4b8aa174",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "71f67c21-9ed1-4734-b612-d33a4146c797"
                    }
                  }
                ]
              },
              {
                "id": "e3504367-4b52-4e9e-977c-ca106e8eff0c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4cb686c9-7cd5-4701-a9e4-44052cc2de73",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9d61d3e9-4fd4-4c18-931d-15d085fbc38a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4fdd8772-cc53-49e2-b248-b25b3c1e8518",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "bab2741e-d8c9-45d7-9cbf-40772a98bed7"
                    }
                  }
                ]
              },
              {
                "id": "f72ce7e3-19b1-4d47-8529-04d070959493",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec489eac-6305-4f03-a231-d45b8e85d742",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d9a70d80-8691-48b9-a318-5e345b25180e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "501c7ad0-a35e-4a07-9541-571c6b4b8cd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2c256c9d-aa86-4106-9032-3578858a975f"
                    }
                  }
                ]
              },
              {
                "id": "9e71315a-574f-4f3e-840c-f6cb4d60175e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "872b671e-8d6b-40ee-bec7-a63dc5919867",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "000e3efe-9de9-4196-b805-1fe3236db175"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c182a9de-ee8f-4164-bf24-6baf7c21de62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "92a0daec-f45d-4403-a471-65ccbfcb60f0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "077497df-a77c-41f4-b6a5-c31a8b5f96f8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f9fa5aaf-6479-4007-a69b-c169b6381c8a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cebe9382-878c-4364-ab43-62100ada5813",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e9003d7-4953-44d1-9f3d-d55875a2212c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "08dfc96c-9127-4665-a862-c49c1448ff3f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c6a54af1-1a60-4d50-8b97-2054a2f0fed2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6e1e7cf4-8f01-4200-86de-5ee74ae0e173",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8aad2352-fb71-4206-939e-4ff5ac2a240a"
            }
          }
        ]
      },
      {
        "id": "e7e981d5-a15e-4d06-b2fe-ecf0a2f0f8b5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fd2fa1b0-649f-446d-bedf-c0714e32c3e9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4fe88702-2438-4236-825c-00162120b67b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f17441d9-212c-4576-9844-07fa96a02ffa",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff42fdd-703b-405b-a28b-f48a05a1f97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72dfceba-5f0a-4c87-91b8-abea64b36574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e60592d-7480-4723-b586-afa510ed5db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "566f2e58-7fb7-495f-b514-005b5edd52c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fcaa080-1263-47ba-9c27-e7ac30f6f297",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "601f8b21-6e41-4a5c-8bb0-f5c7fd597672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c58a5a80-911f-483e-83ba-c964bb5393fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8ebbdd-4e4c-475c-9077-d8641e1f31f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3786cb7e-8146-41fa-847f-9c9087b9655b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b0ef4c1-ed90-4367-9d7d-26975b74065b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8696d5a7-91de-428d-81f2-dcbec3dfe84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79bd989f-6a15-4a0e-a443-1e8df0181ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8d6e50-9cd8-4702-97b4-a0da286a19c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3905741c-0f2a-4a35-941f-72a98e18dab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbe3629-8133-4b81-b003-a290c85d5b4a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddac5961-841c-480a-bf2f-a07fce276d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5c9d479-c2a0-4d33-a0b5-90c43ad1d79b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a39a85-f1c5-4446-bd8c-9d15367ef737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "933eeb2c-07a7-470d-aa4a-c373f7002f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afdaa04-03a7-41fc-af44-ecb91d56e46f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c41f0a-e09f-4108-8b59-4900360a3ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "875af275-f81a-41d8-9a7f-05df603f8a1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629270c2-2990-4287-828e-da9342b5492a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fff3c13-f397-4afc-a2dd-7314a345473a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3577478-8356-4ea3-b55b-12f113d1f4be",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a31c07-43b8-473d-a9e6-fb30bb4dbe9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1183222-5976-4d12-a4c3-8876224f9323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f029d0cf-a2dd-4a98-80fc-427ff5cb7f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "54a606de-8feb-4652-b26f-68b41b7b3183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5f2efe-993e-40e4-b365-402e31f9d4bc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26caec03-120c-43e9-a3cc-d738adf16f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e969de21-d368-4ebf-8ed7-a2659f3d6627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c1317e4-d4e2-4805-9872-b3961b2f4c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "85032426-2fb2-4089-a53c-9b3ec093b1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be3879a-700a-4f8f-9371-c298fb2ae014",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb41824-2d3e-4695-bd57-433e65e33023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33bc5a47-c075-4e4d-a9f7-27915b446c39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c2b50c-9930-4def-ab89-87a1434e44d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c7fe3b8-6429-495f-aa10-9939e49bf799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fab8da2-521b-4a08-b9d5-a2a782cfafee",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a4234a-96fe-4646-918b-2ce06e112167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c292310a-dbed-4a1f-a7df-c5dfcc97e128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e94d4c-057b-41f0-871c-603f28af9937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5982f8a2-44df-454d-bb23-ec312a0dc4a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bdbb564-8eac-459a-aa2c-ddf8ad8ff2a4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9fd322-ca98-4ec6-973f-0fd98771c831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee40db21-42b4-4c00-9b19-d6cd47f6c2a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302b21f2-c4f5-43be-b8c0-c598461f2cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b87eadf-e4fa-4783-8e5b-0c95d24052bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d432c727-661b-4787-a13a-8094f40e52cf",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13024515-08c5-4204-bdca-a01ab50672b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21d96e4c-aac1-4569-94ec-9702fad78bf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8869ef-6e85-4f60-8d8d-485b914aa113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "383f3153-68c9-4522-8946-be1b037d2f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee64e57e-2c3c-4be0-b8ca-f0f9e4face24",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c52e37-d473-4d1e-a23f-15ff3b635e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7209e955-944d-4f76-8388-8788a071cf9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67b331b-064f-4d58-a3f7-d563ee14b078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db7764d7-dd52-479f-b474-620544064dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c70fd561-b0cb-4299-bae3-20e3f3c8878f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8e573c-95d6-43b8-8a9c-78c2ab9fd136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e69aea3a-10b0-47d9-982a-730d92cd922a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e949b4-6dbf-4fe7-b57b-49e280f4deec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "61779ced-66ca-43cd-9817-0b8bdd94abeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f76ce41c-137d-490f-88d0-b69bfde13be7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7256c9-eb7d-4c4c-887b-1a7ef6765e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c00b1462-80d7-4194-b381-0d131222f9f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830e6e1b-9d13-4b30-84de-696172a310a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "48b3c20c-276f-445e-b40e-365a975473e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb1070e-a92e-4da5-a28c-6f0cd6a1aae3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c409fb-4665-42f3-80c1-039ccefac80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd77a5a7-d7fd-4d77-b7f2-7cd160b4e7b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f3f255-31a1-4306-adcb-298ce34ad9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8974a37-2bf2-4c5b-a703-8cb556fbfdbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f3e18e-89bb-4b23-839c-6bfc3e37b1b7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e9697e-a0a9-4a03-a6f5-d54d0a7f517c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a85c6a35-c632-45e3-9165-0f72c3b2db21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881a3875-5676-40d3-9bc3-5718cfb58492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "96d39597-062d-4d30-b52f-7d9008030d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d29128b-ca1e-4b38-a376-ee4f31ff8e90",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fac3db-8df6-4d5c-99ce-56e6df7b36a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b9da45d-d127-4505-865c-2e822d4760e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd2ab26-cd3d-4fa8-a431-821475564b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa732f80-4b20-41c3-b031-a7933934c485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda0fcea-5189-4786-b985-906c4a224099",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c7a232-288a-40f6-b71e-06425573539a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f295c5a-d26f-4453-8018-949275b4e3d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568e0346-ba98-4351-a1ae-802450083cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "54f4fb40-7736-4358-9011-1c2ef774aa33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b112feb-f248-4e58-a3f8-12849992e7a8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0c4142-8f50-41ef-a793-956b64918cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1da02d46-13b6-4584-b6d6-6cf6eb53b332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edee1411-d84a-48f4-bb65-4a013a4809e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e870b6-6cd7-4e77-9fcc-566b8e6f3522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa68d6b-2b21-4e55-867c-11fac8c852c6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705fb0f7-7db6-4904-8544-caec47b1a71e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2347581-a457-40ff-bea8-91686876ce58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6730bb-0498-41dd-a516-9e03c7d886b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bc58f6b-539e-4fcf-8445-14affc7738ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4ff9d1-9382-47c3-93b4-3e9b827d558b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75fdbad0-23f0-489e-bcca-5890fdb5095f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b79e2b-b035-4705-bada-15d27ed345c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f336dcf-1e78-4844-984b-eb9f21defa79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80583690-9dfe-43cd-8515-e9fd92c6ee67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7ea23b-4b9f-4562-bb14-a77c088e74a7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3d66b1-11bf-4c95-b3f7-c3425ba3a7fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d44c47-bcb8-48e5-b9a7-6a83b972e533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98298853-68ff-438f-ae98-968af9d8e693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09de6293-0fd5-4d8f-9827-6ad0d58ec7d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53130e6b-1228-4d81-91b0-c7dcb666ede1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6792087-888c-40cf-9c5b-a95fa76128c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a11e83-af36-4c34-aad0-fe31b4e9e79d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0db52ac-5b62-42c4-a28c-f4737d2efa9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfb30d7f-65d9-42c9-a8c7-0127f6ad7f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15cf550-afd7-4f77-8f71-cbb01d0e5d63",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0daf832f-e2c5-4346-b030-f52fd27d8f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a231a448-cbfc-4c80-abec-2a17d67cb652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c712b8-8eba-45b1-897e-1d7b5ccbf59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df1e4818-7512-47ac-ba01-1048aab9caf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439aa38c-077d-4439-96ba-a51d0313d6f6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e9f204-908a-456d-b2ff-ef254ef59838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe957c78-a3ab-4ecb-887c-45d10ec72205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08297c3-7866-4ba0-9ea8-0fc2c30c1c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db946f0f-25f0-495b-9593-50ce31b18d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea7b3ac-c64d-40e3-b57c-8bb0aa95745f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5894ef0d-2527-41f3-85b9-6e8907d6e968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46eb1b5d-daff-4fae-af07-1c7838ecf96a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603d22e5-9015-41e2-9d84-e7e41c97d447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75f5cc60-375d-4dbf-9f40-903a6442376f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be02816-884e-4eb5-a1f5-2211e683354c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6e380a-ef79-4ddc-8d1e-0ec982153d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "129cb02e-bf30-4768-a2af-801a1c45c90c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c645f8-172c-4b2a-b050-3ac73da931ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e6d70a5-cabe-46a0-9259-fe1f91e690f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc1e945-48e0-49fd-84b9-cd30ffd8022a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f8711a-4112-4423-94fd-a15f43e35316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d46c045-585f-4422-a326-c4697a9067e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52756d42-d9f6-4fa4-86b5-5e32295009be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aee8611b-5d99-4bfc-9294-06170cce4e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032b7af6-19a3-49b2-a9a3-09ef6d5200ba",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be86310-8c12-4617-af5f-a5933ba5cee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b5d569c-7089-4dcf-bd4d-5c23e867a354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f17276-875c-4cae-920e-f8148374272b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "656ef46d-695c-4f27-8c16-c3ca3670f10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a7e561-0cb2-454a-95fa-116285940367",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68b9f0b-d97d-4f22-ae5d-a24fac197a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59c3182d-f61d-4f7e-bed9-d57f87768a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b994cd0-f6d1-4e8f-9c16-64be970e7380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b8ce179-d794-4e61-ad3c-54aaf24cbe4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94522e6c-d0cb-4ba3-909f-311ce5978ce5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10fb48f-f5e1-48e2-8337-0534824cf0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ad49fb-2821-4e27-aa7c-cd08be5115d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9ec054-9dba-4b84-b2ed-5ace50e76ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a23c3a3e-1edf-4237-ac37-d23e80c8840f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779bc8ad-f518-42b6-959a-640800c5b096",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b44e491-8e50-4561-8abf-9dbf851fa8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f22b1dc6-3404-42f8-be3e-843e18431a09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b25cbd-baa8-4083-9f49-770e5fa9687b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "620707f2-631f-4334-ac09-224447f807e4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f95048f0-8c70-4361-9422-3243448109f3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c915196-8ade-4b99-9e58-ab2390a6165c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ab84cd-1af6-4428-9a77-46b4975bb097",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7683a1d3-1bea-457d-a40a-7b7e8f9b97a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a58d4a-c41d-4af7-80d4-31931baf9be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef4d9c38-2d8a-4b2c-a9a0-b32be1348ccf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58d8f416-16ca-4987-8df1-f2d8f9a61385",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4d94297-8126-43c7-8863-1ebb53c3212b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "37a3b5d2-1003-422d-bf15-baa5a4964994",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "acc29e2d-a016-48ac-bcb5-b93b1d54028e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac792898-50d0-4bde-abcb-2e0ba614daec",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4f3c57cc-9f8c-4072-a719-e2d0ffbe5c75"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0c1f332a-66e0-44c2-9599-d7848d64277c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "08bd74c8-79e0-4fb6-9fdf-dc5df0b203bc"
            }
          }
        ]
      },
      {
        "id": "671fc0a5-028c-4af4-ad9e-4ae77a69c81b",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "910a3fde-8d59-4367-8486-a040ca462219",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db9dc32e-dc6a-4991-8e32-5dc53c96e0e9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8dfa3815-2d07-4ce1-af52-16b49cc61204",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e4e95a-4b17-403d-bae9-961fccaac3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "446612ae-49b9-4739-8f10-6373174a45ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1578d967-d8c6-408a-b0ee-ad677b2f55f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e01ecb80-0bef-4512-b839-52907762112d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36dbd60-91c3-4d5d-89e1-2431b8dd6448",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c6121f-1890-411b-a6f7-390c33b916f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a80d0cd-1135-4c4f-9b1a-d17652bacd77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7609223-9700-4532-8e29-a18c45f2441e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1380af7f-d043-4667-b97d-105b6d53cb2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba10cd8d-7cd7-44bc-ae97-e71826cfc608",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b34af9-36aa-4a13-af7c-adc948386512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92150b9b-15a3-495a-b6c9-590f22d57d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1a27f9-a8ab-4ed9-ae3d-81cd869f181a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19c6ab6f-4685-4130-84c9-140e5f803588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a08f03b-5cfe-4f35-89f4-3b7525271232",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90afad05-649f-450a-be04-80dd9b342973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2805d15-93d6-4181-9908-67f99e27f90a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114bd9be-c0cb-4ead-931e-09b200301999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f48208f-3546-455a-a4ed-8696407f24fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c4cf49-71db-48f7-a528-9edc75aa940c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a83fc4e-d944-4f93-b661-02a959fecd8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2008d9e4-5c74-47ed-9b76-a366b8dd0fc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb689a4-e04f-47fc-9d0b-a7153dffbaf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a64f72a3-35a8-4854-a92c-800e199c7c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d391bf90-03d5-4371-97cc-bcdc8b32979f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9c03ce-4e3f-4ccb-a4f2-6fbad06540dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12779fdf-a09b-4535-8a8e-5f1f022d8d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26d56d6-88bf-410d-b815-754cf94da335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c371fa8-ebc4-4363-a89c-a3d6567b0c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d248a673-6111-4ba9-b876-411e5f22674e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d22480-f7dc-4135-8af2-11f9ed9174f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bfa688a-a4a4-46e9-9dd4-123ab58c402a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5552e4d-2e91-486d-bf6b-682af64b0a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "14d545b7-2ae0-4a59-be9a-b5b40fd00c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd23b036-d96d-4191-8515-6183f73c713a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49e1f1c-3b3d-4161-bfda-dd6507248c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2994f1f7-331d-4aaf-8322-7257e9678eb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a463946-f0cd-4e3b-9857-df88590dfff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "49d07d8f-7bde-4d8d-9045-3080f6050ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9a3a89-73b7-4030-8fe4-dd330bccbe77",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf29df07-21c7-45b9-93ed-49b2b8c4d8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc892505-a0e6-418b-9252-b2eb1815f749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80996308-7f12-481a-9814-40e8f387db68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "67480e44-7775-40a3-b4b8-982540b99323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da9c6985-11be-4b9d-9977-99994bb84b31",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85b504d-9894-4915-977d-b17ce8abb9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd0fe943-2020-47af-9a4f-dc3f89e2af6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28dfedd-f05d-4f80-9c02-62e7bb62a72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e674f3f6-8554-4302-82b2-1cf1c3aef0c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e3012e-910c-4b4d-9110-bffc70af0704",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b122cf22-ed72-4104-9865-f694ce13c95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3ed3d3-c6de-4a1a-a4a0-950b56dd076d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978f4a85-9c73-4a0d-8909-be3cb092e9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "81e01ddc-ad67-4c20-94f2-a9839ff73411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8d338b-e56b-4002-b645-6f968010372a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ba01ee-bfd1-40ae-b150-6178bba7d92a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c340fcbc-5933-40e1-bfc8-851eceee83b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a877dec9-4259-41b7-9f89-61316cfcbbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd7ce323-696f-4ad8-887c-dee6d9c67fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890e9e77-f8f1-4f1d-9922-6c880ddb5afb",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dac3b45-5292-4f04-a7d2-713028f7207f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72167b88-a279-4443-ba43-82fb7c0bb1ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7ed029-8da4-4694-8e13-bdf820e44f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "98e6cbd2-586e-46f1-a7b6-d5da12ff005e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60764c3a-0cca-4439-b68e-5a9871608f91",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7aa642-4c95-4e03-a8dc-d2ba83285dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "892c9356-8b21-4733-944a-95822d988c52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079c788a-2ac8-44ce-aee4-feedfe6949f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2f14d3-d88a-4a02-a17c-34138e9a1aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a912abe8-18a4-4f3f-b644-8610c22e34c1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "226fce4e-7b50-4f2e-943a-7c475e44c843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5bae7f1-9e20-4338-84a1-2891333ef713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea88ae3-1e99-4783-9b7e-39ec3bfa7ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a220184-c8a3-4bb1-aac4-c5538f06fc63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51d6513-dde8-4f30-b4ab-067df1877731",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e414a9d5-96f9-4c0f-a907-50ae7b2bcefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f9a7b6-f033-45c4-9860-6f9a0685ae26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b58670-6f83-40ce-9cc4-60bca276c686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd33e99e-f68b-45f9-9f37-3bbf038f4441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f1b75e0-2f5a-4d94-81ed-6a6df40310b7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437ef70d-9f02-4de8-8306-5a126ea2af85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce637514-e7f5-4053-81d9-ad7da522e0cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2da47a-51e6-4f4d-ad01-8dc5a64455ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c8a8b99-069e-4350-9cde-b517d01bf557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deaec140-66c4-4f5e-a1e9-71a627369cd7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc519ff7-fb1b-4774-a2c5-66a8f2732c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c17f778-d176-4490-b0f1-184761b328c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d4475d-5adc-4489-a760-0d99602c4665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca1ba160-ddff-429c-aa53-f6300a6d71dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0744ce23-6aa3-4f0a-abfd-b111eaa56137",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0feb032-1b9b-425a-8f53-617776534929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "211417c0-a9e4-4c2b-8597-ceb59885000f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e20d8b9c-f72f-4889-a051-f1f3ed3c20cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d41e3832-62be-4307-91d2-896ad35a9c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39dfc658-6ac4-4c99-8634-c925656ec603",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be3daae-71c2-4294-9f35-ff239bb29504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383f5ff6-0632-4dd3-bd26-f4dd571b27e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852932ea-509d-42cc-8f5c-08f99aa24dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "907c7072-2db9-41b3-a825-1e44da54f217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f60a3b67-3477-4fcc-ae65-122f1f961ab8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f39a90-5b60-4edb-85c0-32d4990c8982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "192eb785-e669-46fd-a4f0-6471995fa284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def0eff8-c622-4ccd-afc2-d65356dab32a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d610a47-2f2a-4bb9-a47c-339ce1d7b6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c49bbcd-fef4-4e07-a38b-ff4303681127",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58490d6-3747-4651-a9c6-84b64cae259e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aacdac93-90d3-4447-991d-e8ebbca58a72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd4f5a5-6b73-4de0-b60a-00057b19f111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c915b276-94c2-4e65-8b28-52a38ae7321c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37702e9b-6552-45f4-8989-910d298e45fb",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a21a60d-5082-4f6f-89c1-4fde3aa91b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6349939f-af00-468d-a875-7c306ffc89f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0e1211-9f4f-4e9d-854a-17c9b178b92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfec8765-06be-4347-ada3-06884b3ba1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3e6ba6-79fe-41cf-82c1-6e1efd47bd8e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36148f02-a59d-49c0-ab66-0375dcb3ea47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f16636-b77e-4d15-8217-fdb505d8ebf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689fde4b-9973-4867-a9e7-240390a01580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3588b456-394d-4a3c-b2d0-4bfbc515a4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a6a0d1-e098-4eff-93b6-d91582c59e0b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f44fcf-ec00-4330-8cdd-0ebd9bfdec2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "728629e1-8a8b-4795-9984-1546c1116245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94f7ffa-4175-4d1a-9f19-587b858058cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8814a9f8-f7d2-4678-a29a-d3a6c6b92260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686dccd1-9fdb-426a-9b20-575e0f5bfb5e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa9ac901-7973-41e8-8d17-8b05ca3fc12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "700539fe-a6ce-4659-bbf0-574a9516c6d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dffe70d7-4e73-4211-acf7-7171329e98d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e73eabd0-6cbb-4ec5-b143-420fca82382a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc0510f-7ac7-4c3e-9112-0b12dfe7c0ee",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70dd23e3-2f23-4c26-96cb-a099c1d448ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6904dd11-df17-4a2a-a6b3-7b6eb267de21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c5d1fd-1a01-4549-a824-21ff0004695f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49e2c646-72fa-4efb-88bc-a8084901b586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e08149-3f5b-4c66-a6c8-666488336677",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad980c1-bd3c-4340-b9c0-e1b04a89c9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd12e7e-af13-421f-80f9-8b004c5d38cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839714c2-0239-4522-abfb-d227dac103e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "515a1bdf-5181-44cb-9162-ee847f5536a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "515f17bc-5ccd-4410-9311-a829420a63e3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03967b20-4be8-48ac-8104-29da56f0943d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daa0326c-7d9c-49d2-a93f-c9d0dc34998f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5475e31c-53f3-4fc7-8746-c5f91a546d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e3d9136-a011-4136-b1ef-812a45b7327e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5484fc25-9115-4da9-a55f-b4f97d491fbb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "151a94eb-a553-48dc-9afc-d4640f260d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0b3eed6-dc24-47bf-aacd-2cd3db4bfdb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4801e1fb-83d1-433e-8ce9-1bcb02682354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef515d7c-0ab0-4aa0-ac3e-4d7306e4ae62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8761f72d-7fbe-420e-b719-8f551255b86d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7daf27d4-7c7a-4b20-9838-644b40fd4ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a08ddcf-9403-4ef0-be46-f2d76559b674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6306442a-b7b8-4646-bade-9c784953fc2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e80c9dc-ecb7-4089-9869-2e8fe594a533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0638a07a-b457-4d54-abaf-68b647d3258d",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5b7f42-c261-447b-98db-42a89cdd4f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "076c3de1-0b77-4fc6-9f49-9c44b19da6a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8910d0b-dc4c-4f38-892a-d66dce1b764b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1983224-6e50-43ea-9fbc-6dcaab500cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f83927-2844-4a69-84f6-7586f01c78d7",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "008b1efe-60b2-4d3c-a9e7-0718ea5746aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "182009c5-fbc2-4df9-b52e-20067069f4c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13182602-d4d0-4e53-8f80-05f597dd041b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "923d7fc5-30a3-41a0-b3b4-46860df1aaaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1307a42b-0ccf-4616-902d-f05b7e9d917f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7db3368-2c1a-4c94-91ac-9ed1976d6a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b5d486-ac94-4ed8-a2c4-c927cb65c70f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9d64e1-43eb-47cc-a1f4-f393a0c7e904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84f72d74-a9cd-4de4-9e5b-a9828193f0b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feea1018-1a6e-4083-8a27-311ca203dd01",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35113dd-b9f4-4854-9be9-ed8a56603ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f175a50-47a3-4b5d-9bca-6c96e5f0937b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5536f6f1-cb6b-401b-a296-1f3772ed2380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac714605-6f6f-4f29-abb2-67301023ea0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f3bf61-d03c-4f00-82f8-f7f1eef69cbe",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f11029d-b57d-4f6d-a0ae-6da4e9c3ed9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe7e7e40-d1af-4ebc-b433-218e4efd9675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c718f70-51db-4de4-9b2e-3a0ea3c5e817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc47aba-fdfd-4c12-8b58-d1f889be9c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918de230-4168-47a6-836c-83f24f5cd069",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a7477c8-97c5-41f3-b1dc-502fe5973bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1091a93-5eb1-4201-888d-c115c2eb8c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a57ec9b-eccf-48a5-a556-d279df85b307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c449d04b-4425-47d1-b8eb-a0f7241d15ad"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0790375a-aba3-48c2-bb39-be5590f73c1d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ae113b30-c068-4390-8bb1-b605fcaf2859",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea70dfe0-bd95-4a27-a1ed-4c8db447c8a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb8049a-e212-4f7f-b572-cc34288893cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b912bc7-3570-4962-90fe-3bf4fa70514e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "627e93bc-0983-484c-839d-8582ac2d76dc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8c952e6-4594-4152-b61b-c64b898e644b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af007c80-6b76-493f-9814-f5c275593522"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f379ceed-5c81-4a3a-bb50-8498e1551d15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f51af690-9152-4175-bacf-880cff68c71d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "257df355-7cb5-4e5a-995a-0ca1d3969f54",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ab0aa210-1c9c-4927-a098-9b94e1df6dfd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1287e64f-2836-40df-8129-62fae782fb9a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6d67617-3080-4c3b-a007-8d9b8f0f286c"
            }
          }
        ]
      },
      {
        "id": "a8e35301-f382-4d36-a4d5-208b9c45a21a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a01179bd-bfa9-495f-baf2-2e0269966926",
            "name": "Negative Testing",
            "item": [
              {
                "id": "411e44be-6a67-4685-842a-9f968f9b1800",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f273a5db-3193-4789-a4bc-a8281836cdf7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1266112-1427-4869-93ed-de4455800051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fecddba-0ea2-4b21-987a-3398c661fd6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf5bd14-d3d8-497f-834b-f6aca56b5382",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0727849-730a-4a1c-9eeb-3dae10e6c62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58380c15-fdb3-4a54-8e5b-f0bcccc118b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da867dd7-8f58-4f74-89e7-23cba8d74c62",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "975782c0-fc59-4910-a222-c0096264243d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86d0bccf-6d52-4e11-8244-deeb3806e084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d2830fb-aef8-404f-968c-a576e27e05f6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de751317-0685-4ffe-8531-b5047ef6639e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45d62852-a551-44b7-af07-fe058a85600b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8deefe21-6971-4d79-9591-6c2c7dc94810",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "062a999b-4950-4ec6-b56a-abb87b752eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db54764b-30b6-46a2-afc9-9a46a89f5973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584902ca-2401-47c9-a40f-cbd20fbc2f9a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ff0e7f-adb3-4418-b6a5-bd67a940a3af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a25233bf-e4b4-49de-8434-cee171a3276d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d45c89-e5da-41b4-be95-82f12ec26a07",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3eaa0b5-4c4b-4d74-bd7a-55c28dcabb4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d8d3e49-2d57-4c91-aeb3-93f3fb5ff3b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e62962-0d71-45ae-a865-bee0c8a5cb1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "254ccfd6-50ea-425a-91fb-f084a48e3eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf846dff-0e3b-4361-b7af-b3b8b0e424a1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f0dfd4-f9bb-45ea-9ca9-10b59b04d27b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "324a18b8-30f8-4c91-872a-f900c060e27a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1c4438-58b0-4df3-86ef-6e68093dd57f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d4e8d18-6b68-4536-894f-3b6de326e581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e823ea4-3b2b-444b-8f38-6ec4320a5f81",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15e5894-cf88-40e0-bd44-6e4b9bad1750",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92e8db7b-bce7-4bc5-91a9-6f399646bda4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b78383-545b-4831-82c6-7f953d66946b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17e57a0b-f350-448d-b57a-a2da1faaee73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a848463-68fa-43d0-a5ac-1789f64c28c9",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "896c04b3-a45a-4229-83c7-a3ae19d93e4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1148d81-7069-4a84-a86e-ce49d9035fcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfdfd8b7-0299-47cc-8857-f17aaa68e9dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e292acb7-1771-404e-b29f-1365c99dba76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c16f59-88f5-4fb5-a138-526045f07bd7",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78efb801-4aa8-4b91-b39c-5e833bbbe0be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ae64e2-9d60-4570-9f15-0f7813dd4f33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da7527a-23c6-4dd7-96f6-bfc26bfb0cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f33eba6d-2c41-4a33-8f66-dbbaabbade91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12372f2c-ae15-4c11-9e92-9dd53ae3a1b0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db39490d-26ad-4aa0-8608-b41ee8ec7bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f92e36-16d4-4d58-b685-7da9b1a002b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7272b4d7-4c01-4d63-ab85-83dfcdc510e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1f5cdd-9fc8-43ce-bf0d-cf07ae9e3290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11fa99a4-1d9e-4f40-9256-52162a74f526",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff69b4a-061d-4a13-bd43-b0c4ea72fbdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e39896e-3a29-4a10-a70a-63fa11d971cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51146bf-aae9-4ba6-93cc-170a83ae42e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d3cdb5-6a9e-40a3-8f2c-6d6bb914face"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d10760-2677-4d97-ae3f-90101afddcf4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ed2a62-7107-4f02-ba27-a796a3b9c1b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dee7591-cbaf-4325-ad07-412c17aba1c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "414e46d0-8bbd-4b5e-a481-6668f4820163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e67f4ef6-1c8d-47b9-815f-e1ce1e048382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "627e9742-80d1-41c1-83fa-bc6a9b95dc14",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0de4d1-c0c9-48be-8334-aa87bfdb89c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "711404e9-94bd-4321-a90c-dafc01a471c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "526c8ef1-ef04-4fda-b77c-5cc5e09123b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee478515-3aee-4d0a-9758-03ca76e62ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a09c4bd-5a33-41a0-a412-674fb6ca77a6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ae47e3-7211-468a-b6de-59b8726b206a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e25261dd-f29d-474a-b7eb-d79ea50f498f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2cde333-f70a-4326-bee6-7b62a7f0fddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e84fef19-6c43-4e58-b0c5-9404cc392b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1fd7e0-2c94-47fd-a0de-1e69ab894739",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3c90d0-7177-4cfb-b32f-bd9c6dd7b060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76863a96-59c9-405f-85d4-c0bb2bd49d03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "103a16d4-8c81-4888-beff-88a48dd327ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f0ad2a1-efb9-476d-84c4-835217f34f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a63e3b-94cb-4b08-82b7-99a228cf7947",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b5dc31-62da-4ebd-b7c5-33cc75948d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bb82c2a-2f88-4279-a8aa-58c589e7c2b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04fa912a-d204-48e2-98e9-f16a1d560d99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9f2db74-9c24-43a7-9d15-498ce4aad983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197ac8a8-d9cd-42a6-bdb5-7b13fdf4cf90",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cae140-bbdb-4ef3-8f13-45329ab66782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "604e04e6-0d23-4784-bcc8-bdd38e5e24d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0276b0d4-5f13-4855-9506-f9efb4d53b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e530a962-3ff3-41b8-bfa1-e23266fd5530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85fe8d74-8e5b-4223-bb7d-a034457dd61d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4448e1-2484-4c24-b80f-62e3f532b966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b0c9ab-55f9-4c55-843d-1c3068f81408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37e7f75-02f2-4836-b9f4-9ac1fba25639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2697ae3-5688-4f23-937c-89d6579ad79f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e457f51-4d0d-4313-9fc5-1109cb73f038",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbdff456-9f68-4632-8861-83e8fdc18017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb20ed3-044a-4e1c-aa1a-24815d56f7f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e940f0c8-35c4-4dbb-820d-337fbd556ef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e59e6af6-234f-4152-bef7-d6363d25fdd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9734281b-bd98-4b58-aa62-e2a3c206b431",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eacbf716-c7d2-45cc-b549-6dea0b0c7517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d610c877-a2d6-4f61-81fa-7aca61febaf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c252ea5f-ef80-4987-b816-16bcf49994e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b41c030-1645-4127-b846-ef08f837a6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab410e6c-73d8-40f1-b6aa-877807a3fd52",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8752b0d6-7d9f-4aa1-8e3b-0e5b00785edc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0fad964-e96f-4357-987b-c100d9a83068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15df243-49f8-4cfd-8f40-0ab23b004d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "731a51d2-36a2-473c-a0dc-3fb1e23a5c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd8c227-90ed-4417-95ae-6519adf82fc7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24257820-b56d-4a9d-b63e-659c911b28bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f08a4372-ceae-4625-9df3-689f2eda2933"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef91274-8dd6-427a-bcf8-2a0d779f8665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "665a23a7-6fc3-442c-8302-b6caeb213511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9822224-a5e0-4436-9d97-0f76d12f25e0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c006168-23ee-475d-919b-8717a05a6853",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc7141b3-d862-42d1-adaa-8408226e6105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "983feaeb-e1df-49c4-8b6b-c82befb15dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1740261d-01ea-4229-a4c8-68e067fdc817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2413fa5f-386f-44c9-a768-c9c50398926a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5682019a-1476-42d5-8c65-08ac1f87ba0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60edb413-da76-4ea3-8848-9d5956c6fefa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7863ffa-ca3e-4107-a406-1af82f30cb10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa015493-2f0f-409c-9a32-8accdc5ee7a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea0b4d0-daf6-44ed-9cc0-e4c747ecf4c4",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562b8d0e-5b3a-47f3-b107-0537e037e983",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87fcf293-2625-405b-b145-b0f04ca077b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b008b4-0e3d-4093-8d8d-e2646d269e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f2293b2-bf25-4cf0-98ca-759a2ae8f9f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c66bc5-b97b-4999-b6ad-50dc877f7539",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb5fb4a-6b65-4509-8201-af9466974888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad797c90-b400-484f-88aa-20fd878ee03f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b7f92f3-38da-4c04-8b8f-a1825ee1088c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdb15827-22ef-43c9-930a-8b55824db206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5092af2b-2817-4eb8-960d-e4b91d3a8833",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1394f9b-9cbe-4e51-b802-a38ee6bcafd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5d6150f-cf56-4471-ae6f-629af3da5483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da2a3c8-85c0-4aac-8dbe-221e55741df9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00b6ecff-fc60-4a97-9ca7-c07cea277419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923c3736-b165-4c50-a1f6-82661b0e17e6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a804421-b49f-4eef-bc98-15d028382796",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3254e022-7933-4026-996c-5fb93c285130"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9614b216-5568-4ead-ac83-0ff0df36cefd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "054beedc-4dac-4156-8127-39b230996e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7528d7a4-98bb-4207-8fbc-95e15cf3c26e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04487a0-2269-4222-a252-7bf96bbbc873",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b7525af-5e37-43e7-b9d5-8dd1ad60fe86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6878d92-bae2-4f65-b17c-ceccfed811d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f72784b-682d-44a3-93ef-abe9138e20cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b44e71-bb99-471c-ac5a-e69da0b71570",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c3cd199-c4d7-4395-956c-65240333d987",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eca6a1f-7a35-4ad0-a531-54db1296751c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c507e703-11e9-4bf8-b2b6-f69120878910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61a3c554-edb1-49d2-9556-31e5e086925b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd613ed7-2cac-42e5-9615-d384c1f7a42c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d447ae-b0fa-405c-85fe-59d62058516c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3454bfb4-3f9f-49c8-983d-b4a6e7cce9fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c24a1b0-7281-4079-bc1a-2f9404ceb647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a17a1be1-ea5f-4aad-9625-ce027700815c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16587df1-c72b-41e2-852c-07d14e5e0a7a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee63d26-b4e6-41c9-b364-3717d79c2b29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8615e914-96b7-4a06-a16a-aacc54531848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe2c49f-8205-4cae-976d-f95477fae125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76298c57-6a47-4697-8cb3-0cd8a91221f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a8e95f-2f8b-4295-9799-1a1acbaf1e2f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c332beb2-3e6d-4894-bcdc-c688413a619b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90bedda5-619d-4103-856e-82f211d8b630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fda9f89-a311-4283-a589-f511c3faf5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff1c616-1b7d-4760-b66a-a1079ba325b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80470d5-66da-4dac-86dc-624808b515f2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61d819b-d58f-4897-8c27-dba2ef43eb00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f32d2b50-f50f-45a0-b3f9-01ce378bd4d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b640f6-63df-4107-88ad-f803f6e4be31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9211f9b-fecd-46d0-ab36-12cc82b5f3eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63722ba-a5e0-49da-b6f3-779720f196a4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71cee1a-5ad0-476b-b16b-9403715cfeb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51f4313-665a-4986-bb31-d351ba7af3f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a007954-fbdd-4694-9e60-fa794dc7def2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a16f3cdc-5d65-495b-a54d-2e8dd9178a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e8cfa2-2261-46d1-9721-79de714f8a70",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8fd9fd-2528-4db8-80e6-d07af5825cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5672e35-1031-4dcf-8fe6-2f63d2c394d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b3b382-8f41-42a8-9d85-eedf7a7652a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abf1cdea-0c6d-4433-9cc6-2420b7b873ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f425f17d-4b32-493f-8d77-ba03418c5c73",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7332eb8b-486a-4d70-a6ee-9303d6fb47d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5025be6-7a90-4b60-ae08-6b571b7f94b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fc8686-d82c-439f-9b1a-9e4d3adb4048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d84110b-0cbd-487c-b033-fd757d32ca10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96da4acc-09d2-447c-b5a7-da16aeb4059d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2053225c-da02-4791-8011-2241593e3e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e00808b5-5603-40c8-b3a1-152da1161432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "900ef9f8-e406-4b0a-a6aa-a7de686a56c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c540fb30-78ae-4273-90f2-568ac3b73f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28999ab-f691-4d56-97d1-132cc37f1972",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5aab85-062c-4cda-a416-e0369bff0b41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "414a94a4-ca35-4cb4-9db7-f8b07b9b6db0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64bdd1ce-b966-4a96-9ce7-632052386d16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22cb7f8e-a6b9-4319-bb35-47f4a92ec4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79dc7e01-ee1f-4200-a50c-c5b0e593376f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf47feb-774f-4ce0-9bcd-c9527542c74f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0cc2114-544c-43ae-b174-824ca651ccc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "548fb18a-bd0b-4c76-890f-ae220f23b525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9850cf3-8a39-4a64-b71f-fe0696b164c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289cba35-ce31-4b89-a351-0793a3135d38",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0633f4b9-2233-4de6-9b8d-adc9ad71b5bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b048762d-85c9-4159-94cc-4e1df74d4dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c62681-ae0d-4f4c-9ebe-1da8e945f12c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da2766d-9b50-4a8d-9541-4068a57bbfee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07993d5c-9856-4673-85c4-93210af8ed2b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8a251e-43a3-41ea-97ac-ec91bb9cf070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccf6c1d1-ff5b-464c-96e8-d94f53c73076"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca2a4d5-5764-4e11-90f0-4814f6afa1be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22084b9f-25d6-4d8a-a5dc-0a735726fc52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d5fc822-1dfe-4e86-903f-95dff99e16aa",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc89cee-230e-49de-b368-b1d2125cde4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712ae9d5-6463-46a2-8d11-52ab86634362"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "418e76c4-61d6-49e0-b7eb-60078eec86ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c6e0260-d74b-49ce-99d9-0d8a86b3d116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1335ed2f-add9-4407-b87a-06571ca1b75a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f3557c-d572-4808-9089-a1d168beb748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e3fbfb-193f-4ebf-a6b8-57cc60733ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc98fca-cdfa-4bed-bc89-1bdf01fa4a53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d6d897c-9f83-4630-82c2-48c75b7a404f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbed240-fa59-4f2d-acc7-d767bc3951ee",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9457aaba-6b53-4259-811a-1582ea889f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c04eba-c2d0-4bca-abd6-74c656d797d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f362ce-055a-41d3-9e41-4535db189c48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04dcd6ae-0cc7-4014-b7db-f830014c7e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6424900b-c144-4bc1-aaf4-fbe4ff319b5c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74574f60-5c6f-4b07-bf75-8b68860753c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45499827-f1b6-4fb0-bea5-6aaf6a2e759d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3f1457-a199-4820-9bbf-0abb0b91720f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b7165c4-11ee-4e5d-8fc2-74d4451a80b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27df82da-8dff-42e5-a4c9-b46b670dada7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d586ac85-2ac8-4131-acea-39fcb50e4ec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e050bff3-8cf3-4bd9-95db-4e65af9195e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd43e7c0-3dad-439e-abea-56e3e236e9d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b4b7ae6-e997-499a-a4f6-0349f3b12845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48bb7b4-90e7-4d45-821c-fa20dba7726c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d942f5-594d-4d85-995a-98caea9d61c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d069649f-39e0-4223-a992-eb25938cdc5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffefe6f5-8e2d-4cf7-8241-db1611f7dca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854dd9b7-b8da-46bf-9414-8d6379dfe008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d390a2fd-642d-41cf-884f-1c0a31a19eb1",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b2a059-be06-4588-a61d-e48cb395de77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "839118bc-b6d5-448e-8cc5-e247bb053070"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef980744-628d-42c0-9c51-a736ac8c59ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dd84fa2-bbfa-498d-9e36-e0033c3f6f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e2fbf4-a9aa-4e47-aea4-080cb57f75f4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "176cc38b-fdee-462c-b23b-e5a335f80830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2392993b-4780-47ed-b503-b12d0bc47ff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54792852-d67e-41f3-abf0-705a23f2f7db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ebe748-c781-445b-aa90-75c432568c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fa8dde-c492-490e-8689-330bf46eeeb0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4da52f-2110-42ce-a5ab-da9e147e1877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "759af7ca-04ac-4f7e-ade5-c8782cbd789a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8282500-0670-44e3-bf55-35db9ec90b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f665ef2-4fb7-4ed0-89d8-38f4d1e39f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810501b1-7418-41d5-badf-81aa67910b41",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4679257-94b9-4ec7-8bd9-ccd45c51f1c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6121d582-22aa-48c4-8e5f-99dd2ca21c15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42cfc79f-ed1a-4a91-a90d-3d5ed65ded29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8979d1c9-5a71-4cfd-b4ba-b05e640a0de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c9c5a8-124b-4cde-b595-3bdc04c09844",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918bb072-8375-4dd1-8795-6abbf8057815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3681b3c-5506-4fb8-b504-e20f8c8280f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b40b83e-5d37-4a29-90dd-a7752e1924cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0253d9ea-a734-421c-88ca-ade3753ecf98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305e0e4c-f064-46f9-8a00-bb44b419b8d0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af562340-5430-465d-bd9f-6097b60baffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17f3f68-031b-4774-b88a-f8261808f96a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5daed01-c83f-4ec3-b9ee-655a36f841b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e90dc46-11e4-456f-8a6a-685208a29512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e4f3b5-2e06-4168-9d72-51541c014e06",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98cde297-c5c7-411d-b7e0-7cfb50573fc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49ad7dd2-e9ad-4105-baa3-5ac139defd33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb60cde5-faf7-4ab3-8d25-ad01c3c411a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d3c6c64-9dec-497a-a8fc-a4047de0cd96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a729685-f71b-41f7-af67-ff6e63e77470",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f349fe-bb2b-475d-b029-22b0364e09cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92808cbc-d01f-4ca4-be7d-71930dab7474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2993be92-d83e-4b87-9fab-d9200c1daccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f1c0d6-428d-43ce-9814-bdb48b2155a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ef9c21-7d53-421f-94f7-742d55cea1b0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18bc713d-b703-4877-beaa-7ffced68304f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da8ec28c-788e-46a2-85e0-5dba77859e14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d83b92-dc51-414c-84cf-e0f77c9ddfb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb47ffd7-a1c1-4614-8c56-88335c39671a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733662b3-cf85-40e3-81f8-d2c1f5faacdf",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568b58d2-ab4f-41f8-9d54-41e1dbd9f3ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df2cf8a7-4d88-49e1-801c-726504b4edab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55fd6af9-a571-48f0-9b22-71c94dbbe815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f9b3e4f-7389-44fe-8b24-8ef701f34b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36cdf9cd-8198-43f9-89b5-ea28a423a565",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f261112f-2752-41b3-8d2a-14183facbef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddba1520-8a07-44ac-a5fb-226243492007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c42b65-2b96-41ae-9f4b-c556e7cdad48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45510f9a-7702-4001-94f2-bbc3fb1f5cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a905a3c-694c-4252-a5cb-511fda36c687",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067d743e-6549-4313-b420-91ed921d829d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ff53e7-053a-48e0-aa78-7ea69c67c5c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53cd44af-2a21-49dd-91ff-ae2c1986875e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a74f35-1027-44f1-b23c-879f1db0acd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e418c6e9-c0cd-42f9-9e88-7206ea70bcdf",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15ff5ef-7366-4d5b-bdb0-22b7cf97a926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "276975fe-8842-4ba5-9c0a-c0149ff73a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "976dd03c-5018-41d3-9f85-d2e6c76f4e81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2021dedd-0139-471f-b94d-bb2aabf97139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1900e254-b893-4a58-ba79-5bc70a27a730",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d7d5a4-54f5-49a3-8b75-ff149e5efb7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc677f99-eb67-4fd1-ba76-31c93a9b0073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06871f37-a03c-417b-b6d9-149734cd222a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "227e0ef5-bc51-423d-929a-ef1a818e7e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38d1914-d18d-4013-a936-a5deab2aaada",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883e9b2a-327f-42d2-8536-475fd5fd1f04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "694e1088-4cb6-4036-a1d4-d612601b8ba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b55e3a-7435-4913-a94d-ca06f6922418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a64f26f3-0a75-4002-8359-5ed1288ddfe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17cc0fcc-b9a3-4698-9197-4d0e04e276c2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b57f63-b590-40c8-87d3-e0ba5b0b3a68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbc910c7-14a0-4b47-926d-c5519a0b78f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0081ce84-4775-4e80-9102-7ee957d32a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3318cd02-a3a3-4eb7-9e52-179971d5d34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5348e1bd-d832-445e-a05b-337fae4ba80c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ed728a-82e8-41d8-99b7-ec93bae0cc19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99f23665-19c2-4bc4-ba3a-27777f9dcc73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fa69c6-3e6b-418c-9455-71fccb0fef8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d96b40fd-abac-4922-83a4-c0117f22dc6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bec8126-7618-451b-9d35-62714003622d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9100cf52-a042-411d-9716-dc405e50c17e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47c43958-8cbe-43a5-8ced-05bfbda0a400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee95fd9-8406-47e8-ad80-9e44e663e698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21584d63-f649-49ae-8120-e0f5e5d4231a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b336be-e668-4eb3-9999-fa92c7e41594",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4cb0b78-b9ca-44de-8754-bc924ee1bb7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d03417e-9fb6-4239-bd46-420c8a4b71bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb78285-a292-4074-89f5-8e2352ef0532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96efbe9f-febc-4a4e-9a71-ab9855b821bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5f25de-b45f-43ce-8489-86752ea3c6ec",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41f28e3-aeab-465c-b0a6-fc6de22fdd68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73644839-55d8-45cf-8a45-516b62674add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "729f5d79-34c7-4a62-ac13-1fdf8c1bb90b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42b60ed7-925a-4c9f-bf51-9204438724bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fce866e-edb9-40ee-bc17-c0c90a6911de",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed161f01-35e6-4510-8368-82f0b2a303ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74e9dcd6-804d-4788-a8a2-7972fdd7fde9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f9de8c-5261-4878-bf5a-5711c256f2bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc340e4d-1200-4c10-a9ea-82f0b15fe654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed2565f-0cad-4e0e-8c4b-c212982fffd8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c487f8-dd41-4f0f-9963-57dc9cb64bfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "535d1c9e-ac0c-4ffa-bae4-9b7601ec8262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84930f0-1fc2-4c13-8d3b-54665b4fe799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6504b1ea-bd30-4ab7-a91b-841990ed83a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45588a4-1a40-4fe3-af12-5cc174b8ddae",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5db3da1-3770-4923-b67d-ee25b21bd28c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "868114fb-3972-4f14-9fd9-2faf529c1ea5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b101d7-ed14-443e-820b-78244857a9c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b83eebd-491f-43c2-b03c-9396439ce59f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a6a100-0653-4938-bf9c-16706d7615b7",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19080905-8f3b-4ad3-8894-e286065a6120",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0984b00-7614-4905-a58d-a3e98d288cfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20ff073-8f4a-43ea-976b-e192b3a4caa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5db558b-f756-4444-b434-171f00463275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7699902c-d291-4276-993a-9c5a54a31d70",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a475a36d-2a0a-4352-b132-9995104c638f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77a2fe66-b6b0-49fe-a9a9-18547dcbd18a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1354fd-c594-47b6-8909-444c9fb60783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25555db3-1364-4694-b8ac-e4904b1cd5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388d5f81-eb2e-4471-98fc-ce1358be356f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93981ec1-e114-4ed1-9630-8ba08699f62e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2db2c612-cec2-432b-a418-e081487a6c6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64171dd-c770-4b72-87e3-82eee3f4a49f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de994ba-0e75-4336-b2f2-b3e84362e1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372434ac-4898-450a-8a53-acfbe2c39f8a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3e39c4-052c-4860-b784-1a44695caf28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7f2accb-4b35-47b6-8f71-1a3dfa92130e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68923aa-25d9-4b33-85db-c0c95e2a60e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a436aca7-4b73-4c3b-b11b-d6bb81c7cfb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2522406a-c3f6-4bda-bc4a-5ef1854027bd",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80229a9c-8d94-4cc8-84d0-30f5bf7f0be1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c6ef5e4-d1f1-4316-8664-34cb09e92495"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8658c1b4-d45a-47c3-9968-b938cf35cf8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a649c0c2-3835-4030-9c62-0ba7de9b336a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b01dc86-0839-4abe-b8f0-abed22d46a3f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83494922-aa4e-49f9-ae23-c441a93fdf8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d145934c-4790-4a47-9d99-85f2cfd77d63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab098fc6-2253-4f09-8f3e-b718d4f5e809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f4861d4-1db1-4ca1-972e-f998f11acb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8513aa49-d4c9-42c9-88fd-d43332c34123",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de2b8c9-3766-4864-af87-44ae124d9815",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85e0fd93-3b0a-476e-8fea-4a6a2914e015"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3796720-e4ce-49f8-9258-936a18c4a9e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9167a76d-26f1-4b6f-a84e-fea8bd07c8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452892b0-b91c-4adb-a001-ee73fd640b16",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24260fda-d706-4da4-b1b1-e6f93bda6ecc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be814880-7d1f-4987-bc0b-c91c24addb63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "063cbc9d-dba4-4ead-b153-4a78cb0a6a04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a38cd6-8656-49c3-a0c1-c2b7bfb1cde8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53270cf3-23d1-44c3-ad96-42e6bc6ad9fb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7578f2-82f4-428c-bfd4-08532fc27d0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33b6caaf-9a03-4dfa-9fcc-237ce9989ed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ec1381-b945-4575-8c71-126f33bbd068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fb7062e-3f05-4c78-8494-06c43484cec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b222b3f-5577-45a2-844d-1e42e90ed31f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e5cf9b-2cbd-44ae-96bb-6f562daac020",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94321568-d9be-457b-8cfe-3ab026cc2b7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fc48e6-b4b3-4473-bcdf-f01b75a73b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42619be5-9309-48e7-9036-cb2519c4b9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec7c8d7-3e4f-4aa8-99e4-4f39111b0663",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14510bad-2c98-467a-a68e-fc6908d198b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f26c7df-9ef8-4ac5-93f5-dcf11f3ebd95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b11aab6-a101-4ff7-b21d-d7690a137824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c6ca634-2fc0-4740-899a-bb05f0c2efc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba6f9d4-62e8-4355-b31d-8b88f7e36da7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8adf8a07-7c77-4f61-a524-e47837e0c783",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6564c951-270d-4a2f-9706-c240166eb7a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a514bd-d7a6-4f7f-81fe-dc16999d27a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3221f8c5-964d-42dc-83a0-7ebf114735c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e49bd6-b927-4679-9ce7-40213d56a256",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4a21fc-4f58-4dfc-bf0b-f92c56227a49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efe92531-aecf-4066-948e-9a0930a89eb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f499a346-c71c-4ad3-9ada-8ab0582c5240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b21c7c3b-e3dc-4f23-b986-75c1cde62d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed0152f-65d3-46bc-bbde-3d53e34af809",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e288e8-e049-4e42-b56f-7bb5701f7e86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69c1cf3d-f4c0-46a5-9675-ba2f9a7b2020"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "429f102d-4b1b-4074-9a20-07f5a1523aa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "568e92c6-378e-4d0d-85c3-157380f757c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd9bbf9-0ee5-41fe-b115-85bdddcd456d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3fe0e5-31da-4904-a4a3-b3cda112aaf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1b60bbf-2f4d-477a-a86e-353aca4c7636"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b292e84b-2351-4acb-a133-6beceb17775b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd584e7d-3585-4e04-9f9e-b0d30ab35b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba8b9fd-b7da-4670-810d-32695bba0996",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2c34bb-489a-4684-8ad0-01e9a0c08268",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a643452b-1e95-478a-8aa9-618ab7756433"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ccc7b97-faba-439b-ba61-b350bb90cda7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b6e018-db3e-4037-8827-cf4f1788c00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aeae25a-14cc-44ac-b8bc-0ba51aac8292",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f0bb1b8-4965-4a6a-aaf5-2d80ddf1e9e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4ef4d45-33fd-4e85-aeff-1acf149463b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "614b44c1-c58b-41aa-b2f2-cbb6576d5534",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "badc639b-2e96-4c82-a390-d046ed3f49f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c18382de-7d2a-4b33-bc6f-d688df25328a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dcc44c9-d6b9-4168-b234-ebcd8026687e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa238ddd-aba1-487d-b0c0-04cd4a264bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "160aede6-bb67-46f4-86ae-055e5838a091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40fe852c-b3f0-428d-b064-760bca2cb5ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97244200-d99a-4755-a51d-8769aae9b572",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603ce80d-578b-4b4c-97a0-31e4fa50b246",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6936ddeb-d332-445d-b2e0-cd55ff24cf09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e78badd-af07-4ff6-89c5-55c5173c3068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb0e2fb0-e668-4ed6-a921-cfbbb0af54d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c681dcc0-7a22-4ea1-9155-2ea66c0cec03",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5408dd6-380f-466b-8179-9cde32f84e5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64bfde5a-a9b7-4d61-81dd-433613e6e62d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e1aa74-509c-42ed-a4d1-8ec7e3cb0af2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61f46b05-a214-459d-89c9-8cb261469ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c1096d-5700-407c-9298-e73a498c982b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fed78f-6c13-4c18-b21e-df68c279de36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1daf645a-edba-40ed-8fa3-ec8e2302fe09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de88c79-e014-486a-a987-4abfb78479a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f95093-7306-4ddc-93d7-53124cb622ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b089d8-1c42-43ba-a434-db7af866eeec",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f4cbaf-6803-4d49-8337-e9ce3344a152",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cc386a5-be14-475f-9c6b-acdadd238927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0648cf-2876-4ad6-8122-c9ba81c29dc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54dca003-4d02-4b5a-8710-b0d3600645bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848e9887-9bc5-4797-8653-677389d115be",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1931225-b5a3-46b7-bc1f-a72ebffc3f18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df1ecf4f-b79c-441a-85c0-582f7ef505fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6870b751-7028-42ea-8559-351ae8c75abd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "def9905b-15fb-47c6-ba01-6f4a783de448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a2b64e-3a72-4582-beab-2cfbaabad85d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff44aafd-e497-49f9-a28e-ce13d9590b65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "597154b5-eb7c-48f4-8f5c-bfb019b55145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e996c4-86cf-4c24-9041-7e9b57c55c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98d19ceb-086b-4904-8d1a-005586dc4a27"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8ab28de-e38e-4810-b9b9-5c6db85913e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04cb84a0-18b6-43d6-8a61-6fcaeb449e52"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3efd0ebd-7c80-4c92-a0e5-88ca19e10b62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ddd0bc10-77f1-4b07-97e7-51582634fe89"
                    }
                  }
                ]
              },
              {
                "id": "15b4d225-2c9b-4843-a383-3e8327a3a776",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ce9da70-919f-4d0c-b86f-c3241e21c205",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24bd4b3-66e4-4157-905e-64f00675c4f3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f5183949-5a67-4aa3-9b00-30cdded2a834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2064f6ef-39e1-419e-8b39-d65ddeeef0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa23c897-72ce-4d77-a4b8-f8bded53e109"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7101eda4-11b2-47e2-910f-0d4463201fff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94c373c9-b246-45b5-badc-13b19adec267"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7c17ec4-29a1-4a7e-9336-656e1165e4cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9940dd3-fdd1-4467-8189-6e2ab33f8427"
                    }
                  }
                ]
              },
              {
                "id": "9dde4436-ede0-4b25-828d-4ebc060e8ad5",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a7392b9c-9f84-4d3c-95e7-d59e8f7658f9",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2bfc941-0f81-432b-ad9d-869977bf95f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "50cd5512-679c-43a2-aa41-0dc11150d527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25643b58-8c1f-4f31-8c52-08a183c07509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a176823b-b057-4acb-9889-8960deb5ff34"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f41da7a7-de3d-4e5b-b4a5-a17a71698e5c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c9ba0215-2d73-4fbc-90ca-94d6dcaf9ac1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f7c68c3-a6bb-4de8-9a02-57c1a1fe5c33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "82079935-0374-496f-b1ef-ea6fd9e96483"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2b8afd5-da27-4fc9-9d03-f4babb66d56d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21ee2c8b-d31d-4013-825d-162c5b848906"
                    }
                  }
                ]
              },
              {
                "id": "65e3bde1-5c19-453f-82b4-95ba89a4967e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f5ba7f7-0e43-4ab6-abcd-f4b80fc0057c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "18ad48c1-6f66-4e8f-80ff-f3e8c3fff391"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b9a0b69-99de-4927-83a4-3fde6b5a7ae4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3469043e-0e10-4db6-a3cb-6466f27e90c2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "245cac4e-a979-4e9f-83ba-1cf4bbaa2959",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3a4cb361-4ccd-46c6-b8e7-197659345e6c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ef86aad-8245-4c4d-ba77-5daab852193d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe06288b-f448-430a-8cad-e372e5a7ef73"
            }
          }
        ]
      },
      {
        "id": "67ac37d0-2d1a-4ede-b44b-a4065a82d939",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e0156aa5-873f-4ccf-add8-a08441023e57",
            "name": "Negative Testing",
            "item": [
              {
                "id": "648cd7d3-b721-48a0-b905-fd69396a8821",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "300923e7-1f98-4a13-8406-8446214200a0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f53dca87-7cc6-449b-85d2-b2cfc378d8fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a091073b-5e6d-4635-b73d-e0e415affaf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1961f11b-922c-4b42-9cb5-b04b63e85fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48be2b5f-51df-4ba0-95b1-bde7f1432390"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b778360-bee5-4bfb-b4fa-d8293524030c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae402124-7538-4907-90de-a098b41a2410"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0546d34-2ccd-4a8c-886e-4b820101a22c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "baa797b7-9045-4bb6-b557-0279879bb69e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29badbff-481b-4fca-aa11-2138a286ce45",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6081390e-23e1-4867-8f54-bdb52aee9545"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4219986-1208-4b0f-9504-362ad356d280",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8b726c91-cbad-4d19-878a-058bcf065d52"
            }
          }
        ]
      },
      {
        "id": "fbb89092-2e33-4289-95ec-585cdc60e04f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3d48e329-8d20-4bc5-9bd7-7d6a8d220b05",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1db247a6-e5cc-40e6-ad9d-902ed46da294",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ad751138-8761-46e2-a5b5-76f2a036b1e6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31469b17-b29b-4e54-92bf-c1c07fd1f359",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c40e741e-845a-4a3b-be5a-5e24e1f98505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e044dc-f9b7-4b25-8862-4344de186dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "425dcf57-05b6-4207-9801-939f5cdb8240"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fef5b0f5-d8b5-4525-8704-e33c8e237659",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5049c0a4-63a4-4e22-9105-0bd8bf82b9ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a699c6b-7e19-46a5-a4b9-0677f8cc2477",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0ad6756-3067-4361-a3df-3b1d6e86528e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "16d8a9f0-b141-4fbc-aa98-c4e8f2eba2dd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2701ac96-0342-4c39-98fd-33c5f7482c6e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2d1e384-08d4-4c8a-9705-e867e7c1b0e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "14391bec-866f-4ee9-8b4e-f4c3f4f6874f"
            }
          }
        ]
      },
      {
        "id": "e1beaa28-ee98-4c0f-8e08-4868ed92d09c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "96f5c353-d612-4a37-bce0-35b91d7c8eab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f023c30e-d61a-4627-b8fd-a1f2b0e9222f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9d8b513-770b-473c-b495-44dd7362bffa",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a4d769-cbe2-4282-9459-96d0fccc05c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76a0dac0-5c5a-4223-a66d-0a07a62a4792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "658a356d-6edf-4c7c-9305-b08edee0f531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e8e0e58-e8d7-49bd-bb60-83fb5cdc9241"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44633c3e-7a72-4035-8f92-ad5d413da8e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2b336ab-dbd4-40b9-a0fa-5d1f7ea26bdb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3a56942-f867-47f9-bbcd-29eee88e03e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d7da01b-e093-4ccd-8a83-e072d91b9804"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "37fd9763-21c0-4a39-8b89-ef5e23d519c2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6bce8b82-6c1a-4ed2-8a7e-2b858539c2aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69341321-600d-4af4-a1b3-1c7abda4c0ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c948e98d-b0bd-4b01-8230-5434be28faae"
            }
          }
        ]
      },
      {
        "id": "ec0e99bd-e000-4805-88d7-c8113b40a02e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa029717-47b6-46de-bc69-8b03343c532e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "caeb3330-68a1-448b-ae05-9bf963ff18c1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4bc9030f-6502-4a74-9a7c-bf3c8a80c00f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "092d4877-6ee2-4014-874e-b1ed71e51f17",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e1bcb05-214d-4c3b-84d1-79d47e0a5f3d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 77.53684210526316,
      "responseMin": 6,
      "responseMax": 933,
      "responseSd": 91.57711472253824,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1704501330167,
      "completed": 1704501361996
    },
    "executions": [
      {
        "id": "6eb15e16-68e3-4e41-b7ed-f748187a2d60",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c6b4d344-90e0-4aef-9ad1-43e4d7a4d0ff",
          "httpRequestId": "58b2b6ce-91e2-4255-94cc-46ae3334dee5"
        },
        "item": {
          "id": "6eb15e16-68e3-4e41-b7ed-f748187a2d60",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "312fc157-e082-4c34-8014-043f91b4a099",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "f6ca3f1a-3170-4e3f-bd90-c160293c98db",
        "cursor": {
          "ref": "b53e7a9b-d516-4e81-a9f5-f95e1a9b1bb2",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ff39ffce-8bd9-4e2d-936d-0cc8eb8fa859"
        },
        "item": {
          "id": "f6ca3f1a-3170-4e3f-bd90-c160293c98db",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7163539f-ff6c-4834-a850-297e65340e81",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "5907d0ad-712c-43d3-9142-f55e54622810",
        "cursor": {
          "ref": "485d1d71-6f42-44e8-b467-8b5481d67c82",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5ab1dc22-a423-45bc-99d2-5b8ee5fa08ab"
        },
        "item": {
          "id": "5907d0ad-712c-43d3-9142-f55e54622810",
          "name": "did_json"
        },
        "response": {
          "id": "72ea2b9d-6abf-434e-8ba9-73e45bfdeb34",
          "status": "OK",
          "code": 200,
          "responseTime": 456,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8aba35-5365-4a26-b745-dbe5d1d5970f",
        "cursor": {
          "ref": "6606c4d8-a9a9-499b-bcfc-eb48612543cc",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "98623788-40f9-42b2-82fd-8a8bb732a184"
        },
        "item": {
          "id": "8e8aba35-5365-4a26-b745-dbe5d1d5970f",
          "name": "did:invalid"
        },
        "response": {
          "id": "628f3837-b05b-4a67-918a-55abc6377d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8aba35-5365-4a26-b745-dbe5d1d5970f",
        "cursor": {
          "ref": "6606c4d8-a9a9-499b-bcfc-eb48612543cc",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "98623788-40f9-42b2-82fd-8a8bb732a184"
        },
        "item": {
          "id": "8e8aba35-5365-4a26-b745-dbe5d1d5970f",
          "name": "did:invalid"
        },
        "response": {
          "id": "628f3837-b05b-4a67-918a-55abc6377d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24543598-4230-4286-93c8-29899e7adc3b",
        "cursor": {
          "ref": "1459cf99-e559-4148-b24b-14268a13b77d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "04d79bd9-9812-480f-a025-0a0026f43c9b"
        },
        "item": {
          "id": "24543598-4230-4286-93c8-29899e7adc3b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4c76ca89-d878-4c8e-8b8f-52513e32144e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 101,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce3149c-d676-4037-a1b3-a192eacd0dba",
        "cursor": {
          "ref": "f5492aeb-a952-4f96-ab00-cd98acefe3b4",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e57dd91a-d9b2-4ca9-9eff-f55db19df2ec"
        },
        "item": {
          "id": "4ce3149c-d676-4037-a1b3-a192eacd0dba",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6927a70b-e1b0-443b-a4a2-5347fff5b5bf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 54,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654400eb-cb96-49b5-b210-09f40f2e879e",
        "cursor": {
          "ref": "26976411-edd9-4bfa-b8a8-131ab60a2a2e",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "472a8cc5-5ba3-402c-b7cf-d09da4090088"
        },
        "item": {
          "id": "654400eb-cb96-49b5-b210-09f40f2e879e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9ae50b68-cd1a-4cf4-9d39-2846b043c393",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0514f7-a7fd-4152-bc5f-1d6fce823ee1",
        "cursor": {
          "ref": "f13f47ba-dcf9-4e02-a6ed-e3573aedde52",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "67b513da-dd75-4d76-89f9-77e769c621e6"
        },
        "item": {
          "id": "af0514f7-a7fd-4152-bc5f-1d6fce823ee1",
          "name": "identifiers"
        },
        "response": {
          "id": "544da60a-eac6-429a-b469-daad4d1b90f8",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9caed3aa-5c59-4561-9a7b-61f01768e0c4",
        "cursor": {
          "ref": "355387dd-66c2-4233-aeea-fd1a9856e85a",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2b14c34d-2805-4362-ac8b-1a3d22f33f55"
        },
        "item": {
          "id": "9caed3aa-5c59-4561-9a7b-61f01768e0c4",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2a7b6a07-8973-48a3-a0c5-107f2ce2d49d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636dc0c1-3163-4580-bba5-07670ac5f234",
        "cursor": {
          "ref": "1b71b72d-e463-441b-874f-0265c04fd00b",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "09369a08-4f65-4137-a854-8aacb0655ccc"
        },
        "item": {
          "id": "636dc0c1-3163-4580-bba5-07670ac5f234",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4396f2b4-764c-46d5-a908-5f8c47fdd827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f133229-c860-483c-ae68-e3a3868b7f44",
        "cursor": {
          "ref": "39c02154-d59b-4c81-aa49-47b26410b8fe",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e5bc2e5d-8279-421f-b906-9bfbe1c1a53c"
        },
        "item": {
          "id": "7f133229-c860-483c-ae68-e3a3868b7f44",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1b6880ab-c069-4ef5-84f2-bfbc22e7e6bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd574d1-058f-4e8b-8bc3-103d1fea6481",
        "cursor": {
          "ref": "6510adfe-fb7a-4032-8583-ea72e4f8a9da",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a408ac64-772a-4651-92c3-add269994245"
        },
        "item": {
          "id": "0bd574d1-058f-4e8b-8bc3-103d1fea6481",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2f177e76-67e0-4e4a-a531-47398a1f243b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207975b5-552a-4370-8cf3-66556c84077c",
        "cursor": {
          "ref": "d1cf451e-1ab5-4f65-a7d5-51ff03e91a3e",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7db2f197-2cab-44c8-9587-a437e3e43e39"
        },
        "item": {
          "id": "207975b5-552a-4370-8cf3-66556c84077c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f7f8d7bb-0568-4ca5-80c0-41a42a897c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afeff136-2a0d-4ad2-bb51-091f36ef6616",
        "cursor": {
          "ref": "7ba97735-4b55-4f1f-bf68-a152dfb844bc",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "37021e4b-6c8b-45e3-b22f-f7e6ea3c34cc"
        },
        "item": {
          "id": "afeff136-2a0d-4ad2-bb51-091f36ef6616",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "51e6f21e-d829-4e95-a8d5-e2ba7a46f86f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01de0518-9b31-4cac-a69c-9297be937e4b",
        "cursor": {
          "ref": "ed8a97e4-6a15-4653-8d76-b7a8b98f1ced",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "79848658-35b7-44aa-8290-50bc7652f1a0"
        },
        "item": {
          "id": "01de0518-9b31-4cac-a69c-9297be937e4b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d260c711-548a-4988-aaaf-bbcb06c77611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73931d0f-0436-4cc2-96a9-851ea2724809",
        "cursor": {
          "ref": "41e92097-fa9a-40f1-95a7-fd6086280a07",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9678d414-376f-4adc-a69e-d7f0830d253c"
        },
        "item": {
          "id": "73931d0f-0436-4cc2-96a9-851ea2724809",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a6e05cf2-c7f2-42f5-803f-e6b252daa6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8cb4099-ff4b-4c7c-b602-18986fc60727",
        "cursor": {
          "ref": "6d6d18aa-f443-427a-b2a6-c36ed26173f9",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "211b459c-4544-4bee-8f06-d26de3882c7d"
        },
        "item": {
          "id": "e8cb4099-ff4b-4c7c-b602-18986fc60727",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "9ff6a1b9-b02c-447d-a3fb-b8eb9be0cb85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7fbc187-eb2e-4a00-8050-1e5951c37a7e",
        "cursor": {
          "ref": "b030170c-9c88-4074-bf00-ca6b4ab998a8",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ed50dde2-3b74-40aa-9c84-eb61a81c03d0"
        },
        "item": {
          "id": "f7fbc187-eb2e-4a00-8050-1e5951c37a7e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "86966dc1-bb31-4761-b1e3-3f7b5282f435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6868bc8-a264-4d77-b137-91fb86d39d40",
        "cursor": {
          "ref": "ef47a86b-624b-42e7-9075-7033adf88297",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "16523fac-aeb8-41a6-a3b5-347d692c416c"
        },
        "item": {
          "id": "a6868bc8-a264-4d77-b137-91fb86d39d40",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e679da3d-9f11-4d89-b7d0-8f1ccc7935ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac4d448-e8aa-4fbf-9854-0d1cb3899b13",
        "cursor": {
          "ref": "39f88a97-451b-407c-8efb-63b20bed8ab5",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "35f524b6-37fa-41f2-94df-a32fd02b8b74"
        },
        "item": {
          "id": "8ac4d448-e8aa-4fbf-9854-0d1cb3899b13",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0eda3716-196d-46cf-97fa-b0e30a22e4bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5aaf89d-17f3-43b9-baee-0240d9d29c61",
        "cursor": {
          "ref": "98b46456-20af-4483-a305-4d6f0bedb87b",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "dab6e62e-7481-4fd7-9165-f7b71489544e"
        },
        "item": {
          "id": "e5aaf89d-17f3-43b9-baee-0240d9d29c61",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0e774f49-65a7-4d7b-b5cf-8a153b76f683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3375545d-0cf9-4328-a591-4c8c15b0344f",
        "cursor": {
          "ref": "07a5bfb8-0aa6-47ea-a259-d9ee9dea41bd",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "27ceabd7-bc3e-4721-b4be-8c4c6c0fa954"
        },
        "item": {
          "id": "3375545d-0cf9-4328-a591-4c8c15b0344f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ef71ba2c-5b3a-46ba-a1fe-ba0e557e313b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2e1ed6-55e8-4ff4-8566-ca16a0733b65",
        "cursor": {
          "ref": "9488f59a-09ff-4c14-b545-01a15e3eae4c",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "82ee3f7b-93c6-4b71-bc81-f9d91f207db2"
        },
        "item": {
          "id": "2c2e1ed6-55e8-4ff4-8566-ca16a0733b65",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ea682892-ae7c-4250-acac-de7e57babcfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdb580d-bd94-43fd-b73f-659534307055",
        "cursor": {
          "ref": "f49247d4-c8d3-42bf-9a53-d77461a0415d",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1cc8809e-a8a6-4adc-9332-ef044229c952"
        },
        "item": {
          "id": "0bdb580d-bd94-43fd-b73f-659534307055",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "816ef5ef-d23c-4d00-96f3-5e847a21532c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b04649f-8d41-4378-b3bc-0236ce099894",
        "cursor": {
          "ref": "06f7d381-dd30-4811-b4fd-1fde106dfcf8",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "bb8a198f-c524-4962-a10a-ded47886820e"
        },
        "item": {
          "id": "9b04649f-8d41-4378-b3bc-0236ce099894",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7ab7bb45-6623-4cd2-b771-9f5a55412ccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489c7e0f-f9d8-4c50-b3b6-2411d12f7a04",
        "cursor": {
          "ref": "c43c23aa-51a6-454e-be1f-e406f9bd56ef",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0daf87fe-aa1e-4823-8dc3-57e6c2e54468"
        },
        "item": {
          "id": "489c7e0f-f9d8-4c50-b3b6-2411d12f7a04",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "64161415-5f72-4d39-9e70-f663aa1e73c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a547b662-7cdd-4714-b325-0ed972b6f6de",
        "cursor": {
          "ref": "76945f46-29bf-4461-b2a3-d60191dc9625",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f67f52e4-8003-4a33-9eb3-24c1a69325a2"
        },
        "item": {
          "id": "a547b662-7cdd-4714-b325-0ed972b6f6de",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0b6a8b54-174f-4a7c-b2e8-10ca2c4f01a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d644f15f-19c1-4855-aba2-92f1e2e584b8",
        "cursor": {
          "ref": "2c07316c-adde-47fa-a028-a9cd4e9ec4f3",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c2b50d7c-a7e6-4467-bfc7-be9db7554569"
        },
        "item": {
          "id": "d644f15f-19c1-4855-aba2-92f1e2e584b8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "18e482e7-f347-4c32-9452-f66bbb72cd39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c5e4cb-5b85-453f-9e57-f3f4e6ccd791",
        "cursor": {
          "ref": "3f193f3f-c04b-4a0e-b276-232459ce066d",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fa1d217e-73d5-4782-9e3c-d1190242a0bc"
        },
        "item": {
          "id": "00c5e4cb-5b85-453f-9e57-f3f4e6ccd791",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8f1598d1-3474-4362-a3ec-d512886e84d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a817720b-8f74-4a31-9a3e-70dcd9c0e2bd",
        "cursor": {
          "ref": "cbeb15f1-8e26-4066-b5dc-61768fd94f1d",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c3b81b24-0837-47a8-8f7c-ca1c8133f9f5"
        },
        "item": {
          "id": "a817720b-8f74-4a31-9a3e-70dcd9c0e2bd",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ac0f3cb8-b309-4161-a9ca-7a7540a97f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fac09bf-58d6-4c8c-ace7-58279d9b09a4",
        "cursor": {
          "ref": "527b33f6-38ca-4dec-9ca0-67d1fc05ff3c",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "168419a1-797d-4428-8e75-383a724c2d27"
        },
        "item": {
          "id": "2fac09bf-58d6-4c8c-ace7-58279d9b09a4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "36c74d0d-4ba4-422e-b793-da7c1f61d53e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d442e0-1b66-4487-aa3e-1cc9e601b726",
        "cursor": {
          "ref": "0e9d9720-a858-4a99-b6d3-dfa763f18c1d",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3fd7f7f0-3cb7-4233-9645-1e0405200222"
        },
        "item": {
          "id": "a9d442e0-1b66-4487-aa3e-1cc9e601b726",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9511b976-ffd1-4191-b2e0-831b79a9d106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4597b426-658f-4acb-b4a9-d2ef93155c0b",
        "cursor": {
          "ref": "ca82cad3-7332-485a-9259-f3cd390b598c",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0090007b-fb63-4fe2-944b-5f856b6870f8"
        },
        "item": {
          "id": "4597b426-658f-4acb-b4a9-d2ef93155c0b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "09dfea66-8199-4ad8-9d9f-628bc0fe93ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b50954c-bac5-495a-b925-380043a1171b",
        "cursor": {
          "ref": "36301722-0ad1-4003-a98a-df123d98afa6",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4b2058a5-5e9c-45d1-bd7a-fefe08d6fc27"
        },
        "item": {
          "id": "7b50954c-bac5-495a-b925-380043a1171b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0f30f6b0-9ddb-4c3c-bc72-53cfc37aa9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7332dbaf-b297-4302-a9bf-33c1cc49aea4",
        "cursor": {
          "ref": "2d4501b8-421e-4ab1-9e3a-4a93199784f8",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fd2b089d-b77f-4e37-bc51-fc7533f150f8"
        },
        "item": {
          "id": "7332dbaf-b297-4302-a9bf-33c1cc49aea4",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "228ddee6-7037-43c9-add8-087a4bc5eb63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc48c04-2b5f-4768-8124-ecdd1e663b9f",
        "cursor": {
          "ref": "2db2dead-a58f-40b7-ad05-14053d83d085",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5d812dd6-ea70-4216-a78e-73d5c05f7d4d"
        },
        "item": {
          "id": "dcc48c04-2b5f-4768-8124-ecdd1e663b9f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "29c27bf6-a16b-4026-b5cb-6d18fb2ff099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dcdd541-7d5c-4f72-85a3-69fe26530afd",
        "cursor": {
          "ref": "cae50a99-201a-4a42-af39-e2450a2ab917",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6988442f-e4ed-4d15-970b-f5b74957ec8c"
        },
        "item": {
          "id": "0dcdd541-7d5c-4f72-85a3-69fe26530afd",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b1c26a25-b65a-4a87-a3a4-879aed850ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c08b4b92-1883-4555-848f-38d4f32fb48b",
        "cursor": {
          "ref": "fddca937-2686-4d0a-bfb5-b18a797514eb",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9617e57e-bd61-4d68-806f-8edf6ae384a9"
        },
        "item": {
          "id": "c08b4b92-1883-4555-848f-38d4f32fb48b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "504b8fb6-8ed4-4a79-8490-2ec39a772c47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf99f979-6948-44ba-b66c-73223fb644a4",
        "cursor": {
          "ref": "440fa4e0-20c0-406d-afb9-d15c4473320f",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3176f808-c331-43d4-a14d-d7a25b3a3ae2"
        },
        "item": {
          "id": "bf99f979-6948-44ba-b66c-73223fb644a4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2f810dcc-55fb-4ba6-92fd-1c1deae1388b",
          "status": "Created",
          "code": 201,
          "responseTime": 933,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "de1afc35-4902-4c7c-b12a-75f5742e2aed",
        "cursor": {
          "ref": "ae9ba291-75b8-45af-b30d-82647f6f0fd9",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c46a992a-630d-4315-abc4-f948a396315d"
        },
        "item": {
          "id": "de1afc35-4902-4c7c-b12a-75f5742e2aed",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "10283c56-cf4d-420c-81f7-579381418a7d",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "37a56c87-e36f-4fce-a0f0-175fe36eeafa",
        "cursor": {
          "ref": "ee53b260-402b-4cf7-89d2-a1ef946e4acb",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "30252622-49d6-4cb3-9890-58c107da42d9"
        },
        "item": {
          "id": "37a56c87-e36f-4fce-a0f0-175fe36eeafa",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "917b4369-db9a-4fa2-aa39-755464bc386c",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c5f0335a-82c1-405e-9513-63a500011b42",
        "cursor": {
          "ref": "f2a0b192-e36b-4cd5-8dec-bed5d7b91036",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f380386f-5d4f-4efb-bba1-c56e3355ba9d"
        },
        "item": {
          "id": "c5f0335a-82c1-405e-9513-63a500011b42",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f4d0a690-d9a9-4b88-b349-83fc23c3660c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f67621-c00c-49ac-b9ee-1e77c36b521b",
        "cursor": {
          "ref": "e9287320-c1c7-450b-92fb-10b8df94023d",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ad5618ba-2ed5-4e51-b872-06f9badf6ac4"
        },
        "item": {
          "id": "f9f67621-c00c-49ac-b9ee-1e77c36b521b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "aacae6e3-ef13-44da-8a2e-8e6e88a05e7e",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6cae9323-bcca-4183-b4bb-de3a68b1764e",
        "cursor": {
          "ref": "5b2f098f-fe2d-4703-8bd1-ca3d3d745534",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3d21b2aa-53d2-4aee-aada-7e9d5821713f"
        },
        "item": {
          "id": "6cae9323-bcca-4183-b4bb-de3a68b1764e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6a06f008-cd78-4df0-a441-72a650532088",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8500ff06-cc0e-4b99-9426-fec35a0c03e1",
        "cursor": {
          "ref": "598d8a01-2e3f-47d9-824b-c005cf709873",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ecf08574-f9bb-4305-9dc8-6f615227790f"
        },
        "item": {
          "id": "8500ff06-cc0e-4b99-9426-fec35a0c03e1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6565fd78-cfd6-4f29-8fc5-80e5defb66c7",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "fd0e7cc2-32f1-4710-af8e-310bffaae589",
        "cursor": {
          "ref": "ab64065b-f94e-4f69-9454-496bef732de9",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8fbae25c-fcdf-479d-80f9-044fc17ef410"
        },
        "item": {
          "id": "fd0e7cc2-32f1-4710-af8e-310bffaae589",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "044f7f7b-3222-429b-a0ad-5d957e4310b5",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6c414434-a83a-4dff-91ec-b731eaa6f762",
        "cursor": {
          "ref": "187745ba-53cf-4612-a3cd-18b0bad7208e",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "047382ae-b1a1-451d-9cfa-d5113a0112bf"
        },
        "item": {
          "id": "6c414434-a83a-4dff-91ec-b731eaa6f762",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e75c5f3f-65c4-4809-9a35-934dfb59c210",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3a915c59-193c-48b8-bac0-97259ec91208",
        "cursor": {
          "ref": "1bb678d6-c677-43d5-a6e7-836dcb48773e",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f999d6b8-37ce-4540-862d-af960d3c9c02"
        },
        "item": {
          "id": "3a915c59-193c-48b8-bac0-97259ec91208",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "22e3b9a8-04c6-4e40-bc03-8bae839076c1",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1f0855dd-439d-48b7-b179-6f3848a43f90",
        "cursor": {
          "ref": "820f269f-1edf-42c6-bfa7-6376dc204329",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "eb6dd0ad-675a-471d-8fef-e9ec4aca01f0"
        },
        "item": {
          "id": "1f0855dd-439d-48b7-b179-6f3848a43f90",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8670ea6a-f1c8-415a-a5b1-9982bdaa7c23",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "993ef4b2-67ce-4bc5-a57e-a587520f16f6",
        "cursor": {
          "ref": "2ead5e8c-10a9-4757-a61a-fa206b80d9ef",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "761ad664-9d6d-46f8-9654-8f4789d3fbc7"
        },
        "item": {
          "id": "993ef4b2-67ce-4bc5-a57e-a587520f16f6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "1d787472-2835-4bc4-aee3-a804e65f960f",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0997c6ef-499f-43ba-a2b1-26a6ffb56b21",
        "cursor": {
          "ref": "afaed6a4-2feb-4576-a867-3533d0fbe0c5",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e7024594-6447-402a-a8b8-730b86513df0"
        },
        "item": {
          "id": "0997c6ef-499f-43ba-a2b1-26a6ffb56b21",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "390b8667-db64-4aec-b2a5-3bafe88bcf76",
          "status": "Created",
          "code": 201,
          "responseTime": 384,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "ba888df4-60f5-46c1-b874-c8eed3f6246e",
        "cursor": {
          "ref": "e4f3b7c3-8cff-4b7a-93b8-ad94ae14b96a",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ac73ce61-7ad6-429b-9218-acecaa380a00"
        },
        "item": {
          "id": "ba888df4-60f5-46c1-b874-c8eed3f6246e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "edd3c89f-59cf-4ddd-bef8-3cc1e34b8f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b017eda7-f660-4205-b8bc-6c3f9cadff7e",
        "cursor": {
          "ref": "2a706907-9954-42af-b097-e5740eeb5e6a",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4c9b79e9-f8a6-49d5-99ae-5394b7471763"
        },
        "item": {
          "id": "b017eda7-f660-4205-b8bc-6c3f9cadff7e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f5bfe5db-ae03-40cf-9458-5bdc157ba7f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b27fdf-a4ac-4645-8dae-ccf00b8f2a17",
        "cursor": {
          "ref": "2638a967-2e98-4586-8611-5445e1cbe997",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "eb42c9d2-0a05-41c1-9043-4f88d2f5ffaf"
        },
        "item": {
          "id": "a5b27fdf-a4ac-4645-8dae-ccf00b8f2a17",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fb63a07b-7d3e-4325-805e-bdd5db3bd055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c86735-3ebd-426c-bda3-c1c0f8a8f561",
        "cursor": {
          "ref": "787071f9-eb7b-440f-a1c8-6ea893bfe9b9",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "85ea3ae9-f9e4-4e37-b51f-d37adf50594c"
        },
        "item": {
          "id": "91c86735-3ebd-426c-bda3-c1c0f8a8f561",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a597f455-0eb0-4e5f-91ad-69fd766cfbe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c88f3cf-ba89-479e-b64a-1892565139f8",
        "cursor": {
          "ref": "8bba37e4-6b8b-467d-84f8-451bde2cad26",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1e460cc7-ec4f-4664-850b-f92b56cd094d"
        },
        "item": {
          "id": "5c88f3cf-ba89-479e-b64a-1892565139f8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4fee094b-024d-48bc-aad2-6f340aabaa03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84405780-f2ee-4b58-861f-969b4d591a17",
        "cursor": {
          "ref": "069238c1-a05e-4fe4-a466-4d1466ba46da",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "49335168-5b64-464e-8c0b-18f427f4dfb2"
        },
        "item": {
          "id": "84405780-f2ee-4b58-861f-969b4d591a17",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5677677c-e45a-43d0-a71b-a22e9ef1577e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf6dea5c-66e9-4cea-bdc3-ac685c1b3e77",
        "cursor": {
          "ref": "14edcafc-750d-40b0-85e7-2859667ff359",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b2398937-f8c0-4591-aa98-99d1f44c4737"
        },
        "item": {
          "id": "cf6dea5c-66e9-4cea-bdc3-ac685c1b3e77",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3a52f3af-faf8-41a1-88f6-cfbb11025c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7177c40b-e53e-4e7c-bbd8-a3fd51be9ba0",
        "cursor": {
          "ref": "c8362cec-c939-4ab7-8a12-90279ca07003",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9706571a-1653-48f3-9911-dc57a310a142"
        },
        "item": {
          "id": "7177c40b-e53e-4e7c-bbd8-a3fd51be9ba0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9143c9c9-a7a9-465b-bebf-14cce1b5da2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cc507a-076f-4b49-96ae-2a1ba459614a",
        "cursor": {
          "ref": "89c939f0-c351-4a27-bb79-fc0a9f46391c",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d172258c-c9de-44ce-a9ea-11b4295de870"
        },
        "item": {
          "id": "e2cc507a-076f-4b49-96ae-2a1ba459614a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e5372d55-4291-4b3f-b1e9-d6ed7a755781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f800da9-b95a-4b1b-9fec-6d10fbfd37cd",
        "cursor": {
          "ref": "c5f7610d-f48b-464b-b73e-6db6b15d7bf4",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f6bfba3c-0d30-4784-86f5-6e9359d8bb5c"
        },
        "item": {
          "id": "4f800da9-b95a-4b1b-9fec-6d10fbfd37cd",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "bc859d6e-72e4-42fd-a0f8-ecea074bdd8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e33cce-ae07-49a6-8c6b-e32d71cc93e9",
        "cursor": {
          "ref": "bf2b39f1-1319-4bbb-8a1c-2adae32aece8",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d218f202-5697-499c-8c9c-d2dd00478498"
        },
        "item": {
          "id": "e8e33cce-ae07-49a6-8c6b-e32d71cc93e9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "23a8cd8d-d5ab-4674-8995-6cc22bf8b4bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ca4b24-7eae-4780-a02e-9bea50b58c11",
        "cursor": {
          "ref": "e1a13826-eb16-42b3-988f-71ee0e85117f",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6b9c02d0-8844-4e8d-8462-3dfbed581179"
        },
        "item": {
          "id": "d1ca4b24-7eae-4780-a02e-9bea50b58c11",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6ad6ee36-7fa1-4e10-805e-4c477896e2a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b07bbb-aef9-4ebb-8724-0ee25efd6525",
        "cursor": {
          "ref": "5047124b-d5d6-45c6-b4cb-56217a961171",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "67ebf009-0834-4cd2-a10b-b7d8120c976d"
        },
        "item": {
          "id": "53b07bbb-aef9-4ebb-8724-0ee25efd6525",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4b149f2f-334c-49ba-91c6-88b78264c3a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a622d4-8763-4514-94c6-105dfdc7f3c3",
        "cursor": {
          "ref": "a595fbc2-d2bb-4295-9b28-e6a5dd59de8c",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2db35878-7ad4-43af-b8f5-1eeac51cdde2"
        },
        "item": {
          "id": "f8a622d4-8763-4514-94c6-105dfdc7f3c3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b546fd7f-8215-42b8-bb70-1f56d77261f7",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "958a38cf-8cb0-4e54-b81e-716017d008ca",
        "cursor": {
          "ref": "d65351f5-069f-48e4-9302-77681742f4d1",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "99505a87-75e0-426f-9e03-907b16e648d9"
        },
        "item": {
          "id": "958a38cf-8cb0-4e54-b81e-716017d008ca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "04dfab5a-8cfb-4ed8-b212-ea3381996360",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "3a5548a3-96d9-4b77-88db-f1c40b1eb37c",
        "cursor": {
          "ref": "bc3e35dd-7f5c-4da8-87c3-e8c0d1567e6b",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9e1f83f1-93d6-49ec-8c38-9980447e928b"
        },
        "item": {
          "id": "3a5548a3-96d9-4b77-88db-f1c40b1eb37c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "88e6ebd6-89d6-4c7f-8aac-a14dd7ebe36b",
          "status": "Created",
          "code": 201,
          "responseTime": 385,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6ec4adc9-7065-4176-8e74-e58bbf035b3c",
        "cursor": {
          "ref": "a6c73476-f018-4230-9d21-69336ef1f4af",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cedd5970-c303-41c9-84b0-ea2ddc90b8de"
        },
        "item": {
          "id": "6ec4adc9-7065-4176-8e74-e58bbf035b3c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "aa33583e-b702-4cfb-9137-8db7561ff422",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "ede433ad-afcc-47d1-947b-1f8b27f5c740",
        "cursor": {
          "ref": "ea110176-8b7c-4562-829f-13a0baf970af",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2617f3b2-cf77-44fe-bd4a-e6abb4e0089a"
        },
        "item": {
          "id": "ede433ad-afcc-47d1-947b-1f8b27f5c740",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f8924e1f-4ded-4f94-9fec-dde9c52eead6",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "fb87f5c0-9beb-487f-83e5-13f5f43b3c12",
        "cursor": {
          "ref": "cc0b4bc0-7581-4bd3-b912-ac2ce3586ef7",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ca0ed319-6908-4ed6-803b-d59e18b00482"
        },
        "item": {
          "id": "fb87f5c0-9beb-487f-83e5-13f5f43b3c12",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "527c56e9-1596-4048-a765-7e9935eba6f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb7c611-e13a-44b9-8d76-2530800177cd",
        "cursor": {
          "ref": "6d4bc51c-8f14-4bcc-9099-ae47fbc413dc",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d26894ac-c075-4ceb-be16-293c4a345ee4"
        },
        "item": {
          "id": "abb7c611-e13a-44b9-8d76-2530800177cd",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "aab32375-8d21-4410-bf21-67ed64a22d33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2457bc4f-6915-4213-b48b-05225b06a982",
        "cursor": {
          "ref": "e214c27f-2eba-4034-9c99-1e840e7526cb",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "23a336d7-628f-4adc-8073-7af7ddd95bd2"
        },
        "item": {
          "id": "2457bc4f-6915-4213-b48b-05225b06a982",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d9ed6b06-1bf9-4ba2-9a8a-747114d4b01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d67c617-e6ac-4160-b930-f54d706dddfd",
        "cursor": {
          "ref": "55738987-ade9-4c26-acf9-7681c6f17348",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e704b0e5-9557-40ef-8813-5a958b57d46a"
        },
        "item": {
          "id": "7d67c617-e6ac-4160-b930-f54d706dddfd",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7bc05bff-0cf8-4998-a8a5-0fd294c1b70a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33a3ded-5310-4ab8-8d3f-1ec10e0d259f",
        "cursor": {
          "ref": "d5dc05de-296d-4c27-824b-c71cc10fc75b",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "17121e0d-f4ec-479c-b3d8-291795070360"
        },
        "item": {
          "id": "d33a3ded-5310-4ab8-8d3f-1ec10e0d259f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4edb7a61-6784-4f52-a742-2120c088ca28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8aea96-f0f8-429e-8020-a1064889566c",
        "cursor": {
          "ref": "abcf0b30-c814-4820-bf49-cd39e132e7a4",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b706c226-1175-4650-8dba-bc1679fb59f4"
        },
        "item": {
          "id": "4c8aea96-f0f8-429e-8020-a1064889566c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c7f4704b-62d4-4a66-b32d-d52cc8b0ba26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "820daf35-b20e-4948-9724-cec46ef9b6a3",
        "cursor": {
          "ref": "813c00ac-7a28-4754-9e44-846f8b6800a1",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a910e2ca-8f46-48c6-b46b-0fc2a43b719d"
        },
        "item": {
          "id": "820daf35-b20e-4948-9724-cec46ef9b6a3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a4bee208-8c82-44b3-8504-74aeef944852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d0a78e-dd87-4944-ba82-ff1ef5b2b228",
        "cursor": {
          "ref": "fcfef6e0-4708-48d1-ab36-536d7472baa9",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f814dcf6-c756-4710-a329-c9440cb48e05"
        },
        "item": {
          "id": "93d0a78e-dd87-4944-ba82-ff1ef5b2b228",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0df1d9ff-c825-4340-b560-bce3c3592bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15d4ba0-7c8e-4551-b833-e32e53cceb5c",
        "cursor": {
          "ref": "448e5dd5-6fab-4395-b30e-ac152180afdc",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1cfbf26b-1dca-4f02-885e-1a40b3e0ce6b"
        },
        "item": {
          "id": "b15d4ba0-7c8e-4551-b833-e32e53cceb5c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "94a968dc-1774-4555-9fea-bfb0bb81f161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc132d8b-5028-433b-abc9-6a159d5d5c3b",
        "cursor": {
          "ref": "f70a2b0e-5588-4a76-9bb6-d8b8cdfbbb70",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "62c7706c-d0c3-441a-9a1a-80ae9bb13b7d"
        },
        "item": {
          "id": "bc132d8b-5028-433b-abc9-6a159d5d5c3b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "376fc51e-19cb-464b-a8d4-a9233150ef94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a6655c9-dfcb-42f0-bf75-302401032f4f",
        "cursor": {
          "ref": "889f965d-3b74-448e-97d7-a0042cf4ff6d",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5eca9d6e-ab20-4415-8b4e-90ff0caecf08"
        },
        "item": {
          "id": "7a6655c9-dfcb-42f0-bf75-302401032f4f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "081bbbd0-c92d-4717-8d04-79da5b0fa228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8eb1288-7da6-46d6-a543-33197de42ef0",
        "cursor": {
          "ref": "b9936a1f-f053-450c-83ae-de84b7402363",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "23b1d525-a2a4-4d7a-85b1-af5cb87c764c"
        },
        "item": {
          "id": "e8eb1288-7da6-46d6-a543-33197de42ef0",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3565fbf6-4982-4d1c-b55a-a179c83a7ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9232265-7633-40f6-8324-e3d454ba1ddf",
        "cursor": {
          "ref": "be67591a-84ba-472f-9164-cea57835f384",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "11e2ac18-048f-4b76-91e2-51ba2c74d1b8"
        },
        "item": {
          "id": "e9232265-7633-40f6-8324-e3d454ba1ddf",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e39acbee-e538-4398-af97-dfa38f239a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e63a0b-2b83-43d3-b047-eb975a0b4839",
        "cursor": {
          "ref": "6bf5e15e-1114-4d3f-a82d-40c2211442f1",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fff6ff1d-024a-4c56-b21d-5d8b482ce961"
        },
        "item": {
          "id": "91e63a0b-2b83-43d3-b047-eb975a0b4839",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d05e98d0-83b3-4f32-98db-099026578bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de12d62-9488-473d-93bd-dddb017011ba",
        "cursor": {
          "ref": "7771f374-8d07-4017-9cf0-4bbb9f9e5561",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4559c385-48b1-400c-9a5e-d9d893f44fd1"
        },
        "item": {
          "id": "5de12d62-9488-473d-93bd-dddb017011ba",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0ec786c0-8418-48bf-9bb0-6e1b73821122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0b7083-1c7e-4fc3-9ca7-12cecb7c58ef",
        "cursor": {
          "ref": "72dc76e3-3968-41f6-98a3-28f4c4cec004",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ebccc8bc-b43c-4dc1-b38a-b3484080fd11"
        },
        "item": {
          "id": "1b0b7083-1c7e-4fc3-9ca7-12cecb7c58ef",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "05b7071b-5a4c-4ee7-b735-93019f974af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b73ba5c2-a03d-47cb-9d8c-0d779e4923b4",
        "cursor": {
          "ref": "3103470f-9626-48a5-8a7b-432f395d5f99",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ed464728-ff7a-4a9c-9c30-99480c7d451b"
        },
        "item": {
          "id": "b73ba5c2-a03d-47cb-9d8c-0d779e4923b4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c9c564b2-0871-43cb-98da-3220de029839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23030b8-98e8-4f29-9a6a-c883d2c13778",
        "cursor": {
          "ref": "3a882ff8-3741-43e2-ae57-29e1447bf159",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "115eae5d-8ffb-4d54-92db-61e44891537e"
        },
        "item": {
          "id": "b23030b8-98e8-4f29-9a6a-c883d2c13778",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "58dc8258-f788-4574-a536-8d2ea32e4f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e357b138-6adb-4764-bdcd-423fc5e38261",
        "cursor": {
          "ref": "bedb1144-0770-4b87-8274-ab05e6a7426b",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "07f16941-ec6f-4d04-b429-e2d83de82465"
        },
        "item": {
          "id": "e357b138-6adb-4764-bdcd-423fc5e38261",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "58568f3e-22de-4dbe-8f24-26ddbceba0f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1487f913-8a50-4879-9970-5007696cae53",
        "cursor": {
          "ref": "aab9f783-92bf-4976-8efb-05575de94f56",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e99812d7-7aff-4a6c-98d9-d74d5b7aab56"
        },
        "item": {
          "id": "1487f913-8a50-4879-9970-5007696cae53",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "49a64ce6-4d58-4186-a670-96a55b6aa255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d3027a-4fff-4236-9c56-3a2e3bfbac11",
        "cursor": {
          "ref": "f118f079-eed3-449b-966c-f22d35f57303",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "43fba69b-35bf-4e9b-a603-3e167a9dd40a"
        },
        "item": {
          "id": "15d3027a-4fff-4236-9c56-3a2e3bfbac11",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b43d8c2e-3e51-4b73-8fa1-11a3666c2a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e63f31c-de21-4ba3-be14-53d1dace3a63",
        "cursor": {
          "ref": "0381617f-6285-424b-aa65-bce3ba23d8df",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ec99133b-bff9-421b-96a5-fb59d46194a7"
        },
        "item": {
          "id": "3e63f31c-de21-4ba3-be14-53d1dace3a63",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c92304e3-3d29-435d-a35b-43df8eeae536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd74f757-afc4-4f1d-8f38-100ab79fd4f4",
        "cursor": {
          "ref": "807e32a5-9732-4f3b-a6d4-7955c2c2c96e",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b4ccb0c9-0f8f-4d1f-969d-77f4e0c09fbe"
        },
        "item": {
          "id": "bd74f757-afc4-4f1d-8f38-100ab79fd4f4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f9bdc839-a792-405c-b1f9-ace4ab5c4c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b36c3987-c195-4e59-a4a9-3812b0394ad4",
        "cursor": {
          "ref": "78758e2c-f3bd-40c3-ad0e-eebf4098f10c",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "850f9bbe-ac56-4ea5-9a94-839b5c575ee7"
        },
        "item": {
          "id": "b36c3987-c195-4e59-a4a9-3812b0394ad4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c0be42c8-c6bf-45c2-bcb9-008773a1f019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c81f51-6155-4580-a9da-f76e561845b3",
        "cursor": {
          "ref": "a42a851b-2488-474f-accd-82622f4c6278",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5527a7df-9c28-4f23-95de-3a6b6d7ab867"
        },
        "item": {
          "id": "c9c81f51-6155-4580-a9da-f76e561845b3",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "472a24e6-2f92-4967-9ebb-c1a713a8f763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "424263db-296a-473b-82f5-ae955c6c8b14",
        "cursor": {
          "ref": "7dfa11d5-9410-4660-83eb-7b8273a36ed5",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "04347942-0a48-40bd-8db5-920b581953a2"
        },
        "item": {
          "id": "424263db-296a-473b-82f5-ae955c6c8b14",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8cea4709-faf9-45f7-8ed5-f8135bf8177f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f8569b-355e-47d1-b91d-84302cd0f3ae",
        "cursor": {
          "ref": "276037f3-3fd2-4414-967d-13646514e7cb",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "385a9cbd-382b-49f2-867f-5d8da676c0d7"
        },
        "item": {
          "id": "38f8569b-355e-47d1-b91d-84302cd0f3ae",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a118e484-2ace-49a4-80df-b9b49ea7fc91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110a1683-797b-4568-b33f-04599fe63a3f",
        "cursor": {
          "ref": "80a8e0fb-340b-4be0-aa98-19d00efbda80",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3ae777a0-2f3d-468a-9738-2e0a0a83cd2b"
        },
        "item": {
          "id": "110a1683-797b-4568-b33f-04599fe63a3f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "572411fc-d070-4d01-b76e-384b8e4da1da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6b2234-3018-4ee8-bf7d-f967df27b4a8",
        "cursor": {
          "ref": "7e8527b4-5a20-40ce-a89e-320ad0310476",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4ffd4067-c75b-45e3-b835-d7484b929ad8"
        },
        "item": {
          "id": "9e6b2234-3018-4ee8-bf7d-f967df27b4a8",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "266c12bc-71dd-4992-9137-6ca3e4619ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d26ad67-b07f-4015-848f-1c8850c56b8e",
        "cursor": {
          "ref": "181ddd0e-b2f6-4648-b2aa-992c7216f10f",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "646c2956-596b-4614-ab9b-1cf90a49b833"
        },
        "item": {
          "id": "3d26ad67-b07f-4015-848f-1c8850c56b8e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f2a5393a-1a00-4390-953c-c218c2b42dfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780f7e3f-0d3b-4987-bcb2-9d3caa55ac4d",
        "cursor": {
          "ref": "01d41787-ae2e-4fce-b114-72012e8cfccf",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c8a756ea-fe52-42e3-a3c4-26858c916e00"
        },
        "item": {
          "id": "780f7e3f-0d3b-4987-bcb2-9d3caa55ac4d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "40ddc6ad-18c8-4b2e-8be4-ae8def64cf7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f32e8c-aa49-4700-8ad2-8efe69510472",
        "cursor": {
          "ref": "c0833a5b-bc3b-46fd-bea1-ea247732b163",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "27aa321b-3aeb-4641-bb0e-7fde60389dbc"
        },
        "item": {
          "id": "e7f32e8c-aa49-4700-8ad2-8efe69510472",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e22c4828-8624-456e-a100-91f1ef17d3b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb8f4c25-248a-4870-893d-ed730d2cdb03",
        "cursor": {
          "ref": "1c1f5955-cf88-4e44-bb59-ef1244b823fa",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e4b0097d-8826-4da9-9e13-e8a37d4bb93d"
        },
        "item": {
          "id": "fb8f4c25-248a-4870-893d-ed730d2cdb03",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "9c92fe41-a8f9-466f-a6f0-59a108630d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "872478d6-91ae-408e-81f7-e5e52f171ae7",
        "cursor": {
          "ref": "a4aabfcb-bc16-4b29-8272-061df1db84f2",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "472d4ddc-abd0-462d-8f07-d1443007c443"
        },
        "item": {
          "id": "872478d6-91ae-408e-81f7-e5e52f171ae7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a54b7367-aeeb-40c5-8ba1-f6efe9b85a94",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f841d850-ff67-477a-b686-625dc28c2ea8",
        "cursor": {
          "ref": "39ded5b1-3383-41a8-aed8-6604c68c42e0",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a6c81ce5-3c0c-4924-bbc1-8e499f58e5db"
        },
        "item": {
          "id": "f841d850-ff67-477a-b686-625dc28c2ea8",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a135555c-71c9-4489-9424-854e024b71e1",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1078eed-030a-4f26-856a-4d72a10884fa",
        "cursor": {
          "ref": "d1c977ac-21c5-442c-8ad1-361c2326c9bb",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c4181287-cc14-418c-9b06-8892110ac1d6"
        },
        "item": {
          "id": "b1078eed-030a-4f26-856a-4d72a10884fa",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "21481247-d0e6-4132-8adb-8177f946f7c5",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3504367-4b52-4e9e-977c-ca106e8eff0c",
        "cursor": {
          "ref": "dc16563b-3a4c-41db-8dec-f05c1bf4e6b5",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e0d58211-0cc8-4db2-a3f1-6147343dc436"
        },
        "item": {
          "id": "e3504367-4b52-4e9e-977c-ca106e8eff0c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "80509c4e-0408-47e1-9a54-a3cbae6c0bc6",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72ce7e3-19b1-4d47-8529-04d070959493",
        "cursor": {
          "ref": "ef280e46-7013-401b-8ee0-16e138df02c5",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bccd8328-7a79-40aa-ab22-57033d4e8e1d"
        },
        "item": {
          "id": "f72ce7e3-19b1-4d47-8529-04d070959493",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9b5f6681-d7ab-43c7-baaa-771a43957729",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-06T00:35:45.998Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-06T00:35:45.998Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9e71315a-574f-4f3e-840c-f6cb4d60175e",
        "cursor": {
          "ref": "cf451111-7500-47e4-b6c8-641aba912cdf",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "97a7fe1b-2b42-44d4-aac2-ac1809c0c121"
        },
        "item": {
          "id": "9e71315a-574f-4f3e-840c-f6cb4d60175e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "de232433-f897-4d95-a791-2d77cb010e10",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f17441d9-212c-4576-9844-07fa96a02ffa",
        "cursor": {
          "ref": "b8c2b112-8ddb-4c38-a16f-fb4897e2091a",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3f98d417-27eb-4a4d-8b23-99c323c4c61a"
        },
        "item": {
          "id": "f17441d9-212c-4576-9844-07fa96a02ffa",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "04fe9769-2373-45bf-8584-1538fa17976b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fcaa080-1263-47ba-9c27-e7ac30f6f297",
        "cursor": {
          "ref": "5ae3b00e-1da3-415a-abb9-5a11867fbd23",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1c752942-e440-4eb5-97b5-b1c25ec9e9f1"
        },
        "item": {
          "id": "3fcaa080-1263-47ba-9c27-e7ac30f6f297",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ea14c9f7-b5da-4c44-bf52-cf5405363673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b0ef4c1-ed90-4367-9d7d-26975b74065b",
        "cursor": {
          "ref": "d6c45fa5-0fb1-437e-a5d3-0125e0ef3bcd",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f19fa378-b83c-4bc0-b8e1-604c7f2a685f"
        },
        "item": {
          "id": "6b0ef4c1-ed90-4367-9d7d-26975b74065b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d8c5eeaf-ccb9-4193-af50-a12643aa1931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbe3629-8133-4b81-b003-a290c85d5b4a",
        "cursor": {
          "ref": "04feb3fb-7914-464e-81e5-e24f2551a244",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "066f3c06-de8c-4b79-8675-0c85e3431342"
        },
        "item": {
          "id": "8bbe3629-8133-4b81-b003-a290c85d5b4a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ba93ab2d-c19d-4192-a394-fd99b6c8263c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9afdaa04-03a7-41fc-af44-ecb91d56e46f",
        "cursor": {
          "ref": "15931797-a152-49fc-ba67-969adefb6d4a",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a2cb696e-828d-4e7d-9794-e3ea0aa2cc06"
        },
        "item": {
          "id": "9afdaa04-03a7-41fc-af44-ecb91d56e46f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "bba63231-7020-4789-abbb-12531a77dcef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3577478-8356-4ea3-b55b-12f113d1f4be",
        "cursor": {
          "ref": "b187dfa6-14f8-43f0-9ed0-d6a2fe960f5d",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a031e692-a30a-4aeb-8866-623826662d51"
        },
        "item": {
          "id": "e3577478-8356-4ea3-b55b-12f113d1f4be",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b8ba4317-02f4-41b6-94cc-0774374043ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e5f2efe-993e-40e4-b365-402e31f9d4bc",
        "cursor": {
          "ref": "7ef70562-242a-4202-aa74-1c2061c77039",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9944c05c-8a55-4beb-90e3-36e11d645131"
        },
        "item": {
          "id": "7e5f2efe-993e-40e4-b365-402e31f9d4bc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0030ae57-2499-4831-a8cb-fd2319d81ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be3879a-700a-4f8f-9371-c298fb2ae014",
        "cursor": {
          "ref": "732dc0a2-1ab9-48bb-990d-9b5379d167af",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4b0f2898-8c82-4a86-af27-6270a8e40ede"
        },
        "item": {
          "id": "9be3879a-700a-4f8f-9371-c298fb2ae014",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "028dd9ed-c3ac-4a17-af0f-7630d2692e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fab8da2-521b-4a08-b9d5-a2a782cfafee",
        "cursor": {
          "ref": "3b2ce153-6fc9-4b90-8730-8b8ca0fb6d4a",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "89a224fe-6775-4537-9344-c5fc55f57532"
        },
        "item": {
          "id": "7fab8da2-521b-4a08-b9d5-a2a782cfafee",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9db94107-91b1-4e00-90eb-96718bfd9c93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bdbb564-8eac-459a-aa2c-ddf8ad8ff2a4",
        "cursor": {
          "ref": "0aeae28a-dd59-4785-9186-14d3d398b33c",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a8eb6db5-ce3f-4424-8f0a-60d01402cf3f"
        },
        "item": {
          "id": "2bdbb564-8eac-459a-aa2c-ddf8ad8ff2a4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f0abd644-2361-4f8d-a003-207c8daf720b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d432c727-661b-4787-a13a-8094f40e52cf",
        "cursor": {
          "ref": "747beb3f-8ce6-42c9-b333-58a93cce5b49",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "47459227-0409-4b85-9c9b-0a0ca4f4c9a6"
        },
        "item": {
          "id": "d432c727-661b-4787-a13a-8094f40e52cf",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "aaacaf5e-7b13-4ac3-8fe0-97098c531b69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee64e57e-2c3c-4be0-b8ca-f0f9e4face24",
        "cursor": {
          "ref": "3efa6e41-585f-4ec3-a16d-05643db4d9f0",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d0e8bfe7-4435-4655-9a52-ea6764e373e5"
        },
        "item": {
          "id": "ee64e57e-2c3c-4be0-b8ca-f0f9e4face24",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cab0f5f8-a2ca-4aa6-b88e-65c17b1a8c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70fd561-b0cb-4299-bae3-20e3f3c8878f",
        "cursor": {
          "ref": "30d4bbed-c64d-4d4b-afce-3c8b28d90c0a",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "61f9af41-976e-468b-a438-9b8704f25bb5"
        },
        "item": {
          "id": "c70fd561-b0cb-4299-bae3-20e3f3c8878f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d3c9e0af-8bd7-45e9-8acb-1e1e46448b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f76ce41c-137d-490f-88d0-b69bfde13be7",
        "cursor": {
          "ref": "5cdeab91-702a-4bc3-bcdd-dbfb613e38c2",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9cd84a20-05a2-44b8-a1a4-f963e7a7e227"
        },
        "item": {
          "id": "f76ce41c-137d-490f-88d0-b69bfde13be7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cc156447-46cb-471a-888d-6b4523d5b1e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb1070e-a92e-4da5-a28c-6f0cd6a1aae3",
        "cursor": {
          "ref": "8035abb6-8238-4d2e-be95-14d72d00ef39",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "cbd011fc-e9df-4a31-9e16-aae5a8a4476f"
        },
        "item": {
          "id": "dfb1070e-a92e-4da5-a28c-6f0cd6a1aae3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c9cdcd5a-f86e-4f6a-8a2d-8824a4f6a286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f3e18e-89bb-4b23-839c-6bfc3e37b1b7",
        "cursor": {
          "ref": "fdf23f9c-b77f-4574-9d1d-03e5da4116b4",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f6a133ad-6bca-457f-abb4-a19d887499f7"
        },
        "item": {
          "id": "a2f3e18e-89bb-4b23-839c-6bfc3e37b1b7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d2e268c0-76d4-44ad-8cd8-12412bab785e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d29128b-ca1e-4b38-a376-ee4f31ff8e90",
        "cursor": {
          "ref": "8a8de331-a531-409d-9a11-44f0299cd6c4",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "8fde3821-f384-4e71-a485-55bfd0993ece"
        },
        "item": {
          "id": "6d29128b-ca1e-4b38-a376-ee4f31ff8e90",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "26316a9f-bb51-4fe0-ac36-8b6c9d03bff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda0fcea-5189-4786-b985-906c4a224099",
        "cursor": {
          "ref": "ee2b1661-f5a3-4890-a2cd-fd924f709383",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a1565e06-63cd-460d-a256-b6723536b4c4"
        },
        "item": {
          "id": "fda0fcea-5189-4786-b985-906c4a224099",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1df0698b-509e-48c5-8a10-92f22631e19d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b112feb-f248-4e58-a3f8-12849992e7a8",
        "cursor": {
          "ref": "017e2983-ba52-4206-8aa3-5f4c4a3508b2",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bb2a59a2-3ce6-4fdb-afe8-3e40ee5d40f4"
        },
        "item": {
          "id": "2b112feb-f248-4e58-a3f8-12849992e7a8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "08b2f69f-26ea-4b29-8e8e-9b852836879e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa68d6b-2b21-4e55-867c-11fac8c852c6",
        "cursor": {
          "ref": "79b9e596-683e-4540-9114-959eb3d497b3",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "93fad3f9-fe6f-4493-93f9-457b964f0d4a"
        },
        "item": {
          "id": "3fa68d6b-2b21-4e55-867c-11fac8c852c6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "de304c3b-8dd4-497b-a21f-6f0110dd90d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4ff9d1-9382-47c3-93b4-3e9b827d558b",
        "cursor": {
          "ref": "c53c9231-5854-44c7-a689-7165c27b7faa",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "325f9853-854d-4971-bdd5-b3c6865dfb37"
        },
        "item": {
          "id": "0b4ff9d1-9382-47c3-93b4-3e9b827d558b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3fac9c79-470c-417f-8e6f-c3c1ba7ebcf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a7ea23b-4b9f-4562-bb14-a77c088e74a7",
        "cursor": {
          "ref": "ecf2a831-fa4c-42c0-98bf-e1019d4b457a",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0cd03117-af57-46ca-99fc-93a28253eb14"
        },
        "item": {
          "id": "0a7ea23b-4b9f-4562-bb14-a77c088e74a7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "edf3952b-23c7-4211-825e-ddbec48ac6d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53130e6b-1228-4d81-91b0-c7dcb666ede1",
        "cursor": {
          "ref": "eca136a6-6a0e-4d9a-85ab-5708ffe67802",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "65ba689e-0ce6-436e-b638-cdd6edf7b237"
        },
        "item": {
          "id": "53130e6b-1228-4d81-91b0-c7dcb666ede1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "69d452cb-d577-4a41-afae-dbcaad35e131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15cf550-afd7-4f77-8f71-cbb01d0e5d63",
        "cursor": {
          "ref": "a6bd8ebe-d9b2-44a6-876f-811760e1c3a0",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e84e7e2d-ef9c-446f-af47-d244528d05d9"
        },
        "item": {
          "id": "b15cf550-afd7-4f77-8f71-cbb01d0e5d63",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3b52d39f-a9af-48d5-9c8f-bb2d09fc00de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439aa38c-077d-4439-96ba-a51d0313d6f6",
        "cursor": {
          "ref": "5848ad64-13e7-49ad-820a-5c58a9625697",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "cb21d60e-20ec-481c-89fa-60b67c835163"
        },
        "item": {
          "id": "439aa38c-077d-4439-96ba-a51d0313d6f6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d80a52c6-a026-4522-a30c-e11d0e1be183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea7b3ac-c64d-40e3-b57c-8bb0aa95745f",
        "cursor": {
          "ref": "3e8e0695-086f-4fd6-8ebc-c436869959a6",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2a07e4da-3338-4678-890d-659f3aaa54d1"
        },
        "item": {
          "id": "3ea7b3ac-c64d-40e3-b57c-8bb0aa95745f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e6068376-65c7-4d52-aff6-ddd9663f3003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be02816-884e-4eb5-a1f5-2211e683354c",
        "cursor": {
          "ref": "573bcae5-98ba-4136-b141-35bac6e1c339",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "cd1689b0-5451-434c-811c-eae8c5a75dad"
        },
        "item": {
          "id": "8be02816-884e-4eb5-a1f5-2211e683354c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a7579b7c-f22b-48fa-948b-c0d25492680b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc1e945-48e0-49fd-84b9-cd30ffd8022a",
        "cursor": {
          "ref": "1ccac696-f9a7-44ed-a1bd-7a6bb0b1f23b",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "00883ee5-7fe1-4ace-a738-17bcf04714be"
        },
        "item": {
          "id": "7fc1e945-48e0-49fd-84b9-cd30ffd8022a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0155788c-54b1-41dc-a666-dd5a4b82e9e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032b7af6-19a3-49b2-a9a3-09ef6d5200ba",
        "cursor": {
          "ref": "6508c251-9e17-413f-b965-2e36e56d7aab",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e3b5aadf-7d92-44da-a5f7-4bd35d725fe6"
        },
        "item": {
          "id": "032b7af6-19a3-49b2-a9a3-09ef6d5200ba",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "660d4a76-7b24-4a07-9027-7b924c9c3db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a7e561-0cb2-454a-95fa-116285940367",
        "cursor": {
          "ref": "1b0ad067-6cfb-4d99-b21c-c56bd137dda0",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a6f3254f-ca10-4c64-989d-508199f9a492"
        },
        "item": {
          "id": "58a7e561-0cb2-454a-95fa-116285940367",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "be2f7e7a-3aaa-42f4-a7eb-f4f955beb0e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94522e6c-d0cb-4ba3-909f-311ce5978ce5",
        "cursor": {
          "ref": "37900f31-cdae-4dd5-a584-c45676c00ae5",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ea73f164-cb79-455d-8ae9-42a734877a58"
        },
        "item": {
          "id": "94522e6c-d0cb-4ba3-909f-311ce5978ce5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a04566ea-abb1-4b91-bee4-e5cd1b9ec60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779bc8ad-f518-42b6-959a-640800c5b096",
        "cursor": {
          "ref": "969e4b1a-9124-45ba-a1dd-3630a75d5610",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b177dee1-ef03-4cc1-88ae-7a3966758c62"
        },
        "item": {
          "id": "779bc8ad-f518-42b6-959a-640800c5b096",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e82af2ba-b35c-45ec-bae9-54c0c1bb91b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c915196-8ade-4b99-9e58-ab2390a6165c",
        "cursor": {
          "ref": "31abf389-f08b-4f3a-b675-66f745ab9a93",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2a10580a-23b8-4b1f-a446-196bf18ebfa5"
        },
        "item": {
          "id": "3c915196-8ade-4b99-9e58-ab2390a6165c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0d4e3710-f2e9-4ca5-b8e6-cc279625b96f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfa3815-2d07-4ce1-af52-16b49cc61204",
        "cursor": {
          "ref": "fed5cbb8-f909-4716-9ef4-8e4efeaa99a1",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6548896c-90bc-494f-ba81-282140a0cecb"
        },
        "item": {
          "id": "8dfa3815-2d07-4ce1-af52-16b49cc61204",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3a266c01-e9ac-46d4-af8a-a61b5b30b61b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e36dbd60-91c3-4d5d-89e1-2431b8dd6448",
        "cursor": {
          "ref": "db8d1a20-cd81-49ce-81a9-bfcb4e5501e8",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "99aff9b8-c32d-4350-86e1-348172e0a63f"
        },
        "item": {
          "id": "e36dbd60-91c3-4d5d-89e1-2431b8dd6448",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ddfec1f2-973f-48be-ae59-af2f7858fe49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba10cd8d-7cd7-44bc-ae97-e71826cfc608",
        "cursor": {
          "ref": "9cfc19af-ce87-4650-8487-e574e1ed81cc",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "fdc9e518-063c-4d22-b295-e8036177f320"
        },
        "item": {
          "id": "ba10cd8d-7cd7-44bc-ae97-e71826cfc608",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7c451b67-152f-4a02-8607-281480e353f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a08f03b-5cfe-4f35-89f4-3b7525271232",
        "cursor": {
          "ref": "f684b983-659a-4394-8450-4423b3ec794b",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3ecf8154-c66a-419c-a762-21b4072f4ba1"
        },
        "item": {
          "id": "0a08f03b-5cfe-4f35-89f4-3b7525271232",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a8a4e205-6c75-433e-977a-b11c3de5d3f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c4cf49-71db-48f7-a528-9edc75aa940c",
        "cursor": {
          "ref": "5d46b5b3-212f-48e7-81c6-65c214934124",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b13ed5c4-5e11-412e-b005-fbfae10ecef8"
        },
        "item": {
          "id": "75c4cf49-71db-48f7-a528-9edc75aa940c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "06733617-83d1-4fad-8772-e90df7fb0d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d391bf90-03d5-4371-97cc-bcdc8b32979f",
        "cursor": {
          "ref": "5193be86-eab7-4c2d-a835-f199ecf0bd27",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "48ed4525-4eef-4770-9a70-e1684a997866"
        },
        "item": {
          "id": "d391bf90-03d5-4371-97cc-bcdc8b32979f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "27db70cb-07c1-4e14-943a-e91a859582d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d248a673-6111-4ba9-b876-411e5f22674e",
        "cursor": {
          "ref": "1e6b9e7c-8050-455b-a4a3-4cad24d15f06",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e84825a2-5ff1-4f62-a82d-99bbbb55120d"
        },
        "item": {
          "id": "d248a673-6111-4ba9-b876-411e5f22674e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "52ad5c58-391f-4fb6-af03-8c18ffde0b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd23b036-d96d-4191-8515-6183f73c713a",
        "cursor": {
          "ref": "39d921c6-651e-4aa5-98bd-dd93425b541f",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3d92d26e-5208-46c7-afc2-e90db230a896"
        },
        "item": {
          "id": "dd23b036-d96d-4191-8515-6183f73c713a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "58119267-52f7-4283-8fde-dcb6269aa3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9a3a89-73b7-4030-8fe4-dd330bccbe77",
        "cursor": {
          "ref": "abe2caff-cb49-4171-b3de-8f5ce2c355c3",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "bcb1e019-736e-4428-9316-d70e7a808c48"
        },
        "item": {
          "id": "fc9a3a89-73b7-4030-8fe4-dd330bccbe77",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0f6410dc-028c-4e18-9fd7-173a5eb12825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da9c6985-11be-4b9d-9977-99994bb84b31",
        "cursor": {
          "ref": "b55b733a-b93b-44ac-acd6-bb6d4a8bb667",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4bd3a49c-c958-4e23-b172-13c676dd44ee"
        },
        "item": {
          "id": "da9c6985-11be-4b9d-9977-99994bb84b31",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "99f1c372-e6c5-4733-9d9c-82a8e1b639c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e3012e-910c-4b4d-9110-bffc70af0704",
        "cursor": {
          "ref": "80591ede-60b6-4c03-81ac-e81a53d28b00",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d7222f1f-7757-443f-af45-ad09a26816cd"
        },
        "item": {
          "id": "d5e3012e-910c-4b4d-9110-bffc70af0704",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8749eb3d-80fb-49a7-a898-82b8585f5ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8d338b-e56b-4002-b645-6f968010372a",
        "cursor": {
          "ref": "b40b0bdb-77e4-4aba-9c1c-00539f071cfa",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "366b5cee-aa09-4552-814e-18e7bb976b30"
        },
        "item": {
          "id": "0c8d338b-e56b-4002-b645-6f968010372a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "12f5a25d-1874-4cf0-89b9-7e0a45ce2f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "890e9e77-f8f1-4f1d-9922-6c880ddb5afb",
        "cursor": {
          "ref": "c11564c6-b556-4100-bcef-6dfb19637b79",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "551c89e1-cc1d-4999-9a3a-10056e1b1d55"
        },
        "item": {
          "id": "890e9e77-f8f1-4f1d-9922-6c880ddb5afb",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0a0b1ac4-2857-451b-9384-a95edfaf9c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60764c3a-0cca-4439-b68e-5a9871608f91",
        "cursor": {
          "ref": "2d531825-040c-4922-8b6b-5def70553cd5",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9cc6c5f3-4797-48dd-b958-09308e7cf532"
        },
        "item": {
          "id": "60764c3a-0cca-4439-b68e-5a9871608f91",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ca1ffa48-ece5-43e1-bcdb-b5922f2f6779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a912abe8-18a4-4f3f-b644-8610c22e34c1",
        "cursor": {
          "ref": "3c8ebd3c-836d-4375-a0c3-797c44044fd2",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7b5c72a0-a217-48e7-b00a-8f28d005bba1"
        },
        "item": {
          "id": "a912abe8-18a4-4f3f-b644-8610c22e34c1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "79fe1ab9-5f84-48ed-995b-94393b40a60c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a51d6513-dde8-4f30-b4ab-067df1877731",
        "cursor": {
          "ref": "eea0375c-8973-44f6-9781-3650613436df",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d599da40-f6a1-4eab-92ca-f0fe9653b296"
        },
        "item": {
          "id": "a51d6513-dde8-4f30-b4ab-067df1877731",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "cd69f850-3f85-4101-819b-403f58364500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f1b75e0-2f5a-4d94-81ed-6a6df40310b7",
        "cursor": {
          "ref": "307b7cba-9bf0-40e2-9b97-7878315c00a9",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3360b9bc-3757-495d-ae16-9d4436d4cbde"
        },
        "item": {
          "id": "8f1b75e0-2f5a-4d94-81ed-6a6df40310b7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b065bc44-88dd-412e-a27b-14c575d48bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deaec140-66c4-4f5e-a1e9-71a627369cd7",
        "cursor": {
          "ref": "0c14b941-fa8f-4534-b7f3-a63c6d0b70d7",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "deccf3c8-554c-49a9-9dd8-e4edcdea771d"
        },
        "item": {
          "id": "deaec140-66c4-4f5e-a1e9-71a627369cd7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e72a352d-e34f-44cd-9f8d-8933353d4cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0744ce23-6aa3-4f0a-abfd-b111eaa56137",
        "cursor": {
          "ref": "17108d70-fc2e-4cb0-951b-d5d3647a9f23",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "12ed372d-560f-464b-bdca-bd116e22d214"
        },
        "item": {
          "id": "0744ce23-6aa3-4f0a-abfd-b111eaa56137",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "38ea02c0-f30a-44c4-8943-5afdc2fe42bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39dfc658-6ac4-4c99-8634-c925656ec603",
        "cursor": {
          "ref": "75794184-26a5-408e-9405-86f88f8619d6",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "45f778f0-608b-41b9-8d7d-e890c63b8929"
        },
        "item": {
          "id": "39dfc658-6ac4-4c99-8634-c925656ec603",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8281be7d-c237-4f49-9291-d5a19507ef5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f60a3b67-3477-4fcc-ae65-122f1f961ab8",
        "cursor": {
          "ref": "d9f9d2b1-c0ff-4f26-bab1-1c608bd44c2b",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "307c93b3-3a63-4f34-af37-b7ed9b80cd4a"
        },
        "item": {
          "id": "f60a3b67-3477-4fcc-ae65-122f1f961ab8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "89d29eea-b71d-460e-983a-7052c7e197aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c49bbcd-fef4-4e07-a38b-ff4303681127",
        "cursor": {
          "ref": "02388503-1356-4973-8c13-0556b06b69bf",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a1a40707-c949-4aea-9fa7-4e8a5c23315b"
        },
        "item": {
          "id": "7c49bbcd-fef4-4e07-a38b-ff4303681127",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "211b34b4-90f1-4a7c-8ed8-3c1496e6abd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37702e9b-6552-45f4-8989-910d298e45fb",
        "cursor": {
          "ref": "95fe41ae-98a0-469b-b5cb-1eac18df867d",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "93a829fc-7afd-4613-856b-643353ec563d"
        },
        "item": {
          "id": "37702e9b-6552-45f4-8989-910d298e45fb",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "eb9652f0-c31e-4799-8074-942a8bb1cab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3e6ba6-79fe-41cf-82c1-6e1efd47bd8e",
        "cursor": {
          "ref": "d494db04-8b63-4482-9745-c5e718796235",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9ed9faff-3ed9-43ca-a1f7-27e57b59301a"
        },
        "item": {
          "id": "9d3e6ba6-79fe-41cf-82c1-6e1efd47bd8e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f5512c78-dced-434d-a82a-afd544713d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a6a0d1-e098-4eff-93b6-d91582c59e0b",
        "cursor": {
          "ref": "0a54dc21-c996-48dd-a77e-4dd098fabbe5",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5ad4e0c6-2d59-468b-b76a-918059d55bbe"
        },
        "item": {
          "id": "60a6a0d1-e098-4eff-93b6-d91582c59e0b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5c4eeed9-57c3-459d-a898-0ee18de407ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686dccd1-9fdb-426a-9b20-575e0f5bfb5e",
        "cursor": {
          "ref": "06383c95-e91a-43d7-bfb5-9b4bd9fcda88",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ea8353cb-08e9-4fdf-ae2b-ded466921b3f"
        },
        "item": {
          "id": "686dccd1-9fdb-426a-9b20-575e0f5bfb5e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0e4dc700-28e7-41a7-a799-9cc8167f60dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc0510f-7ac7-4c3e-9112-0b12dfe7c0ee",
        "cursor": {
          "ref": "b1233fed-d3c0-4742-9348-a577d27efc3f",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e73e998b-34cd-47e7-bae7-4ea5e9b80d69"
        },
        "item": {
          "id": "0bc0510f-7ac7-4c3e-9112-0b12dfe7c0ee",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c7428a03-ddf5-43e8-b4fc-fddc5455ea3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e08149-3f5b-4c66-a6c8-666488336677",
        "cursor": {
          "ref": "fb72914c-8b6a-475d-847f-753c7787d5c5",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b0e8d39d-d6fa-411b-95b1-9589d22d1bb8"
        },
        "item": {
          "id": "a8e08149-3f5b-4c66-a6c8-666488336677",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c6e0fe04-4c0e-4782-bb88-c32433683c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515f17bc-5ccd-4410-9311-a829420a63e3",
        "cursor": {
          "ref": "20beee18-e91a-4a01-8660-def2e7c86104",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f7ae57f0-ba2d-4783-932d-4e02e88d75a9"
        },
        "item": {
          "id": "515f17bc-5ccd-4410-9311-a829420a63e3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2ebe7560-1dfb-4605-aabf-8bed210afb3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5484fc25-9115-4da9-a55f-b4f97d491fbb",
        "cursor": {
          "ref": "c1fd8ada-40b4-4e2a-ad09-f6469fdea7f3",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "198e99b8-b117-4d47-b4be-f106d367fbe5"
        },
        "item": {
          "id": "5484fc25-9115-4da9-a55f-b4f97d491fbb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "17106ae7-cc03-45d0-a90b-ef59709d4959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8761f72d-7fbe-420e-b719-8f551255b86d",
        "cursor": {
          "ref": "6fd50b95-1ff9-4cb4-880c-b19b93e7c03c",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b04fe75a-08e4-4744-adbf-fc52a8e63360"
        },
        "item": {
          "id": "8761f72d-7fbe-420e-b719-8f551255b86d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c3b7a5c9-359a-43fb-a210-787533a42cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0638a07a-b457-4d54-abaf-68b647d3258d",
        "cursor": {
          "ref": "842a6fa7-494f-4823-b9f7-30c92640e143",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b064dea1-a402-4085-bd29-a9fe384e8461"
        },
        "item": {
          "id": "0638a07a-b457-4d54-abaf-68b647d3258d",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7dd18454-36a9-4fb8-9566-4e410ede5aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f83927-2844-4a69-84f6-7586f01c78d7",
        "cursor": {
          "ref": "bff112f8-4d3f-49c3-b48d-b36514e46a4d",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d79c71ed-16ef-45b0-8919-9735a1b2592f"
        },
        "item": {
          "id": "e8f83927-2844-4a69-84f6-7586f01c78d7",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b5fa5767-32dc-4363-8be9-68c2c7842778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1307a42b-0ccf-4616-902d-f05b7e9d917f",
        "cursor": {
          "ref": "b6ce30e3-0919-43d4-b0ff-74df63d41149",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9afbdbef-f6b7-4049-992c-bd1a70bca44e"
        },
        "item": {
          "id": "1307a42b-0ccf-4616-902d-f05b7e9d917f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "68b8fb88-894a-4d6c-99ea-8f8a6ac77fbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feea1018-1a6e-4083-8a27-311ca203dd01",
        "cursor": {
          "ref": "648a569e-1b7c-4a9d-aaeb-3aaad61a876f",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "725dbd03-8cb4-4ab8-bc1d-54812dc223a0"
        },
        "item": {
          "id": "feea1018-1a6e-4083-8a27-311ca203dd01",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "148b3c96-b849-49ba-b261-e2c54087ff0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f3bf61-d03c-4f00-82f8-f7f1eef69cbe",
        "cursor": {
          "ref": "ddb7f010-c61a-4179-9899-85057a850e6e",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ee224b3e-64f4-4762-bc0b-5c656e866396"
        },
        "item": {
          "id": "51f3bf61-d03c-4f00-82f8-f7f1eef69cbe",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "0aafd558-555a-46d7-b393-b603c2f195a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918de230-4168-47a6-836c-83f24f5cd069",
        "cursor": {
          "ref": "e2f1860e-372a-4763-87c3-14fa54728372",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f239b678-2589-456c-9c92-66435df2f343"
        },
        "item": {
          "id": "918de230-4168-47a6-836c-83f24f5cd069",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "0439bd7a-91f3-48de-8c68-545ba46012e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae113b30-c068-4390-8bb1-b605fcaf2859",
        "cursor": {
          "ref": "e9af1f3f-518f-4ae4-ba32-d7c4384ffd8e",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6c5dd5a8-8052-40ee-a55e-53cd00312645"
        },
        "item": {
          "id": "ae113b30-c068-4390-8bb1-b605fcaf2859",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8b2df374-1a22-4f1e-bc06-577ea19aa945",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f273a5db-3193-4789-a4bc-a8281836cdf7",
        "cursor": {
          "ref": "7453da4e-cae8-4677-8139-11780987246d",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "05ba64f6-4a2b-4d6d-8053-41a82ee6b767"
        },
        "item": {
          "id": "f273a5db-3193-4789-a4bc-a8281836cdf7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "565a5c44-a1e3-4f37-b44f-3ec5835b5a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf5bd14-d3d8-497f-834b-f6aca56b5382",
        "cursor": {
          "ref": "101b6db5-ad35-4fba-bda0-c64dc7dda453",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "66924ee3-aaab-4b79-ab06-e4f58d5f8ad1"
        },
        "item": {
          "id": "dcf5bd14-d3d8-497f-834b-f6aca56b5382",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4703801d-c6c6-45bb-a35d-643f70649d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da867dd7-8f58-4f74-89e7-23cba8d74c62",
        "cursor": {
          "ref": "f95f199e-6cae-437a-bef1-489eefee26e8",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f202ac70-3de7-4b7c-ba30-a55bc9e47ebc"
        },
        "item": {
          "id": "da867dd7-8f58-4f74-89e7-23cba8d74c62",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b6961a07-c598-4be7-8bbd-93651d6c8840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d2830fb-aef8-404f-968c-a576e27e05f6",
        "cursor": {
          "ref": "6d749747-c52c-47d8-948d-ead41ade2880",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "db47b5e3-b051-4501-84f3-d496a42ffe0d"
        },
        "item": {
          "id": "9d2830fb-aef8-404f-968c-a576e27e05f6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "27f41822-36ec-4102-83bd-932928531f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8deefe21-6971-4d79-9591-6c2c7dc94810",
        "cursor": {
          "ref": "8c74aa0c-819b-4315-b1e6-025c14139050",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "886b6f73-55da-44ee-a5cb-1b8157181019"
        },
        "item": {
          "id": "8deefe21-6971-4d79-9591-6c2c7dc94810",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9a7758c7-bafb-4d05-9072-a90fa73c1078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584902ca-2401-47c9-a40f-cbd20fbc2f9a",
        "cursor": {
          "ref": "4b0c6c9a-8841-4c86-a2ad-9924b678dcb2",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8c4bdcd8-dc50-422e-aebc-5a1661b7783b"
        },
        "item": {
          "id": "584902ca-2401-47c9-a40f-cbd20fbc2f9a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ecc9c25f-729c-4c76-8bbd-6932ae07e14a",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "d7d45c89-e5da-41b4-be95-82f12ec26a07",
        "cursor": {
          "ref": "032d3a9a-ffef-460d-9be8-1643afdd48e3",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b583b7c4-2b1f-464c-848a-871fbe71bb57"
        },
        "item": {
          "id": "d7d45c89-e5da-41b4-be95-82f12ec26a07",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6830d28f-6313-4123-94b5-2b58475da715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf846dff-0e3b-4361-b7af-b3b8b0e424a1",
        "cursor": {
          "ref": "293a937c-d58a-40cf-b40f-d3a55491d203",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "73118c71-2fb1-44dc-a188-07e59a909c95"
        },
        "item": {
          "id": "cf846dff-0e3b-4361-b7af-b3b8b0e424a1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "de7c0dd1-22f9-45a5-919d-b8441dd58efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e823ea4-3b2b-444b-8f38-6ec4320a5f81",
        "cursor": {
          "ref": "cc365e43-9512-404a-80b9-240b8ec0869a",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b14fd84c-25c8-4652-ad38-18704a681553"
        },
        "item": {
          "id": "2e823ea4-3b2b-444b-8f38-6ec4320a5f81",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ed33a74f-499a-4273-83e3-dc30b1cb5835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a848463-68fa-43d0-a5ac-1789f64c28c9",
        "cursor": {
          "ref": "8d657f07-2bc3-4001-a72d-4dddef41a76b",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ef4e179c-fe40-4ad5-83a4-b6b1418ec943"
        },
        "item": {
          "id": "6a848463-68fa-43d0-a5ac-1789f64c28c9",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2dc19c49-ae56-4dd1-bd25-553095ff4f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83c16f59-88f5-4fb5-a138-526045f07bd7",
        "cursor": {
          "ref": "6c6f41d9-26ad-4149-a3de-bd38c850ef38",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "720642e9-b921-4b86-b709-4a73592a918a"
        },
        "item": {
          "id": "83c16f59-88f5-4fb5-a138-526045f07bd7",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "eac92c4b-2e15-402e-9a84-7cdf064cb612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12372f2c-ae15-4c11-9e92-9dd53ae3a1b0",
        "cursor": {
          "ref": "102207cc-5fb3-4670-a92f-8a3f1af9d10e",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3f4344d6-bff7-455c-ad52-d69a3f7b8b05"
        },
        "item": {
          "id": "12372f2c-ae15-4c11-9e92-9dd53ae3a1b0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "dee2250a-da3c-4cbb-ba23-1a62fba3649a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11fa99a4-1d9e-4f40-9256-52162a74f526",
        "cursor": {
          "ref": "0f0a012e-7d41-4e3b-acd6-53a2676abc38",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "edd7eb78-94fc-4409-894b-249073f6fa32"
        },
        "item": {
          "id": "11fa99a4-1d9e-4f40-9256-52162a74f526",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2c92f83e-8487-4e57-aa4f-757844d9cb11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d10760-2677-4d97-ae3f-90101afddcf4",
        "cursor": {
          "ref": "0e97f665-2db2-4909-ba9f-8dcea79dd4b4",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d5440772-97e3-4ec3-a9a5-fa7b11b7ef3c"
        },
        "item": {
          "id": "b3d10760-2677-4d97-ae3f-90101afddcf4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "225e96c4-4db9-46b8-a7a5-230e97c5b778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "627e9742-80d1-41c1-83fa-bc6a9b95dc14",
        "cursor": {
          "ref": "46a0dedb-74ff-46e8-aa1c-8567f121cc3d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b9ebaaa3-58f5-4b0d-8e19-5009a1ef60a2"
        },
        "item": {
          "id": "627e9742-80d1-41c1-83fa-bc6a9b95dc14",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "47281dc3-9faa-4c00-aead-539b3404e654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a09c4bd-5a33-41a0-a412-674fb6ca77a6",
        "cursor": {
          "ref": "3137e78a-025b-4c89-a20b-112f0b3f4c3b",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9eb0dc85-fb9c-414c-8242-54889f870bf2"
        },
        "item": {
          "id": "9a09c4bd-5a33-41a0-a412-674fb6ca77a6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d533868b-ddfa-4fdc-bb9c-8014cc7348d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1fd7e0-2c94-47fd-a0de-1e69ab894739",
        "cursor": {
          "ref": "dfa34e6c-670e-497b-8cd9-a93d41874af9",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "08af2805-2c75-4e15-b8f6-f82cf09c2e47"
        },
        "item": {
          "id": "fa1fd7e0-2c94-47fd-a0de-1e69ab894739",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "eeb99585-5b25-4d9b-af7a-8190cc9a0ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a63e3b-94cb-4b08-82b7-99a228cf7947",
        "cursor": {
          "ref": "bbc58eb1-50bc-4928-b769-14663f8cfde1",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "738da797-e141-42c8-be3b-d3abe1e4609a"
        },
        "item": {
          "id": "a6a63e3b-94cb-4b08-82b7-99a228cf7947",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "df5bb621-df99-4c8f-a2bf-0501acf72c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "197ac8a8-d9cd-42a6-bdb5-7b13fdf4cf90",
        "cursor": {
          "ref": "d4865bf0-7acf-4cc8-8a6c-bcc412e1c9a1",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c1fcd0c6-23fb-4c85-8f20-61b95946a27d"
        },
        "item": {
          "id": "197ac8a8-d9cd-42a6-bdb5-7b13fdf4cf90",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ee2ef85c-f715-4765-909b-45bad1f001fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85fe8d74-8e5b-4223-bb7d-a034457dd61d",
        "cursor": {
          "ref": "b970c9bd-ed9f-4504-ad17-c1dff14ed9c6",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3afab4bd-06f9-4a40-9d0f-284be4d20094"
        },
        "item": {
          "id": "85fe8d74-8e5b-4223-bb7d-a034457dd61d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8e233d70-c8bb-4d5b-90f1-4d9d977bdc20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e457f51-4d0d-4313-9fc5-1109cb73f038",
        "cursor": {
          "ref": "ecd9c555-90c7-4b5d-bb9e-f4216977277e",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "10213035-cfd7-468a-a682-c407db8cbd6c"
        },
        "item": {
          "id": "7e457f51-4d0d-4313-9fc5-1109cb73f038",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "022a1ccb-1617-41c7-9916-338f31c686b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9734281b-bd98-4b58-aa62-e2a3c206b431",
        "cursor": {
          "ref": "9ba023c7-5b35-4bcd-8e36-a0e7afd91bc7",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2563d40b-1aeb-4998-8cfd-56894ca05ff1"
        },
        "item": {
          "id": "9734281b-bd98-4b58-aa62-e2a3c206b431",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b402e158-b483-412e-9ffa-aeed46216588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab410e6c-73d8-40f1-b6aa-877807a3fd52",
        "cursor": {
          "ref": "416d7368-4756-4d5b-9fdb-0e4de0eab983",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0d082457-f485-47fc-826b-dbb8998089ff"
        },
        "item": {
          "id": "ab410e6c-73d8-40f1-b6aa-877807a3fd52",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8c100975-1296-40a5-802f-c349306983ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cd8c227-90ed-4417-95ae-6519adf82fc7",
        "cursor": {
          "ref": "c029606d-a610-4fa1-9669-914a4ee125b9",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "212817c6-9262-43b9-8e53-9d49eb632726"
        },
        "item": {
          "id": "1cd8c227-90ed-4417-95ae-6519adf82fc7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e0716d0c-ac28-4289-be38-6f3490295fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9822224-a5e0-4436-9d97-0f76d12f25e0",
        "cursor": {
          "ref": "1f2dc253-45ea-456d-b7bd-c59a0aea75b7",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "655c3888-dba7-4978-b5b6-8fb1a80bf99b"
        },
        "item": {
          "id": "d9822224-a5e0-4436-9d97-0f76d12f25e0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9a416bbe-e067-4e29-9075-3a58d2c453f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2413fa5f-386f-44c9-a768-c9c50398926a",
        "cursor": {
          "ref": "f2c75da5-24d3-4279-8ded-3ab2b0841af8",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3b052d59-9756-4251-a5a8-f7219fddd35c"
        },
        "item": {
          "id": "2413fa5f-386f-44c9-a768-c9c50398926a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "36d2dd90-0ee8-426f-977e-ebf5c1fa5de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea0b4d0-daf6-44ed-9cc0-e4c747ecf4c4",
        "cursor": {
          "ref": "f1e6073e-c4c0-4ab5-8de6-b4aa67041c37",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "134f0eb3-76dd-4d94-844b-aba6b1afb8f8"
        },
        "item": {
          "id": "8ea0b4d0-daf6-44ed-9cc0-e4c747ecf4c4",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7172c253-a532-477c-b9be-1ac9d9954f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c66bc5-b97b-4999-b6ad-50dc877f7539",
        "cursor": {
          "ref": "9b027967-5b69-4e8e-9019-9ffcb15cdcb5",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4d136b43-c72b-4c0f-89c8-13e0e5e365ab"
        },
        "item": {
          "id": "12c66bc5-b97b-4999-b6ad-50dc877f7539",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "fb746ff6-b71d-47e3-889c-6d11379907f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5092af2b-2817-4eb8-960d-e4b91d3a8833",
        "cursor": {
          "ref": "e3b8e22d-a472-4c41-931a-04b54d15ff4e",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "40e53627-b8fa-4bc4-a64a-1a90c1cc606b"
        },
        "item": {
          "id": "5092af2b-2817-4eb8-960d-e4b91d3a8833",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bba686a0-1f33-4eff-be09-906adedf6c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923c3736-b165-4c50-a1f6-82661b0e17e6",
        "cursor": {
          "ref": "7b7539e6-058c-41c8-a4cf-d983a7b32b05",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "64a13735-18ae-483d-8b23-9ddcaeb9780e"
        },
        "item": {
          "id": "923c3736-b165-4c50-a1f6-82661b0e17e6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7a3a8903-1e9b-46dc-a271-3401a4e83e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7528d7a4-98bb-4207-8fbc-95e15cf3c26e",
        "cursor": {
          "ref": "96576f10-81be-4bf3-b4ee-0d85a8d31bd2",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c5deb824-0a1d-42d8-ac22-eff932fd1725"
        },
        "item": {
          "id": "7528d7a4-98bb-4207-8fbc-95e15cf3c26e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "fff31d32-7f82-41c1-93b5-b1eab8fe918c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b44e71-bb99-471c-ac5a-e69da0b71570",
        "cursor": {
          "ref": "5f0a66dd-22c3-488e-b57d-353808d2b25f",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a5a117a9-64d6-4b08-bf1c-f66b84c04f09"
        },
        "item": {
          "id": "e6b44e71-bb99-471c-ac5a-e69da0b71570",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "cbc607f2-6fed-4a24-8b5c-9dd9b7f23635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd613ed7-2cac-42e5-9615-d384c1f7a42c",
        "cursor": {
          "ref": "e8b6ea1e-099a-4163-b913-f6772352159f",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a4e9b755-1d43-4bdd-b22c-6b3eb756dfb9"
        },
        "item": {
          "id": "dd613ed7-2cac-42e5-9615-d384c1f7a42c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4b1aa94f-ffb1-44c9-9458-8c8d338b4466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16587df1-c72b-41e2-852c-07d14e5e0a7a",
        "cursor": {
          "ref": "6ae239c3-0e84-4ad9-8b06-e774de6fe35f",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8834463c-862b-4dbd-ba57-3945083a3e07"
        },
        "item": {
          "id": "16587df1-c72b-41e2-852c-07d14e5e0a7a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4668e1e6-bcf9-4bbb-a637-dfe241bb311a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a8e95f-2f8b-4295-9799-1a1acbaf1e2f",
        "cursor": {
          "ref": "3aafdcdb-4165-44a7-9951-7fba625e66b1",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "faf1e0f1-3ea1-44f3-be23-8341c198f725"
        },
        "item": {
          "id": "88a8e95f-2f8b-4295-9799-1a1acbaf1e2f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a62b8f45-9b5a-4482-b646-9348126d26d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80470d5-66da-4dac-86dc-624808b515f2",
        "cursor": {
          "ref": "01191f87-3b02-42d2-8438-ecaefc64435c",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fec9e5bd-e1fd-4eaa-b9ef-849722dc33c4"
        },
        "item": {
          "id": "c80470d5-66da-4dac-86dc-624808b515f2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c7bcd3b3-099a-4abe-a8c5-1a52e62ae2bb",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "b63722ba-a5e0-49da-b6f3-779720f196a4",
        "cursor": {
          "ref": "9737f64c-c072-491f-a197-d227feb87d77",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "faa741a0-6872-4b61-80c2-c5c281a88e39"
        },
        "item": {
          "id": "b63722ba-a5e0-49da-b6f3-779720f196a4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d1be25ae-abac-443e-acde-0916b9d7e114",
          "status": "OK",
          "code": 200,
          "responseTime": 174,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "74e8cfa2-2261-46d1-9721-79de714f8a70",
        "cursor": {
          "ref": "f5865ef5-a606-49ba-aa6c-c0a1b5f8c77e",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "93d6e81a-b938-475c-86be-ffb95f58df9b"
        },
        "item": {
          "id": "74e8cfa2-2261-46d1-9721-79de714f8a70",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9e59b1af-ed0f-449b-9f96-b2ef52fa6f9b",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "f425f17d-4b32-493f-8d77-ba03418c5c73",
        "cursor": {
          "ref": "646e66dc-7a57-464f-b33f-cebc57a3d4ba",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4a17d551-0720-41ae-813f-bb9cdf502911"
        },
        "item": {
          "id": "f425f17d-4b32-493f-8d77-ba03418c5c73",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "465d6a1f-4ee6-421b-b648-80b094a5e99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96da4acc-09d2-447c-b5a7-da16aeb4059d",
        "cursor": {
          "ref": "5da93091-9701-4d55-927f-223ff507d351",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a4d8d803-b14a-49f7-ac5f-b733dc9d134f"
        },
        "item": {
          "id": "96da4acc-09d2-447c-b5a7-da16aeb4059d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9de61b70-bddd-4fd0-adfa-645d8ac9a7ad",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "c28999ab-f691-4d56-97d1-132cc37f1972",
        "cursor": {
          "ref": "5d0938a8-dd1e-4260-9624-d76bd23ce0f2",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a9a11f09-7d9a-40e8-b544-85837cc2f5b4"
        },
        "item": {
          "id": "c28999ab-f691-4d56-97d1-132cc37f1972",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bdf1b9b3-23c1-4768-af35-c8ce19a1ad8d",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "79dc7e01-ee1f-4200-a50c-c5b0e593376f",
        "cursor": {
          "ref": "8da45745-51ca-433c-baee-0246c093a890",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "47c08d3a-98ce-4e16-8be3-5106129df3b6"
        },
        "item": {
          "id": "79dc7e01-ee1f-4200-a50c-c5b0e593376f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "be035841-a24f-4edc-afcc-062ea0bb22ff",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "289cba35-ce31-4b89-a351-0793a3135d38",
        "cursor": {
          "ref": "bd2a6ba1-e1fb-4f1f-b141-3f06bdc41960",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a38fbcc5-ff4f-414b-b837-e07226ec918c"
        },
        "item": {
          "id": "289cba35-ce31-4b89-a351-0793a3135d38",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "af870b85-6de4-4ca8-84fa-d94b8dc177b3",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "07993d5c-9856-4673-85c4-93210af8ed2b",
        "cursor": {
          "ref": "bc05a1cb-6180-45a8-a71a-dcff3cc9cf27",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4e26826e-de4a-4ab8-bb7a-e72aa83d6266"
        },
        "item": {
          "id": "07993d5c-9856-4673-85c4-93210af8ed2b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e2285057-0541-4228-ab10-35bf469de1d9",
          "status": "OK",
          "code": 200,
          "responseTime": 196,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "9d5fc822-1dfe-4e86-903f-95dff99e16aa",
        "cursor": {
          "ref": "5bded30f-94c6-4ebd-ba7d-2d5412b5a9a7",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1c3a7ce8-c88a-4322-ba47-e80de81e72b4"
        },
        "item": {
          "id": "9d5fc822-1dfe-4e86-903f-95dff99e16aa",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ebd52b31-9231-4e3c-8bfa-b90df2aa1705",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "1335ed2f-add9-4407-b87a-06571ca1b75a",
        "cursor": {
          "ref": "5449500d-82c4-487a-83bd-234f9f58f641",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e513cd63-8993-4e48-952b-00462b70ebd6"
        },
        "item": {
          "id": "1335ed2f-add9-4407-b87a-06571ca1b75a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "323732ae-6a1c-4933-9c76-049bd690ac54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dbed240-fa59-4f2d-acc7-d767bc3951ee",
        "cursor": {
          "ref": "19cc5dc4-ba80-4927-b9fa-163248805d5d",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "154a9f86-6680-425e-983f-0af610f07103"
        },
        "item": {
          "id": "6dbed240-fa59-4f2d-acc7-d767bc3951ee",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "24aa3eca-3488-45ce-93cd-44b25af17ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6424900b-c144-4bc1-aaf4-fbe4ff319b5c",
        "cursor": {
          "ref": "55c506cc-4874-485f-bb2f-8a16bfb1fe49",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "163b7741-d8e1-4b1a-97f7-49c8fd706026"
        },
        "item": {
          "id": "6424900b-c144-4bc1-aaf4-fbe4ff319b5c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4aa56caa-1d90-4908-b80f-23c9c21b50f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27df82da-8dff-42e5-a4c9-b46b670dada7",
        "cursor": {
          "ref": "c3465fbd-c60a-45f9-a063-9c341be0d060",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "23a3325a-24f6-4784-9c08-5a4b63376d21"
        },
        "item": {
          "id": "27df82da-8dff-42e5-a4c9-b46b670dada7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d8f9aa66-3599-4884-93f6-c541bb0c6006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48bb7b4-90e7-4d45-821c-fa20dba7726c",
        "cursor": {
          "ref": "64403b2e-0e39-4275-ab12-e6641f082e1e",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a01b341b-3d38-4d24-a68f-1b30e44e4234"
        },
        "item": {
          "id": "b48bb7b4-90e7-4d45-821c-fa20dba7726c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fbd5ddb3-1069-4051-b04d-8646f041ec88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d390a2fd-642d-41cf-884f-1c0a31a19eb1",
        "cursor": {
          "ref": "eca71af5-5439-4051-9028-dc6494903e6c",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7f5d9a0e-02f6-423f-b189-667152ab35b9"
        },
        "item": {
          "id": "d390a2fd-642d-41cf-884f-1c0a31a19eb1",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b098ca39-5e90-4238-88cd-d29eaee6a2b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50e2fbf4-a9aa-4e47-aea4-080cb57f75f4",
        "cursor": {
          "ref": "7edbf0d8-d22a-432c-af6c-2d5cfb5c38aa",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "52a9195b-e1ee-449d-979d-2a372b6960ee"
        },
        "item": {
          "id": "50e2fbf4-a9aa-4e47-aea4-080cb57f75f4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6a1d9957-e4e9-4cf9-bb9d-9e973f103c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fa8dde-c492-490e-8689-330bf46eeeb0",
        "cursor": {
          "ref": "952f22ed-5147-48c9-a7ba-ddc286db2b27",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "be72b425-1f64-4d01-946b-c22ae63415b6"
        },
        "item": {
          "id": "38fa8dde-c492-490e-8689-330bf46eeeb0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f068b2cb-07b5-4716-b37d-d872e007c0b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810501b1-7418-41d5-badf-81aa67910b41",
        "cursor": {
          "ref": "725a1e7c-5a28-4662-8d24-9537a31437be",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "76146346-1bdc-4a6d-b1cf-c25033321a50"
        },
        "item": {
          "id": "810501b1-7418-41d5-badf-81aa67910b41",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8bec28c2-6f92-453c-816e-1ea5371b63ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92c9c5a8-124b-4cde-b595-3bdc04c09844",
        "cursor": {
          "ref": "abfe24fa-07a1-4ce9-9817-661785afe2aa",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ab579b65-ecd8-4eb5-80cd-e95951bda542"
        },
        "item": {
          "id": "92c9c5a8-124b-4cde-b595-3bdc04c09844",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ddf60eb4-c4e1-4af1-891f-1db3dece4c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305e0e4c-f064-46f9-8a00-bb44b419b8d0",
        "cursor": {
          "ref": "b979be2c-2cd1-4d88-a2f8-73f40459b293",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ceb2a5dc-b436-4302-b801-9fc76f78c99e"
        },
        "item": {
          "id": "305e0e4c-f064-46f9-8a00-bb44b419b8d0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "68ea961e-8c71-489a-adf7-5d6570dd3d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e4f3b5-2e06-4168-9d72-51541c014e06",
        "cursor": {
          "ref": "fd8184f7-c9d7-4ced-8f1d-73766490a5ca",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "03f843f8-ef01-4344-914b-f98a845067e9"
        },
        "item": {
          "id": "21e4f3b5-2e06-4168-9d72-51541c014e06",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1f250702-1014-4ce4-845f-e3f5b568c973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a729685-f71b-41f7-af67-ff6e63e77470",
        "cursor": {
          "ref": "74c9fee5-22f7-462f-9795-265949d4a8b1",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "bc18edbe-e71d-4e44-a495-5306595f6895"
        },
        "item": {
          "id": "3a729685-f71b-41f7-af67-ff6e63e77470",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "32e24803-de90-490e-900f-86789f64ccdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ef9c21-7d53-421f-94f7-742d55cea1b0",
        "cursor": {
          "ref": "b8988781-2ff7-4533-8d32-c8cd7dd6dfb3",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7168f28f-3933-434a-8c78-162a7fb246c5"
        },
        "item": {
          "id": "71ef9c21-7d53-421f-94f7-742d55cea1b0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f33224e1-3ca9-44af-aa4a-0b8e0f502ce1",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "733662b3-cf85-40e3-81f8-d2c1f5faacdf",
        "cursor": {
          "ref": "6b92ced2-5529-4ca7-af32-d107c701fc36",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "56156e23-c46b-4328-90cf-cfab1636f145"
        },
        "item": {
          "id": "733662b3-cf85-40e3-81f8-d2c1f5faacdf",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "12d991a5-66ee-461a-a58c-902b702d0589",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "36cdf9cd-8198-43f9-89b5-ea28a423a565",
        "cursor": {
          "ref": "ae17e5ec-a4ed-4d9c-a27f-db4694499de5",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7e4f2ac7-8fda-473e-af9b-83ba4e22f617"
        },
        "item": {
          "id": "36cdf9cd-8198-43f9-89b5-ea28a423a565",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "eef270b8-bc13-4f99-975d-c51d46c4b502",
          "status": "OK",
          "code": 200,
          "responseTime": 178,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "0a905a3c-694c-4252-a5cb-511fda36c687",
        "cursor": {
          "ref": "0223f02e-5602-4d6a-9122-0ead6a50d9a8",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3eba6c13-6739-400b-9e79-864fc62a5bea"
        },
        "item": {
          "id": "0a905a3c-694c-4252-a5cb-511fda36c687",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "12896748-de4f-431e-b343-5ee18b152d75",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e418c6e9-c0cd-42f9-9e88-7206ea70bcdf",
        "cursor": {
          "ref": "3fc87321-c292-48d0-a0b1-0d9664850677",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8381c818-1aad-4c20-af77-f419d7c5a0e8"
        },
        "item": {
          "id": "e418c6e9-c0cd-42f9-9e88-7206ea70bcdf",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "303656b7-c441-44ff-8251-6ef55e557645",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "1900e254-b893-4a58-ba79-5bc70a27a730",
        "cursor": {
          "ref": "91b252fe-a67d-41df-bede-2823353ee10b",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c60e914b-616d-4481-ba6b-004709183307"
        },
        "item": {
          "id": "1900e254-b893-4a58-ba79-5bc70a27a730",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c10c82fc-061d-4492-a8cb-1cc183b51879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38d1914-d18d-4013-a936-a5deab2aaada",
        "cursor": {
          "ref": "70eca4ba-42b0-4a05-83cb-45a1dcbd144c",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "083937b6-e4ab-40ac-8844-2301171e02a2"
        },
        "item": {
          "id": "f38d1914-d18d-4013-a936-a5deab2aaada",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7ba1124c-7586-4454-ab56-2d9872a3cf27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17cc0fcc-b9a3-4698-9197-4d0e04e276c2",
        "cursor": {
          "ref": "c6b2f3d3-178b-4e27-9362-c780384046be",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f6ab7b59-b7ab-480c-9efc-4456aec7da32"
        },
        "item": {
          "id": "17cc0fcc-b9a3-4698-9197-4d0e04e276c2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "58880946-f615-4b51-bdb0-edf209f69a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5348e1bd-d832-445e-a05b-337fae4ba80c",
        "cursor": {
          "ref": "6c75211b-2dde-45de-93b6-acd2207c1611",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c006f8a0-9200-4f08-ae37-31991bf8b559"
        },
        "item": {
          "id": "5348e1bd-d832-445e-a05b-337fae4ba80c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4c1a1275-0dc2-42d6-a203-ee659435ce01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bec8126-7618-451b-9d35-62714003622d",
        "cursor": {
          "ref": "db0fdbdb-3d1b-48a6-a113-cdda65e61494",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ef98ff4d-c7d1-4c36-8999-56886490091f"
        },
        "item": {
          "id": "6bec8126-7618-451b-9d35-62714003622d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "69b8f779-fd46-4cb8-a0b3-caea64e98e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b336be-e668-4eb3-9999-fa92c7e41594",
        "cursor": {
          "ref": "0c38e82d-d750-4c76-8afb-88003e319ce5",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b4096f61-18e8-4ad6-ad7c-f4a7136e2552"
        },
        "item": {
          "id": "99b336be-e668-4eb3-9999-fa92c7e41594",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5ad801fb-d035-4d32-bddd-9f5af6a2a599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f5f25de-b45f-43ce-8489-86752ea3c6ec",
        "cursor": {
          "ref": "4e6da66e-bcdf-49d6-8b9b-0bc866ed9808",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f88e7b81-ea97-47b7-9109-6f81b35f8e67"
        },
        "item": {
          "id": "5f5f25de-b45f-43ce-8489-86752ea3c6ec",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9b718262-d5df-4816-b1b6-4cf02c856bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fce866e-edb9-40ee-bc17-c0c90a6911de",
        "cursor": {
          "ref": "d5f10eb9-dbbb-4c2a-a2ca-e650322398bb",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "42309e71-e9f9-48b1-88cc-7a407155e5f7"
        },
        "item": {
          "id": "0fce866e-edb9-40ee-bc17-c0c90a6911de",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "62b8b95c-b269-4060-84f7-74e1fadc68d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed2565f-0cad-4e0e-8c4b-c212982fffd8",
        "cursor": {
          "ref": "a55f8e25-c6a3-4a57-bec8-f2cc2da97c77",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9f87d068-cda8-466e-afa5-057ded8474a7"
        },
        "item": {
          "id": "5ed2565f-0cad-4e0e-8c4b-c212982fffd8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a552e2cb-df97-4bea-b8b8-486fc1bac94b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45588a4-1a40-4fe3-af12-5cc174b8ddae",
        "cursor": {
          "ref": "6ce21346-e027-4b51-85ba-e110faaba5d9",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a6ec8caf-e0c0-45bd-9353-e5f5581fdfc1"
        },
        "item": {
          "id": "e45588a4-1a40-4fe3-af12-5cc174b8ddae",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5fbbc074-1cb9-4aac-9b02-33b11abb250d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a6a100-0653-4938-bf9c-16706d7615b7",
        "cursor": {
          "ref": "27558c3a-d81f-47c9-81a8-06fe79a25db0",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "db94185b-601e-4c1d-a203-331bb1fe60a6"
        },
        "item": {
          "id": "e6a6a100-0653-4938-bf9c-16706d7615b7",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "42924500-abbb-4796-89b4-830435a98ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7699902c-d291-4276-993a-9c5a54a31d70",
        "cursor": {
          "ref": "c471324a-d57c-4d9c-8f35-72dd0066d36a",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "bfa6d26a-4081-44c1-ae1f-1a5c20d7183f"
        },
        "item": {
          "id": "7699902c-d291-4276-993a-9c5a54a31d70",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "107c4625-4319-4add-8872-54fa80201fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "388d5f81-eb2e-4471-98fc-ce1358be356f",
        "cursor": {
          "ref": "31a6939e-26b5-4f25-a044-91cd1d50de09",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "de2f3711-ce79-403e-99aa-ebae82ae0fb2"
        },
        "item": {
          "id": "388d5f81-eb2e-4471-98fc-ce1358be356f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0e889d6f-6a41-4f4f-9f5c-3975ce3215ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372434ac-4898-450a-8a53-acfbe2c39f8a",
        "cursor": {
          "ref": "8af7e089-edb9-4ec6-9693-4f286c836a45",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "ad821624-c154-4506-9f5b-326719b8262a"
        },
        "item": {
          "id": "372434ac-4898-450a-8a53-acfbe2c39f8a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "38bf4ced-d2f6-4531-9590-63ebad74f550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2522406a-c3f6-4bda-bc4a-5ef1854027bd",
        "cursor": {
          "ref": "1cbed08c-0a71-4bf3-a48f-f62c0c9d0264",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "77eab66d-d7d1-43e9-af7e-f25f9a853032"
        },
        "item": {
          "id": "2522406a-c3f6-4bda-bc4a-5ef1854027bd",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9f79969e-fb1e-4e2f-b67d-fe8951ee4547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b01dc86-0839-4abe-b8f0-abed22d46a3f",
        "cursor": {
          "ref": "8eb8d71a-ca10-4e58-b91d-f1be8ddf8ddc",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "5596c422-b960-41d9-bb58-835acb5bc025"
        },
        "item": {
          "id": "7b01dc86-0839-4abe-b8f0-abed22d46a3f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3f9b7775-c2c2-4b1c-8980-657045104bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8513aa49-d4c9-42c9-88fd-d43332c34123",
        "cursor": {
          "ref": "b5ccd5a8-a8d7-4ac9-82f9-12c13eb03ffb",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "d2f3b798-3c04-485a-bdbd-4101ce94c7f5"
        },
        "item": {
          "id": "8513aa49-d4c9-42c9-88fd-d43332c34123",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4ff3b7db-33c5-4cfa-b56b-208ccf540798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452892b0-b91c-4adb-a001-ee73fd640b16",
        "cursor": {
          "ref": "7079aa1e-13b3-47d1-b19c-5cb4cc682cb2",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "c03fe46a-8a77-4773-8fbe-e5e10bc8325b"
        },
        "item": {
          "id": "452892b0-b91c-4adb-a001-ee73fd640b16",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b61c950b-f599-4e7a-8868-18b27a628eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53270cf3-23d1-44c3-ad96-42e6bc6ad9fb",
        "cursor": {
          "ref": "abbb8a3e-73e1-4266-8bf2-9fcd4d6672b2",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "38d39b91-e37f-4a3f-81ed-58bf237b62dd"
        },
        "item": {
          "id": "53270cf3-23d1-44c3-ad96-42e6bc6ad9fb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7911a141-7904-4e45-ab0a-a39007fd101c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b222b3f-5577-45a2-844d-1e42e90ed31f",
        "cursor": {
          "ref": "c1cb9194-b54f-4a95-8426-dc697cdf2afb",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "2fb39f1f-f3c0-4c23-8cf6-12d60467cf75"
        },
        "item": {
          "id": "5b222b3f-5577-45a2-844d-1e42e90ed31f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5f242ab4-5f28-4c36-ad22-e50af6a4a176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec7c8d7-3e4f-4aa8-99e4-4f39111b0663",
        "cursor": {
          "ref": "64aeea42-9d06-4921-9269-bf58a80ac0f7",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "7ae3b34a-48cf-43e2-b42b-3e4e3fb4ebf9"
        },
        "item": {
          "id": "9ec7c8d7-3e4f-4aa8-99e4-4f39111b0663",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "de94970f-8266-4449-a2fa-f7db378d2485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba6f9d4-62e8-4355-b31d-8b88f7e36da7",
        "cursor": {
          "ref": "7d1916db-0e2f-4b22-858a-fd332056dbd5",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a003d439-04a7-41b7-9563-9c3afea03928"
        },
        "item": {
          "id": "aba6f9d4-62e8-4355-b31d-8b88f7e36da7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "44b779a5-b35c-4cf8-9c88-a7cc88d4aec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e49bd6-b927-4679-9ce7-40213d56a256",
        "cursor": {
          "ref": "8e10b598-6cc8-484d-a744-cb8a18368a93",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "48fa7f3d-f173-46e9-baad-6a615088cb1a"
        },
        "item": {
          "id": "69e49bd6-b927-4679-9ce7-40213d56a256",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "bbc765ff-235e-44ea-b0c1-2566acda9ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed0152f-65d3-46bc-bbde-3d53e34af809",
        "cursor": {
          "ref": "863dbbfa-7a9d-4efa-8c47-200610a71d1d",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "c633e19e-b098-4583-b2cc-392649a5450e"
        },
        "item": {
          "id": "fed0152f-65d3-46bc-bbde-3d53e34af809",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "19988553-4a40-4a3f-8b84-34c519851d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd9bbf9-0ee5-41fe-b115-85bdddcd456d",
        "cursor": {
          "ref": "0adf595d-c451-4256-afa8-bfaaa2a40e4f",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b846d219-a5cc-4cc5-a0ca-26e0b3a9efc7"
        },
        "item": {
          "id": "bbd9bbf9-0ee5-41fe-b115-85bdddcd456d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2a59242e-ee47-4be4-aff5-88aaca050b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba8b9fd-b7da-4670-810d-32695bba0996",
        "cursor": {
          "ref": "0ce3af0b-aea6-456e-bd9a-9b122527cfd6",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "bbb0c19b-68ec-49b4-8960-01c3ae9ea009"
        },
        "item": {
          "id": "eba8b9fd-b7da-4670-810d-32695bba0996",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cf549170-5009-4868-8fec-0962e94dd80a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aeae25a-14cc-44ac-b8bc-0ba51aac8292",
        "cursor": {
          "ref": "da9abf79-514e-4226-ae04-2bbe2ff8b599",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "eb61a80d-b464-4ef2-8a8e-2466bc13fc9a"
        },
        "item": {
          "id": "0aeae25a-14cc-44ac-b8bc-0ba51aac8292",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "93ced297-66ef-4955-89ca-ce4f8538e89f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c18382de-7d2a-4b33-bc6f-d688df25328a",
        "cursor": {
          "ref": "1f976870-9e21-41b2-bd8a-164ef8d734e2",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "afd3ed89-92d4-4a62-a11c-1471e472d68a"
        },
        "item": {
          "id": "c18382de-7d2a-4b33-bc6f-d688df25328a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b9e491aa-ddac-436e-8ec2-a9f84883b7f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97244200-d99a-4755-a51d-8769aae9b572",
        "cursor": {
          "ref": "0cf50775-0027-44a2-b8b5-452315515ada",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "ec8d644f-f268-4f74-bd46-6a3820d217a7"
        },
        "item": {
          "id": "97244200-d99a-4755-a51d-8769aae9b572",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "769ac0c6-2c8a-4109-8484-d7caf13950ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c681dcc0-7a22-4ea1-9155-2ea66c0cec03",
        "cursor": {
          "ref": "caf4c93a-6554-49a9-8730-6da465b1e4a4",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "101ebf66-0ebd-42af-93a5-a05940231113"
        },
        "item": {
          "id": "c681dcc0-7a22-4ea1-9155-2ea66c0cec03",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4e06e868-2fda-412e-88f9-b92fcb7c04c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c1096d-5700-407c-9298-e73a498c982b",
        "cursor": {
          "ref": "82476475-f6da-4124-a886-5cacccf42f2c",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "12f384f5-8f2e-439b-9b41-49c01093d544"
        },
        "item": {
          "id": "78c1096d-5700-407c-9298-e73a498c982b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9de46b82-eadd-4293-b603-dda7b5e479bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b089d8-1c42-43ba-a434-db7af866eeec",
        "cursor": {
          "ref": "6cc47272-1beb-483d-b257-e499cb68e85e",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "c51d8225-fa26-45c1-a6bc-0d6d41d7b734"
        },
        "item": {
          "id": "b2b089d8-1c42-43ba-a434-db7af866eeec",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "cf0ba12f-1527-4b16-8ed9-82002aa43207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848e9887-9bc5-4797-8653-677389d115be",
        "cursor": {
          "ref": "9129002d-7aca-4537-ae2f-bac3875edc53",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "a236a40a-b717-4e20-bf45-2b41362e70e0"
        },
        "item": {
          "id": "848e9887-9bc5-4797-8653-677389d115be",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d31b86ea-0b39-4f7e-8a0d-976ca4c3b84c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a2b64e-3a72-4582-beab-2cfbaabad85d",
        "cursor": {
          "ref": "d65730cb-4e12-42b3-9458-66e9adc8b12b",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "53b31d0c-1b13-4e26-b6f3-1fc14acb5fbe"
        },
        "item": {
          "id": "f1a2b64e-3a72-4582-beab-2cfbaabad85d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a012aabe-c823-4ea8-ac41-60a3e17d619e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce9da70-919f-4d0c-b86f-c3241e21c205",
        "cursor": {
          "ref": "85ff114c-213c-4f8f-a70f-fa7b5f8a3e8a",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "128a30da-11f4-46c1-8eaa-4683028d3940"
        },
        "item": {
          "id": "6ce9da70-919f-4d0c-b86f-c3241e21c205",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2bad3ed7-14e5-4558-830b-d41125c2c607",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7392b9c-9f84-4d3c-95e7-d59e8f7658f9",
        "cursor": {
          "ref": "9c58d962-934b-4789-8c9f-2b0644a8bc92",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "53d71e87-3862-4dee-8b73-d95caa2cf9e3"
        },
        "item": {
          "id": "a7392b9c-9f84-4d3c-95e7-d59e8f7658f9",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ee6edcbf-a4ab-418d-9e9e-19d3abf803aa",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "c9ba0215-2d73-4fbc-90ca-94d6dcaf9ac1",
        "cursor": {
          "ref": "1ac76daa-cd66-4f0e-952e-7738ccecc572",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "8194c441-267a-4cac-ab5d-f99d044df48f"
        },
        "item": {
          "id": "c9ba0215-2d73-4fbc-90ca-94d6dcaf9ac1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "cbeb2850-fb3f-43d1-8f09-e7c4df2f9cc4",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e3bde1-5c19-453f-82b4-95ba89a4967e",
        "cursor": {
          "ref": "5ddfa2ff-6f07-45de-9637-db8003d4ad2c",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "79e2623e-4f5c-416b-86d5-5157eb0008b7"
        },
        "item": {
          "id": "65e3bde1-5c19-453f-82b4-95ba89a4967e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9425496b-26dc-4670-9bac-983cf8ff6fac",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "300923e7-1f98-4a13-8406-8446214200a0",
        "cursor": {
          "ref": "bf661cb8-b85f-449a-9190-633826f4a45b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "381de19f-10a6-45f5-8e76-9aaf2e7d1782"
        },
        "item": {
          "id": "300923e7-1f98-4a13-8406-8446214200a0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e9671633-8589-4f12-b0be-3f528c38226e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300923e7-1f98-4a13-8406-8446214200a0",
        "cursor": {
          "ref": "bf661cb8-b85f-449a-9190-633826f4a45b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "381de19f-10a6-45f5-8e76-9aaf2e7d1782"
        },
        "item": {
          "id": "300923e7-1f98-4a13-8406-8446214200a0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e9671633-8589-4f12-b0be-3f528c38226e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad751138-8761-46e2-a5b5-76f2a036b1e6",
        "cursor": {
          "ref": "0992b9b0-1674-42f0-9cfb-e1b46b44647e",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b1cde4fa-0c26-48fd-961c-61760a66ddd9"
        },
        "item": {
          "id": "ad751138-8761-46e2-a5b5-76f2a036b1e6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c401e6ef-f354-4b6c-b877-bed924437168",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d8b513-770b-473c-b495-44dd7362bffa",
        "cursor": {
          "ref": "4a1acaca-d543-488b-add8-1d61ddef09f1",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "fde3d94d-7e43-4907-9318-9a3d135ca08c"
        },
        "item": {
          "id": "c9d8b513-770b-473c-b495-44dd7362bffa",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "87c8b214-33b1-426e-bdf5-0198c3fb18d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}