{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "431d66c5-4213-4c4c-8c6e-a1cc9925ffe5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "84870666-585d-4307-a51f-43b48594c1ad",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9bcc2d57-e0ab-4bd4-ba61-3f0c9fa9f005",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e8f18e2b-9174-4d0c-a301-798e61f64816"
                }
              }
            ]
          },
          {
            "id": "5d9d1a39-cf4c-4957-a963-a72100998501",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4341543b-301a-4dbd-b61e-cd8a0697c3fe",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d1ad1e0e-8479-45fb-bb8e-3cba4b2a97c4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6e41c6b1-4a51-4e79-839d-21ebc36d3f54",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7ac4c98f-1846-4686-909c-5c04f79b89bf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "db2c4bb7-1453-4b43-8e75-19b09060faea",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "46d045ec-a2df-4210-a442-66ee1b60554d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a6e7ec69-5e8b-4769-b023-a056a30d83d9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5bedbef4-9f17-4426-ada1-0c55a810b882",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d5b82a2-e8dc-43cd-9aeb-7caf5b13e39d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e0835eb5-4625-4d26-b508-98f0f00f07fa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0cb47cbb-9332-4873-a703-eeb28866e440"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "82385225-2394-4c29-ada8-d8e958647ab8",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "446db812-534e-4ea8-90d5-d3eb120f5bf0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67936ea0-c270-475c-bb9f-b9ff33df8268",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1157249d-1662-4e30-88bc-efb3c4d16856"
            }
          }
        ]
      },
      {
        "id": "022a6f80-6b6a-4bda-806b-f683c14a2e5c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "6cd4c2ac-40bb-4888-bf0e-92543ebe234d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc9faa1c-944d-49ef-9b67-0d2caa97814f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0d80a253-e98c-4f32-9030-64af92ad8240",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "685624a1-435e-402a-99e8-1f669036ab17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d82f0422-e8f7-4247-9943-4c9d87d57c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2400ff9f-7d91-4378-bcce-87b396ea538a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32804d7e-6683-43c7-af9e-ebc3b4e171c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b21cda5-221f-4793-8a2b-f5f3ad6523c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc706ce8-d0f0-4614-afdf-7bf59e3e53c8",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab768de-bedd-41e5-bc0c-2c3400d7a6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e75911ba-92ce-4ec2-865a-1db9b80f02ea"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bbd5021f-0acd-4a40-94ce-60ef3cb96225",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d6d6075-75e1-40a7-b8db-73bff75e00ec",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad643aa2-2b15-44a0-ac84-2ee981e850e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72c070fe-73c7-48ef-bce7-0b3f6839b4cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6587efc-b5f3-47da-8a85-9b39583f582b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196543a3-1e86-402d-bf0c-2a6548746351"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "04f51998-8831-47ba-bdf7-5bbbabd1f522",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c083b003-f484-4b8b-8c36-ebeb9714ed76",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "31f9cb78-b881-4f33-a924-a6c8adceff59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f0f82381-0c3b-463d-a654-743a03414e96"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f63d50e-d682-4502-ad39-f9ff9b2db9b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "01139848-13d2-417b-8cb9-6608d522a25c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e61603c7-4a9c-4446-b853-4a6c9a13f78f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd387305-619e-4430-b8b3-0f300c437c9d"
            }
          }
        ]
      },
      {
        "id": "dffdadbd-f636-4a0b-a767-c551819b5ca0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f7908b9a-64d9-46b0-b729-39f2e2a484dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "64a31b8b-45d3-4cb8-9551-ae1a7acbe1d5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "996bce0b-7d2c-497f-8988-468a7724e4fa",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf55c4d-ee0d-40b1-b3ad-777eef3e03b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10005bf4-d5d9-4f69-b5ee-b5b10473fbb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563fd17b-afd4-4c2d-a1cb-658b1b8f217d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1606b07-17b0-4ac7-bb45-542fa416ccf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d267a0d1-6680-4364-a6f4-4aabd3a4327a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e07f87b-52fe-4071-b48f-23fb8bbaa0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41351fd6-40bb-4fed-a5da-c3a53afa102b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b7176c-322a-4267-840e-6eb3fcb208a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d94bb5c6-fb75-4679-857e-3bc297197275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f327be94-e74f-4015-86f9-2d28542b9c84",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d2c945-d851-420b-b8eb-7d06793366b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d84a127-eb40-4335-bf5e-3a8db6f3c96f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a695ba-5de0-472f-8673-8979aee9040e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da336eb3-6f87-4e10-bac6-8e7fd3cae2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0322b235-9edd-4134-a225-3b42914f54a5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e91273-b784-4348-ab05-69f627e316c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "254191d7-732b-4d59-9729-655bcf7057ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e740b6c8-33ad-4a75-a28e-a4bbb3af0a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce2bc9af-d294-45f7-ac36-6cb58df2dc3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2fe2e21-4b60-4565-93b9-5bc2d2e1f4e7",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0b8b88-9d6f-4953-b02f-1fe33316eaaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44d80108-6ae6-4acd-b1fe-3ac421b48c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b9f5d0-2f9d-4bcf-99a5-8761c11bf217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af50ac53-f8a9-42a1-b482-7e150f9928d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419e555c-bfb1-4ec5-abd5-f46aea2f1ddb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c09d4f22-9eb1-402b-8927-50f624239610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d811cb31-5bd6-425e-ab5c-6444ac8fa2ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6687a54c-e8fb-414c-8c67-1caabd6ea68b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72de8da1-aea3-4063-b4c6-6fd917bbb744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518ae142-f964-4262-b1fe-6292ba89f659",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248cad3e-5898-4050-b857-72741af499a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fee2535f-b63e-4172-8a1d-c97a3e3b66c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e639db3-abdc-48c6-9a99-6b6cf8f2227d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "496e72fa-2d78-43f4-b4fa-915f9bb48778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2e3ad6-e87c-4af1-87ff-4f376ceffb0a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf63e42e-b5ce-4d37-9610-0e08736635fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c7b2409-8550-4663-8b42-e04e0a9058db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562e5046-5635-4ccf-a4f6-4d4e0fe468ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50203dec-67dd-4058-ae71-c1eeb5df5d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c3936fa-2061-439a-aa46-b4e2b6a5aa1b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ee6c18-b77f-4686-9e20-8a426df9cdec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eab8f70-b351-4519-94fc-64e73e446dca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f92b7755-ea77-4e9d-a21c-682995a9c6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65cf5bdf-884b-45cd-94f2-b530539968c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8219eb9-7255-4889-9367-bb689d92e6f8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5497238-ab88-4624-933e-aabd8a12c740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "960c32fa-5953-4db3-bb95-bca930df63d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929886a2-a623-42b3-bd05-00b1d6d22f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5447762f-8929-4768-adb2-05022a6c9569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f210f29c-5e33-4da2-8d24-705e1a0de664",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cdc8d42-42a5-4057-a869-d8896055b673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11df146d-b5e8-409c-a9d0-12935f1cf302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66985dc-5559-44b6-b001-a6493bb35bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15a91c31-53fd-4d2c-88fa-8cf5e2da43cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f825584-790c-4fba-ad12-a4f51743b0a0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85df1e45-e390-4f19-ad93-5d40f2151ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1db1111-6a07-4ae2-b53e-f6a636b82460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea0dbd8-1a13-46f4-a0f4-0c809bb4121d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dd8063d-6735-4e38-9636-33ae64b324bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb032b4-29dc-4560-b941-3277cac9bab0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2484b9bd-d121-4d14-9994-5777b5ec5fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ecb7c9-af08-4b15-9ef4-fde35006c4ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e98127-89a6-4628-8340-656b54971190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c071f39a-0783-4630-abf9-8a82d0842a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296c2af7-b6c4-4274-a59f-17f8398c7d69",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba7516b-3be8-4ba1-b086-46e3b7ec1a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbc42335-edd1-46e6-b836-5188cbb73504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88f87cf-9961-4004-95d8-8aa51142974d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f5dfba1-2637-4e2c-afd3-d13b87d841f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fcdfac0-3724-4e87-b953-3369611b6320",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98557ea9-23ee-40c0-86aa-857c24bb2a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f77931b-fb60-4c12-b2e3-89dcb5f0a629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce7cf7d-1927-47cf-bde2-b8fc12198caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18e8cfec-b401-4b7c-986d-f53234a4f879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144b9173-eac0-40c3-8497-f01b3664742b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23528a7-7741-4fed-8479-97defa7d96d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27064c26-f4b0-4fba-b352-f0978cba67a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0e8311-40ce-4b72-9068-28d5efac68be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6e889b8-a0e1-4b34-a4cc-a62926b4600e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de301474-2c43-4e81-9710-d5d0e4e06288",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb8fcac-d08f-4b27-8d05-da24706ce977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b95ffde-1485-4d3a-bbad-cf733d1100b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bcd2fd-13cf-4aeb-8d4c-f00c9a96049e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a724322e-6769-428c-b963-3e90846ac2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c71e451-9a1b-4891-a6c6-18db9d948203",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068de0a9-4379-466e-a942-8c171113bf95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d88cb0e-6d73-4665-b96d-650057b458d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1436581-1d7b-40be-ab2b-2fa8c2bf4e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a47bd97d-e019-48fd-b865-b481dafc3220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39455b3f-0bb2-4df5-85c1-e6840886c2f5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27549d94-ddd7-4d45-80f5-231350aec245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85634cc5-dfe6-4dbb-8ba1-eefa7e0e6721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbce0f3d-d0ce-41f7-b2b0-e89ae321021d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc5dbdaf-a310-4691-9661-fe80cf8b62d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc2f489-84c8-42be-b42e-7501523635bd",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aede8138-36f0-4b8c-a153-729dd0409a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8001776-9291-44b2-81fd-d245aaccc2a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c0ff8b-7a87-4e3d-898d-3a573b8a834b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dca58521-8690-41ec-992b-a06134656ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8db510-f0a3-47b8-b2e2-09552f754aeb",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba72743-2c73-4ebf-9ee9-ece82ebd7d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2b2843f-4c16-4fb0-b334-ede791538180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047bf91e-2186-452f-9128-001c0bbaf7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a31b104-0da7-4f5e-9016-434f8e99a7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052e57bd-0f0f-41d2-9026-9e30ec0f38aa",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1ea8ed-caeb-4b13-b7e9-38c54fabca85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df3278b-5d47-43eb-a876-68064729e888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ed0d7d-a5f1-482b-beb6-e775715892a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "acbd431d-1636-4b44-bdce-efce61aa21b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a47d11-a9c2-4721-9cb2-48661c1d524f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e34714-6839-412d-b038-bb17920e5f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78713c66-83b6-427f-9ab2-5301f1b54dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea9231e-e83e-43f8-93f1-010fd1dea2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "33210cc7-1aa3-4fa3-bf0a-c4bcbafbe4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c439eb9c-f1ae-4049-ae80-7dd75a88499a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99a3477-35ae-4fb3-9886-b0d54f87c54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b73273a5-dc77-4c9c-839d-eca01b89f21c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4602b8a-4e37-4927-9808-bdf4fab41871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a19b800b-5965-4ca3-876a-514a4bdcaf30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98fe5a8-cd44-466c-8b16-ee040411f906",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f83db8-0631-46e0-83e6-fbb8a3feaed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c2ed0a-752e-43df-9a09-80578f728a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825afa97-7762-4fd1-b769-3c8966af5372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce85a9a1-297b-497c-b30f-e005d7577e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14fc5715-8060-409e-8cf8-dcf1b2d17a0e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c359ed5-c17f-4ef8-af68-29cd41309c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f77ccc4a-805d-4f15-868a-664c4486f11f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44cb6e2a-eca1-4d09-a6a8-79ba67a333a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "695aca2d-f7ee-4ddf-b1ae-d735aa3f6e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad0fa25c-abd0-4dac-a596-5e2b9802fdda",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a1252e-4834-434c-a56d-6c318b0c72ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c8709a-dfb1-4f05-be18-7c74c31c007a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305e884a-4947-4dc2-b571-f2c283230cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "47ef093f-8ec5-400c-a815-e360553d64f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14db947-6c61-4544-814b-88f6f0c2c888",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb44e632-6236-466d-bcea-7251e2fa3518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ba001da-497a-4bce-9c5e-1ed32aa3e9cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151dc4d7-29b1-4e7c-80df-9c3d6b61e87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "56e010c3-f61b-4112-958e-828ddd96fc5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06adf3b-59bf-43d6-9c1d-75942b89d13c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83aa0e2f-003d-4b6d-8ec6-b5761165c7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d711301-f11e-4ac7-b904-2354a618ab65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6cf00b-d305-47a5-a52e-a2fd9f8206dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "598372d5-7f88-4cc1-8f0f-be1cf5feca75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd58d3d2-2c92-470c-9814-1b63ff5c411f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91943468-d014-4a0d-a23b-48e9edd751f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea06ab2-5112-4e69-8b16-be2189632735"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db99ad25-9870-4d78-8eed-43ea3030a32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e40bed3f-7e4b-415a-8056-58fd7089637a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "533bbe5a-4c3d-4ba5-8013-4299c89b5e01",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a22be28-24ad-4ba6-8d6b-20bf1f922c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea83d366-dd00-4b5d-b3cd-b7d10c453384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789ddafb-d1a8-4ac1-b219-fc03bd22e577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4570c200-f971-4365-a21f-880aec64bafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b0ff33-61f9-4de3-9560-5c8ae689fb24",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a405d2c-a3c5-4783-a69e-f921e37f2e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4c3c945-4988-4b35-a107-23726c8d6a15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebcb9e8c-3ae3-48ee-a2c3-9a66c0671196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e091c8d6-fae8-425f-bbfa-0f8c86e93119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f587164b-d9cb-4da9-8407-952c8378beb8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a82cda4-7af2-4ac7-8fcc-4a6db57dd1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615c5065-39e5-4e81-b0c1-ee3b70a743d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c29a46-6dba-45cf-b770-a0874807729f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ed405af-ea04-4f73-b73d-c785c38b4ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ae836c-19ab-4362-8395-cbc23ce57a47",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "725bd28e-792a-4717-8c56-34067410e2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a6a6889-bc27-49d6-97a0-00747c35c8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c229e1-2028-49de-bcf1-7cc592d21afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c77ef1a7-789a-4a54-a150-d847443c2821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93e975e-626e-486a-8ae9-fefd47682190",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4429e7e9-9596-47ad-941d-cb273f32a0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24513405-55a1-46fd-a990-6844f4382256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ada2c8d-f4c7-41d6-9920-1c9bb17eeaa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3f06cc3b-a4bb-4a6b-92f8-21f9d3f60992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c518753c-07f8-41ff-8720-b83576b9a7d4",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ebb4f0d-b9a1-4665-a194-3733490882e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82c4fa10-ee23-4b37-8c11-30137a41223a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c925f997-9459-4d10-ad43-ff52c3f0e4e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "52712ac3-54ac-49e7-a962-fcc5b3eaf43b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9ed251-5cb7-4c1e-94a2-be37260c1f74",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fc74f5-9424-4f1a-81c3-2aa52d9628b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d207db3e-ad81-4523-8a58-3a7239de7f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf4de1e-e8d4-491e-a60f-09db173e76c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6302c8f-230e-4059-b60f-bbdc8b8c22de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651c5283-161f-4336-9c03-90f53abe6142",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f809a2a1-abf5-42b0-9515-1bb5c6acc1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e43eb3-dc41-437f-b04a-1d69a88d61d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47ca5d8-ba9a-4e61-b5cc-bfec2ce1b0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "40bee1c1-8c50-4d9b-8692-d2d3663d1ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5652eaac-af14-4ae3-b45b-5e4984ccfa42",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faecef8d-4da8-4881-b0a2-737d1af215e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e6c3859-4b67-4154-b565-73f43cdff963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "152dcbc0-6053-4653-9825-e6bbabeba5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "747a5af2-04ec-403b-a203-2cd3978b3d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00eaccda-4e4c-4477-b226-794c3160aaa3",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2652de0-79fe-45ab-8e5f-b745a5167d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "883ca5b3-923f-4066-84b4-8eb46abbb29c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e332bd-0be1-43d1-b84b-8661c482a358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b61b61e-ad01-4968-9d0f-b1efc37a649d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef556b9-76ef-47ab-a6c4-557c9a3a847f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c46e7a-df03-46ba-b000-6b54c969aa35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89fd30e8-06bf-466a-aa02-3e79d3a63aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6fc119-b886-4fa5-9a11-9f62ee3e5f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e33bf10-ac66-43e9-9382-ab06c7a56610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef40c202-dcaa-42e1-9e95-60ffcbbdcc94",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da025c88-d129-443a-9a68-740c18636c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a0bcdf3-95a9-45a8-8988-7e2cb10b0569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9859a2d-05e8-4085-ad62-f063ced09c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ce61335b-7428-4661-b93f-c4ea130a0901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84fcba03-0c28-4d6c-8bfa-fcc79c65eb85",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ea09bd-5485-42c3-ad6e-1fe5bae5696c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ff6da9-010e-47dd-bab4-fb15b8e1490a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed2fc3f-57e5-4cf0-8ce4-d0d567e2a5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf3f7c62-d512-4f77-9a6b-98180b639422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539f51a4-4013-4cf9-99fd-7ac0a1affd8c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4902a5-2730-44f2-a86d-bc8028aa7704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4330ddd-57e5-4be9-a2ed-1d6506ecdeef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c03c7e6-9100-4879-891b-9a06a8d1d156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "754fa44a-9196-46d3-ba54-9e81bd94d6ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2dedce0-492e-4ad5-a958-19615e05c939",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "932ff661-9a55-4639-a4d0-a1d41c8437f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a989540c-c1a1-4117-891e-daf3ac5de4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4bf898-4207-402b-a7af-2e16df5bec70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cd36718-0516-4938-85ec-dc5f1559f960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f547c363-36e4-436d-9893-f2afc8da3905",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17953f5-ef4f-473a-aaef-33674e7eb726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9719e6f5-2b44-49e5-b517-7ed672b2b1f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2519d6c6-070e-4745-bac5-ed1d93324a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c6c7b05-6e85-4ced-b23e-4b937daebf5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0f16de-7360-4c70-839e-b3baf3622d38",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c36818-ac36-4e82-b644-c5a7168fe7a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ebcdde-76e7-45a0-a404-14b5877192cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab97ba8c-5677-44d7-9af5-4de8155b3d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "294b7f93-53f1-46a9-8e5f-e6ef68b17fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac2e047-78ab-413b-8ca8-db1a2e8a91eb",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f9b45f-bc09-4f19-a898-29bd976ce213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c342d820-78a3-4481-bdd0-b5a742195ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604f829b-68fa-4610-8c84-408560970d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c543c7de-4ff1-4d5e-83d2-0d470584e9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd452ea3-f868-4c6b-b4b3-d45704cf5204",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f30d2ae-189c-41a2-9fe4-5bd9a962966b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "965934b3-8f15-4a05-9dc2-20ef3ca95826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f7a4af-9278-44d0-affc-19e10567c486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c226dc-297a-4161-b571-6f82ce798e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d204f53-8235-41dd-b7b0-6e8d29c1d653",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e187f19-f2ef-4d83-88df-80da05feeb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "433c181f-e648-4c55-8b8d-3e72ecd1ecd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c3613b-d95c-4521-bec3-b4e8034dbb84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8466827f-6d79-4790-9194-4021fc9e6155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac83980-145b-4d0c-8d94-ccbdae08708b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1dedabc-0cb7-4d98-a923-0db16e6fdc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a81accc7-eab0-49ae-92ea-491ebcaac0a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f171c3e-0200-4ed9-beae-564a07f9a30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0735b6ca-df0b-4ead-9849-1168c0e5d9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b7e0e8-a399-45c1-920c-ac94c8717421",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e0d556-c888-48dd-b2da-cdb9da322856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39ae9933-14ce-4397-8f31-ec524d5eaecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85721c00-0e8d-4cae-a28d-97bf36ce5210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3f4cc18-a94e-42ab-b1c8-a287d1938215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e731a02d-6ce0-45cf-9fcc-964ae58cba5c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "050b5fb3-0e1f-4e46-a15f-3b4cac862b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd50850c-a3fb-44e8-8254-aaad694abd08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff13e0a6-b96a-47b5-b61d-16ed8fda5446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d707fe8-1de6-4b1e-8f64-c651a8a70202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2056a4-929f-4fe5-98c2-740619e4e7c2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06af66b-7474-48e6-8d9a-3ff2994bd637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a01af747-17ca-4505-bcce-547d98ec8491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7e1e24-fac0-417a-8f1f-ef7bcc8e20f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff6ade74-68ad-414c-a11d-fea657ca1076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5306103-2d5a-43d8-a1fd-fda95f0aab27",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c80105-1acb-43b4-9781-ba36e45029cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d266e10c-760e-4b94-911e-383e1add48ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f595de-e5c0-405f-aa51-b437339f0b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1454ac8-0fad-4d38-a18e-4e9010cfd445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45c725d-3330-46e6-bd85-7b89d91cffc8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad15a0e-6465-4522-b645-678d3402a643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83b13e3c-5c49-49c1-9c37-7f9f29ad119d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64be1233-e143-4a44-aac6-bfbb1ff97730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1dcad631-707a-44ea-93a2-49deb1378e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27cd18e9-14ca-405a-bb7c-9794ab9a977a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e066860-01e9-4d47-a993-d624c25a59cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d7fb816-bb84-4578-8a1e-4cb0fb5c8c2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9455d877-ae6f-43e9-aa96-9b9bfdf58b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "38f63bd1-bd85-4921-a42e-b4d140cc7e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dec6ea2-1d2f-4db8-967e-dc10466fe3af",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "845e7f55-c4b0-41d4-bba3-b7906e4a64f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62549d00-ccce-4013-ae0a-139133519170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44142f2d-c817-4884-9a5d-98752421a7ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1712321-683a-46cb-a42d-2308286e2532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11b4985-5ec7-4913-926e-3353b3a152e6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95107e70-f9fd-486a-8ad7-a6e0f494c0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "667e38aa-b814-4aa7-8b98-c79e69b09120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58247f32-0e6d-4f52-bedf-64cb7c875899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1eceea70-1d50-4206-b3d3-69ba5ecc8c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a69920-1d7b-4ae1-89be-98e7f459a221",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac80959-6b3c-4c22-b54d-6a98de3d6d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68817fcd-1326-4533-a520-19405dec55ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923a1561-42d0-4ba3-b43f-2cfbf0e11140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "47c4d6e9-c445-4525-8a14-0d3033812a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7024d5-ebe8-4a2e-974d-e69324fbe187",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca68d2f1-ade8-438b-aded-2767b5ae1ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59bd972b-77e1-440c-88c0-37744b43915a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9e81bb-8ef8-46d5-8594-901d966a3b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b625a9-e041-4eb8-87fd-8e6085cf7ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91beffb5-2ded-4e2b-adf0-c6f2fe8e7b1b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "649bc3da-75a7-4131-a6a1-8b75cb2fe40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9677c547-1236-45d4-abbc-93cb60207f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9508b453-9fa6-4e3e-8590-2dfc2c3b2372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bd2eca8-cedd-4966-b76e-53654e660916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600eed71-3c7a-4505-9383-b2391abeee8f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d58574-c49c-4da3-8210-5529248c6c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27704865-6a11-4c52-b8ef-7cceada745e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4b3f3c-dd66-4704-bc4b-017ef4a3412a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cef82cb1-0597-4468-8701-26947a5d2d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51df03cc-8347-40fa-9d6d-921e6de02fd7",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d93a03-e039-4f0d-b0df-5bd16767e7fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "206c8bee-9b99-43dc-9280-d1c9d67c3c84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fed59bd-3af2-4530-8d22-f131f7acaf43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85a25ced-7102-4953-a2e9-08a2ef19d6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652f159f-7b24-4d41-bd62-463c3c681078",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac57ea67-b47a-4cc1-88b0-657bd7f9cc6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b25b89d8-36a3-4a8b-972a-f2393be0b535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3eafaf2-3f27-4b12-90b3-c9415b53e85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c15c8d9-b8e8-40b6-b1c6-3734a114ba01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672ead3b-d7e4-4077-95a7-9c87e26ea37e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce56f83b-5387-40b9-83e6-4ee8a6962ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5bd991-e641-4c2d-a25f-4d7274146abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a0a1d4-d83a-45bd-825f-7782c1c51a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cfd5716-dad7-4991-99e1-871b89ddeab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17800854-fb60-42c7-be96-35b117cd5b75",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e97d507-2be2-426a-8d76-50f75038b8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55776d2e-0544-4a5e-bafb-fe6a71ece755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4da82e-819a-4fec-b5ae-9ca720560a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aedafbf4-e071-4c1c-aa3a-64b324f90324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a07065d5-c665-439c-b1ea-2183f45323c8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3097bf3c-6db5-4f39-a0e8-a268d7fc8fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c77f0fb1-ae8c-4994-a42d-3226ce72c1dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9257ee1-e073-45f5-945d-6355fd248958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b7da9d2-15bd-4a79-9196-393d88ccf6c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647b02b2-1932-49a6-bdce-7047e4b105a4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f474229c-7a82-4ede-8313-5960723e99fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04745351-568a-410f-802f-189765b398f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd50dbb5-446d-40a2-a8ca-023f69d5240f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad1ea284-cdcb-454e-96dc-a3119969bf56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9e26a0-fa8a-4394-89fd-a0a875e8bb9f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb406cc-f4ca-4c0f-9e78-ebf3f1b1336a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "934d9222-25c3-4315-9c7a-82f5085b2d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6310242-5ed4-44e1-af84-8528a3068f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "78859f1f-396c-429a-b86b-613ad08d57ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dbf0097-b9e0-4768-a8a8-365a6f828229",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4320bb4c-34e8-41aa-93f2-56d65dc18f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92aa671-7e24-4400-8ebb-80ae2c354b06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfc2cbc-ac22-4ab3-9e5c-46e3fb33ae53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddcff914-ecb7-43d7-9db1-f7ddb10b99fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14dcc202-78e3-4fe8-b55c-bd5edbac179a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e84e2c-3d6d-4053-bd16-6c38b64db32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9763483-e258-419e-99ef-64c9953b6102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b5c8e4-09c8-43a4-9161-75fa093dee00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a25b6f2-c97c-4cf4-a13a-2c52524f741b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fab6b08-f609-4393-a596-64670021399d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26c60e8-0709-41d2-96a9-4c20da41c329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1b42f12-8553-43ab-8a66-a71699512759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241a9f18-d143-4297-bedb-1a1ca6536d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "733e33b2-d5f4-44c0-86aa-d4bf5c5c6f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ca9f33-9223-43fd-9651-d75e7d18d264",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f247b5-1822-4864-b438-f156bf81f746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ae72b4-ee0e-4117-b5b9-b222116c12a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2749f7d-2014-4859-9ba7-b1b7dd47bccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b03c3a33-00c0-46a8-86e0-666d67b8720b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f4075f-f579-4465-89ac-d4be35d6e262",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "501d60fc-8559-495c-9282-ccb77b8620aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bdaf0e8-d0ec-4f3f-9182-ab1af3dd56b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1cd635-015f-4a4f-aedf-4cf732f55ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "080af40d-d062-4182-9dcd-1c4c1ac5ca46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f31bd5a-8c4f-4134-8137-ef1deeb673de",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba339c0-dac4-460a-a2df-ffadf7472535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7617551-8ab7-486c-9666-53fd1213cb4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784219a3-fa16-4456-b7cb-4d528e4d494e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd08a44c-f70f-4ad9-9e83-ed2b0e67ac8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ac17d5-9e89-4345-9a1d-0831689050e3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1982210-b5ab-4ea6-9ab9-b873d487e671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a0eaef6-2a4d-4351-8075-5515e98dbca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e11a8c-3c57-4ee1-946b-de0f0c6c16f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "98e3c2ac-7cbe-4d63-b347-810bac039bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8484a33-2b34-4689-9fdf-98b5059885cd",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f106283-8e1a-4365-bd3c-eb0a43a812fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39fe5256-4a51-47a6-9236-7e11acadf95d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bfdeb25-08cc-4eac-a6b6-1d32d3f4398d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "83c5d7bb-5c26-4309-9eec-e396865d3bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc59548-ba66-4644-a687-fd4224ab71bd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb506bb-89b8-4ce6-82c7-bdea94ec1053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b97d444-87dd-4465-b0e3-0a37a2d7813e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b764bcf3-7d06-446d-94bb-e429889e6444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "10b84d15-9823-44cf-84d3-3ac36b88ea7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18edb4b0-d39c-4b45-9d72-364b12ab98fb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52090612-6b9b-45ea-aa20-5c9355b28e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc0d883f-2bd5-486b-9cfc-61e50ca57cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24f39d8-2a5d-43b2-a7e8-fe0d09dd7f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "557c955c-5198-49d1-a633-16e3382c0355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b632e9-b8eb-4d39-89f2-b3dd8b61ccd1",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064d6e44-209d-4507-9152-1db05801edc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ca76462-937e-444a-ac11-0ef4eb83a029"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937b95c2-cb09-4373-8fc7-2b06d3849aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4299ffc6-40b9-4208-84ce-68dd602c5eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57dbd946-6018-46a1-977f-6ce7d77688aa",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a00539-1336-4482-a511-a83c53900105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8836247b-de93-4724-94b1-59a1a08578e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a98009-441f-4d82-8aa1-d0d7f8f9f01f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d1d8f09-471e-4173-a22f-bf178421047a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1736ff1-64cd-44d5-8f5f-fdb54eada5c6",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6793cf77-79b5-40de-bdc4-8eea92dc82f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d7f0a1b-fe12-4593-a071-b0c962b11dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be3d236-5488-45f5-b78d-fe74efcee63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1da7893f-2fcf-40cc-b2d3-c4bbb101e7bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccf0411-c67f-4517-b3fd-b4d33fe8dabf",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce4d697-07d6-4803-80aa-0fbc103c621e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e0fd1da-f5d6-48ab-a77d-5620e72176fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81f6972-3c3c-43a5-b594-6c539b3621f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea188206-e5a1-4816-bbdd-e4a71bd02ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f883748-fe40-4e34-95ba-5fc4b1df1938",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ebe4b25-d210-4636-9941-7d82942bad6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51196d54-79b5-4e1f-995b-4fcc72976006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f6627d0-6e2a-4657-967d-6f4b50ede4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a449ff4-d122-424d-87ca-edd3a6d3c12d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5679d2-3425-4bba-b1e8-5f4e080219ef",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "151b2cae-2d12-47be-ad0f-09b7ba56f9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa15c526-bf44-46bb-90cc-e7e56f6f26c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a65e66-e56b-408d-bd4a-4d494459cacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "54088cd0-9e10-474f-81c3-c03e3835cb26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7005d953-c5cb-4a7d-8525-57ae6389797f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "942dd26d-00e0-4826-9273-40a9b8ae3a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c76265-ce41-4b6a-9695-5432aa498441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b0d0b6-4755-46ab-9e57-b0edcc544924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e90ca17-274d-4ae9-a208-403a8ad9927e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "053f3338-0219-4752-aac7-a28ffe6cdfdd",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fcb22e-5033-4176-a51d-02c2921e9dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "282c5e0b-ae17-4151-b821-347263d1de93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75907ad4-a439-40c5-9bed-4b7dc1c6da3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d3b4c75-9bd7-45e1-b6d0-a9ce33bbe935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae3db05-fe7b-4a5e-929e-8b92b47ce897",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0082b073-a332-40ef-a995-3f51109a73fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1a750b2-1d13-4cf2-9c7a-96ec4e92d0be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ef9f8b-3410-415c-bf5c-443fff387c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "29a5562a-c13e-4036-8146-71ccbedbe02b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e77a6a2-7a67-4ab1-91e3-25356618adc4",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6d82e1-9b4c-4ac1-af6e-f566eb5306e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d58cdd30-72ef-491b-bbcb-31ffe4774419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66223c7a-d54d-41f4-839f-7f3c0c5df665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "43d5cec5-283a-462a-8ca9-636d63c05a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "288aaf83-f343-4041-8328-7823db2ff676",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee03b29-f7ee-4a26-9499-44846bc7eb2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2661fd-3a40-4926-8bec-dc86ceaf4306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad5eef5b-b77c-4c8d-a957-a9e772887f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "acec38ce-e923-42f1-8d4a-b55c06935b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54edd137-0f3e-402b-b483-cb05599b8ddb",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214bfb33-d919-47a4-8998-eda1a9f79782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5fd3a9dd-fb04-4204-a901-c3eab75b6d67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26688504-0212-4d21-8257-0ca6dca0ec37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc5d1829-894a-48bf-9fc0-b783672b70b7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8f00094e-7561-40b3-a2e4-e668f2066300",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db01c6ef-3efa-4c3b-95b3-f005d602df0d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4392256f-3327-431d-8f64-d8d681d4327a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf3ac552-ef2f-43e1-b43e-3686d6156474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8af8e4-fc78-43f8-bff7-f697885e521e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a368461-dc0d-4323-8682-2cd1f83193ce"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "314e9b2c-cd79-47f6-b54a-7283917d06a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1d9f82f-a888-425b-b6e5-a9c58bad7c99"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "51f9fdc9-3274-43f0-818b-8aad7f18ed26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6edf5c2f-0e19-458c-a11d-eacc424b1d99"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0d181488-b385-4302-9703-3da83d7b1bcb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee2798c7-a70f-4c27-8121-e6bd11fc50d5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b00b5226-6b34-4205-878a-21af9cae3410",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cfbb4a9d-9838-47b6-b4bc-eaa919733102"
                }
              }
            ]
          },
          {
            "id": "6e97a120-ed10-4050-8c6a-71724c052623",
            "name": "Positive Testing",
            "item": [
              {
                "id": "07420bb0-e43d-4188-8f72-a8fd9dd45aaf",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "fc5e9c37-1e65-4740-9b07-aed4a0ff6a05",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d432b1a4-b522-463d-8cc1-01bf20c804ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d67522ae-94c7-448e-86b6-8396995e37b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a74313-1541-4e0f-9544-4e22404b7684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ddeea14-0e19-49d8-a131-2cd352bba616"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d24dec52-9abf-4f10-a0a0-4e33fe42af62",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "642048d8-6968-42d3-8189-192444030a92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a8b3da2c-9c9e-4a49-9f9f-824ecabf2ffa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f458f0b7-ded5-4738-b391-f0462591020c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b7f3e35a-c313-487b-b986-3d018928b961"
                    }
                  }
                ]
              },
              {
                "id": "21c3efb9-1c1d-4a23-850c-2526166420b9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b40c3d8c-2dc7-414a-bc43-1b70911f5af0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d403f51-e954-467b-af16-ea2958a4d77a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfd4c90b-786c-4e72-936b-ef58be0ab8d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "36a7f66a-5f5a-4413-b604-798f6c84d966"
                    }
                  }
                ]
              },
              {
                "id": "e5999162-81a8-40b8-86df-66cdaeaca389",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d18d13c1-e65f-4128-b41d-0e7aa4f3faa9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "45895034-d844-45d4-8555-d80eedee3ef9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d03dcdd8-5a06-48dd-b260-dbbf6542d54d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b29a1501-423d-4fe6-811e-8c16fba6f9f0"
                    }
                  }
                ]
              },
              {
                "id": "290a5dbd-308a-4e2e-bab3-2fd5ed728e4c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e559bb8e-9369-4211-99b4-963b64da959f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1128aa4b-768f-43ee-aa20-b04aad5bf667"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "50095e21-1741-43bc-8763-ae9c9ce47dd6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a9c3e173-07c6-43d2-b1a0-ba5a4c9378f8"
                    }
                  }
                ]
              },
              {
                "id": "0dd534bd-1d8a-4ad1-96e9-189d08c44c30",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9113c44-7cba-4f27-8672-9d70d1e39a50",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3d664fb5-02b5-4211-864c-a09e3c1302ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c6e9516-27c3-4380-b6be-a1e315841a63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1c03d416-115e-4378-92b9-8b368a4e273e"
                    }
                  }
                ]
              },
              {
                "id": "41b6ae8e-0bed-4f7f-9c05-044a3cad31c8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da28c3f7-a6de-4f9f-88b2-31004c80986e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "12df13f6-fabb-467d-85fe-754d8d3048b9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed55da7e-ad93-47d8-a741-4a03188c7bff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f64fcfc1-c8df-4636-8024-68767c9c0870"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "906710b8-3e34-4d49-be67-a1e8c0cf194e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "82c19094-ae94-4092-8efe-c0d970f5bcf8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "60f8e25b-0c6f-4df7-aa3f-1af31b89ec71",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5e722aa2-68f5-4fb5-9e88-a86ab4e06cb0"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9583591d-c13b-4ab6-9c80-3c9f13200aff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e0bd2486-8744-445a-94c6-19b88e4e7b53"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22222cd7-cdeb-44ce-a69f-91da99c6a497",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e7329a07-bc14-443b-82f6-d568afb6984a"
            }
          }
        ]
      },
      {
        "id": "40197881-09a4-42f3-ba0c-c66a063314ca",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e77587f3-2a5b-4271-aa11-f45172dc48f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a089b9e3-e2d6-4a06-abc8-c990a72776b4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3551424f-1a08-4d25-865c-6c030a4409dd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea75faa-ac7c-43a4-b61b-b66cde443d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7423aa32-08a1-4af7-a541-f92a7919bfde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ee7a5b-c927-421f-9ad3-4bd69cf98740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c96542a-3a33-496f-860b-57d4eec8ac0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed8f683-0788-4c3a-acf4-a7ab96dc6ad9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a56977-c775-40d2-8265-1c5ff56eff80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f3b983-de8a-422c-a076-a0fb7ff49436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead3da21-8570-40dd-b183-627770795278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "edb76ca5-0229-48ec-a8d2-3f753e3295d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b890fe1-105e-45ae-9d4f-3e15a667803c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9abe660e-e01a-4433-8f00-2287a4c814cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47df2f3f-229d-4307-a38a-79694e25f010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7b73bc-931b-47b2-b20c-3412d31f229e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca7bb4fc-9305-4ee5-a79f-9b4bd21cc94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8574822b-4e2b-4694-afe5-b195ccdcbc7c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6c4af7-7943-4f50-b0fa-8ec9bc16ace9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c92783e6-b918-4685-804a-819cf9cfdcc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905ba243-06ea-42a1-bd63-edf326925311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba9745a9-d063-4e46-8755-b1f6428fb106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c67f84-f9cb-41c2-9ea3-0b53a5adcd4e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92fcbd71-57f6-4e09-9e93-e91dbf3039c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c037fcdb-2de4-419b-978f-f805196daedb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee0eecb4-3aae-4159-8c57-2b573ff3b07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9abc9c14-a741-44a1-822c-4af90ca7bf66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be6f740-f687-43a5-82b9-074f3aa78002",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "619669db-17b8-49ee-bb65-8005b2858744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5409eeec-f020-45c5-be69-40c8c68b88aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba104cf-0ca1-411d-aa7f-01e69d1d2f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee1a2dc-8027-406a-8924-81e98c2059db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076347c0-5da1-473e-a036-63f0855f9186",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35b87ab-0cf9-431e-ba96-1719e04ac53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55dc9c9-741a-4077-adda-543975a0f9ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2c9687-53ed-49d5-8a88-4071df8f0563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "89dda8c8-8571-4735-81dd-d9f282fe9512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d622bda1-3822-4166-85f1-4754df577e3e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc54385-f62b-49e5-9324-6b0c7f61fcd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64cf5486-acd8-48f2-a2e1-1b3d4b2fd040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53f7532-5554-47f5-b8a5-8e23733ee84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "28a82310-5ecd-4df5-82ff-3c37d47d3ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d22d99-8039-4968-b79a-028aed1f99c4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95958bc1-6fc5-43e3-95d9-665f67ac062f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f123c2d-0b31-4b1f-af3d-05d71e518b8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23359e25-c0ec-4664-b4b0-998f58f1decf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1f934ec-542d-4944-8fa2-9186b289e871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee6c539-71bf-4c22-b805-c80ea911640b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99ffb92-5a7f-4714-8cd4-5cb25130c4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6320773-b2ff-4789-a57b-557644ba282c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da24a79b-1a5e-4bc5-9db8-56df7f407bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17a8f4a2-fa56-404d-98d5-da444e2c3b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb2ca56-74f9-49de-81f6-b66226e67163",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3089a54-87bc-4a20-be95-958c3ae3f17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da8f0636-4a13-4373-8195-af4d5b8b4725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79df244a-0f57-4063-b62b-213d8c0a8131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6e193b54-a005-4fb6-a2d2-4e42c12bb5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6c37e6-850a-4e3e-9df3-2a8dc3aae897",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c73209-3d43-468b-8bf2-c3852199d7be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f61491-052b-439a-9c82-1b7517fd8443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13475975-6d66-4079-8ee9-d761765b33a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f74090c-a1dc-47e7-9944-f24b2b8993ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d8b0091-8207-4654-afe1-efa91580b202",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d35322-0918-41bf-90b6-d1756dd25385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8a43f81-09ff-44e5-8e63-df673dc8643d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60f20f1-0f87-4479-9b20-fa2f7da0ed30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c54922-208b-48a5-8a88-57bd770c96d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40ec4f1-5916-4a12-88ad-bf5f819786f1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196108df-8de9-48b4-8983-41b188643cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f66603a1-1012-4432-ae78-5fd59308ef44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f884cd93-df71-4149-8dfe-e5cda7ddcdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a75d029-8a98-4409-b84a-2e63049b9b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3b3014-9e57-40d4-b217-317fe8f559f1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b196324-51ca-432e-a09b-8ecab4f19c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a866d6c-9b89-410a-ac27-84f053cf228a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73be141a-4a2c-486e-8082-7059d94a1ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "80301c04-5cb6-4b07-95db-ee1232660a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992eba7b-fd19-477d-b62b-eb038d977f4f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b97418-1b17-465b-91e2-7c917753effa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c354fcbe-2e24-4a87-b279-7e26733aec3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64fe074-dbee-4549-b146-2b435300ae78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae7d6731-7e1d-4784-bfa5-3c21981a0e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca8a252-cf20-4719-8095-6257e7e28238",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b76113-b865-462e-9a39-eb73a690016f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1c0e5b6-624b-44b7-affc-776646ceff5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fab14f6-dc71-4b8f-84b6-d661d65570f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b965cf65-740b-4f54-b9da-545659d4bb43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89554392-aaf8-49da-837c-6420763c2183",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79aa57bf-3faa-4376-9c27-e416901a3683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "316e1433-7254-43fd-adf1-c1a08751cf96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9639a6c1-bdb1-4655-afc0-60d79b0ac558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7caa8e7e-19ae-49d5-8d5f-87060cc51340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d4c65a-a642-404e-93fa-6ac9817d541c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0185988d-3447-427d-a16d-cfbd41481da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4497ede0-5740-4a20-9fde-d44206191766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbef12e5-9791-46bc-ae87-b6675946219f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab19747-270a-4a41-b197-d941201def04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362d24eb-1064-43dd-a2bd-cfd1a31d379b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f4d4da-5e05-449e-b392-072ca7a5a186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d1ce7ff-2155-4046-8165-be991b7d9c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "160233e8-2750-4e88-8e29-c22effc73ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d12b1ca-e00a-4ae4-80e1-07fc22017f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6cabfc6-d708-428a-b398-8d2cfa26243a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcbeaf48-0a29-4f18-9e5d-b9763a0343ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5f4d767-a4a5-497e-805e-7a74e40ca21f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ff65b3-5d8a-41cb-8134-f84fb6953e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ded4f9a-96c9-4033-a4f6-b4dc7264043d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d6fa07-44ce-4848-ba62-2458e407c564",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6560269f-913e-4824-bf8a-51380e076177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d69cb143-b139-47c8-a69e-ca63ee551c6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2bbc72-8975-4f9e-9bc4-764b329f4dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b3f04c6-45c9-4d7c-bbec-13148d5b48a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d8e945-821d-4099-8e11-53a3da90a63f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5026eb-e88b-467e-96c8-80fe242e2d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bd56d69-8a88-4d38-8275-62e9726498a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8834ebcc-4490-4a05-9c56-50159b94d401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32e0a121-ff80-4820-80fb-5c310983d0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984853f7-d6de-45ec-a863-a055a623d35b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31cec814-779f-42ea-8f2f-432ff7e5bde1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f11db5-7b5c-4194-9386-83b7ac6dc75a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ed21b6-5bbd-4d4e-8f47-2fcadc68f45a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d378f31-9ee4-4f8d-8ee6-2b99b6791eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa21e91-cfb0-49df-a97a-d0cba9804cc2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82775114-d185-4bb4-b9f2-2ae9a30793ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb7041be-d9bb-4881-916a-b2663ea9fbc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5b28ec-21be-48c0-88d7-b38e31db1fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb17793-ccc1-4ef5-a5ab-fbf61c4b667c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508e1f39-036a-47a2-929a-43384cf01c66",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0711b0d3-fff2-4b4c-a254-5ff750488714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2078a08-8df2-4638-b857-c4780dc902c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d416da96-9b20-47ba-ae53-6ffb7e446009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "849fd9e0-c3c7-4a81-a5e4-1b88c7c1d683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a998fe-fa38-46a9-8365-0fd7c15b3c58",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beecfe19-c364-4454-a5e1-0cab935f4ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee299913-cb95-40fb-a430-a5caedeade3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb6e5e1-eeb5-4cca-95a6-32201de03ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86d7498e-0c22-4fbb-a8c8-fef154b5224c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513a4747-0a15-43b2-b117-bf266c0fa534",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1c73ba-a568-43fd-bfb4-52436d37040d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ffe4e84-d736-47a6-aec1-97bfca7879df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db88d34-ac6e-4afe-ae3b-e7dde8ba902a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d1c7529-bf73-4162-9cde-70a6b978dccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbae8acb-69de-4a3e-aae9-7026d07fa788",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15381ff0-fd08-401a-a724-140b915aaed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e811b71-7efe-425f-950d-7b767726bab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e9c002-5231-4acd-8f1b-f17a085e9ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee43ffd3-e997-4491-bd6e-833c1f3cbc05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143d9594-526e-4b58-b9e9-5a04da8b8752",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1304ce04-a5e8-4722-86cd-5557314e66dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5bdc89-7512-45d7-9f83-fea67b7111e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4222c8-9fc6-438d-b176-c32dfc1b989a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a74156de-9e8e-4492-aa90-fea79e34a71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ab57b9-0b23-4e28-ba50-a4d06bfc026b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4152b94-6787-426f-b573-156936c0c239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "294ae69f-fb72-46af-b366-c5f677fdb1eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9bba334-2aed-4a61-be06-96375abe2b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d291e3-ee59-4092-87f2-62a0e07e3236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a4371c-3a0f-414e-82d8-e00579e9cb40",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97e56b2-6265-4fd1-a863-31019f14d788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c83eb776-ac8d-4b62-8478-d4056212f89a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b5227e-cfd3-4ef0-bdcc-f985334c4703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1798ef70-1391-474a-9916-d4496c518016"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "84431b98-8b79-4653-9459-558e6246cf52",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "433410d9-a25d-42a2-828a-732845001144",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6651e1-bf71-464d-aec0-4389e4c4eef8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fa59169a-7500-43cd-bd71-d751f1332b32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3efc8ad-99d7-4e68-a24c-a7c0380a12e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dafe7cb7-e09b-4310-ba32-e07421e39345"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3e116cc-b475-4c1b-aeb7-b841b3f0e968",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4683c65b-fb40-43e8-9e79-aa8736989086"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "61b928c8-950c-4ca1-b43a-a7273e4e7ef8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1edd794a-0b9b-42bc-8d04-c7f347a089af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c224408a-3ff1-4141-9c99-aaa8889c4d5f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6ae26052-4683-4709-b71c-49d303d927fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d914d616-9188-4313-bf06-d7215a04350e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5df7fcf3-c07e-4491-a9fd-77cc82089da1"
            }
          }
        ]
      },
      {
        "id": "ad5d59d1-5a0a-4be9-83b3-4ea8227630ea",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "63439684-fbaf-4e8f-bb1e-c1b693e2f030",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8eee2ae5-5904-43da-bb00-1c80b00372db",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cfb587a8-24ab-44c8-86ce-5ca4b27e3583",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7fe34bb-a01c-422e-8d9a-13e92e6c6dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff3bd621-6162-47bb-b750-f4847279de33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a7f39a-8809-43a6-a2db-5ebc09a34c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c83463-99eb-4181-9f64-31eb19e1394e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd758c9f-3d56-430f-a83c-085b495db351",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3459e204-6403-43ec-8171-2451517f1358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1674724e-c3d9-4914-a906-2006be85ed79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b5c292-0ccb-469d-9ddd-e08664a26b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "375ae8df-d689-4178-9692-9adebc9484be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed9c8e03-9646-465b-8619-d59b573a5511",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e1a3d8-b181-40b5-b3d1-54d9685fca08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4719802-7ec2-4282-99ea-792a610f47c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64df3d46-9d18-4a5b-93e1-378da8c52893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f985dbf8-e092-4240-8a0f-89e7eaf0e4fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c97966f3-5ece-4486-a566-786fa74993af",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8161c6-b18a-4a93-a753-1c2265098b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2058cebe-c19d-491f-a8ed-fcef12cbba0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974569b8-3650-4d39-92ba-e952121ddcc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4d7f8ec-727d-481e-9385-330649817b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2943702d-5772-4553-a7a1-55f9653bd86f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4a9d02-2ef7-4e09-956f-f2c36f21997f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa661c1e-e567-411e-a81d-6045c9eebf05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203c92a5-832f-460e-94b0-9cf8ea64894e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "56686c93-2832-495e-8b5c-e9992288027d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49d1536-b7af-43db-b2a1-28b9d70985db",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "965cd72c-49e1-41e1-8b7f-8b5337a5703d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b42d81ef-de76-44ae-bea9-76869df2a7c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b332c431-a21a-4e1f-98bf-b90ddd390357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e31cf795-21e5-4f17-802b-19ddb04af853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c2d35b-62db-46e8-a12e-f761a08f8e7c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c9696d5-edf7-4075-9ca3-ff73d2487636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "188246b5-5473-4ae0-a6a3-d7d5d9b417fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c32198f-dc0c-4325-aab1-d3ecaedd5181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ac83643-2128-4919-8c0f-c62e192a928e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e85f9c1-76fe-412f-87c4-d04289513674",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa9fe20-2b6e-4bf8-93fd-e081fcba031a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "964dbfed-d3e8-4076-8938-94ffa524ac36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca92344-a22c-4d84-8cb1-c57597aeb761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d563385-fe5a-42c4-ba1f-000182cd3b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a71494-9f85-4dff-a227-dcd8cfbb6b84",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f40308-b0c7-4a88-ba5d-2ad492e5148f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fedde283-f361-467e-b5b3-503123fa41f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77670316-1cc0-40e5-a137-c0c8879bc12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "77ddbe61-e20d-43b0-8c4d-10ee2a28c2b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea01b6a7-f7a5-4b84-8910-866d2e9a1b93",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8284d0c8-a227-458f-9e4c-98036eee2b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e949b26c-7c67-4886-803e-69d0c48933f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93238580-18bc-4dcb-8691-0668200ed7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b10ddfa-35bd-46a9-b935-f0ee27dad917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e5782d-9457-4282-9865-f971bb70d091",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef76acb1-c525-4fb5-9a0d-88404afb5969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4231c3f0-234c-45ea-bf42-8066bedbba45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc563e47-93d7-477d-a6fd-e259688756c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d00153-2ee6-410e-9293-f182a917ae85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf95e52d-5381-4ef5-807a-d27d6d45f743",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6eb9756-ac9c-4385-9208-536e41147738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "979745dc-287c-46a4-b4fe-91ae621c4401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6ef87a-620b-4de9-ba51-9882be6ef983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "71627e89-e27b-4aac-9732-89a8eff20d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5171b3-ad57-4481-842c-6328a430a1d7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a3ee26-0892-4f9e-9d2b-6bb9ee75bf60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d946fc18-4ec0-419b-9d58-83e2e7a2e728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111402b3-0e63-4c35-bf7e-0a4109b07f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "34fcdac4-4332-4b4e-85e5-7ee16a01e7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4112378-bf67-4d31-8d45-ace429c7cf3b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502c9b6b-8206-4507-8241-021db4c633ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad068dc2-b085-41ca-a9d8-7bddd6ed3324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37ddf48-ce90-48a9-b475-e59cca44c837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "08ffbc44-519d-4f63-8cc4-9247e846c1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f25d8e-b388-4e1b-9617-da426874d91e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bad8f72-c29e-4290-b93c-b39ec03e673c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d08b7fb4-bb64-4010-aaac-ebde452980df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "381d6861-ea10-4bfd-a4d4-cf5adea9c3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7416f496-50cd-474c-97b2-bf36b04de693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74fcc2cb-68f2-4199-99dc-33061d8ed9d6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92eacf33-4a20-47e4-aadd-7d00ba895596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b2b138e-3421-46cd-80e9-8fff146a7923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d19e5dd-38c8-4a3b-9657-4a5d2fb4402a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "959502f6-393b-4f64-84ee-f76d68ec8e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04dd287-c312-4d6b-a7e4-a8fe6c2eba54",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4acde1d9-f95f-4329-a6af-134cc983379c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25e2e94c-f7d7-4170-9cd0-e81ea1d4aec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857bfe93-8242-4623-a69f-938d989a5494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b28f8d2-0534-4207-b1b4-410d513187a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede3a62f-0d07-478f-bcc9-9e07c7431ded",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8363e28a-d6f9-4d42-84e1-3b548015791f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6093476b-b188-424d-8b99-80b2b76f58c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c93d21c-8fa4-47cb-a754-464285c36b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "29c3efa4-2c04-4cda-943b-c5aa1ec6d5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "790f07ff-195a-4e99-8acf-a1b3b9444dd7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1604f72c-4b58-4022-89cf-13c7e8bb6d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "962fc099-8669-463e-91c0-cef79be6101f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433f9cc7-8310-46f9-9dd1-a586ab175ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46b2d934-fd49-4281-9ca5-f386ee9ecc36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1fd2a0d-a08b-4371-8e60-a5306608db75",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "549f00f4-7931-4710-956a-f0061d759341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ec2393-85dc-43e1-9d52-0b29fc05d71a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac92113-1de1-488f-bd54-44e4d48b5dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c029941-9379-48f2-b0f7-e7f3ca377229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c76040-9778-4913-91b8-9742d05c5008",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a69ff86-9963-43d2-a7e6-70ba8ffffe4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c886a48-d83b-4627-833d-53bd1e4d53dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8be65a5-a6ca-43fc-8f51-141ef82e677a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84bbaace-b3bc-4f95-b6ab-b2c3af44f596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad78326-0e11-4051-b001-a8b6009a3c65",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b14bf7-1ed7-449a-9dca-0b7786f2ad0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99527eea-522b-4164-8823-3422164d89e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d393ad3-1113-4e9e-954b-8825116e13a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b044a0-8823-445b-aecf-62d679b25d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845864f0-10db-4b83-be83-5eae2f68c053",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e216cb18-7f01-42ce-b646-960ac9cf3c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f3e852-2d6d-4985-9f00-dddd8527145d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f3523e-4299-4c7c-b156-acf4c2e1e1cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b0886f3-da40-4d9a-8e88-7281e7145266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b36aa5-8218-4051-bec9-777fa80fabf7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e14833f-6e2d-40e6-ae87-eac4b61cd5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2b09ac-c4ae-4fd5-a53d-3febe5c2e0b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357c87e3-9b0e-4d9a-8b5d-0d88f2402bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89d34d02-62e9-4510-8d11-5db64bb9f0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270676d7-dcd8-4da1-bc88-d7aa592523df",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3cd0da-2fec-410b-bd65-81a7d091e7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae7077c-0be2-4cc8-967e-ebd6cd9ec688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f53b58b1-e966-49ce-90ac-6259f14c09ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43215f42-e6f2-40e4-b782-cef5cfa0ef15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266b3af7-6670-4214-8a4a-f7ef96722db4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af58923-d08b-4d59-8c1e-76d0793592dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a8b336-861f-4d0f-9416-1a8836b2ea6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0278bd17-ee97-4261-9c07-9bfbfba4068d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c160c418-4188-4a56-9edc-88473215b432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce8a7e9-6719-435f-a12c-7743e45dba8e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c725aad4-95dc-4900-9c1e-213d8e26470a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d74cd2c-bb57-4067-b1cb-f5bdf2b3edef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1a285e-3b45-46f5-bbba-dbac5e8ea32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a1548ba-725a-4088-a118-543fa928211b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47dab2a2-fac8-4c0d-ae59-bd773c7e7aa4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8f2195-72e6-4859-89bb-84453dc7417c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672b32bb-e348-4235-ab95-1150b8659542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e36e1e3-91cf-48ee-b7a9-6dd19b86bb97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af497f11-25db-49ec-8068-d38aa95c977d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba84c7b-1ec4-4d68-87e5-4b61d9f3d989",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3911983-a84a-49cc-b671-a8b8ebd24b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80877a71-27af-4b6c-9fb1-2569bd0dca0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54e8cdc-4782-430e-af95-5de0bc2877de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "726066bf-db8e-4ff4-b4d0-1ea24473f846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5c7257-d108-4342-acd8-7734880ef66c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cdecfed-61e8-4d74-b3d5-db43ca88aa68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47375d25-f50e-455b-b162-b4a60f54f24d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8236b5c3-ea25-4b50-ae42-f83e3212ae43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96c0c4b7-0ff6-4f02-8301-b6d623e0bd41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d47198-3e08-4fba-9186-cc16b6314dcc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74db2a6b-33c4-47ef-9571-a2274530eb2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8bdb884-81e4-4c21-ae61-143c6147ade9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca62333d-46ef-40d5-be61-a766fcd32c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "644bd365-871f-4a93-bcb3-a3de855ce9d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be4751f-af40-41b1-91fc-0d7cd0ea414a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca57e1a-de9b-4b95-908b-8f60f09a6d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2fd3603-591e-42db-899a-00da1c748189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f45a5e-bc73-489f-933b-1f632990fd2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9eba567c-e3a3-4b14-a100-49691bc438e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb4c028-cd07-4f9c-92c4-9949bde29038",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6126050-fb4d-4130-83e7-36903994df78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad87dffe-fdc1-43fb-ae06-2151251e6ef6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4964826f-5e01-4783-afb6-c5ebeee4a091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b8cb222-8be0-450e-a7cc-a45484093312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440041a0-b575-462d-90d3-9044ffe4475a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de47427-c504-4e3e-a226-8619c8fe0906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d2b568e-3f9d-4e40-900d-082aeac9d24d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1a3516-2d17-4f8b-961c-0000ee1a2b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd7e68e4-61a4-4ab5-bec1-522acc72b40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccfdc282-4fe4-4082-9a48-e3be46a744ef",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "213c6d99-10b8-4c7b-bb2b-35378f2586c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4436366-a830-4248-b3b9-e08bece07e6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693e433a-5141-423f-8e01-15d962b50f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8095bb0-147b-465d-871b-1a15ee86002b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461ee34c-21b6-4821-9319-c55bb2ab03a7",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6af79b-4f3b-422b-8a73-a91da27ea05e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe6684f3-79ef-455d-adfe-a8b51e4de0b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e0f20f-44cb-4956-a08e-75f63347633f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11b2ad99-eccc-43cc-accd-737ac316daec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "630af40c-b684-4584-a64e-81b77f58a267",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b371014d-3ffe-4f1c-9467-de365070c9a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a40fb0-b402-44fb-b2ae-0e9fb388a097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b62cc0-1b2d-4d6c-aa95-9f9df6b7de05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d7ac1b2-ff13-474e-9707-2036f34a653e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dbff869b-49ff-44de-9743-73179b007561",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "29132bce-3ece-4f21-968b-dbf4d79d381c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015e986d-2d58-4cca-875d-b7c25723701c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "da8a7ab1-d3bc-4458-a3db-6c4f3b599d0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a7209b-5bb6-46a3-b5c9-d3d19c5aebcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48e3c9c8-2eac-4e2e-8da1-de45b80c0508"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02f19222-ec52-4677-b8b6-80cfc525c45f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ebf482bb-9f59-4068-9abe-0b9f87b5c30f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "47bb6e65-b2b1-4c33-baa3-46961c84c090",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa9c7678-5d30-479d-ad75-3a18ac93214c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cfb7cdaa-2254-4d23-8fdc-b0a14a63fef7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4d6de818-698d-40d9-9c1f-7cbca1710776"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed63b567-0863-4c18-8cbb-bc1ba31cab2f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0539fcf3-37dc-492d-a563-faf8ac9b0427"
            }
          }
        ]
      },
      {
        "id": "c331b23c-9ed0-4282-9445-ef493655b990",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4deea928-0997-4f0d-85b5-1c8661d45b52",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c7c4fb9f-5ca2-4cb3-a7e7-b592c621fc39",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a0a5b4a7-282e-4c70-ab26-e7c6a397d884",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15fc5e01-efa4-4d18-88ce-d8e40465170e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ecd677-6a43-4255-b997-ab69c8fbc23d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a62f2ed6-b216-4eba-90b4-a66774218f18",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71bb761-0579-47dd-a43b-16a7172278f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f0ae54d-e0d8-4af9-8269-e275d603db90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e20e54-5b67-452e-ba2f-8f31b5b0d9b3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0032643-c9fd-4771-be47-bd18df375352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6dd33e1-e630-4d75-a5af-63e5ad26e8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b09c59-99e2-4150-b55e-05bd63fe52f0",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1872bfaf-f702-4d2c-af10-cb450369c461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f8665f-c944-4325-b907-536d1eddc36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb5410e-f30d-4200-ba56-56b38694fc09",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1497f14-5d03-4c42-b8df-f385493917af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b7da1e3-baf3-44bd-8b43-787b20ace57e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34eddcfe-4b03-415e-898d-57a7f2d8b8b5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a2633a-6a95-4b70-ae19-c0fdc8b887fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8093ee5c-1287-4e90-a852-00dcf7396fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85ce398-0919-4dd6-ac05-06bd4b491298",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4adb32b4-12ef-4398-95c1-35df8432e50b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b336ce93-8f8d-49b7-9867-23f6b29dd3bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c379d47f-c38e-417d-9282-61ebaf75062d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2525b7a-13fc-4de3-89e4-3371a55129a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5abfd7-4ed0-4ead-bb39-be3a333f4323",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49312ba-cf08-4cbe-a3c5-df9672ba7b9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bc0c983-9691-410e-b277-6cd5874b2d41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0774919-e595-4630-9a97-43f744d63d79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77886833-82e9-4c0d-bc71-c2042346ed07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ea6c62-89da-41b4-af47-7d7320ff56ef",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d99895a-d958-41d5-913f-4d623bf42fea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a21d95d7-375b-48e2-818a-5e018db8c927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59e5fef1-1de0-486d-8455-4750bbaa7d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf4d7fe-b270-450a-9ee4-0c2921a30c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28a96f4-c788-4d36-98fb-a67d6a53c30f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ea49e6-f706-4d2a-a0ee-9128b13cb550",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09ef203d-d141-4333-a265-7f72554a6980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51f26f3-cc26-4685-9352-3c3148ceba7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8108c6e-f933-4c22-ab4a-3924b26b21f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95966520-33de-44ab-b429-144893cf046e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ba76d9-ae4a-4812-8e9b-7706a8c79b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19494fbd-b51e-43f8-9ab5-9049a8ba2255"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8836f26-4271-49b1-bbac-689740c1d640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b41a9bcf-fd74-490a-a3a0-cb4c38c4af20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bacad7f3-6897-4245-b360-2de90abb55e6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d340a5-9867-4621-a53b-f6b6be1f8f2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba914fd6-9a5f-4ec8-b199-2d1fd95ad9bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6a12d2-618d-4ba3-b2e8-69cd9fc9979e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f840e0b-5bb1-48de-a63b-7b2862d72371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad06c23-339d-4dfe-9cf4-f51146bae939",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43b08ee-ff74-46a5-a532-5d2e9c4aac25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc1c44f8-404c-409e-b89a-b374b1951b5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6170a66d-23af-4be3-9baf-3233f0d8e07f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab9d383-1577-40fa-920d-0e22de4a5b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c617c53-50ef-45de-9cce-e498e08f9515",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780ce817-07b2-4552-bcc0-81b1a567f7ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81ffc529-008e-4cc5-8a28-7736bd66574f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "071fefdb-0f65-415d-8a17-25083dc8670b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "066a0102-89b0-4789-8dbb-0d016a6b491e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef2d80c-8e22-4ef9-9973-382e4091c035",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa602976-9732-4aa6-98c2-e5f6312f2fbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dc1b2ee-5320-4653-9523-0f7d2e2b756d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e349c795-a895-45ac-99dd-840b2c885b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1709af45-b0a4-4a31-848c-270f2aecab08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f594e144-395e-4919-b711-59cbff074fa1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c32f91-447a-4665-bceb-b722ee190500",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "934b6ed6-825b-48a1-8e59-efbec708cf53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36030a6f-00bb-497c-93ee-02f25f377373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33cd02f6-e0ed-424b-9621-4321dc2857be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f40925bc-ea4e-4796-8f8d-ae5107fb1cd7",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb11a041-9b73-4e3b-b80d-c10e22268c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3378e073-d0e4-48a6-8983-326822b4b5e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2769c76-121a-4dc9-b249-f32fb376cb55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2094929e-8165-47e3-bbde-779f5940059f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f86635-ffb1-400e-b5d5-7c3a51ea8c76",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a46678-9689-4150-9f67-c148ede380f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49127fe-50a7-4f87-a48d-9fb40a2fa44c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d6b9da-e88c-4602-b556-1dcd1a54d28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae8c7723-48c5-4737-a2a2-e54588270d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc632d7-d8bc-41e6-90ae-db05b4dd4539",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d0604f-9719-4ee6-b11f-642484a724fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c72095-136a-4686-a281-d8b7555087a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4de736d-1bdd-412e-87e0-a83c1b05cb5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6127e10-6dbe-4be1-bf7a-411b5a0ae120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1e4fc8-086c-4fd6-a1bf-3300401bc1c5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0b4479-9d8c-4a4f-8f02-3c50016f86d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb1be2c7-0567-4ce6-bde4-4d4b0dbbfde1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7595ac-a768-431d-8fed-3f82bc1ec534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b58b6ada-78cf-40b0-9133-c65783ef043b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1993a1-5fb0-414b-b0e4-37ccecc4dd58",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6595f8c-bd06-4d95-a885-73319e88355d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8004004-42e8-4222-8b67-a70df5cacf57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9931ca95-1f55-4a9d-a206-1d14d037df22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a092e2dc-6356-492d-b78d-8071b004b604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e33eeb-3239-4e1b-8be0-cfe5ea4e4051",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33a4646-f549-4951-b6f0-f49589715d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1a951c9-154a-4fb2-8960-9f3bfb8e270b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2161405a-2e82-41ff-8089-90bd70581c1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dae070f-ed81-4167-870f-680cbc3ca117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfe663c-a2ab-4d5a-93bc-2945efa8ea36",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09f3e64-6f63-4589-8f28-e298b37da09f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74d21923-06e1-454b-8eeb-551b029a1ec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "485157dc-eaf0-4358-b73d-d9317e119ba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08fb8516-041f-4ba4-b52c-1c10a2aa33d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf27aea8-f026-4bde-83fe-f9c28d15dfa9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7369dd3b-26d2-47d0-bbec-94514cc2f2ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ef7aae6-e6a2-43de-834b-68e0cf869860"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce9ae49-33e2-4cc7-ab8a-8577d48da509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6881296e-2cc0-4664-a240-8ee7327b80fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74cd289b-43be-4fb4-b0f4-f3eb201c06cf",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4452879-c596-46e7-a826-e10dde2fd341",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b66ac96a-5676-4da4-afea-01c9a0f3f4ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3c622d-5142-430c-a489-6eeee0533003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b45f90f3-0ab9-42e3-9230-fe6c89d8e5db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a8ff3a-5f4e-4061-9147-8884e78600eb",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95a8469-03c3-4a57-bdfd-cd0923dbcb32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef5d3e9c-90f9-478f-83f2-76d4d8d75446"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca234f9-7150-486f-a42f-2f9f9c16d569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7ab12f-9aff-40c0-808a-8a2afef0f81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efe2762-1a8c-4741-985c-0db0ff7aade7",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d519eb6b-2b5e-4731-a130-1dd1c0304e08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60fd4ed3-5876-4152-8568-43d69859efba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b5ba48-9ec5-4cc2-9719-f27b25583342",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af3501bc-0888-4694-a967-8eb4ec6b9137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1bf4b21-3aa0-409b-a465-15d0f079fca6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c695e4e-34a1-43ae-8fab-183764c54583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e0b8fe-fa75-432c-89d0-e88206b20e43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87449207-ca98-4c53-a222-1fffd18e518c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95e471ae-3fbc-4950-9247-dac36664d7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7ec01a-758d-4d93-ac25-6d164108a693",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a3d18c-9887-46b3-9aac-04bcfd0b6bbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4bde16b-6fe7-43bc-8fb9-bd23f30fa6c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8a99e8-cd9d-40d0-9894-8db9f41f5441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1fabb58-ab66-45eb-a887-4d615986ffba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8f3152-9fa8-4d32-a2d3-81eb1458ac16",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02034b5-e37e-4ae1-8ced-e205f8c499fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd45d3a8-01c7-4957-b380-a3b5d73abfca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0945cc35-2dcc-4972-a41f-36533a0b07a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b46e0e1f-134d-49b8-b3ec-69157a98988e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1ab4d3-3645-4135-996b-7ace62679a2c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03af3762-857a-4f4d-b9df-54ba29e3c38c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84624e28-ad57-4b62-b25c-490b4bd26038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5afcab-8e72-4445-9e94-fb581ff3165f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e68cffc-4c5f-45d0-bd3a-4c129b763c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd4d81d-f1be-4710-9f60-2c677c5d2299",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bbdc745-6a05-4ee0-8980-cc1468c58a5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d676da62-757b-4c3c-a11b-b6226d2484da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "705c4ab5-a746-41f3-a3c7-5711af856bc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c071bae-752a-4989-a442-8e89f4fe04b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c771e7-e77b-4730-9c5e-262b849db34c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1210edbc-824f-440f-8e03-d4ea951a75c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f39423ca-e084-4a87-b32a-7e7102899bfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9384fcde-d042-4563-a3a4-bd67a181d409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "853c14f4-58aa-45c0-bb1c-f4d183644456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9dbed04-43d8-4d4d-a339-dd8750783935",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e821e8-7a49-4107-a7c2-5a3941198415",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07a883c2-24f9-4d5a-a6be-6e028614eaf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0f4335-3e0c-4bb0-b62e-b4db862667a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "926fe828-2437-4685-98f1-302f4ed31cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c087580-306e-42c8-ab53-837bc83c6554",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f439dfb6-cfc6-4bcd-98f8-41bdb67b6fe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abfa5215-c4a7-4eb4-b3b1-68e7c482f79c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bfede9f-88cd-4b8d-92ce-2c70a9d98b9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4484b59c-d073-439d-a799-2f8781203caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12976b6c-0258-4ad4-a955-3dcd99feb4be",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9740e285-f87b-40f8-8ed3-5c5275f49958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afaa0a14-995a-4f3b-add7-bd7fb4fdd9f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "260bdbfa-f5c4-4bcc-84c9-b1850a5b7298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48603fc8-900a-414e-959b-6427bcd8153a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc341bdc-1066-42eb-beba-35244b3b2ea4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90124040-c146-4e72-9b3c-34930d385bb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5863f4d-3505-4ea9-abec-2d1a3adbf660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf9a9a4-d97c-4e6d-bc2d-0518ab3d67d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9344b52-f82a-4a36-a793-1bf4037324d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3d10c9-6a37-477b-8001-4ecdb737e707",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b349a37c-add3-43f7-bfb5-06699b3dfb8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954c389f-03dd-4a1c-9eec-cc69df97df4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82e45f9-d554-4813-9ef3-c0bbaf4ab420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dd9778d-8f5e-45cb-bf19-a096c3b9c81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc780010-bf29-4884-b4f9-0d4ac1c98415",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa1fb30-96fb-4e78-91d7-58dc76309d4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ddc7a4f-9d75-4389-9552-69d8e9eb9a3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "936f1fd9-88d1-4cfd-9cab-11fa08bece5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70091a5e-4b4e-4d3c-8f5f-186e11125282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b663b19d-8d0c-41ca-8f42-886650527156",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a24c66-659a-4324-94ee-66fa01e7d8c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef168138-7e97-436e-b707-79e8362372d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11afa3ce-830d-4343-a5e8-0bfb11b4496b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3de17c7b-2c12-4529-86ac-6a1e3e6868e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06db3f9b-b9dc-40eb-8e05-64a1006a1f75",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d0cc93-d80c-431b-b963-6930b9cd5903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "630cde1a-bcae-4ea2-9979-534952c8a03b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1b9e5d-3128-4304-88e5-c6109aebadfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b31883-f7ff-45f6-ac80-f4809e64e301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa00ea0b-3cd6-41d7-aa68-bf07be970e18",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e578641-b338-4f57-8107-4ccc6fba489c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7633839-4783-4bf8-9a7c-54b46908dcab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c665cbfd-dc32-4764-b793-e3445500bc2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54d5e206-5f99-4e7b-9bc0-f7affdddb54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51bca03a-b36e-4c57-b7cf-414caca1e142",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b1c1f4-75af-446d-9fa8-451aeb751b41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffa45e98-f7e5-44ab-a536-528cde321f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe832249-fe58-4bac-82d4-36d969da8766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33b5f026-aba8-4f5a-b420-5734cec6b3d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c5911d-393a-4d99-8a69-131c15dccfce",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727275c4-edde-45da-b459-f1c344f0f7df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a302c246-bbda-482b-a348-d79a5a2f823d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a809c10c-4898-4c38-8806-1993d930b0e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d2c9b9b-8bb7-4860-9b3b-050b7c954a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35d55c9-4fd3-4ac9-8aba-1c69bfd2222a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2388b7df-5f92-4a59-bfc6-1ce577468e95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75fb5fe9-a7b9-4160-8c85-f664fede0a0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75cfdc9-1001-4710-9bb9-e57e12948ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2086d329-1fc6-4dcf-8d2c-9ec4b5724d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d7b113-9b00-4859-a98e-1ebfc4437435",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2256858d-47a3-43fb-ac6e-f23155a2af68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54df5dcd-4c91-4a08-875f-2bfcbf1422f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8deb615-c7db-4925-b292-ef6b00e13243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3fe2c2d-9529-4dcb-819d-0f72a4760741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b4b1c3-b9af-4997-8f8d-e3d1eec7cc2b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e866f32-2a90-49ae-a411-2a4662209e6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc7a4a05-0725-41c3-adb3-c511485bed5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "078dead2-2588-424e-8797-4ee0b268ca71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4999b69-6650-4cba-8779-ae54f6e26ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9320ca06-e672-4c6e-aa98-3da4d54a2a79",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92bed7d0-7a0b-4df8-9009-adc03962de27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d21e76-5816-475e-80c9-b461e48d0847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be3aaa9-9fcf-4bfd-b86d-f2b628ef3e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67de8ca6-6fee-41f9-89e7-838e24801fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600bd703-482f-4cce-b76e-aaa30d570152",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96184fb0-97fb-445d-a27a-c3a0690637ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89fefc7c-922a-4e54-96a2-37fcce6c015f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9aca9d-c3cd-4ec6-b1b6-c045f4a800c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8888c50-ca11-4bc9-abf1-ccbc14019dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5662f692-48e9-43b7-ac73-d671657f9347",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624fb917-145c-4483-866e-73400e1bc5cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c4c271c-5478-40a1-8c81-9cf2f4da6a47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad09130-a8f9-4fbe-b88e-0c0f2b3f0ad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "000243da-7724-4e94-a77f-8af005e89e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75808461-fe44-4b8f-b5d5-37826f9ca957",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f894f286-5013-4ad9-af58-5d2be40106f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c990c9a-6d26-4a1d-9132-5b127861abd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e0bc86-400a-4173-8819-3da873389a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb8b92a2-76d0-4b37-b8ec-1e1ee57c3517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152001a1-cf8b-469f-aa45-12b5e2f047f8",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f857d349-077d-4cd6-b28f-6ec1203d557d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb8c3a57-e440-476d-8784-82084aaa509e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca6d654-3e69-48ef-a230-14c0331e2fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea79d9fb-af8b-49c0-88d9-73327d929004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac97b849-59d6-4182-92c6-0dd7e746f28e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4c5726-5d67-46ba-b681-9020ad7e6c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eca25a6-3b44-4a72-a2a4-81b273741f69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66f2a05-d38a-4b52-9472-769ae380a7a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cceef5a1-e12d-4025-9f3e-bfc7b2951f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67ba7f3-2c94-46ea-80a1-f879bfcb0591",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274f0caa-081f-4ed0-86d4-125c31d159c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "245fc8c0-55ed-4aca-8104-9e6ce72ab17a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76a24e9-476a-42bf-948e-bdf2098c1900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8106d3f-a555-41e7-8c22-6b49db188097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16eb9b3-29b2-4dee-b8e0-fe3d57e067a7",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f345611-6824-405f-8683-9eec67d415c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8887775e-5ffc-403b-9a25-d4044bfff43e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d89b8f4-941e-4ab6-8f06-a78be596c6b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fbeb1db-ee65-4f8f-a7ec-c265f579cc7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67492f0a-78b4-42b4-b7c5-4e1dafb5cf8d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a428582-e7af-48fe-8440-b43e91bfb043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31bbb740-162e-444c-ae69-75bad68b8e37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf317e8c-450c-4b9a-92fc-2cff1c30d55c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "554a6d66-3103-43fa-a6a9-71e94c5579d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb04d38-5d9e-452b-899e-7471d69fcc28",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c1f04e-06e8-4738-8747-baefd76db24c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f80f0be-7983-4b25-b340-c69adcd68604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb28afc-12c8-4313-99f4-c735bbca4d03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e43a7fad-9dba-4acc-8ba2-5dfbc3faad2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47aaba3-9326-4c36-8569-78eabbdb13e8",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a165b29-d7ab-4cce-9db3-4ce588e511f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17dfdafd-04e2-4717-9be0-6882ce438a1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f7df79-73be-4c8a-8155-f722d21207b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54acb453-b685-473b-9089-7ddd216f8c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1e1ee6-7348-4042-b188-8f49105b4d48",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0bafc2-fa8f-47a2-89c6-6a5a882497ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "392763ac-d411-443a-a00f-b63297cf2b29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9036991e-7777-4698-94ed-4e0c01ec78ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d18ac7b-2e09-4b17-8c3d-4c9058b0c08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbadd5f-00ad-4277-a3fa-ec74a423f90c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c4cc4c-db69-419d-8838-a1f76d608385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc6b321d-bf6d-4b6f-8ddd-c795584b65c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "495a143a-3914-4326-bb20-afe1761b74cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30cbfc94-e8d6-4abf-a33c-dd1a7a630ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61498ed5-961f-46da-ac2c-d844ec4a0112",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb6e29e-c9e1-4a52-8eb5-9e90f2baf758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d79c901-8a2d-4acf-9c37-4f160b30271e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5006e9ad-da90-43a3-8411-fb5f8cb36b9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b9ec3e1-86ce-46aa-baf8-f1bfe1fa6351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf13ad98-e021-45ce-9927-d48f11f97208",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4199ff81-327f-44d9-8e83-6ac97537e4d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2df17b2c-5009-45a0-87ce-6fa281f07b30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3454b930-fe3f-498b-82d2-19852f689bc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b83538fc-fb7e-41cd-90b7-dd4bf32033aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c273858d-cb0a-4d2a-8df8-05869143ac10",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41f611a-a615-4150-998e-8ee5aba9fa6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "278f83b1-50be-4655-9b6e-f040a933717b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd37c9fd-1f30-49fe-8a9c-15c8363645d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c92427-1138-44df-b970-fd6e14c2be47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935839d3-c2f4-4ef9-9795-a25aac10b24c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53186653-2617-4186-a172-04083f7532d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90102311-6579-4f34-a27a-7c423e082c2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ec432b-3e8c-4bdb-8491-3a10b65b00ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f40db2d-2c4d-4a87-8599-29f6bff7c046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef107ec7-8e33-4ecf-b52a-183839af2843",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b7b52b-1d3e-46e0-899e-8f81a7f49aa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b4509c6-a5fd-4035-8648-efa34949fff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b54a40a-ec44-45cb-b392-598f3df73378",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12317e69-c14a-4f16-bf53-3b945875781b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67241ca5-67d9-4ebf-84b8-05606db0dbbb",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63d3ccf-fe20-4124-b4e9-3ac9b23aad72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e59b515c-4234-49c0-ad9e-af93eafdd712"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9f551c-5475-4532-adf8-8a9543648c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deaa35ef-c2fd-4a0f-bc54-ca594c2834d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c39336-8f9f-4b8a-a597-f908550621d1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f294b9e-f134-4734-b404-397a2c0e1749",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c874d4c-ea57-46ee-8529-08e9f8951cb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "106dc8cc-9292-480d-a074-a3281e017661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "051a8250-9faf-4457-83b2-ee9be124d07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e0c353-38c4-458e-b7be-38ce95d8e027",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ed30b9-23b3-4ce8-9343-a2977b5adf16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b5eb208-8972-4407-a566-1128d1919a26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f38bbe-661d-483e-9678-f3b29f171f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83673f82-4ed2-470b-9961-f92860894924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b96fde3f-ffbb-42d5-8532-76e2f4e312c4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc30604-bb02-4dbb-b084-d2587e1b78b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9f30d73-f409-4d7b-82c4-8dc4a9c29a2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a29cbb0-aeb1-4971-aa0c-21e5ecce62cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ffcaab-0b47-4957-9036-e1062133c9f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53501277-6ddf-471d-8d7e-6705a10cd6ab",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98eb2d90-2709-47a0-bf77-b4dfe98cfb32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be7f54d0-f68f-4455-b23c-88b325deb515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31fb3df1-c8c8-46d9-b6c7-12a4b97e3eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5a5cf61-b136-409d-a61a-cbac79c336c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4949aea7-1b28-4860-8567-98e7fd5ac056",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0125ee2c-98b2-4756-9e76-c0797406a373",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c64019b9-64e5-4f41-b32b-9f405fd61e2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace889fc-f8ef-4aba-a18b-3e30f330a087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a114a4-2a8d-4ebb-adca-f86e82397f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6a533dd-78bd-495b-ad88-65b3b2062770",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec2a6fe-7d0b-4e32-8038-06813940b8ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2be71e14-e5dd-486c-b7cc-e116dbb29b29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6dc30b-2954-41be-b1d7-30f9b87e297b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54606d64-b84c-4c8f-89dd-748b81b28f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0828fb-2372-4161-a56b-df373080cdac",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e624c1-93c3-4a7e-8ca4-85f5e1cc5e3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21999e0c-409c-4432-b92d-263517fa7f9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f99dce1-60db-49ef-9639-fb97ddecb8d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd23a21f-9a94-4ae0-a873-c821d406a606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65812c7e-d2d1-4c9a-8920-dcd998d62cfe",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d39a8762-4171-4acc-9097-2e3d6cfe1c40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "116f3fed-6112-4beb-9ad9-89d533a67ff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f0a8e2-9d4f-48b9-921a-3d3bc2c9c8d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6706da9d-aebd-48cd-aa9a-63af543c636f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbcf0f3-df5d-4461-a0ab-e5f268ebe607",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c6e1fd-ec03-48df-bdbf-db52de1e3ae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83f2cba3-64df-475b-93a6-68eba2787d14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c15f49e-ccb8-481d-80af-2700692c80b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf7619c9-0ea2-4d08-9fa4-343cfa9ba712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83070aa9-447f-47a9-9917-490b1fafe4a2",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a5e856-1449-4331-a47c-587315ca0bf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aae756ca-1798-46cd-8bac-b57ced775e7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89bddea3-947a-4594-ba61-a4c36d3a98dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0250cbf-9a61-49e3-8d61-02058b97daa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d67060-cbf4-4907-81ce-fdf6e7c846af",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51f124c-1bf1-4fcd-a871-cb44c6ef7b47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3bc4713-6ede-424b-af27-9ad98364e0eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "158264c5-3ce6-4508-9dc0-913ec08a8484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00949939-02e2-4a8a-a21e-d3688273d0f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c454f48a-8c4b-48c1-9bf5-1e32dcd5c157",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9553f67-fd2a-4869-b46a-c4afb9a66e4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1639bd6-46a3-4379-a23f-bede466c769a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "962622de-3845-4c61-9c5f-24324c5d09e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f083f8c2-7281-43f4-9241-28dc5366c354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e68bfe4-4490-4913-8570-1251435d0920",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db88564b-28c9-4550-afcb-12e19af7bbe3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82fde788-ff57-45ae-8d0c-ee80aaf1149a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e987b9-3d2b-4440-99e7-e1b374e09f76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d302d99-8f8a-4f5a-bef3-8b5a5c7d48f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c99762-cf3a-42a5-992f-62bc0aa1b96e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c9f4bd-ad74-42a6-b9d1-65f563cc1e9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9dc2fab-f2e6-4eb2-82ad-2d55b7ca1c85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40dc7b5-f14d-4868-be20-c7fe55236ed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a791836-af9b-4948-8358-f37a4fd8e429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2625b8-9acc-4aef-878b-c64b36a055a1",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65533ab-b21d-4d7f-8f89-65aa100bfa17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1108970a-f04e-40f2-878d-35b1df4a6617"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f2df519-1d4b-4fe3-a30b-3d829d2f8ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f414cff-8aaa-435b-ae27-5c86517fa6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be18804b-522d-4b9e-883a-bd66dfd970c1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13877091-68c0-425e-9c60-db7375f3d7cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04eba51f-7a04-46c2-b472-c422ecd3e85a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3daa1bc1-23a5-4585-a16c-dddfccd5f9b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31093d73-a163-42df-a5c3-6158b369718e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b66a0b-5c09-48f4-a655-2ce0adc2fade",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42003acd-951c-4e44-b35e-1bb077f6055e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a501c89-040c-4ab2-b89f-83ae53b42286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4773fd5-cb39-46fc-90ec-ca8464115d1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b208c0f6-b1a0-48c1-b1c6-927435e8858b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04059be5-fdeb-486c-bd1e-50cbd5cf90c2",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aaf48b4-1d78-42b9-acce-af6f0d46d649",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d646cd6f-b5b4-4b19-85dd-f34771890807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a11ceb-a56d-4a0b-b9c3-a6cd15da6844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "113d2bf5-b890-4838-85de-e0a1d007ed03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f4feb7-bd79-4c0d-9e66-05ead2ee569a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8425363b-e44a-4a66-858c-0e89bb9a7e81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83a4ad64-1949-4f24-af89-4d403dc8c8cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf84db2-24e0-4018-b8ac-66e3ddcd4970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c704f97d-8eb3-49d1-abe4-9a5ee168866d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b853dc7c-04f1-4a9e-af10-f098f3ae4407",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ce2273-6c04-41cd-8f55-a68e39c71fb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebc559fb-85d1-474d-bf0a-a576db544bd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71c1547-c194-4dcd-8d4c-adfb2eca5d83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ebf59fa-2972-4f92-97f1-8ab89ecbb9f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99610a8-5726-4c0f-99ca-85296858774e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f412e11-93e3-44f0-b266-747dea038398",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1e3925b-6ca1-4d73-9d1f-ace3adc5c6af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86cbf96a-95da-485f-b13a-12cc0160812c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78552595-3a4c-44c0-b3e9-60c52b033597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797b1531-cacc-4dc1-a672-65be824206a7",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14cce0d6-0b9f-4975-9f79-520c620765d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "777df50d-2496-42b3-82c8-5bf2bb0eebb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "139702f3-dd70-4e2a-a468-6bfffa2dfe4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac0b84a5-82b7-4d7e-a851-c4e6c502e2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "492e5ddb-893f-4573-8632-5c15e399710e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82969eb-aaca-487b-a22b-d5a845e78c39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbcb6222-3f64-4178-8aa9-751a2ac0456e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95e406d-f725-412c-9332-2946eb951fd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07564869-1227-47c0-a36d-b77d02892420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc8178b-ce71-44f7-ba27-88633ed9a969",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b2b9ad-c77e-42a6-8452-1937a43ef625",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8aa6deea-f0ae-483f-9f27-e0e7855a3b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35669c6-85d9-450f-a169-b20ce38971ea",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2688ed78-caaa-4d6d-9dfb-27d242e3b6d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "249bba0c-c6ce-40b5-be5d-a4f5f7ecd5ed",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6df1d2e-0667-4d8d-b832-e07fdefd6cc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ec6c00d-ff0e-4e29-a415-eff485635604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99dfdd3-8428-463e-a659-17bbfc0f8439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d0e6b75-c1c1-4fb9-bcd1-dae4ea86982d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580291d8-6821-4574-8869-73e1e2047b99",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4755dc-8718-4225-934c-ff30d1ce3d11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd03a211-bdde-4016-9e1b-50ffbf110325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a935a8-dbe5-4f97-8b66-8459139e1866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b00b3eb9-7a4b-4aef-9eaa-c9d2ea3f7da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65da5502-b395-4a64-8c24-6c12ee4a9ac8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65291991-75eb-4f9f-ab5a-daad4ed19451",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1e82d02-c5da-47fe-9cf8-6b2f9c2f3313"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0f3ae4-42be-4ca1-9871-61a21e477a08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09ac85d7-3735-435f-b628-198c45dcd3fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac60d6be-ccaf-4a0a-a66b-a5bd44631894",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c131c9bb-6fc4-4ed5-a62f-47f911c4ac76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f377c3bf-6b89-4b42-be0f-10b2b78a6675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd4ee15-c7db-4c8f-8c3b-7f9b14f4a727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73dc2650-5243-4ec9-b745-f12ffe05dc15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4847cbe-bdc3-47d6-b879-7c06f35e4110",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600ed9f1-4178-48f4-8489-83c40925c392",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8e84ba7-5383-4821-9d0c-00d8cda893f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c8293c-9285-4dc2-b97d-53d05b8c3b1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b2231b9-4c9c-4049-9391-dda681dee1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639ee538-775d-40d5-aaf7-7a388e61b05c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2341f15a-c14c-4f5d-bb92-05e41044b95f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "133d9417-e48f-4659-867c-90264648be4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0da805d-d3ef-4710-9d40-8c2ed1fb4ad5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4394bf8-eaae-4485-86ae-a0f3903b1bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7e7dd4-3aa6-4227-8fd1-04bb97a360a0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade2e516-2aa9-496c-9b37-554207fa273b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf18be70-cdb9-4336-8402-2b4ad4ddead4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f769872-565b-4e52-97dd-6285116b1ca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e1563db-d5b1-4454-be28-c7c0e20252ce"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74fd36c3-7fa5-48ff-a31c-c7e118c2dab2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da0a14f9-cb79-4aa4-acbd-8ffd5c5b8ca2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1965ec8a-5657-423e-8b7b-a3215e233d1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8063caaa-9432-42f8-b13b-0f459020fe05"
                    }
                  }
                ]
              },
              {
                "id": "05531f0a-0d8c-46ee-98fc-656616757bbc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c2dc2baa-2fe1-4e8a-9ff8-00b6a9a4241b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9cf6e9-e9dc-4002-83fd-6d737ddc41bc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "447d9074-e57a-4aee-bfbd-8bacd7dcb3aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7228b2-6038-4671-96c0-983afed855eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67f2024e-9658-484d-af00-cb7ed4536425"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cba8c0d-1835-440f-835b-29f049a3ff6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90d607fa-09f7-406a-8a73-b4b2694af006"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2199cec-41f5-49f2-8ad6-d353366dd7a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e10aaf4-c7d1-493c-8d47-041d619ef090"
                    }
                  }
                ]
              },
              {
                "id": "9dc6b5b9-d627-48d5-9666-dd9fd50eb59b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3a1a19c6-1258-437f-9957-552626bda5e8",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fde15bf-9245-443c-927d-6fa9c910f6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "344ac19b-c0b9-4817-a8d9-1930bf49a067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95faf1a4-6ef1-4181-b4fe-0dd43ffb6c4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a36429b-5761-4446-9478-9e00dc87f434"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "401d5b2c-7f73-4934-afc5-1733fdc12e78",
            "name": "Positive Testing",
            "item": [
              {
                "id": "93dc86bc-48aa-416d-8f86-05327e97cb6b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f81daa4-8eff-4c3b-ad1a-210843478d6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "28da7126-4b00-4004-b21e-8c37ed1cc373"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1d700d6-4fe2-4ae8-a575-ab787810f0d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2c75ff2-5053-4b35-83b8-f6dd36ef07cd"
                    }
                  }
                ]
              },
              {
                "id": "277d2d84-0e94-40af-b67c-6ddc42cda95d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22446a3e-f4f0-4dd6-a6a9-c295bf8b0c04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1570207b-274f-46f9-af9e-2d22fcaf57f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cab0c2ae-82f6-4cb0-94d7-6e5a8a9eddad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8ba2442-4272-49ac-9810-f2a8a795a859"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6b8915d9-50cd-4e3c-a062-3d0b6da459a5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b0fa091b-1cf4-4828-8ef6-df3510f40aaa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69353dc5-6279-4bbb-80ab-e5a2dce9e0b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "076ae961-b699-4046-bf69-8a16699da49c"
            }
          }
        ]
      },
      {
        "id": "0360aeaf-254f-408f-84ae-7abd7e123555",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a75b1926-82ec-4d95-bd82-c60506854104",
            "name": "Negative Testing",
            "item": [
              {
                "id": "66616e23-4604-4ba3-ae04-b13d6b5155a4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "924c53a4-8a26-413c-af5d-4c5fa6b7b23c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a376aca-acbd-47d1-b295-ff2520466766",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "22b49fab-4b4b-4658-9d7d-3b40483d946e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6832cf-b71c-4fae-9f77-6eca0a1df2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1447956-6f13-4eee-a0d8-c9a85f905101"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55090754-ea29-456c-b44a-d2a84e4c597a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7edde509-7567-4254-8c77-eb2ab2632aa9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91ab5933-0c7d-4c8c-8508-842053bedbe1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f7ca6b2-77d7-4a0b-9ade-72c443d5f1d3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86c16bc9-1927-448f-9b31-de19298ebac4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cdb50d2f-b7f7-421c-be37-deafe7ef36e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e7bafa1-d435-46ae-9722-c3dd178238fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8195f177-e620-44eb-81e5-171b8fa6d406"
            }
          }
        ]
      },
      {
        "id": "3356caa0-0b3c-412a-86ac-6663879bb41a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f9d18acf-7cee-48bf-9713-59c64815b690",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0fbd492a-1c5b-4427-9102-2d512a9c6591",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d8102080-3466-4697-a209-b628ea5f63c6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cbcf96-103d-4c1a-8723-6c8b0fe51c86",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7934c15c-e427-4675-afc3-18719f3b086b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53c324d-991b-4b2d-a41e-4a1d20916917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee597a9d-3600-447b-a155-33745ce4c1f8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0834bf4d-3189-4169-a763-6778a93a6a15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8027b87-9fdd-456b-9201-1bbc9671ddf9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "47337f4b-d91e-4f53-a7cf-5d0bf8a00bb5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5cdaeb65-bef1-40e5-a7d1-97192748cd4d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "769b73a5-15cf-440b-a37d-d2da83327ce2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d9642720-74a4-4256-a2bd-2ae736befd1c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8239ded-fa14-458e-98aa-18e5a5c290d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76d0bc9e-2e5a-4418-b4d6-6803e3f78a61"
            }
          }
        ]
      },
      {
        "id": "89df8ffa-46ad-4fad-9109-327928f6d019",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "45efb03a-dbf1-43e6-b960-4a166c4d0b27",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3316cbfa-55a7-4758-a008-f779cb709b3f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "421c8808-0533-4d0e-a2c0-8879566ae45a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e94211-baaf-4e4d-9fb1-1face441ed98",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae8a9983-acd9-4b58-b912-1be1d6b843bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39758cc-e40a-4f64-b0d5-c470fb6492bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11418cc3-dba0-4f9a-b371-9858dccc1603"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "199bedd6-ae5f-44e5-ae18-7ace99bbd27f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e761ca17-96d0-458a-bde0-7cc409732dcc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "000ab2b7-c1ee-4a7a-84a5-c8276ace5697",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e01edc0-d14c-46ad-99b4-88388fabf854"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "026ab7c2-500f-4c13-aa2d-b1d1496b452f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "50c80c8a-0ff6-4521-af41-94d57e670df6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e2e9723-6385-461a-a46e-b7bfa012bf49",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9428aecd-4212-4c4c-8b30-9c8d2e66e9b6"
            }
          }
        ]
      },
      {
        "id": "294252db-d654-493b-bb4c-c257933b6734",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf76670e-5557-4846-bf07-e93fc3662bf9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70b379b6-1c1c-464a-af21-9e70161bef47",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "bc20ceeb-87e4-474f-85ae-0a74e29b4829",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a10e68e7-fae3-49bc-ad8b-07a44150188e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4735c720-2404-40b3-9860-0372fa3c9ad9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 67.62807017543858,
      "responseMin": 7,
      "responseMax": 629,
      "responseSd": 78.15774816376278,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1704674236808,
      "completed": 1704674265592
    },
    "executions": [
      {
        "id": "84870666-585d-4307-a51f-43b48594c1ad",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "82f4b9ce-3af7-4fe8-b262-43b8371e1f76",
          "httpRequestId": "c210638a-3fab-4657-a7eb-bb267abfaef4"
        },
        "item": {
          "id": "84870666-585d-4307-a51f-43b48594c1ad",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "41b9a7dd-6c2f-4d6f-8c3a-f872367f13cc",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "5d9d1a39-cf4c-4957-a963-a72100998501",
        "cursor": {
          "ref": "21b207f6-1bd6-41d2-ba1d-c849b29176c3",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "38728226-d109-4220-b512-82eb344aa080"
        },
        "item": {
          "id": "5d9d1a39-cf4c-4957-a963-a72100998501",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8a1cbdfa-f8d1-4600-830e-e346625ae725",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "db2c4bb7-1453-4b43-8e75-19b09060faea",
        "cursor": {
          "ref": "b5327d7a-a745-40a6-9de7-df5918d0204d",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d8027653-505e-4c63-9f5c-df088dbe8cee"
        },
        "item": {
          "id": "db2c4bb7-1453-4b43-8e75-19b09060faea",
          "name": "did_json"
        },
        "response": {
          "id": "f11dd915-d150-440c-b8c3-ca3e3c0bf9ee",
          "status": "OK",
          "code": 200,
          "responseTime": 355,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d80a253-e98c-4f32-9030-64af92ad8240",
        "cursor": {
          "ref": "cc404f35-d345-4f49-a0a4-2d984cf80379",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6dc17b35-500d-4c4a-863e-12e375eccd65"
        },
        "item": {
          "id": "0d80a253-e98c-4f32-9030-64af92ad8240",
          "name": "did:invalid"
        },
        "response": {
          "id": "4851e3a5-6a97-4963-8439-298b0347be95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d80a253-e98c-4f32-9030-64af92ad8240",
        "cursor": {
          "ref": "cc404f35-d345-4f49-a0a4-2d984cf80379",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6dc17b35-500d-4c4a-863e-12e375eccd65"
        },
        "item": {
          "id": "0d80a253-e98c-4f32-9030-64af92ad8240",
          "name": "did:invalid"
        },
        "response": {
          "id": "4851e3a5-6a97-4963-8439-298b0347be95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2400ff9f-7d91-4378-bcce-87b396ea538a",
        "cursor": {
          "ref": "4b630993-bf50-4d4e-b112-7760e5806e45",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2c4c912a-2a8f-4ebe-a934-7b0c6e3e37d0"
        },
        "item": {
          "id": "2400ff9f-7d91-4378-bcce-87b396ea538a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6a0f77be-a7ad-4b02-9efe-0647e99f110e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 105,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc706ce8-d0f0-4614-afdf-7bf59e3e53c8",
        "cursor": {
          "ref": "3d7ef9e6-c98e-45fa-9a87-db2037fe0f5d",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "eb475940-2be9-454b-9048-e0f213c2b4d1"
        },
        "item": {
          "id": "bc706ce8-d0f0-4614-afdf-7bf59e3e53c8",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "de34cbce-a702-4a4a-a934-274435b38ce4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6d6075-75e1-40a7-b8db-73bff75e00ec",
        "cursor": {
          "ref": "bb4cac56-a7da-4957-a529-5278aa2e1f51",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "15f7e7a1-9a2c-40da-affb-408b1448959e"
        },
        "item": {
          "id": "7d6d6075-75e1-40a7-b8db-73bff75e00ec",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7c3432e4-bcc2-48ab-8da3-40164df3b162",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c083b003-f484-4b8b-8c36-ebeb9714ed76",
        "cursor": {
          "ref": "b6591d1f-3adf-4936-926a-f7f00407c4f6",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3eed0ff8-5200-4c1a-bf2b-9024b1a396bd"
        },
        "item": {
          "id": "c083b003-f484-4b8b-8c36-ebeb9714ed76",
          "name": "identifiers"
        },
        "response": {
          "id": "908eaf90-7416-43e8-a170-8805a563495f",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "996bce0b-7d2c-497f-8988-468a7724e4fa",
        "cursor": {
          "ref": "4ed81eef-61ca-46d1-8ba6-404be845d4ed",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "569cf3af-5070-4d95-b184-d6b3ef33cfc4"
        },
        "item": {
          "id": "996bce0b-7d2c-497f-8988-468a7724e4fa",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0a29bed7-b35f-443f-b2ac-bad90418651e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d267a0d1-6680-4364-a6f4-4aabd3a4327a",
        "cursor": {
          "ref": "e096454a-2ee0-4f17-b377-3ff3d4fe2c12",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bbf68435-4b67-4b24-b415-a996035c62de"
        },
        "item": {
          "id": "d267a0d1-6680-4364-a6f4-4aabd3a4327a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1d46feca-462d-4f17-a4cd-b68b6b11612c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f327be94-e74f-4015-86f9-2d28542b9c84",
        "cursor": {
          "ref": "e24f35c6-29a4-4cca-bc21-d0e14bf00779",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "87d5297c-e760-4dc9-90a3-81053aac62e1"
        },
        "item": {
          "id": "f327be94-e74f-4015-86f9-2d28542b9c84",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3831a4ae-65db-44c8-ae8c-9aa21bed2f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0322b235-9edd-4134-a225-3b42914f54a5",
        "cursor": {
          "ref": "01923a28-917d-4ca1-98f2-0f3e23e866b4",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8c7a4fea-33d2-4ea7-b3a8-a5b07a562c68"
        },
        "item": {
          "id": "0322b235-9edd-4134-a225-3b42914f54a5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b17f42be-34a1-4cc8-83e3-1b91be322dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2fe2e21-4b60-4565-93b9-5bc2d2e1f4e7",
        "cursor": {
          "ref": "62a46aa8-fd88-4138-aac1-5c2d79d910b0",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "02094d28-76d0-4b5a-a887-2a41cf74a0c2"
        },
        "item": {
          "id": "a2fe2e21-4b60-4565-93b9-5bc2d2e1f4e7",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "08a151b0-11ee-48de-901e-f608ff9ba95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "419e555c-bfb1-4ec5-abd5-f46aea2f1ddb",
        "cursor": {
          "ref": "0e8dde55-1fee-4184-9d1c-8c9ba5454395",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "804f7ec3-be39-496f-94d4-aea8757df915"
        },
        "item": {
          "id": "419e555c-bfb1-4ec5-abd5-f46aea2f1ddb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ed963c65-b9dc-4790-979f-9fc1e06a4f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518ae142-f964-4262-b1fe-6292ba89f659",
        "cursor": {
          "ref": "a8c9d8c3-eb02-46f3-ae22-c180129f61a7",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5f2ef895-fff8-4472-a41b-6085d849863d"
        },
        "item": {
          "id": "518ae142-f964-4262-b1fe-6292ba89f659",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ae854951-663b-4a4a-8abf-c40cc94cff87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2e3ad6-e87c-4af1-87ff-4f376ceffb0a",
        "cursor": {
          "ref": "ca7229cc-d5c9-4afd-b986-bceb353dae1a",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b9c4348e-fbce-4302-9a58-4147d50c3bd3"
        },
        "item": {
          "id": "2f2e3ad6-e87c-4af1-87ff-4f376ceffb0a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "42dcd949-c740-4569-9aa9-dbec967bd90a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c3936fa-2061-439a-aa46-b4e2b6a5aa1b",
        "cursor": {
          "ref": "a81035ac-1a75-47e6-9a96-42e811ae2e74",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e4f3aec0-fa79-45ed-b080-3091edf0fd49"
        },
        "item": {
          "id": "0c3936fa-2061-439a-aa46-b4e2b6a5aa1b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "72cde5a2-2d06-49ab-b513-2b840f2bd8cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8219eb9-7255-4889-9367-bb689d92e6f8",
        "cursor": {
          "ref": "6a8e1cba-f946-4721-88ce-6d6db6acb671",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6bdf1eb0-d150-447b-959e-4a1aa1c69cef"
        },
        "item": {
          "id": "b8219eb9-7255-4889-9367-bb689d92e6f8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9e453742-e82f-4180-8f79-41163d5c729f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f210f29c-5e33-4da2-8d24-705e1a0de664",
        "cursor": {
          "ref": "e25494e6-ec1f-44d9-b28b-6b096668999d",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "32801b40-aa2b-43ad-af58-d9e86bde3b56"
        },
        "item": {
          "id": "f210f29c-5e33-4da2-8d24-705e1a0de664",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0cb9537b-dff3-4964-b545-7ef4397bf6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f825584-790c-4fba-ad12-a4f51743b0a0",
        "cursor": {
          "ref": "b1992d30-da3e-46d0-b26a-8494323d1463",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ad5db7f4-db8f-450b-bed1-8707a20cf5f3"
        },
        "item": {
          "id": "7f825584-790c-4fba-ad12-a4f51743b0a0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e8f6939c-fe1c-4a3a-9032-1fe2f447791e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb032b4-29dc-4560-b941-3277cac9bab0",
        "cursor": {
          "ref": "3b859312-27ba-41cd-8b24-9f3b2975e881",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9e364428-7023-44be-8b92-7d140712f4cc"
        },
        "item": {
          "id": "3bb032b4-29dc-4560-b941-3277cac9bab0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6f41adb8-6087-43ea-aafb-f8eecb233b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "296c2af7-b6c4-4274-a59f-17f8398c7d69",
        "cursor": {
          "ref": "6450c5a7-1381-481c-a617-d86bb33abad4",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "66728fdb-1408-480a-a4f8-b0cfd5435cca"
        },
        "item": {
          "id": "296c2af7-b6c4-4274-a59f-17f8398c7d69",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f1c66f13-49c7-4607-8627-ccea3335ce91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fcdfac0-3724-4e87-b953-3369611b6320",
        "cursor": {
          "ref": "a00652f4-fb11-4781-9e4e-53dc328bc59e",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0338a9ba-d1ba-4058-aafd-db60cdde41cf"
        },
        "item": {
          "id": "4fcdfac0-3724-4e87-b953-3369611b6320",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e9c90c18-e9a9-4707-9631-f00674ae08a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144b9173-eac0-40c3-8497-f01b3664742b",
        "cursor": {
          "ref": "42e6ce3d-d30b-42ab-87c1-1477f28bfb0f",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "98ef3281-8f12-426d-9eee-af689bedb778"
        },
        "item": {
          "id": "144b9173-eac0-40c3-8497-f01b3664742b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "476c1f21-0a38-432d-99bd-26e3f64498a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de301474-2c43-4e81-9710-d5d0e4e06288",
        "cursor": {
          "ref": "adc54ca3-dd9a-4426-9466-69b04ce30c48",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "02789bfd-3aca-47ee-8c7f-2c74f9ec408c"
        },
        "item": {
          "id": "de301474-2c43-4e81-9710-d5d0e4e06288",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e26e2214-cbc7-4379-b862-381149e0c164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c71e451-9a1b-4891-a6c6-18db9d948203",
        "cursor": {
          "ref": "757d23d8-c9cd-4d6d-9fbb-f227bc9d765b",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3bc1e0fb-43b8-4b99-93fd-32fa29d1c808"
        },
        "item": {
          "id": "4c71e451-9a1b-4891-a6c6-18db9d948203",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "67812e9d-f838-4193-b298-289d1a3d0098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39455b3f-0bb2-4df5-85c1-e6840886c2f5",
        "cursor": {
          "ref": "e6cea53d-40f6-4d0a-b331-2a95294e7c7c",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "25f991f5-113d-494c-9a97-5b3f5a713a92"
        },
        "item": {
          "id": "39455b3f-0bb2-4df5-85c1-e6840886c2f5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ff139fc7-b9e6-4fcb-a92a-dff01cc3828b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc2f489-84c8-42be-b42e-7501523635bd",
        "cursor": {
          "ref": "fbf7e1b9-bd4d-4471-9f0d-df095f54a650",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3cd2faa7-e297-4484-8cef-5a8988d5c51c"
        },
        "item": {
          "id": "fdc2f489-84c8-42be-b42e-7501523635bd",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7e306993-3c11-4115-bcbf-ec4a76ad1857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8db510-f0a3-47b8-b2e2-09552f754aeb",
        "cursor": {
          "ref": "a1c4e3c2-f70c-470d-a0a8-92aed92bd326",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f0be544b-b12a-42a7-90cf-437dc68abf24"
        },
        "item": {
          "id": "7b8db510-f0a3-47b8-b2e2-09552f754aeb",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ff4c0850-f628-443b-add7-5a4891888654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "052e57bd-0f0f-41d2-9026-9e30ec0f38aa",
        "cursor": {
          "ref": "33f47bec-60dc-4efc-8311-6e072ebb77f6",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5e9681e8-e308-42d2-bf34-1655c988366d"
        },
        "item": {
          "id": "052e57bd-0f0f-41d2-9026-9e30ec0f38aa",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9e749757-cbe4-4d83-a047-0e91e9e4967b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a47d11-a9c2-4721-9cb2-48661c1d524f",
        "cursor": {
          "ref": "207e89cf-160b-4ef3-bb2b-35808a31575c",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "25ca6717-581f-4075-881c-61f95b600862"
        },
        "item": {
          "id": "b7a47d11-a9c2-4721-9cb2-48661c1d524f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "35e00bd0-372f-437c-8b19-27d9bd7c823d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c439eb9c-f1ae-4049-ae80-7dd75a88499a",
        "cursor": {
          "ref": "47647d6d-3414-4183-9f27-47734134cadb",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "93231d35-c67e-4b50-b758-f47ceca3d186"
        },
        "item": {
          "id": "c439eb9c-f1ae-4049-ae80-7dd75a88499a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b3b8a851-e942-4998-8868-112b25ec8458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98fe5a8-cd44-466c-8b16-ee040411f906",
        "cursor": {
          "ref": "955a9796-ce62-4b95-8c49-96842e28148f",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "018c9701-78a2-4a5a-bcc2-ba454d389f91"
        },
        "item": {
          "id": "b98fe5a8-cd44-466c-8b16-ee040411f906",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ee196b9c-4af3-4099-adba-a78a12df92a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fc5715-8060-409e-8cf8-dcf1b2d17a0e",
        "cursor": {
          "ref": "6ed96288-52d4-4712-9792-5f82cdb995ca",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b5974d3d-f81a-434e-943e-a978341ac66a"
        },
        "item": {
          "id": "14fc5715-8060-409e-8cf8-dcf1b2d17a0e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6762f766-f315-433c-9704-90f7875aed4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad0fa25c-abd0-4dac-a596-5e2b9802fdda",
        "cursor": {
          "ref": "a7a110da-e191-41e8-956f-43ff3efe14ba",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9fcc9113-64c7-44eb-bbc1-d1ad025f9f37"
        },
        "item": {
          "id": "ad0fa25c-abd0-4dac-a596-5e2b9802fdda",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e654b072-93d6-4dec-bb1a-33698a6dfc08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14db947-6c61-4544-814b-88f6f0c2c888",
        "cursor": {
          "ref": "5bdadb58-ce42-4286-a5f3-15522553ad0e",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "169abce5-4c7b-4212-b74f-bfa9d68db156"
        },
        "item": {
          "id": "a14db947-6c61-4544-814b-88f6f0c2c888",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f4db87f5-cd76-43af-af3b-83ac5274a24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06adf3b-59bf-43d6-9c1d-75942b89d13c",
        "cursor": {
          "ref": "14d30e37-f6b5-42b3-95a2-5a5619708528",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0f992f1c-46dc-4f4a-87e5-bb635a3062f0"
        },
        "item": {
          "id": "b06adf3b-59bf-43d6-9c1d-75942b89d13c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "39a4dda8-8572-40d5-8cb4-141faf54c5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd58d3d2-2c92-470c-9814-1b63ff5c411f",
        "cursor": {
          "ref": "968ea1af-c790-41bd-bfe7-1d9909836bcd",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "25bae910-696c-4ce5-9fd6-5d8a8c1fad40"
        },
        "item": {
          "id": "dd58d3d2-2c92-470c-9814-1b63ff5c411f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "99ce8018-5cee-4817-8bc8-91f551cb39f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "533bbe5a-4c3d-4ba5-8013-4299c89b5e01",
        "cursor": {
          "ref": "c3a1cd50-9d90-45a9-8d12-e94ea7bb7250",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f437df77-e54c-48bb-adb5-d90a28fe796e"
        },
        "item": {
          "id": "533bbe5a-4c3d-4ba5-8013-4299c89b5e01",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6773b45d-2814-4ee5-ba94-0428311d7c32",
          "status": "Created",
          "code": 201,
          "responseTime": 629,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e1b0ff33-61f9-4de3-9560-5c8ae689fb24",
        "cursor": {
          "ref": "41505cbf-dc1f-41c7-ac21-a5907501d365",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "03ee3529-5e2f-450b-8476-5baebe409876"
        },
        "item": {
          "id": "e1b0ff33-61f9-4de3-9560-5c8ae689fb24",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7a85b8ae-36d0-4a69-808b-a1e12ca55caf",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "f587164b-d9cb-4da9-8407-952c8378beb8",
        "cursor": {
          "ref": "096315d1-9f17-4520-950a-dadf68dd5d7d",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "72934117-b029-4855-bb87-57e9fa967b3f"
        },
        "item": {
          "id": "f587164b-d9cb-4da9-8407-952c8378beb8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d17418aa-d9e3-413d-b409-e58571f9a06c",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "f2ae836c-19ab-4362-8395-cbc23ce57a47",
        "cursor": {
          "ref": "3c65e155-588f-4098-821e-3c75ea9e78d2",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "535e8d54-365e-4452-b164-43bf63fcfb11"
        },
        "item": {
          "id": "f2ae836c-19ab-4362-8395-cbc23ce57a47",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "16d35279-bc94-44c8-aec5-93d8a2b0ec9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93e975e-626e-486a-8ae9-fefd47682190",
        "cursor": {
          "ref": "8f4daad0-56da-402e-9dd8-fe37db793a99",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "bc679d68-a49d-43f0-99ad-f9028ce95f71"
        },
        "item": {
          "id": "a93e975e-626e-486a-8ae9-fefd47682190",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "253949cc-e26d-492a-9b01-e7131c22f0dd",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c518753c-07f8-41ff-8720-b83576b9a7d4",
        "cursor": {
          "ref": "d29567a8-9a77-480e-96fa-74a6f89a715b",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e5571ba5-83a6-473c-a1c2-1e050dd77a31"
        },
        "item": {
          "id": "c518753c-07f8-41ff-8720-b83576b9a7d4",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2d5e9d80-353e-479d-a7f9-e977a9317143",
          "status": "Created",
          "code": 201,
          "responseTime": 359,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3a9ed251-5cb7-4c1e-94a2-be37260c1f74",
        "cursor": {
          "ref": "9cb75496-b055-4e43-8e69-a6c5d976a11d",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "96f40fda-921d-42a4-b0c5-d5c95faf8bc4"
        },
        "item": {
          "id": "3a9ed251-5cb7-4c1e-94a2-be37260c1f74",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7e4d5e71-a732-4bbf-b1e0-2ff5e80ce7e7",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "651c5283-161f-4336-9c03-90f53abe6142",
        "cursor": {
          "ref": "f653365f-4ee3-453a-910c-0208be041a7f",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b1af6058-c4fc-4189-9651-f641245ffdc8"
        },
        "item": {
          "id": "651c5283-161f-4336-9c03-90f53abe6142",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "58b0df5d-07d3-418b-8f4c-848b7c4d1c15",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5652eaac-af14-4ae3-b45b-5e4984ccfa42",
        "cursor": {
          "ref": "c6d61f46-99af-43fd-ac68-cb282a626471",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "059351ab-55ce-48b0-b9b3-be39391d018d"
        },
        "item": {
          "id": "5652eaac-af14-4ae3-b45b-5e4984ccfa42",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c3450fda-8425-490c-91be-06f230c3b7bd",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "00eaccda-4e4c-4477-b226-794c3160aaa3",
        "cursor": {
          "ref": "84abc543-5044-4612-acf0-c8b924e5834a",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3d826ef6-67ae-46f3-9bad-a691969de90e"
        },
        "item": {
          "id": "00eaccda-4e4c-4477-b226-794c3160aaa3",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bae72a3b-4498-4586-a07f-785f8cdbb23d",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "2ef556b9-76ef-47ab-a6c4-557c9a3a847f",
        "cursor": {
          "ref": "ffded8c7-74e3-409d-bd7b-ba0eb00157ae",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "54dcceaf-4b2f-463b-961e-b21851750d4d"
        },
        "item": {
          "id": "2ef556b9-76ef-47ab-a6c4-557c9a3a847f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "01c387d9-f542-4957-8426-cfa110d7a8e8",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ef40c202-dcaa-42e1-9e95-60ffcbbdcc94",
        "cursor": {
          "ref": "d122f5de-9446-4822-bbb4-cda564e2afbc",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "eba943a3-9cc2-43cb-b2ca-715f34160872"
        },
        "item": {
          "id": "ef40c202-dcaa-42e1-9e95-60ffcbbdcc94",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7ec1c1a1-831d-47de-8392-4f8f19fd9a7c",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "84fcba03-0c28-4d6c-8bfa-fcc79c65eb85",
        "cursor": {
          "ref": "23260c6e-f573-4ada-8218-14f561965507",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d670d0e5-71a4-4006-bbb5-760b9926a491"
        },
        "item": {
          "id": "84fcba03-0c28-4d6c-8bfa-fcc79c65eb85",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3c41ef4e-6893-4c64-8c7c-4487a3707d45",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "539f51a4-4013-4cf9-99fd-7ac0a1affd8c",
        "cursor": {
          "ref": "53430905-9586-4a43-bf43-6e0c199e6f83",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "96714d05-3b37-4c69-bf75-4a9603c12a82"
        },
        "item": {
          "id": "539f51a4-4013-4cf9-99fd-7ac0a1affd8c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f25dcf35-9ed8-4644-843b-69df9a765812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2dedce0-492e-4ad5-a958-19615e05c939",
        "cursor": {
          "ref": "5c880592-5968-4819-a69d-b544f625b2a7",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "de0b62bc-f858-4bd0-83a2-c788f21c6e01"
        },
        "item": {
          "id": "e2dedce0-492e-4ad5-a958-19615e05c939",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e721307d-dcfe-456e-ac28-708af9c5c4ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f547c363-36e4-436d-9893-f2afc8da3905",
        "cursor": {
          "ref": "8033f1e4-16e1-4deb-8198-eb44afa331a7",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c8eefd1d-8be3-42f9-b6e0-92941fe3d431"
        },
        "item": {
          "id": "f547c363-36e4-436d-9893-f2afc8da3905",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "56497e77-4f1c-454c-b54a-93a1f3d57139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0f16de-7360-4c70-839e-b3baf3622d38",
        "cursor": {
          "ref": "f8cdecf8-630d-451d-a60f-3b9d45185df3",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1ce49b9d-7bde-4412-a24d-1db85bf79f07"
        },
        "item": {
          "id": "9d0f16de-7360-4c70-839e-b3baf3622d38",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b17cde6d-51a9-433d-bb48-a7baf0e5a634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac2e047-78ab-413b-8ca8-db1a2e8a91eb",
        "cursor": {
          "ref": "516b25ab-6920-4e3b-8bc8-af85ab601d94",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5bdab636-08df-495b-b20e-69311d3b4c68"
        },
        "item": {
          "id": "6ac2e047-78ab-413b-8ca8-db1a2e8a91eb",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "097c0caf-6897-4494-9b29-1ed771d8ae4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd452ea3-f868-4c6b-b4b3-d45704cf5204",
        "cursor": {
          "ref": "98bbed56-f4a8-4f42-9d76-6f6a77acd7e5",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ec610c8c-81e6-4aef-ba72-870f54e8ef65"
        },
        "item": {
          "id": "bd452ea3-f868-4c6b-b4b3-d45704cf5204",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "02e39953-f818-4ded-b40f-2c0e81e1c8e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d204f53-8235-41dd-b7b0-6e8d29c1d653",
        "cursor": {
          "ref": "df92f101-e9ff-4088-9ad1-be48b47f2891",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0a2010f0-1830-4145-8d6c-963a3ab8b556"
        },
        "item": {
          "id": "3d204f53-8235-41dd-b7b0-6e8d29c1d653",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "fde9edeb-5c49-411f-ac71-ec58ad195d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac83980-145b-4d0c-8d94-ccbdae08708b",
        "cursor": {
          "ref": "b5ca271d-6a0e-4919-ba3c-b8d61ee57c08",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "af798d98-e015-4c3f-b4a8-9df9328a2c10"
        },
        "item": {
          "id": "aac83980-145b-4d0c-8d94-ccbdae08708b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "239ed366-dd1c-4e34-98d6-185988193b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b7e0e8-a399-45c1-920c-ac94c8717421",
        "cursor": {
          "ref": "c88c15b2-dfef-48fd-b9af-416e81cc951e",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "26956cd8-20d5-4fde-bb4b-e1f6463aad76"
        },
        "item": {
          "id": "e3b7e0e8-a399-45c1-920c-ac94c8717421",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "cc43c77d-87dd-4dc7-9ef3-3520bf239e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e731a02d-6ce0-45cf-9fcc-964ae58cba5c",
        "cursor": {
          "ref": "1faa4456-aebe-4df8-ad93-83b7e7673530",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "64e61799-088d-423f-a7f7-0459239f6326"
        },
        "item": {
          "id": "e731a02d-6ce0-45cf-9fcc-964ae58cba5c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e073571f-b8c9-4157-8de2-4fa4521d763b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2056a4-929f-4fe5-98c2-740619e4e7c2",
        "cursor": {
          "ref": "df513b32-0ff0-4a2d-8521-ad83a53d25a6",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7088132b-0ffb-46b9-a696-372950314df7"
        },
        "item": {
          "id": "6e2056a4-929f-4fe5-98c2-740619e4e7c2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1f19ce3b-42c9-45c7-99b7-9e1e1509b83c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5306103-2d5a-43d8-a1fd-fda95f0aab27",
        "cursor": {
          "ref": "7220a0be-b68c-41e9-b2cc-cfe0f3d46a05",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "404c9f01-4fb0-4942-ac1e-0e85ecc9e6a6"
        },
        "item": {
          "id": "e5306103-2d5a-43d8-a1fd-fda95f0aab27",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "25bf1d7a-57eb-4ed5-8f1f-7fe3ac2976ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b45c725d-3330-46e6-bd85-7b89d91cffc8",
        "cursor": {
          "ref": "2c1e615e-f5b0-4713-9152-34d45757c337",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "01a34381-a98d-41e6-8728-8d2c56db6d3c"
        },
        "item": {
          "id": "b45c725d-3330-46e6-bd85-7b89d91cffc8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "71f0a372-0f43-4f76-b760-a39569cc924d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27cd18e9-14ca-405a-bb7c-9794ab9a977a",
        "cursor": {
          "ref": "a4351fac-b012-4812-833c-cecadb455830",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c117db35-5c4b-4d60-8f5b-5550a56a3a2e"
        },
        "item": {
          "id": "27cd18e9-14ca-405a-bb7c-9794ab9a977a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1925fca7-5b68-450f-bd70-56c34b7e8945",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "5dec6ea2-1d2f-4db8-967e-dc10466fe3af",
        "cursor": {
          "ref": "5895b140-6c71-4978-aade-5e13b2bfd71b",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "65f83c9d-c067-4c96-9b93-21e0aae6c90d"
        },
        "item": {
          "id": "5dec6ea2-1d2f-4db8-967e-dc10466fe3af",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "46b7c192-ede0-421b-b96d-c8447df4fdf5",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c11b4985-5ec7-4913-926e-3353b3a152e6",
        "cursor": {
          "ref": "4c317f7b-9fc5-4b91-81d0-17636b61538a",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e20df539-30eb-4007-807a-4b1652d84e67"
        },
        "item": {
          "id": "c11b4985-5ec7-4913-926e-3353b3a152e6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "20303145-e8f9-40aa-b816-3ed1f8554ba9",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "31a69920-1d7b-4ae1-89be-98e7f459a221",
        "cursor": {
          "ref": "895df2d7-df0a-479b-86d1-dac87b727999",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4704cedf-e146-4589-8c58-c62795b6d1de"
        },
        "item": {
          "id": "31a69920-1d7b-4ae1-89be-98e7f459a221",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8bf41f83-b740-4edc-871b-d920efac06b9",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "7f7024d5-ebe8-4a2e-974d-e69324fbe187",
        "cursor": {
          "ref": "5be0a632-bf92-474f-8407-03e1dc469e2f",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "652d0eaf-539f-4263-a0cc-c3fb2b210661"
        },
        "item": {
          "id": "7f7024d5-ebe8-4a2e-974d-e69324fbe187",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ba9095b9-59f5-41ea-bcb9-d2504cc08e27",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "91beffb5-2ded-4e2b-adf0-c6f2fe8e7b1b",
        "cursor": {
          "ref": "c7880263-1c6e-4a0a-9a80-cb0e93db7d14",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a57c20e7-1753-4706-9f62-a8cffd23b4d9"
        },
        "item": {
          "id": "91beffb5-2ded-4e2b-adf0-c6f2fe8e7b1b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "912e6c06-c8b1-424c-96cb-941fd5632d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600eed71-3c7a-4505-9383-b2391abeee8f",
        "cursor": {
          "ref": "3508733b-9c6f-4635-92c4-85cf5f602bd8",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9a05e2c3-1fbc-49a3-adef-28feab9b77cd"
        },
        "item": {
          "id": "600eed71-3c7a-4505-9383-b2391abeee8f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f0e91118-92ba-4c29-9d9b-ffc6f731af59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51df03cc-8347-40fa-9d6d-921e6de02fd7",
        "cursor": {
          "ref": "7e6c3192-dbe2-46eb-a4d4-e1f31fd460e9",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "dbe0764f-7680-43d3-8871-0dff7cb3e1d9"
        },
        "item": {
          "id": "51df03cc-8347-40fa-9d6d-921e6de02fd7",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e9a3a47a-90c5-4d75-8910-e6fe0282deef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652f159f-7b24-4d41-bd62-463c3c681078",
        "cursor": {
          "ref": "aae5ae5c-9a78-410b-9319-fdf92c0cbfc3",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c8d84595-dbb7-4a9c-8521-9fbad9e242a3"
        },
        "item": {
          "id": "652f159f-7b24-4d41-bd62-463c3c681078",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d8d40afe-7945-4448-bcb6-80551f512aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672ead3b-d7e4-4077-95a7-9c87e26ea37e",
        "cursor": {
          "ref": "9fcaf11c-2690-43ce-b2e5-6262d1c802df",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9c4cef8e-f0f6-4c0e-b79d-11cf917f90bf"
        },
        "item": {
          "id": "672ead3b-d7e4-4077-95a7-9c87e26ea37e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9060fc07-4b38-468c-b84e-132a883b7d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17800854-fb60-42c7-be96-35b117cd5b75",
        "cursor": {
          "ref": "a33a0631-31f9-49ac-85f2-dfe4049c110d",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2fa0fd39-22b0-4967-810f-f88a16c7e59b"
        },
        "item": {
          "id": "17800854-fb60-42c7-be96-35b117cd5b75",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "97a365c2-edd5-4491-a42d-5fcf09197bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a07065d5-c665-439c-b1ea-2183f45323c8",
        "cursor": {
          "ref": "fea27c0d-6820-4bcf-bf4f-488b58a6425e",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b1f8d0fb-6671-4ac5-86e5-29aed309074a"
        },
        "item": {
          "id": "a07065d5-c665-439c-b1ea-2183f45323c8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1eacd450-b55e-44bf-abee-eb22dbb09482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647b02b2-1932-49a6-bdce-7047e4b105a4",
        "cursor": {
          "ref": "54ad5837-0a88-4796-8692-8e2aedb3275c",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0b8db806-1486-494b-b7d9-977eaf523a5f"
        },
        "item": {
          "id": "647b02b2-1932-49a6-bdce-7047e4b105a4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b34390be-1c09-445b-8ed8-b4e84a8f1e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9e26a0-fa8a-4394-89fd-a0a875e8bb9f",
        "cursor": {
          "ref": "05527f10-17ad-4828-9199-c25446f2e37e",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "30345858-23a3-479f-8a0d-602a939f279f"
        },
        "item": {
          "id": "1c9e26a0-fa8a-4394-89fd-a0a875e8bb9f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "06544b3b-5361-4902-8b57-4fbc500afe00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dbf0097-b9e0-4768-a8a8-365a6f828229",
        "cursor": {
          "ref": "05774364-f0ae-4ecb-8343-fd792a6da982",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "93f682e6-f5aa-4a6a-9022-80cff6c08686"
        },
        "item": {
          "id": "3dbf0097-b9e0-4768-a8a8-365a6f828229",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "38d2bf92-c36d-48d2-b7bc-73d092596899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14dcc202-78e3-4fe8-b55c-bd5edbac179a",
        "cursor": {
          "ref": "974baf6c-226a-4e3d-91a8-fb90cb3b6e03",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3dd84a0a-5f3f-4291-92d8-3502adc15707"
        },
        "item": {
          "id": "14dcc202-78e3-4fe8-b55c-bd5edbac179a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "bd91034a-878f-42f7-97b3-612623cdedb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fab6b08-f609-4393-a596-64670021399d",
        "cursor": {
          "ref": "6a96db11-a158-4b47-9646-e75a87115b4a",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "652d62ad-7a35-4f66-9f39-aedd4e7c53f4"
        },
        "item": {
          "id": "9fab6b08-f609-4393-a596-64670021399d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "66007e23-d015-422b-abfb-0de9f3f4a3b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ca9f33-9223-43fd-9651-d75e7d18d264",
        "cursor": {
          "ref": "9915c220-47e7-4014-833a-5044ff7fe097",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9138878f-e326-475d-a8c6-bdbea9b9f113"
        },
        "item": {
          "id": "11ca9f33-9223-43fd-9651-d75e7d18d264",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f589cbf7-2ddf-4c91-8179-a04385a1a9a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f4075f-f579-4465-89ac-d4be35d6e262",
        "cursor": {
          "ref": "d0d318af-341c-4ecf-ac87-62bd6413ab57",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1ff4eeff-97f3-40be-9656-be8a7e25c273"
        },
        "item": {
          "id": "54f4075f-f579-4465-89ac-d4be35d6e262",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7c7edaf4-8f10-4649-8411-6e517e09b830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f31bd5a-8c4f-4134-8137-ef1deeb673de",
        "cursor": {
          "ref": "37610127-4503-4dd0-8737-9f9bcfd79ac2",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ab32eee5-6b20-4fd5-9dee-41b71e983814"
        },
        "item": {
          "id": "1f31bd5a-8c4f-4134-8137-ef1deeb673de",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7a5f2a64-f2ad-42d1-8a90-a5b43b028936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ac17d5-9e89-4345-9a1d-0831689050e3",
        "cursor": {
          "ref": "0fc47787-1fcd-4a8d-9b9f-10083bb16663",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2a02cd20-50a8-4e2e-b3c9-43175b8a9fc3"
        },
        "item": {
          "id": "38ac17d5-9e89-4345-9a1d-0831689050e3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6375dc1b-1f15-4201-ad33-44f729737575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8484a33-2b34-4689-9fdf-98b5059885cd",
        "cursor": {
          "ref": "1237283c-98db-4ab5-9a3a-ad9b4fb72e94",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2dadf672-3a03-4676-9364-f0ea2d343cfa"
        },
        "item": {
          "id": "b8484a33-2b34-4689-9fdf-98b5059885cd",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5a84aa7b-5410-431a-9845-2783ca8c8a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc59548-ba66-4644-a687-fd4224ab71bd",
        "cursor": {
          "ref": "06eaee92-3640-4531-92d0-554940d74baf",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "69a9a577-0759-4024-9174-fec8753b55b8"
        },
        "item": {
          "id": "dbc59548-ba66-4644-a687-fd4224ab71bd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "73bedf12-a162-454c-89b6-03e147a9f7ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18edb4b0-d39c-4b45-9d72-364b12ab98fb",
        "cursor": {
          "ref": "80e4e6e0-76d4-4254-a1e5-adb69455f62d",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4c535de6-cea4-4b9f-b857-424ce1679118"
        },
        "item": {
          "id": "18edb4b0-d39c-4b45-9d72-364b12ab98fb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d93e584c-1585-4405-9cfe-0e26bd70761d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b632e9-b8eb-4d39-89f2-b3dd8b61ccd1",
        "cursor": {
          "ref": "cd427da2-fea5-4bd1-ae25-318c00f43baf",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6ae0bc15-38b9-4156-b0e4-fd7487b52667"
        },
        "item": {
          "id": "42b632e9-b8eb-4d39-89f2-b3dd8b61ccd1",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8438056c-6060-4e79-aa1f-ff246134df4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57dbd946-6018-46a1-977f-6ce7d77688aa",
        "cursor": {
          "ref": "7f864876-14d1-40a5-a998-e73171474b6f",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a256fee2-2074-4784-9c54-e7e6b2066722"
        },
        "item": {
          "id": "57dbd946-6018-46a1-977f-6ce7d77688aa",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "bdaabe8d-6394-415d-b5c0-f9d7039f113f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1736ff1-64cd-44d5-8f5f-fdb54eada5c6",
        "cursor": {
          "ref": "74990540-18fc-4db6-a098-ae1f7f7e80de",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a2ffbbc3-3b17-46cc-92d2-946b212c6b01"
        },
        "item": {
          "id": "d1736ff1-64cd-44d5-8f5f-fdb54eada5c6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7dd1520f-a5ad-4608-b925-c8e7f623ca46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccf0411-c67f-4517-b3fd-b4d33fe8dabf",
        "cursor": {
          "ref": "287424ea-16ed-4ad9-a04b-a621eca2946b",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4dfbac10-a355-4043-9684-edf834c182b1"
        },
        "item": {
          "id": "eccf0411-c67f-4517-b3fd-b4d33fe8dabf",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6a408731-886d-4aa1-a28c-1e720a0a2e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f883748-fe40-4e34-95ba-5fc4b1df1938",
        "cursor": {
          "ref": "3f1e9f80-df71-4dcf-91b0-618a2b26c046",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "44ce3a87-4f21-4c70-bc34-a3ed4c07a6c0"
        },
        "item": {
          "id": "4f883748-fe40-4e34-95ba-5fc4b1df1938",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f7f584b1-9b0d-4c31-b396-5f97caab3d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5679d2-3425-4bba-b1e8-5f4e080219ef",
        "cursor": {
          "ref": "18277a9c-2da6-49e4-bdc3-61ba055d9548",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3ea38921-fc81-4d82-96fd-46f3d7eee55d"
        },
        "item": {
          "id": "dd5679d2-3425-4bba-b1e8-5f4e080219ef",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f1d0bae5-4087-4970-8753-52f8441d92c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7005d953-c5cb-4a7d-8525-57ae6389797f",
        "cursor": {
          "ref": "bebfa864-b370-4cab-adcb-e6501a7373f3",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d7d174c9-ab8c-47fa-b759-fb25ffee4a59"
        },
        "item": {
          "id": "7005d953-c5cb-4a7d-8525-57ae6389797f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "dfcffe6a-924e-46a9-97a9-e453e9eb31d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "053f3338-0219-4752-aac7-a28ffe6cdfdd",
        "cursor": {
          "ref": "c9a245d9-f3a2-44e8-8244-7e4ca6dc8ff0",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "432a7fbd-8e30-47bb-adf1-1c2eab2f9065"
        },
        "item": {
          "id": "053f3338-0219-4752-aac7-a28ffe6cdfdd",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c539b031-6170-4946-acad-4e1381db75a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae3db05-fe7b-4a5e-929e-8b92b47ce897",
        "cursor": {
          "ref": "cd441ab7-4f6d-4225-8d43-f7d154a751a2",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0a1e3d8b-0691-4c72-8685-713d319944da"
        },
        "item": {
          "id": "2ae3db05-fe7b-4a5e-929e-8b92b47ce897",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c018e71b-26a2-42b7-ac25-3bb109bce591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e77a6a2-7a67-4ab1-91e3-25356618adc4",
        "cursor": {
          "ref": "4f9c9c27-7f63-4ba0-9111-839902b7afc9",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "79fa609e-0b0e-47aa-b30b-2b22467175a2"
        },
        "item": {
          "id": "5e77a6a2-7a67-4ab1-91e3-25356618adc4",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ed58efdc-e370-42a8-b42e-05c464a341de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "288aaf83-f343-4041-8328-7823db2ff676",
        "cursor": {
          "ref": "93711449-04b7-4582-8b5c-6cbb17843576",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "98b01f2f-9234-45ad-9794-6c908db314d9"
        },
        "item": {
          "id": "288aaf83-f343-4041-8328-7823db2ff676",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "68692f03-e8ab-48a0-ab45-71530fefc4bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54edd137-0f3e-402b-b483-cb05599b8ddb",
        "cursor": {
          "ref": "8502b11c-ac68-4bbe-bdf5-21135a45e4a9",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ab99cfe2-cc8c-4eed-9d91-59ad1df64a55"
        },
        "item": {
          "id": "54edd137-0f3e-402b-b483-cb05599b8ddb",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "65de1e2b-b8d4-474c-87aa-029de476acf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db01c6ef-3efa-4c3b-95b3-f005d602df0d",
        "cursor": {
          "ref": "89e9bbaf-af92-4bc1-9c4c-64f2b311d4c4",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "15d02fe1-4ba6-4ba9-aac9-f0c7c9c72036"
        },
        "item": {
          "id": "db01c6ef-3efa-4c3b-95b3-f005d602df0d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b54d737e-5dca-456b-b2ff-2067a990b246",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc5e9c37-1e65-4740-9b07-aed4a0ff6a05",
        "cursor": {
          "ref": "37d0e54d-eb2b-4ade-a959-24f497fb47d1",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c6f5a045-0e67-4561-b5e4-6d70ebee040a"
        },
        "item": {
          "id": "fc5e9c37-1e65-4740-9b07-aed4a0ff6a05",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "7d1e27f5-f60b-4a58-a670-06ff8df26aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "d24dec52-9abf-4f10-a0a0-4e33fe42af62",
        "cursor": {
          "ref": "49efb4fa-ed2d-43bf-8639-14c1094fc649",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "470966fd-2117-4af8-8829-210649640a35"
        },
        "item": {
          "id": "d24dec52-9abf-4f10-a0a0-4e33fe42af62",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6f6f4bd3-4990-48cf-ac13-877345e2bf66",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "21c3efb9-1c1d-4a23-850c-2526166420b9",
        "cursor": {
          "ref": "30d196e9-bfd3-48ff-ba2a-bdb44e26ad3d",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2e48505d-b74e-49df-a4a6-d7afde549e8e"
        },
        "item": {
          "id": "21c3efb9-1c1d-4a23-850c-2526166420b9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "aee8a97a-5189-4d4b-9793-774ea1b2d144",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5999162-81a8-40b8-86df-66cdaeaca389",
        "cursor": {
          "ref": "150843a1-19cf-4dde-b79c-63b43782e96c",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "bd2d8963-b1a8-42a0-b921-614191348c39"
        },
        "item": {
          "id": "e5999162-81a8-40b8-86df-66cdaeaca389",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "76bfb3fe-5a26-4bda-a722-099c19b712a0",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "290a5dbd-308a-4e2e-bab3-2fd5ed728e4c",
        "cursor": {
          "ref": "abf6ab08-fd25-48fb-8671-4c8c1d0fda5b",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6a6582bb-af4c-4cf6-b803-a413f5d900d9"
        },
        "item": {
          "id": "290a5dbd-308a-4e2e-bab3-2fd5ed728e4c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2a70def2-37fe-4c23-9340-0cc4c5aa2d31",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd534bd-1d8a-4ad1-96e9-189d08c44c30",
        "cursor": {
          "ref": "2c7a45e9-47b5-46de-8f44-9535f3628096",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9041e2e6-587f-4f1c-9916-4072cff16e14"
        },
        "item": {
          "id": "0dd534bd-1d8a-4ad1-96e9-189d08c44c30",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0661ea10-3c9d-4e9e-b9e6-dc8fcba210c9",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-08T00:37:31.262Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-08T00:37:31.262Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "41b6ae8e-0bed-4f7f-9c05-044a3cad31c8",
        "cursor": {
          "ref": "6e8cebfe-a8af-42b0-9a2f-02f62198a546",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7cc60b0b-bdfd-426d-92c4-9a35ca793ce2"
        },
        "item": {
          "id": "41b6ae8e-0bed-4f7f-9c05-044a3cad31c8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1e582b47-bd98-4b84-908a-fa96c3ed5ca9",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3551424f-1a08-4d25-865c-6c030a4409dd",
        "cursor": {
          "ref": "b6801616-ea33-47af-8bb7-b310b9cf2610",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e3bbde37-06a9-40f2-a7ce-dc47e9165aba"
        },
        "item": {
          "id": "3551424f-1a08-4d25-865c-6c030a4409dd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2b35321d-69d5-47e6-8b38-95398539e395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed8f683-0788-4c3a-acf4-a7ab96dc6ad9",
        "cursor": {
          "ref": "b118b4a9-d93f-410c-9698-c880789ba0e7",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ca983ab5-d190-4f7b-aae1-867541189336"
        },
        "item": {
          "id": "fed8f683-0788-4c3a-acf4-a7ab96dc6ad9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b2d42e30-d018-4725-a187-3141140765c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b890fe1-105e-45ae-9d4f-3e15a667803c",
        "cursor": {
          "ref": "c638c856-9614-4cac-8c09-934d812dba91",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "337fb1d4-7533-441a-bfc1-06c4c9520102"
        },
        "item": {
          "id": "7b890fe1-105e-45ae-9d4f-3e15a667803c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f7a2c233-ddea-4361-b303-da6793e800f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8574822b-4e2b-4694-afe5-b195ccdcbc7c",
        "cursor": {
          "ref": "c85f7f42-5c92-415e-90be-f33624dfb8cc",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a90550d5-2da9-48dd-a8cf-71df3cf909a4"
        },
        "item": {
          "id": "8574822b-4e2b-4694-afe5-b195ccdcbc7c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "77ae393b-ab3d-4c24-a8d4-294a6e3295b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c67f84-f9cb-41c2-9ea3-0b53a5adcd4e",
        "cursor": {
          "ref": "4cc15b92-ddb1-487e-9714-bebe94b54777",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7629be2c-8f33-4dea-979d-a7cd67450f2d"
        },
        "item": {
          "id": "94c67f84-f9cb-41c2-9ea3-0b53a5adcd4e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "09a6b707-4e27-4655-90de-ba5cca8d79aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be6f740-f687-43a5-82b9-074f3aa78002",
        "cursor": {
          "ref": "f68fee67-993f-43fd-9a78-89b3c6833529",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4be6cf8c-67e3-4fd6-a846-20244dc10b2d"
        },
        "item": {
          "id": "2be6f740-f687-43a5-82b9-074f3aa78002",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ba85362e-40d1-4ef7-b8ce-cb8373b54eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076347c0-5da1-473e-a036-63f0855f9186",
        "cursor": {
          "ref": "d5acfc54-2a93-4b36-ad5f-bc9700db1708",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ec105d80-c228-4fde-a865-f433e07a4dcc"
        },
        "item": {
          "id": "076347c0-5da1-473e-a036-63f0855f9186",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f7854d24-7bd7-489b-a94d-c0bb0be4d3a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d622bda1-3822-4166-85f1-4754df577e3e",
        "cursor": {
          "ref": "1c01575c-2c81-46f5-8e8c-345b3adb0944",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d231c5b9-d91d-4dbb-b18f-c816ed57611c"
        },
        "item": {
          "id": "d622bda1-3822-4166-85f1-4754df577e3e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "16f3e21b-81e2-4bc7-9a5e-7ddcdd65ba97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d22d99-8039-4968-b79a-028aed1f99c4",
        "cursor": {
          "ref": "0eb04904-7052-4a58-b7d9-2d879cb9346f",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5d94ab68-73df-42ed-94f2-af941494a66c"
        },
        "item": {
          "id": "66d22d99-8039-4968-b79a-028aed1f99c4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3cc18a6e-e9a9-4c9f-a37a-45a00c72a4c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee6c539-71bf-4c22-b805-c80ea911640b",
        "cursor": {
          "ref": "5a6b8c74-16a3-469f-883b-b9db45a0dc0b",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "39d94070-a24c-4fff-8bb7-eaa3607cdf02"
        },
        "item": {
          "id": "0ee6c539-71bf-4c22-b805-c80ea911640b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "88a450b5-c2f8-4e24-9b05-b8514825dbc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb2ca56-74f9-49de-81f6-b66226e67163",
        "cursor": {
          "ref": "49dce590-4ad0-4016-93fa-8dd754fe45c2",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1f2d04e2-f0b2-4368-b3e1-ff23cfbb8a42"
        },
        "item": {
          "id": "8fb2ca56-74f9-49de-81f6-b66226e67163",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f1b3c708-23b9-4f5c-aef9-ed54d63c3ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6c37e6-850a-4e3e-9df3-2a8dc3aae897",
        "cursor": {
          "ref": "ca11d070-f74c-4dec-a145-6a2d2922d4b3",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e1ada974-36f4-4332-bcf7-d3e234f0b1df"
        },
        "item": {
          "id": "cb6c37e6-850a-4e3e-9df3-2a8dc3aae897",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f023f8f5-83e5-4771-89ff-85ecab32cc39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d8b0091-8207-4654-afe1-efa91580b202",
        "cursor": {
          "ref": "91447242-d7ba-48b4-9336-5bc0164c8872",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8b524f0a-4e3a-4dba-ab89-b9fddf000169"
        },
        "item": {
          "id": "6d8b0091-8207-4654-afe1-efa91580b202",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f5de0439-92cd-42d4-9053-5d0a8c504f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40ec4f1-5916-4a12-88ad-bf5f819786f1",
        "cursor": {
          "ref": "58d26cb1-6d8e-47fe-96c8-39bf4a677005",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "bcb7bcaf-9ec9-4cc3-b17b-7fe60302462a"
        },
        "item": {
          "id": "a40ec4f1-5916-4a12-88ad-bf5f819786f1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7aecae10-4c69-496b-971f-47eaf56c03cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e3b3014-9e57-40d4-b217-317fe8f559f1",
        "cursor": {
          "ref": "82fc8ca4-a05c-41f0-84cb-eada661b0de7",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "880e65db-62c7-49f5-a264-b0bea66f9185"
        },
        "item": {
          "id": "3e3b3014-9e57-40d4-b217-317fe8f559f1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d9f2d4b7-6ade-4a39-82c3-db2920d387f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992eba7b-fd19-477d-b62b-eb038d977f4f",
        "cursor": {
          "ref": "ae3eddd2-db59-4a9a-8c0d-1c24b58a8ff9",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "53d0d8e8-e5f8-4765-82bf-115d3fea4af7"
        },
        "item": {
          "id": "992eba7b-fd19-477d-b62b-eb038d977f4f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3d29fa85-770e-418e-a06b-d4ee04d518ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca8a252-cf20-4719-8095-6257e7e28238",
        "cursor": {
          "ref": "3ababc2c-062c-4bd5-9458-9a693a1f8a6f",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c0f930b8-fec0-448b-8afa-b3b956fc6b58"
        },
        "item": {
          "id": "0ca8a252-cf20-4719-8095-6257e7e28238",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bd785e89-458e-4475-b3ef-bf87922583ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89554392-aaf8-49da-837c-6420763c2183",
        "cursor": {
          "ref": "a3bad4d5-86de-42a4-83c8-faa416f07610",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4b8d5c10-e0df-423f-8e37-5fc86d43023a"
        },
        "item": {
          "id": "89554392-aaf8-49da-837c-6420763c2183",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "914183e4-27c7-4264-9eea-39ba008199bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d4c65a-a642-404e-93fa-6ac9817d541c",
        "cursor": {
          "ref": "f79b9dc9-9c5b-4973-80bc-7a90c7bc408d",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "9b2cc733-1ebf-4c50-92a7-1b7baab8b977"
        },
        "item": {
          "id": "81d4c65a-a642-404e-93fa-6ac9817d541c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "990527bb-8f31-435f-a457-b3544b636a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362d24eb-1064-43dd-a2bd-cfd1a31d379b",
        "cursor": {
          "ref": "194efbb2-4ba8-4e88-93f6-958bc12ca2fc",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "641b90a9-b8e4-42ae-8ab6-46582d0480fd"
        },
        "item": {
          "id": "362d24eb-1064-43dd-a2bd-cfd1a31d379b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "578623df-098a-41d9-acfd-2c3fb14964e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6cabfc6-d708-428a-b398-8d2cfa26243a",
        "cursor": {
          "ref": "6a45a0d5-beae-49df-af22-980f7f25db20",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "79167df8-3a95-41b0-bdd2-1cf1baeb92f3"
        },
        "item": {
          "id": "a6cabfc6-d708-428a-b398-8d2cfa26243a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5fafaaa5-e6c5-4b90-89c5-7098afe87227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d6fa07-44ce-4848-ba62-2458e407c564",
        "cursor": {
          "ref": "d189790b-01c5-435b-9331-d147cdf93029",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "22025433-845c-44a4-9ece-62a2941210a9"
        },
        "item": {
          "id": "c4d6fa07-44ce-4848-ba62-2458e407c564",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bf5f9795-85e7-45bc-bbb5-4191306e6786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d8e945-821d-4099-8e11-53a3da90a63f",
        "cursor": {
          "ref": "466f8577-9f8e-4bec-84c4-7bb62324d8cd",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b533e46e-aeb3-44e7-a268-8b15b016e600"
        },
        "item": {
          "id": "61d8e945-821d-4099-8e11-53a3da90a63f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d35c5b32-6f41-4673-b1d6-6a6f7cc732b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984853f7-d6de-45ec-a863-a055a623d35b",
        "cursor": {
          "ref": "461ea0e4-4c58-43b9-89d1-d66d6d1ad107",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "db9723fc-ab60-4b3f-90c3-1fe62ce2ce3f"
        },
        "item": {
          "id": "984853f7-d6de-45ec-a863-a055a623d35b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "755c10fe-17f9-4eca-8458-cb9d772e6f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa21e91-cfb0-49df-a97a-d0cba9804cc2",
        "cursor": {
          "ref": "60ea7e2f-4843-4112-a044-e2a2fa4857c4",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "336e0ec6-37ae-49bc-8b87-4c91f570e445"
        },
        "item": {
          "id": "cfa21e91-cfb0-49df-a97a-d0cba9804cc2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "408245c9-f535-4e44-a15c-3e61ba32a665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508e1f39-036a-47a2-929a-43384cf01c66",
        "cursor": {
          "ref": "29006fe4-6f7a-4db4-8c9b-3b02ad640dc8",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a016ef2f-eaea-46de-a063-c819010e9da0"
        },
        "item": {
          "id": "508e1f39-036a-47a2-929a-43384cf01c66",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f2d00826-426e-4816-ada9-92fa78260ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a998fe-fa38-46a9-8365-0fd7c15b3c58",
        "cursor": {
          "ref": "09bcc621-76b0-4ba8-b423-81c714e9538f",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "43815832-e8e9-4000-9f2f-8b4d793ad427"
        },
        "item": {
          "id": "62a998fe-fa38-46a9-8365-0fd7c15b3c58",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9b144368-8b98-4997-9d93-c74edc0e6e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "513a4747-0a15-43b2-b117-bf266c0fa534",
        "cursor": {
          "ref": "d742eb70-fd06-4ec6-95af-b736e789c986",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "76e1c743-396d-4bc3-9436-5cc787226db3"
        },
        "item": {
          "id": "513a4747-0a15-43b2-b117-bf266c0fa534",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "39b75ad0-c7ec-4311-a8f8-d3a07d1c82bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbae8acb-69de-4a3e-aae9-7026d07fa788",
        "cursor": {
          "ref": "f435015c-cf00-4af2-a1cf-39d6d8997034",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "127e4c76-1fa7-4804-8224-8901afa26b94"
        },
        "item": {
          "id": "cbae8acb-69de-4a3e-aae9-7026d07fa788",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "08ca1dcb-5cec-41dc-be0f-b6f4e77d0384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143d9594-526e-4b58-b9e9-5a04da8b8752",
        "cursor": {
          "ref": "a58d7c43-99ba-44c0-ad47-5b862fd8d498",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "eeb7b8f3-7906-49af-bc63-7ee4486c56e4"
        },
        "item": {
          "id": "143d9594-526e-4b58-b9e9-5a04da8b8752",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e0ed2680-68fc-4df7-a234-ffc15a21aab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ab57b9-0b23-4e28-ba50-a4d06bfc026b",
        "cursor": {
          "ref": "54c96d81-8676-4c8f-8202-bd0e1ff63203",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e1aa8dca-3934-47b8-adef-7a911e1a5ed1"
        },
        "item": {
          "id": "b2ab57b9-0b23-4e28-ba50-a4d06bfc026b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "52e41638-3d38-4e9c-bd41-c09fc9d82eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a4371c-3a0f-414e-82d8-e00579e9cb40",
        "cursor": {
          "ref": "ae9513ee-98ed-424a-9649-509bb877fbbf",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "918e8a1d-afdf-4e4c-8275-855bc2fabe6f"
        },
        "item": {
          "id": "f0a4371c-3a0f-414e-82d8-e00579e9cb40",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4432f605-1817-407f-994d-18c82fbf2178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433410d9-a25d-42a2-828a-732845001144",
        "cursor": {
          "ref": "51fe4ec8-4c0b-4f4b-9956-885dff39054b",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "30ccad8e-a019-4cea-ada9-ec5a2d04c583"
        },
        "item": {
          "id": "433410d9-a25d-42a2-828a-732845001144",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "312189bb-1388-401f-940a-386016d7c576",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb587a8-24ab-44c8-86ce-5ca4b27e3583",
        "cursor": {
          "ref": "da83b056-4664-491e-962b-f2d29a3058b1",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "62143ac2-9e99-4446-a8ef-be8b163f91ca"
        },
        "item": {
          "id": "cfb587a8-24ab-44c8-86ce-5ca4b27e3583",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e6bf51ce-eb8e-43d6-a06a-a917238a9f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd758c9f-3d56-430f-a83c-085b495db351",
        "cursor": {
          "ref": "ef17fd00-fb18-4b25-87c4-73fbbca2013a",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b48cca0b-4995-453b-b4e2-69f784cd4e1c"
        },
        "item": {
          "id": "fd758c9f-3d56-430f-a83c-085b495db351",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f299fcf0-2f22-4d2d-8b09-9ed09d00002d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed9c8e03-9646-465b-8619-d59b573a5511",
        "cursor": {
          "ref": "a0d58e42-83bd-42f0-9389-1be226d2041f",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6fb16ca6-5e14-4d4f-9dc2-ff502ad459a4"
        },
        "item": {
          "id": "ed9c8e03-9646-465b-8619-d59b573a5511",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "046cf60d-dd21-4c55-b14a-dbd12058aaf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c97966f3-5ece-4486-a566-786fa74993af",
        "cursor": {
          "ref": "dcb42a9b-56d8-490c-a0ba-b6abd44d77e1",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2df3123a-6b46-47cf-8869-45d158727741"
        },
        "item": {
          "id": "c97966f3-5ece-4486-a566-786fa74993af",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "97590009-3851-43ce-b76c-d50b09c1dd1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2943702d-5772-4553-a7a1-55f9653bd86f",
        "cursor": {
          "ref": "8485a9ba-1027-40b8-8791-b8e11b52f945",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2dfc82d7-2ecc-42e7-9a52-bf5b4d433235"
        },
        "item": {
          "id": "2943702d-5772-4553-a7a1-55f9653bd86f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "dc296fa4-9343-43ee-b802-5620fa19f8ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d49d1536-b7af-43db-b2a1-28b9d70985db",
        "cursor": {
          "ref": "3b06a279-488a-4b43-b758-cfd4ebfd435c",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6723cca2-d333-4efb-a3ff-4f1d9812b970"
        },
        "item": {
          "id": "d49d1536-b7af-43db-b2a1-28b9d70985db",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "04d37020-eaec-42fd-b037-c093b5585850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c2d35b-62db-46e8-a12e-f761a08f8e7c",
        "cursor": {
          "ref": "ef857f83-1a3f-4c89-b2c3-02e4cb236869",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b9772e80-04d8-4bf3-876a-2abe246c9903"
        },
        "item": {
          "id": "c7c2d35b-62db-46e8-a12e-f761a08f8e7c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "93e5107e-b305-4580-b99d-490dae134faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e85f9c1-76fe-412f-87c4-d04289513674",
        "cursor": {
          "ref": "ca79e8d6-95e2-4983-af4f-8992c2479a6d",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f824ecbd-b0ae-424f-a02b-fab54bd4565a"
        },
        "item": {
          "id": "5e85f9c1-76fe-412f-87c4-d04289513674",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bfa777be-db12-434b-9104-7500b00d24af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a71494-9f85-4dff-a227-dcd8cfbb6b84",
        "cursor": {
          "ref": "8b4adbcf-e799-4698-9da5-f720b6848591",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1554091a-8097-4aa9-bc1c-1bf946c5c79f"
        },
        "item": {
          "id": "f9a71494-9f85-4dff-a227-dcd8cfbb6b84",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "fad0a4f8-5c0d-4220-a436-cb70379fa844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea01b6a7-f7a5-4b84-8910-866d2e9a1b93",
        "cursor": {
          "ref": "a8a6f5c3-39c8-43ad-8f74-21fa9519124b",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "591e0af5-31fe-41bd-8bcc-772708e06b2a"
        },
        "item": {
          "id": "ea01b6a7-f7a5-4b84-8910-866d2e9a1b93",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c7103865-0326-4ee4-b4c0-ad6027fac908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e5782d-9457-4282-9865-f971bb70d091",
        "cursor": {
          "ref": "a4776c9e-b4c7-4807-be8d-4a7f042074c7",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0458e0aa-76ac-4a04-aede-fde6009075fa"
        },
        "item": {
          "id": "91e5782d-9457-4282-9865-f971bb70d091",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "82dfdb1e-f446-41c3-92b9-6d551f4ed14d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf95e52d-5381-4ef5-807a-d27d6d45f743",
        "cursor": {
          "ref": "696fa84a-3db6-44ac-8724-204ed2ca0d2c",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "377b199d-a515-488b-b5c6-fd1638fa8b2e"
        },
        "item": {
          "id": "cf95e52d-5381-4ef5-807a-d27d6d45f743",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ab806495-a361-4792-a267-774cf2b94316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5171b3-ad57-4481-842c-6328a430a1d7",
        "cursor": {
          "ref": "ff5c9463-7a1d-468f-8c02-1e4da285740b",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a2ff1b96-18fb-430b-8036-13116ae51aab"
        },
        "item": {
          "id": "9a5171b3-ad57-4481-842c-6328a430a1d7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ad6e8a80-5543-4a44-b1f7-1c5adb652656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4112378-bf67-4d31-8d45-ace429c7cf3b",
        "cursor": {
          "ref": "f3e358b8-4412-4518-85b9-da7d91e78485",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1813e4e6-dc7c-45fa-b0b4-1cf16fd293ba"
        },
        "item": {
          "id": "e4112378-bf67-4d31-8d45-ace429c7cf3b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "46daa334-1ada-4446-a13a-819008331c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f25d8e-b388-4e1b-9617-da426874d91e",
        "cursor": {
          "ref": "00c66155-2944-451e-9eae-171877ea973a",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6713777f-1b3b-40d4-ad2c-ecd34adbf156"
        },
        "item": {
          "id": "24f25d8e-b388-4e1b-9617-da426874d91e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "51508d04-62ce-435d-839b-dd7a155c0ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74fcc2cb-68f2-4199-99dc-33061d8ed9d6",
        "cursor": {
          "ref": "a4bb31e8-a862-4489-9ecf-97e3d0b0d371",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "341cb2c9-8bca-40c5-8dfa-c297dd35405f"
        },
        "item": {
          "id": "74fcc2cb-68f2-4199-99dc-33061d8ed9d6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "aac45951-23b7-43b8-878f-8ef394967002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04dd287-c312-4d6b-a7e4-a8fe6c2eba54",
        "cursor": {
          "ref": "12e56b19-4be6-40ea-be42-8568a8f7e28e",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "2dbf158c-313e-400e-9f9e-739d3da9adf1"
        },
        "item": {
          "id": "b04dd287-c312-4d6b-a7e4-a8fe6c2eba54",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4df5d16e-c34c-4810-a291-dde52622075c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede3a62f-0d07-478f-bcc9-9e07c7431ded",
        "cursor": {
          "ref": "0df39298-d031-4b78-85bf-858ba61f33e8",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "19dc10f2-5558-48a9-91f7-1a67a5813c0f"
        },
        "item": {
          "id": "ede3a62f-0d07-478f-bcc9-9e07c7431ded",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8004a8e4-19f1-4c7b-afba-01c5d7e35053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "790f07ff-195a-4e99-8acf-a1b3b9444dd7",
        "cursor": {
          "ref": "b9e2ffad-dcb3-4bb9-9474-1dd9358f9150",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9430bf4a-0a39-43ca-b248-bf6791006c0c"
        },
        "item": {
          "id": "790f07ff-195a-4e99-8acf-a1b3b9444dd7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "565f8990-f88c-4985-b930-19d2c6189c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1fd2a0d-a08b-4371-8e60-a5306608db75",
        "cursor": {
          "ref": "be849d33-2c4d-4a8b-9da6-4e65d0a9607c",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0c43c83c-d15a-40cf-8c7e-b6c0224d9f75"
        },
        "item": {
          "id": "d1fd2a0d-a08b-4371-8e60-a5306608db75",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "28330452-b178-4250-94ac-56e743a0f852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c76040-9778-4913-91b8-9742d05c5008",
        "cursor": {
          "ref": "10cf8bba-b8cd-416b-bb86-2ce1ad32e6b8",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0751cd88-2fa1-4477-ab15-dd411b108298"
        },
        "item": {
          "id": "a8c76040-9778-4913-91b8-9742d05c5008",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "23b8ded3-e0d0-4814-8515-ad682511575f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad78326-0e11-4051-b001-a8b6009a3c65",
        "cursor": {
          "ref": "7bcab018-08f1-4f7b-9181-fbbbd6d53f55",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "541bb870-683a-4a5d-afe2-5b8ebb06bbea"
        },
        "item": {
          "id": "fad78326-0e11-4051-b001-a8b6009a3c65",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1b6e9795-f464-474c-8b52-2b4bb6438457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845864f0-10db-4b83-be83-5eae2f68c053",
        "cursor": {
          "ref": "aa8b042c-8f9a-4a1c-a7b0-39f98a5a2f0e",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "13d0d6b4-f5a5-460a-a7c5-adfbdefa84a9"
        },
        "item": {
          "id": "845864f0-10db-4b83-be83-5eae2f68c053",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b9a67d35-73e0-499b-b2e8-c24aa79bb52d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b36aa5-8218-4051-bec9-777fa80fabf7",
        "cursor": {
          "ref": "fbc2ba38-19a4-4eaf-bf61-fae31a054161",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "21fe7b6c-49a1-48f9-a758-289f73c170bf"
        },
        "item": {
          "id": "16b36aa5-8218-4051-bec9-777fa80fabf7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "18dc6b4c-71e4-4811-8c69-7c804030d21b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "270676d7-dcd8-4da1-bc88-d7aa592523df",
        "cursor": {
          "ref": "e5da66c8-80a9-43b5-93e9-9bd411d37e0a",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "363b080a-e423-4fbf-838f-7d6c0ef169bc"
        },
        "item": {
          "id": "270676d7-dcd8-4da1-bc88-d7aa592523df",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "51b4690b-c168-42a2-8721-bfaad057c27f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266b3af7-6670-4214-8a4a-f7ef96722db4",
        "cursor": {
          "ref": "d6687b7c-6d24-4a57-b3c5-15a9bd8f843a",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e4fca5f5-d121-436e-ada5-46497213eccd"
        },
        "item": {
          "id": "266b3af7-6670-4214-8a4a-f7ef96722db4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ecb66ee6-b6f7-450c-84e3-29518791caae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce8a7e9-6719-435f-a12c-7743e45dba8e",
        "cursor": {
          "ref": "bf492030-4a20-4616-a3d6-b40a2a71b44d",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5c2e2270-bf44-4617-86ac-d5c2905df52e"
        },
        "item": {
          "id": "8ce8a7e9-6719-435f-a12c-7743e45dba8e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "746b3df3-7f53-4219-96c0-b94180bfed92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47dab2a2-fac8-4c0d-ae59-bd773c7e7aa4",
        "cursor": {
          "ref": "0c8c032c-9cb0-4608-98c6-7a8d983e769e",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d46e944d-ec1e-4087-b7f3-e97790ab7b2b"
        },
        "item": {
          "id": "47dab2a2-fac8-4c0d-ae59-bd773c7e7aa4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "43411381-26b9-42bf-8f6f-830324cc8726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba84c7b-1ec4-4d68-87e5-4b61d9f3d989",
        "cursor": {
          "ref": "0d0bdd1d-a73e-4aab-a5a2-f32cf454cd50",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "189430b9-fcea-4487-9c99-12f80c11c30f"
        },
        "item": {
          "id": "3ba84c7b-1ec4-4d68-87e5-4b61d9f3d989",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f20e0337-5647-4c68-9d8b-25dbb64b3046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5c7257-d108-4342-acd8-7734880ef66c",
        "cursor": {
          "ref": "c5df8c29-f324-4796-8567-c44c5acb6374",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9dcaddab-3da0-426f-aade-21387216e8ae"
        },
        "item": {
          "id": "4b5c7257-d108-4342-acd8-7734880ef66c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8ddd191f-8101-4b97-b916-33e9c1fd578d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d47198-3e08-4fba-9186-cc16b6314dcc",
        "cursor": {
          "ref": "55c70dda-54a7-4eae-8de0-5da670e7c650",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d10897dd-8106-433b-b421-51a3adadd5d5"
        },
        "item": {
          "id": "c5d47198-3e08-4fba-9186-cc16b6314dcc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7b5da16e-38fd-48a4-9e5b-9ff03ccf0b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be4751f-af40-41b1-91fc-0d7cd0ea414a",
        "cursor": {
          "ref": "40e08694-3e0b-4e3c-baff-c082401e9a6d",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e93f56b4-65a1-4ed5-9dd8-11617b4d72ff"
        },
        "item": {
          "id": "8be4751f-af40-41b1-91fc-0d7cd0ea414a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "6fbf918b-fde7-4b0b-96d7-f998c80dfb18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb4c028-cd07-4f9c-92c4-9949bde29038",
        "cursor": {
          "ref": "6f45561f-bba1-4c66-89ef-a5b993ceac5b",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "77a8ca7b-c509-49c0-b35f-651ed3d94646"
        },
        "item": {
          "id": "4bb4c028-cd07-4f9c-92c4-9949bde29038",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1d1b0d15-22b1-467e-b5b5-a9d6e51ffe3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440041a0-b575-462d-90d3-9044ffe4475a",
        "cursor": {
          "ref": "1215bbbc-e838-42f7-bf53-3fd265a9c78e",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "494360e2-3136-42c1-add9-d317c50bca49"
        },
        "item": {
          "id": "440041a0-b575-462d-90d3-9044ffe4475a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b1e88d14-032c-4780-b9f8-8679dee48ef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccfdc282-4fe4-4082-9a48-e3be46a744ef",
        "cursor": {
          "ref": "41d13aa0-f01e-4c0d-ab74-773b1d896bac",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "bc30f7ce-9301-4511-8fe8-5e553fa49604"
        },
        "item": {
          "id": "ccfdc282-4fe4-4082-9a48-e3be46a744ef",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "662393ff-4835-4f92-8a2a-f4af3cd5ac3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461ee34c-21b6-4821-9319-c55bb2ab03a7",
        "cursor": {
          "ref": "cda450d7-3465-45d3-832c-58b6e60f1309",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3449c3bf-d58b-4290-8fb5-85f59896e434"
        },
        "item": {
          "id": "461ee34c-21b6-4821-9319-c55bb2ab03a7",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "e93c1918-225c-4b45-b62a-dc42c21927e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630af40c-b684-4584-a64e-81b77f58a267",
        "cursor": {
          "ref": "9de791a1-808d-49c7-b003-2ad906e5e745",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "288955ab-3b33-44f2-ba7d-76f3a851e04e"
        },
        "item": {
          "id": "630af40c-b684-4584-a64e-81b77f58a267",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "43c0e6e3-7e54-4765-9719-25801c59096f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29132bce-3ece-4f21-968b-dbf4d79d381c",
        "cursor": {
          "ref": "8e168d1c-1005-4506-b68b-e5ddcc9657d7",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "dbc32788-0978-489c-a0c8-4cb7f2a19e92"
        },
        "item": {
          "id": "29132bce-3ece-4f21-968b-dbf4d79d381c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3b8dca23-250e-48f4-86c1-f0ffe085e617",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a5b4a7-282e-4c70-ab26-e7c6a397d884",
        "cursor": {
          "ref": "a3ca4704-346c-470b-a50a-11041a9fb4ae",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "42adc36e-d307-440a-9db8-afe391963357"
        },
        "item": {
          "id": "a0a5b4a7-282e-4c70-ab26-e7c6a397d884",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3cec6a07-7df1-4203-b510-ebccc3c0bad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a62f2ed6-b216-4eba-90b4-a66774218f18",
        "cursor": {
          "ref": "4832adfa-8a71-4758-8e2a-1f51f17b8624",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "dd9ef7c5-2063-4be9-9386-ab9f4169e392"
        },
        "item": {
          "id": "a62f2ed6-b216-4eba-90b4-a66774218f18",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "641c0515-2c25-4da9-9f9e-7f192ed7abaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e20e54-5b67-452e-ba2f-8f31b5b0d9b3",
        "cursor": {
          "ref": "69c695cb-faca-4e9b-93f6-dfed6c7a25af",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7e3f7ed9-04b6-4e6a-b722-446bda63a037"
        },
        "item": {
          "id": "94e20e54-5b67-452e-ba2f-8f31b5b0d9b3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8db06d87-81e4-41bb-997f-e254fab5a587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b09c59-99e2-4150-b55e-05bd63fe52f0",
        "cursor": {
          "ref": "1c6d1bf2-198d-42ed-83d0-1d64b26b5d47",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2d0cd3a4-8ba2-4f65-8002-a53e51e8d2a9"
        },
        "item": {
          "id": "69b09c59-99e2-4150-b55e-05bd63fe52f0",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "80180b07-543d-4f4c-aa1f-f804c6d61254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb5410e-f30d-4200-ba56-56b38694fc09",
        "cursor": {
          "ref": "02a51026-7e2a-4d5c-9006-463f68ef7666",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5baf924e-1ccb-4e3f-b94a-70dade72c0ca"
        },
        "item": {
          "id": "5bb5410e-f30d-4200-ba56-56b38694fc09",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "cdc581c2-b627-4954-858d-d4ece524c0dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34eddcfe-4b03-415e-898d-57a7f2d8b8b5",
        "cursor": {
          "ref": "2784790e-effa-47c9-945c-85a11e3aeda5",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c3f056e3-6240-48e4-a0c0-4d55ccdf3cec"
        },
        "item": {
          "id": "34eddcfe-4b03-415e-898d-57a7f2d8b8b5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4d9a6b18-b1f0-4182-ad80-40b951222eb1",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "d85ce398-0919-4dd6-ac05-06bd4b491298",
        "cursor": {
          "ref": "12b3ef71-b1db-4cb8-a877-2e7197f8adf0",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "24fcd728-5642-41cc-8afe-0ea763e51664"
        },
        "item": {
          "id": "d85ce398-0919-4dd6-ac05-06bd4b491298",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bb3a99a8-977f-4cbf-9cd1-836310064506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d5abfd7-4ed0-4ead-bb39-be3a333f4323",
        "cursor": {
          "ref": "ba0cb2bb-5af7-4dee-b28c-d19971ae5e96",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bb04b368-43cd-4f01-b987-5e26563d5151"
        },
        "item": {
          "id": "8d5abfd7-4ed0-4ead-bb39-be3a333f4323",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "01e6c70a-2ec2-4215-a27c-46d04eb53dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ea6c62-89da-41b4-af47-7d7320ff56ef",
        "cursor": {
          "ref": "3c61dac0-295a-47eb-b8c4-83dc50512696",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0a99d373-6701-43c0-b63d-35ceb023c37e"
        },
        "item": {
          "id": "c5ea6c62-89da-41b4-af47-7d7320ff56ef",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "15f96e62-bc2a-460a-a18a-8301e786754c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28a96f4-c788-4d36-98fb-a67d6a53c30f",
        "cursor": {
          "ref": "f9fd37cc-fb53-4fbb-b886-c68347a1389c",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7ae755ed-f11c-45a9-9e63-8ac44f7a6d06"
        },
        "item": {
          "id": "a28a96f4-c788-4d36-98fb-a67d6a53c30f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4b2282d9-2d97-4458-a78f-5230bc444aed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95966520-33de-44ab-b429-144893cf046e",
        "cursor": {
          "ref": "b643fc07-0fae-48b0-b296-d99e69e90aec",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f72ea64b-8a93-476c-ab05-ae2c3c119dfd"
        },
        "item": {
          "id": "95966520-33de-44ab-b429-144893cf046e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5d27c32d-4885-4e7a-b067-23905a1ca6af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bacad7f3-6897-4245-b360-2de90abb55e6",
        "cursor": {
          "ref": "bd4c899f-50c0-4b1a-84c3-7213345b2c40",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0798bbce-254a-4d23-b23d-1eb85f61b6de"
        },
        "item": {
          "id": "bacad7f3-6897-4245-b360-2de90abb55e6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6e953c00-6930-4353-a7a3-f801c910f054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad06c23-339d-4dfe-9cf4-f51146bae939",
        "cursor": {
          "ref": "90c3a8a5-8ecf-4a3b-a7b8-9d03c47b5065",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "892d47d8-2479-49d6-bfb8-43c71ed14a20"
        },
        "item": {
          "id": "dad06c23-339d-4dfe-9cf4-f51146bae939",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a07a9f24-9813-4e33-b6db-fde2400ca197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c617c53-50ef-45de-9cce-e498e08f9515",
        "cursor": {
          "ref": "468ab783-cfd0-4da7-aee1-854285eb7542",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "bb69e6ab-a078-4238-ae1d-eee530f4e22a"
        },
        "item": {
          "id": "3c617c53-50ef-45de-9cce-e498e08f9515",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f0724f6a-3417-469b-9d15-d019dbdd1a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef2d80c-8e22-4ef9-9973-382e4091c035",
        "cursor": {
          "ref": "5f65e361-9a02-4272-bb3c-ffe27fc99fc0",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8d4e5038-906e-4f14-bc3d-8f5f1c003332"
        },
        "item": {
          "id": "2ef2d80c-8e22-4ef9-9973-382e4091c035",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a1930458-dce2-4423-b00d-46161ac63860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f594e144-395e-4919-b711-59cbff074fa1",
        "cursor": {
          "ref": "6499769a-8ed0-46e8-a6b8-08516b062cea",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d49a0df6-aa1b-4a8b-9036-417db9b48fb3"
        },
        "item": {
          "id": "f594e144-395e-4919-b711-59cbff074fa1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "18d4c32a-1c89-4b93-9524-bece447e2e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f40925bc-ea4e-4796-8f8d-ae5107fb1cd7",
        "cursor": {
          "ref": "b35371b3-b499-447f-b862-c64de29a73e5",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "be480b98-a2ce-4f30-a362-fc290788ac88"
        },
        "item": {
          "id": "f40925bc-ea4e-4796-8f8d-ae5107fb1cd7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0e356b8c-058c-4a56-8609-64104a27a328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f86635-ffb1-400e-b5d5-7c3a51ea8c76",
        "cursor": {
          "ref": "9985c943-a82f-42c6-a458-a00cab3abce1",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5c8971ec-bfc9-44c1-93bf-edaeaa6c46fc"
        },
        "item": {
          "id": "86f86635-ffb1-400e-b5d5-7c3a51ea8c76",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3abe8ba6-0760-4d4d-b94e-1a93818a4027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc632d7-d8bc-41e6-90ae-db05b4dd4539",
        "cursor": {
          "ref": "e555092c-5f76-4d78-b476-8ecc5bc581ff",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e91aa3e3-ec88-4fc3-9cc2-63c1c67224e7"
        },
        "item": {
          "id": "ccc632d7-d8bc-41e6-90ae-db05b4dd4539",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "4a9d838e-2ff9-4d02-9d45-f674aa572dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1e4fc8-086c-4fd6-a1bf-3300401bc1c5",
        "cursor": {
          "ref": "0c3fe63f-0a21-4e3c-ad86-ed4dc77158a4",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4d000ab6-ec2f-492d-9116-455d441744b6"
        },
        "item": {
          "id": "7a1e4fc8-086c-4fd6-a1bf-3300401bc1c5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4a70e086-0545-4326-b4fb-eecdaa585b14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1993a1-5fb0-414b-b0e4-37ccecc4dd58",
        "cursor": {
          "ref": "f2faf36a-0307-4c92-99b0-c8fdb3b4ad22",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4641fd7f-bff4-4372-ad96-92b0ffada2ec"
        },
        "item": {
          "id": "9b1993a1-5fb0-414b-b0e4-37ccecc4dd58",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1e79c898-507c-46a9-96d8-306eacc18e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e33eeb-3239-4e1b-8be0-cfe5ea4e4051",
        "cursor": {
          "ref": "e3341e9d-14c7-49ed-bba6-1cd3b79da7ae",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0346a81b-2cb3-41bd-8b8d-ab79c3a4d195"
        },
        "item": {
          "id": "57e33eeb-3239-4e1b-8be0-cfe5ea4e4051",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a70afb83-4a02-49e5-bad9-e6fe4c3398e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfe663c-a2ab-4d5a-93bc-2945efa8ea36",
        "cursor": {
          "ref": "0a38815b-9588-48f2-9c53-5804ffb05c8a",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1fceb760-511f-4083-8413-7b0d8373eb3c"
        },
        "item": {
          "id": "dbfe663c-a2ab-4d5a-93bc-2945efa8ea36",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d233b478-48da-4258-96e6-078e5fdc3990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf27aea8-f026-4bde-83fe-f9c28d15dfa9",
        "cursor": {
          "ref": "1e69b182-1bcc-4892-891e-3d5bf9aea317",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "dc3f5d98-4bb1-4729-97f8-a8dfe8444e39"
        },
        "item": {
          "id": "cf27aea8-f026-4bde-83fe-f9c28d15dfa9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "60a2ddba-a2e3-4af7-86ff-769971376b5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74cd289b-43be-4fb4-b0f4-f3eb201c06cf",
        "cursor": {
          "ref": "ed619d7c-bb8e-443c-acba-a5a41d4b6080",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a4e472e4-6ab9-43fc-b851-155d208d62ea"
        },
        "item": {
          "id": "74cd289b-43be-4fb4-b0f4-f3eb201c06cf",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a0829802-bba3-469b-8ff0-af36cc47fb7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a8ff3a-5f4e-4061-9147-8884e78600eb",
        "cursor": {
          "ref": "0a008c81-57fc-4e18-9c98-6db65711801e",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "14fe10d5-17a2-4dd2-96dc-5a96792d8a4d"
        },
        "item": {
          "id": "02a8ff3a-5f4e-4061-9147-8884e78600eb",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c6f06b07-587a-4d02-8971-dc017d31fbe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efe2762-1a8c-4741-985c-0db0ff7aade7",
        "cursor": {
          "ref": "4e2da0ae-aa4d-401d-87b9-1073af05185e",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "01fdf02d-d4a3-4e28-8a71-824f0f134d38"
        },
        "item": {
          "id": "9efe2762-1a8c-4741-985c-0db0ff7aade7",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "03247a9b-225d-422b-9a66-d21bf51c65d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1bf4b21-3aa0-409b-a465-15d0f079fca6",
        "cursor": {
          "ref": "2d9bfe1d-66f6-4c12-88c1-405fe9ad3def",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "686b53b0-82ed-43f0-9e41-663cf868dab8"
        },
        "item": {
          "id": "e1bf4b21-3aa0-409b-a465-15d0f079fca6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "985ac356-9672-4e80-b2ea-d3e691fbd7ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7ec01a-758d-4d93-ac25-6d164108a693",
        "cursor": {
          "ref": "5e77be63-e9d7-41a7-8d74-2969f85a3e23",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d849b6d2-d3ef-4234-93ea-a34bcc273573"
        },
        "item": {
          "id": "ad7ec01a-758d-4d93-ac25-6d164108a693",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c1cba7d1-e074-45f4-93e9-2d82bfdeb20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f8f3152-9fa8-4d32-a2d3-81eb1458ac16",
        "cursor": {
          "ref": "0e461d47-fcde-4612-86e1-0d8bf2620686",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4ee19200-6cc9-4ee7-8866-72bd88c6ef03"
        },
        "item": {
          "id": "9f8f3152-9fa8-4d32-a2d3-81eb1458ac16",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f4df37d0-d3b7-485d-a5ab-9d0a57212c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1ab4d3-3645-4135-996b-7ace62679a2c",
        "cursor": {
          "ref": "d21fa223-3806-4c49-833b-a8dbee6b3c14",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "301b8d5c-a2b6-4006-90b8-1ce948f8681c"
        },
        "item": {
          "id": "9c1ab4d3-3645-4135-996b-7ace62679a2c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "af071635-b51b-4281-b6cb-957ac7fe53cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd4d81d-f1be-4710-9f60-2c677c5d2299",
        "cursor": {
          "ref": "7638a46c-f088-4503-a239-813d81083cfa",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "af5ed748-4745-4627-9a88-a0a3152adc62"
        },
        "item": {
          "id": "cfd4d81d-f1be-4710-9f60-2c677c5d2299",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a42340c3-51d9-49ba-bbd3-fcdf056a1f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c771e7-e77b-4730-9c5e-262b849db34c",
        "cursor": {
          "ref": "3736d59c-b988-4c1c-a1a3-1beef7507efe",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "aa161da6-8b9c-4f1c-a8cf-23087eb09633"
        },
        "item": {
          "id": "c8c771e7-e77b-4730-9c5e-262b849db34c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "85db1882-0b48-4aaf-88a2-21737f118bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9dbed04-43d8-4d4d-a339-dd8750783935",
        "cursor": {
          "ref": "2fe15c8a-9db3-4b09-bb0f-dddc23202d52",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "663224c0-dfe6-48d0-b1c8-dd833285f568"
        },
        "item": {
          "id": "f9dbed04-43d8-4d4d-a339-dd8750783935",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "572a1961-966f-4c3a-b476-819c1a5d326b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c087580-306e-42c8-ab53-837bc83c6554",
        "cursor": {
          "ref": "28843181-bc03-43e0-8d6a-4bbfbf047669",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "257a1ecf-5bb2-49c0-b7f7-91936375ab36"
        },
        "item": {
          "id": "5c087580-306e-42c8-ab53-837bc83c6554",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6cc398b9-fa41-4d38-8f87-e6d071000a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12976b6c-0258-4ad4-a955-3dcd99feb4be",
        "cursor": {
          "ref": "85cda594-e7aa-46ab-b8e6-673d45c45602",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8c15834b-9186-47c9-bdd5-8494773cc424"
        },
        "item": {
          "id": "12976b6c-0258-4ad4-a955-3dcd99feb4be",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ef70706f-792c-4b87-9a02-268ca03d947b",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "cc341bdc-1066-42eb-beba-35244b3b2ea4",
        "cursor": {
          "ref": "bb4f01aa-2736-4553-ad61-3c4fb286a3c0",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "abf4e706-3d01-4cf3-9612-4a72feba7f82"
        },
        "item": {
          "id": "cc341bdc-1066-42eb-beba-35244b3b2ea4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f1ed9be7-b9bf-44f5-a796-fe0f8c605c0c",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "6b3d10c9-6a37-477b-8001-4ecdb737e707",
        "cursor": {
          "ref": "e9784b4f-5afb-4b24-aea6-1d218377d38d",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9ba04911-4bd8-48e3-96c2-70ceff2cc10c"
        },
        "item": {
          "id": "6b3d10c9-6a37-477b-8001-4ecdb737e707",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "684a8c25-5d92-4334-9949-aa3af3b0ac62",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "bc780010-bf29-4884-b4f9-0d4ac1c98415",
        "cursor": {
          "ref": "a3d74fb6-4d16-4035-9788-d5d9f8ba9239",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4cff4565-94e5-43e4-9de8-32a4ec590f1d"
        },
        "item": {
          "id": "bc780010-bf29-4884-b4f9-0d4ac1c98415",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "123ae956-aa93-48f1-a115-150bf07b8db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b663b19d-8d0c-41ca-8f42-886650527156",
        "cursor": {
          "ref": "8c3af17c-02fe-4c49-879d-c44c588fa035",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b176a477-f8b9-4a73-afae-aa62962eb2ce"
        },
        "item": {
          "id": "b663b19d-8d0c-41ca-8f42-886650527156",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e6c75382-2865-4cf2-98a3-1842ebc531d0",
          "status": "OK",
          "code": 200,
          "responseTime": 263,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "06db3f9b-b9dc-40eb-8e05-64a1006a1f75",
        "cursor": {
          "ref": "e45bfefd-933d-4014-b0a7-326de1349377",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f978e62d-2de7-4387-b01d-08e246e2a2c8"
        },
        "item": {
          "id": "06db3f9b-b9dc-40eb-8e05-64a1006a1f75",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0a6342f4-60ce-44c6-8d6c-e8f81fbe23c8",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "fa00ea0b-3cd6-41d7-aa68-bf07be970e18",
        "cursor": {
          "ref": "1248cdec-4f7d-42f8-87b5-ce7edf09303c",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b5434ebe-3faf-4f9d-a49d-46a81fcc606a"
        },
        "item": {
          "id": "fa00ea0b-3cd6-41d7-aa68-bf07be970e18",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d04e9c7d-8e2d-49e8-a0f5-81b20489c363",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "51bca03a-b36e-4c57-b7cf-414caca1e142",
        "cursor": {
          "ref": "529079cc-740f-44ae-b8bc-aff4755d04b6",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "85f9db85-6257-4afc-9335-caa6cebdc2fc"
        },
        "item": {
          "id": "51bca03a-b36e-4c57-b7cf-414caca1e142",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6e4ec6c2-a530-4a99-a0d5-7aa7f3c7d3e2",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "24c5911d-393a-4d99-8a69-131c15dccfce",
        "cursor": {
          "ref": "ba854299-8a50-4749-8668-44d5b6cf6280",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "12e7a958-d7fb-4791-bba2-69269e0828db"
        },
        "item": {
          "id": "24c5911d-393a-4d99-8a69-131c15dccfce",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "37dd832e-a476-45a4-a7e1-f1fd307763e0",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "d35d55c9-4fd3-4ac9-8aba-1c69bfd2222a",
        "cursor": {
          "ref": "cdce7d08-713a-4824-90d8-8b14be8160e0",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "31bfdeb5-7e75-42e5-ab79-6dab88434306"
        },
        "item": {
          "id": "d35d55c9-4fd3-4ac9-8aba-1c69bfd2222a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0ea1e732-a5cb-439c-8be4-3fdd209fc88b",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "d3d7b113-9b00-4859-a98e-1ebfc4437435",
        "cursor": {
          "ref": "6bedfc33-5d05-46f6-9678-6484bf1a6a85",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "07471396-d813-45e3-ad65-160ac883d4df"
        },
        "item": {
          "id": "d3d7b113-9b00-4859-a98e-1ebfc4437435",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9a00491f-aa98-4600-9dfd-0242aa878c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b4b1c3-b9af-4997-8f8d-e3d1eec7cc2b",
        "cursor": {
          "ref": "676729d3-7448-4960-8ea9-be69d106cbae",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "68873b02-60f8-4160-9e91-939493fc180f"
        },
        "item": {
          "id": "40b4b1c3-b9af-4997-8f8d-e3d1eec7cc2b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "fdbe5d47-f826-4d51-9d7a-901582c691c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9320ca06-e672-4c6e-aa98-3da4d54a2a79",
        "cursor": {
          "ref": "68e58d51-776c-40ad-a8b3-b44d5c32cf37",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c79fc438-b1ae-4145-a9ff-1138cb8b846e"
        },
        "item": {
          "id": "9320ca06-e672-4c6e-aa98-3da4d54a2a79",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b36f27d0-aed6-420d-80c4-66a004bea73f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600bd703-482f-4cce-b76e-aaa30d570152",
        "cursor": {
          "ref": "df8a21c2-ef17-4071-bb74-700528c6091a",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "eab66369-26f2-4d4f-88c9-e7229914a9f5"
        },
        "item": {
          "id": "600bd703-482f-4cce-b76e-aaa30d570152",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9f9b7745-b772-4879-8e8e-a3dcc40180c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5662f692-48e9-43b7-ac73-d671657f9347",
        "cursor": {
          "ref": "ce3e0a15-2050-457a-be0c-5c3010410cf2",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ab7cd013-b50a-493f-a899-a176fc2165d9"
        },
        "item": {
          "id": "5662f692-48e9-43b7-ac73-d671657f9347",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "662f3e34-0554-438f-bc62-64955483589d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75808461-fe44-4b8f-b5d5-37826f9ca957",
        "cursor": {
          "ref": "33f585a3-85a8-41c1-bde6-4aed1f915007",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1d56949c-3c65-4a76-94b4-238de694abf3"
        },
        "item": {
          "id": "75808461-fe44-4b8f-b5d5-37826f9ca957",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ed96eddd-4a1c-44b4-9679-5206d8b85c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152001a1-cf8b-469f-aa45-12b5e2f047f8",
        "cursor": {
          "ref": "a252cb38-61fb-47eb-a804-4b9d5b4ff87d",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "195c87c6-f048-44e9-9b83-b9a7b2d5f34d"
        },
        "item": {
          "id": "152001a1-cf8b-469f-aa45-12b5e2f047f8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ce45ddcd-11d2-4677-a0da-7a99e645116f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac97b849-59d6-4182-92c6-0dd7e746f28e",
        "cursor": {
          "ref": "13af628b-456a-4b62-894f-303497239b4e",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5516c8ea-6a64-4d5e-a02a-4161445cecef"
        },
        "item": {
          "id": "ac97b849-59d6-4182-92c6-0dd7e746f28e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ef3bb5e7-9eaa-413e-bc81-34bea1087207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67ba7f3-2c94-46ea-80a1-f879bfcb0591",
        "cursor": {
          "ref": "00b863ca-e99f-42c5-9ae3-e8306faa9d72",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2cbf461b-3c0d-4022-9dec-ac1ba23a6e66"
        },
        "item": {
          "id": "a67ba7f3-2c94-46ea-80a1-f879bfcb0591",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8b874a02-2f4b-402c-9a29-9beb82fd33f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16eb9b3-29b2-4dee-b8e0-fe3d57e067a7",
        "cursor": {
          "ref": "809dc8d7-a9a5-4678-9373-bcb0ab85123d",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d8938610-8c20-4832-8a51-c597ea6bbb22"
        },
        "item": {
          "id": "b16eb9b3-29b2-4dee-b8e0-fe3d57e067a7",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c783d426-2f11-4f25-9c61-49ebe13b0250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67492f0a-78b4-42b4-b7c5-4e1dafb5cf8d",
        "cursor": {
          "ref": "81be7d38-75bd-47ae-97e0-6e93c9929a11",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ec14cea5-d728-44e3-9748-55b6b2683ce3"
        },
        "item": {
          "id": "67492f0a-78b4-42b4-b7c5-4e1dafb5cf8d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d2233682-a427-48a5-810b-d72ba9b2b3bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb04d38-5d9e-452b-899e-7471d69fcc28",
        "cursor": {
          "ref": "51f8aac1-f38d-4f90-badc-63341ad4fa9d",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "596543af-7409-4a5b-b0b0-a3064918db08"
        },
        "item": {
          "id": "ecb04d38-5d9e-452b-899e-7471d69fcc28",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "09a6ae65-bc32-4fab-99da-371d3bd91c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d47aaba3-9326-4c36-8569-78eabbdb13e8",
        "cursor": {
          "ref": "965e3e23-3b5e-4bfa-a7af-b1b0b3ce1d33",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "91f5778d-02c0-46c1-aaab-bfff37f43eb8"
        },
        "item": {
          "id": "d47aaba3-9326-4c36-8569-78eabbdb13e8",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0605f12c-3e37-4fab-8a8f-a90868068b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a1e1ee6-7348-4042-b188-8f49105b4d48",
        "cursor": {
          "ref": "5ddbb499-6156-4066-acd8-0eb8b2a8303a",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9ac6b7ce-5eb6-41eb-972f-15e5b13edf09"
        },
        "item": {
          "id": "3a1e1ee6-7348-4042-b188-8f49105b4d48",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ca615146-fd7e-4b83-ac66-4ccdabcb204d",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7bbadd5f-00ad-4277-a3fa-ec74a423f90c",
        "cursor": {
          "ref": "a0f7fea2-aa04-43ab-9cfa-4533792c4bda",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "28e82ab7-7068-4f4d-9cc0-f2d45947e1e8"
        },
        "item": {
          "id": "7bbadd5f-00ad-4277-a3fa-ec74a423f90c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "cdd0c1a3-ea22-4b53-b9f9-c093d325253f",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "61498ed5-961f-46da-ac2c-d844ec4a0112",
        "cursor": {
          "ref": "a0b96417-0fdc-4adc-ad66-5dddc1fde8ac",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "67cb5a9b-edd1-4b79-b1a1-205704bd9621"
        },
        "item": {
          "id": "61498ed5-961f-46da-ac2c-d844ec4a0112",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "37d27e27-0fc2-491b-a437-b5d972dc5812",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "cf13ad98-e021-45ce-9927-d48f11f97208",
        "cursor": {
          "ref": "37747c11-ccba-4289-9aac-fa2ff869f1b0",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "884c65d6-0b02-408d-8b68-9a468983f465"
        },
        "item": {
          "id": "cf13ad98-e021-45ce-9927-d48f11f97208",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "488bc72f-4011-4548-a751-8c40f3a7bc3d",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c273858d-cb0a-4d2a-8df8-05869143ac10",
        "cursor": {
          "ref": "b488a68e-66b7-4cf6-92d0-1cf613d4813b",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "349e0642-8a6c-45a0-9ce4-457f877294aa"
        },
        "item": {
          "id": "c273858d-cb0a-4d2a-8df8-05869143ac10",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "dabf1df6-76dd-422a-b989-ef11e4804ac3",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "935839d3-c2f4-4ef9-9795-a25aac10b24c",
        "cursor": {
          "ref": "8c71c69e-9a26-4711-b132-047101b25148",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e4acc4f0-6058-407f-887a-082778edd052"
        },
        "item": {
          "id": "935839d3-c2f4-4ef9-9795-a25aac10b24c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1b961557-67a4-4c82-96b2-a0ad178c9894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef107ec7-8e33-4ecf-b52a-183839af2843",
        "cursor": {
          "ref": "ab375e99-8c35-4145-96ab-6849cb0ffc32",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "00761f19-065b-4cb1-ba5a-887b482c7d5c"
        },
        "item": {
          "id": "ef107ec7-8e33-4ecf-b52a-183839af2843",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "76769f0b-1f44-4798-8815-4bec054dbc37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67241ca5-67d9-4ebf-84b8-05606db0dbbb",
        "cursor": {
          "ref": "b5b052d7-5a31-42f1-bd3a-72bbb9dfd2f0",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "fc4e15c6-50fb-4bc4-b2ce-9a0204f73858"
        },
        "item": {
          "id": "67241ca5-67d9-4ebf-84b8-05606db0dbbb",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "774986d5-db4e-418d-aeb1-713652ab76ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c39336-8f9f-4b8a-a597-f908550621d1",
        "cursor": {
          "ref": "0e4eeae4-0af9-4075-b900-1ec297a8f2ce",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "de3b5f6a-2f43-4981-b671-88ade90e9422"
        },
        "item": {
          "id": "75c39336-8f9f-4b8a-a597-f908550621d1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "77799d98-f838-470c-a619-34db057064eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88e0c353-38c4-458e-b7be-38ce95d8e027",
        "cursor": {
          "ref": "09229d9b-2ebe-4da4-898f-0905af8d31c5",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6dd8ed3b-3b7b-4729-bbdc-8c5c178259fd"
        },
        "item": {
          "id": "88e0c353-38c4-458e-b7be-38ce95d8e027",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "bfc57324-3f21-4902-ba3f-ea4cf00f518b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b96fde3f-ffbb-42d5-8532-76e2f4e312c4",
        "cursor": {
          "ref": "5f9fea5b-8736-402d-adc3-b37474c1c4a1",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f9cde44d-4766-4459-811f-a238da8e327f"
        },
        "item": {
          "id": "b96fde3f-ffbb-42d5-8532-76e2f4e312c4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "75647ae7-3c7e-487c-9adc-66dad600f04d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53501277-6ddf-471d-8d7e-6705a10cd6ab",
        "cursor": {
          "ref": "782b469f-4f80-4a0e-8c73-e6be37b964a1",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ee3f2b42-ece2-440b-b896-dcc92ab4d774"
        },
        "item": {
          "id": "53501277-6ddf-471d-8d7e-6705a10cd6ab",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "34ed3383-8f78-4f83-ac29-6ff051c88ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4949aea7-1b28-4860-8567-98e7fd5ac056",
        "cursor": {
          "ref": "b0ea8978-cd21-4f99-ad53-2955709feb22",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d41c84a5-4379-4aac-b781-adbf3135fd14"
        },
        "item": {
          "id": "4949aea7-1b28-4860-8567-98e7fd5ac056",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "25515294-f530-4ec7-a2a8-10da03430875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a533dd-78bd-495b-ad88-65b3b2062770",
        "cursor": {
          "ref": "1f92a847-a8c4-4ab2-8eac-f9d357ca5c4a",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f829e9f7-0ad8-4d76-aa22-38d83931f779"
        },
        "item": {
          "id": "c6a533dd-78bd-495b-ad88-65b3b2062770",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "946d981b-03e3-40a5-839f-aa5dc4861590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d0828fb-2372-4161-a56b-df373080cdac",
        "cursor": {
          "ref": "c9eea5e2-009b-46f2-b6e0-d040b3fc5aca",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ccb67ea1-b1b3-4209-8e69-cf1009e863a2"
        },
        "item": {
          "id": "4d0828fb-2372-4161-a56b-df373080cdac",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9f5c3fe5-684d-49e3-858d-f5935f0c689f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65812c7e-d2d1-4c9a-8920-dcd998d62cfe",
        "cursor": {
          "ref": "84e643c6-4e66-4f6c-a531-131a38330f34",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a448baa7-ffd7-4cc8-b730-4e30636df302"
        },
        "item": {
          "id": "65812c7e-d2d1-4c9a-8920-dcd998d62cfe",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "07a8aeb6-2479-4fa6-a173-329dd2efb112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbcf0f3-df5d-4461-a0ab-e5f268ebe607",
        "cursor": {
          "ref": "c8e05f2f-b0f6-4a13-b5ea-406f5147cbd5",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "77beed9d-b8d9-492d-bca6-23beb7956925"
        },
        "item": {
          "id": "fdbcf0f3-df5d-4461-a0ab-e5f268ebe607",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8ee51532-2f5b-4488-bd76-2bcb1fbee17f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83070aa9-447f-47a9-9917-490b1fafe4a2",
        "cursor": {
          "ref": "c301eef2-a217-4b33-a451-1055f9483b65",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "b3dfade7-896c-479b-80ea-cf56228c8127"
        },
        "item": {
          "id": "83070aa9-447f-47a9-9917-490b1fafe4a2",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "45c1d2b5-8b27-414f-bf74-b0bd6a05631b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d67060-cbf4-4907-81ce-fdf6e7c846af",
        "cursor": {
          "ref": "6968e9c3-1a9a-493c-a250-297b9bc21a3b",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "bc001c09-cb89-4689-9f6c-f8818c9b4742"
        },
        "item": {
          "id": "45d67060-cbf4-4907-81ce-fdf6e7c846af",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "823827d7-aecf-4a2a-a6d9-a8d8a5bc85c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c454f48a-8c4b-48c1-9bf5-1e32dcd5c157",
        "cursor": {
          "ref": "2f5879e3-b6f0-41b6-9241-60a4220e4a33",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "9598f79c-747e-4215-bc17-04b3f3ffa03b"
        },
        "item": {
          "id": "c454f48a-8c4b-48c1-9bf5-1e32dcd5c157",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "15b3aa15-4dc3-4cb7-ad0e-bd653f06f74a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e68bfe4-4490-4913-8570-1251435d0920",
        "cursor": {
          "ref": "9c0c541b-75d6-4869-9401-fabcd4ee1576",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "931633a0-13a3-43b7-82b3-6f79a029f0b0"
        },
        "item": {
          "id": "1e68bfe4-4490-4913-8570-1251435d0920",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8a287b02-a99e-4d0a-a76f-75bec6bee781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c99762-cf3a-42a5-992f-62bc0aa1b96e",
        "cursor": {
          "ref": "04df2b38-ae70-4b7e-ac5d-af93342b4ed3",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "c6a8407c-0876-4525-b0cb-be3feebbcec5"
        },
        "item": {
          "id": "75c99762-cf3a-42a5-992f-62bc0aa1b96e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b1831545-703b-4a99-9689-d6f092795761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2625b8-9acc-4aef-878b-c64b36a055a1",
        "cursor": {
          "ref": "f58f05f3-41c8-43be-baad-a30500757ae2",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "ff7bc348-0a55-46d9-b9cc-5e296683d7dc"
        },
        "item": {
          "id": "4f2625b8-9acc-4aef-878b-c64b36a055a1",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "069cc905-a152-49b1-8eca-21fa1efb78f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be18804b-522d-4b9e-883a-bd66dfd970c1",
        "cursor": {
          "ref": "2e0d0240-ca44-4304-b762-a6db9e98c975",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "fb363dde-901a-4728-8cd9-f71566738e54"
        },
        "item": {
          "id": "be18804b-522d-4b9e-883a-bd66dfd970c1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "754124e2-aa19-4d70-b39a-8fd790b142ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b66a0b-5c09-48f4-a655-2ce0adc2fade",
        "cursor": {
          "ref": "1e9f8452-b5f2-4fea-b30d-feecbe034d89",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "99f78aa3-7c33-4ded-90c9-2cf3d5a7b55a"
        },
        "item": {
          "id": "12b66a0b-5c09-48f4-a655-2ce0adc2fade",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c546f4b5-ee0a-4a0d-beff-77f0fbc624a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04059be5-fdeb-486c-bd1e-50cbd5cf90c2",
        "cursor": {
          "ref": "6cff9237-e9d0-4b72-8f53-0c698c40e496",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "559ba0d0-46fd-4a54-a02e-90e087210eb4"
        },
        "item": {
          "id": "04059be5-fdeb-486c-bd1e-50cbd5cf90c2",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c9a4e53b-1154-4fa0-8013-f6f151aec7ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f4feb7-bd79-4c0d-9e66-05ead2ee569a",
        "cursor": {
          "ref": "36ce29af-d59f-4db8-90b2-61fb77615494",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "5f14f13c-3ea8-4ce2-b583-f1b17ff0bc46"
        },
        "item": {
          "id": "f9f4feb7-bd79-4c0d-9e66-05ead2ee569a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c0fa5a37-a3f1-46dd-839b-fdda4c9cb0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b853dc7c-04f1-4a9e-af10-f098f3ae4407",
        "cursor": {
          "ref": "3fbaa80f-b614-4bcd-ab87-5dcb910adfe1",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "357cb84f-509d-49f7-98a5-4e7265794e78"
        },
        "item": {
          "id": "b853dc7c-04f1-4a9e-af10-f098f3ae4407",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3c0a879b-9610-48bd-9fb5-953490aef985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99610a8-5726-4c0f-99ca-85296858774e",
        "cursor": {
          "ref": "c72b1f7e-7266-4f35-ae29-74a3a80bd240",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "d41d5ba9-e628-4ce8-af88-17d653250a17"
        },
        "item": {
          "id": "b99610a8-5726-4c0f-99ca-85296858774e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "414a7007-e71c-4fd8-abfc-3e2ec4cb6826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "797b1531-cacc-4dc1-a672-65be824206a7",
        "cursor": {
          "ref": "aeb6ac6a-a6f3-40f0-b3e0-09beeb5e3e25",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "ce3ce310-9d76-45c0-aea0-55b990bc7060"
        },
        "item": {
          "id": "797b1531-cacc-4dc1-a672-65be824206a7",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3cf34239-b868-4b35-9092-d141b6567e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "492e5ddb-893f-4573-8632-5c15e399710e",
        "cursor": {
          "ref": "996e95a4-a35c-4c80-8819-7d291839fe5e",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "01e1c222-6061-420c-82c6-93613aacf2f5"
        },
        "item": {
          "id": "492e5ddb-893f-4573-8632-5c15e399710e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c4534767-1219-4deb-b4a6-d01879365aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc8178b-ce71-44f7-ba27-88633ed9a969",
        "cursor": {
          "ref": "c62c4254-9133-4787-8301-5e4b6e35a621",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "572c3e01-6366-42f9-b6f4-384a9b6ea132"
        },
        "item": {
          "id": "3bc8178b-ce71-44f7-ba27-88633ed9a969",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e20eec08-a233-411b-947c-996658749ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249bba0c-c6ce-40b5-be5d-a4f5f7ecd5ed",
        "cursor": {
          "ref": "90ba26f6-ef6a-4ca6-b240-6cd874627e55",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "05e91aa3-611d-4efc-946b-9505362fdc17"
        },
        "item": {
          "id": "249bba0c-c6ce-40b5-be5d-a4f5f7ecd5ed",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "13f450c9-3dab-41a7-94a7-40b9c5fcf16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580291d8-6821-4574-8869-73e1e2047b99",
        "cursor": {
          "ref": "a32f678c-c2b0-4612-a3ed-e72736e5029e",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "b7eeb27a-d762-41ba-bd5c-b048825b1d9d"
        },
        "item": {
          "id": "580291d8-6821-4574-8869-73e1e2047b99",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "05348a59-37e3-4b7c-ad17-a965a6efb971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65da5502-b395-4a64-8c24-6c12ee4a9ac8",
        "cursor": {
          "ref": "ea159ccd-9a8b-492c-b5f4-58c4fa0c5760",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "283e5a0b-6853-4857-a22b-5cb83b39a2e5"
        },
        "item": {
          "id": "65da5502-b395-4a64-8c24-6c12ee4a9ac8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "bf2402d4-3269-4fc4-8af4-6ec386fbf91e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac60d6be-ccaf-4a0a-a66b-a5bd44631894",
        "cursor": {
          "ref": "5edebbdd-d3b1-4cb3-ad25-8ac89cd20d7d",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "d73deebe-36c9-4823-9613-29038d629de2"
        },
        "item": {
          "id": "ac60d6be-ccaf-4a0a-a66b-a5bd44631894",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "35083c53-ce8a-4df8-8a61-bbef6611ee3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4847cbe-bdc3-47d6-b879-7c06f35e4110",
        "cursor": {
          "ref": "52efd639-86d1-4b85-a919-03ea31632bba",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "803d1b13-ca2c-457d-8eef-8404ec4bec57"
        },
        "item": {
          "id": "d4847cbe-bdc3-47d6-b879-7c06f35e4110",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c1bf7926-295d-41dd-bbd3-a0ac00857c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "639ee538-775d-40d5-aaf7-7a388e61b05c",
        "cursor": {
          "ref": "523abf4c-26ec-4e1a-b529-924445862d59",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "c9241618-7d5b-447d-952f-d7e79deffd2f"
        },
        "item": {
          "id": "639ee538-775d-40d5-aaf7-7a388e61b05c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5f90dc59-987d-4fa3-8c7d-2d6795ef5243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7e7dd4-3aa6-4227-8fd1-04bb97a360a0",
        "cursor": {
          "ref": "fbb0fb5e-cbc5-4f93-8e59-1a1171d7a03e",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "5f171790-9ecb-4b92-96f4-6dd4ebdefa27"
        },
        "item": {
          "id": "1a7e7dd4-3aa6-4227-8fd1-04bb97a360a0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5ebc9aeb-2ece-46a9-b6e8-1befec417101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2dc2baa-2fe1-4e8a-9ff8-00b6a9a4241b",
        "cursor": {
          "ref": "fb2dd557-6af9-411f-80af-077526616071",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "488aaac0-9784-42dd-bfa4-53abadf6fe46"
        },
        "item": {
          "id": "c2dc2baa-2fe1-4e8a-9ff8-00b6a9a4241b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ebea8266-aff7-4e5d-9b96-a7c4a5679e3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a1a19c6-1258-437f-9957-552626bda5e8",
        "cursor": {
          "ref": "da1dfabb-2804-49e8-8e24-5b075cdc77ba",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "4098ff73-fc3a-4edd-9a4f-c9e7e4474487"
        },
        "item": {
          "id": "3a1a19c6-1258-437f-9957-552626bda5e8",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d1b63269-89e1-49fd-adbf-b7cbd009201a",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "93dc86bc-48aa-416d-8f86-05327e97cb6b",
        "cursor": {
          "ref": "8177e0b0-bd94-4de9-97eb-9b110e36fb5b",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "7c7d38c5-e75a-4664-a3ea-285f56ee8b50"
        },
        "item": {
          "id": "93dc86bc-48aa-416d-8f86-05327e97cb6b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c1130003-d572-4f20-87c3-a037068b816a",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "277d2d84-0e94-40af-b67c-6ddc42cda95d",
        "cursor": {
          "ref": "f937409c-8714-40c2-bfbc-accd32faf9ec",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "3262468b-721c-4616-b4e2-a6fb0773261b"
        },
        "item": {
          "id": "277d2d84-0e94-40af-b67c-6ddc42cda95d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8f1e0b55-a306-435d-9f21-bec2734400f4",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "924c53a4-8a26-413c-af5d-4c5fa6b7b23c",
        "cursor": {
          "ref": "8fea8aaa-8950-41e8-9e3e-49143cda497d",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b824e4c0-c540-47f5-b166-44787a1131ad"
        },
        "item": {
          "id": "924c53a4-8a26-413c-af5d-4c5fa6b7b23c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "19a5a995-74bb-4562-82b9-654acf680840",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924c53a4-8a26-413c-af5d-4c5fa6b7b23c",
        "cursor": {
          "ref": "8fea8aaa-8950-41e8-9e3e-49143cda497d",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b824e4c0-c540-47f5-b166-44787a1131ad"
        },
        "item": {
          "id": "924c53a4-8a26-413c-af5d-4c5fa6b7b23c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "19a5a995-74bb-4562-82b9-654acf680840",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8102080-3466-4697-a209-b628ea5f63c6",
        "cursor": {
          "ref": "a96da011-d32f-4119-8b87-24b72a240423",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "0caf1b02-4057-4ae0-9952-cb845da1e4d2"
        },
        "item": {
          "id": "d8102080-3466-4697-a209-b628ea5f63c6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "195b4de0-b361-42d5-a8c1-08596f93a737",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "421c8808-0533-4d0e-a2c0-8879566ae45a",
        "cursor": {
          "ref": "62655d6c-bc6a-4a51-8e6f-453fbe2571ad",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "79a8509e-2999-49c0-9ed8-7348f8cbca44"
        },
        "item": {
          "id": "421c8808-0533-4d0e-a2c0-8879566ae45a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "94affef4-e698-48c7-a833-8ceb06b88892",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}