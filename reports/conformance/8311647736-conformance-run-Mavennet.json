{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "138b873c-9ed8-4ad7-a43c-699eb345e9b8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "41b1612a-423b-4b92-a73c-21a968a13d2b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5bf1b4d1-9916-4c7d-b3e2-ab2146477c87",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "73af8e1b-b01b-4e69-9850-863c04fb9f63"
                }
              }
            ]
          },
          {
            "id": "f0d8c8a4-670a-4bc3-8c36-7b80d7138a7f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "37dc31c1-f4b5-400b-8319-f110640d3f26",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e0e35820-6c1f-49da-91c7-44bf65d8de74"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0738713f-1e06-4b50-8173-6ff3fb824208",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a72a31ef-5a53-48e9-8fe3-70e0a8566568",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eac8fc33-e748-4fea-b296-60e1b9a9f712",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1af01bfc-48d1-49b3-b33d-f6971cdde43d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e86fa4e-8aff-433b-963c-788176cbf0ab"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7def7a57-9aa7-4daa-88b0-93ce7ee9e042",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0f94eb38-a53f-4071-af8f-4b9d7459393e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e53d4ba8-ebdb-468f-96f4-83da6da362b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e761b051-f80f-4ab2-b5cd-64896a504071"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3b609c6-d0e0-47fd-b93f-39ec2f8519e8",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7041a372-2813-47d4-bb48-c700a2753e25"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f39a0084-da11-4cf9-88bf-77e27229c13d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0738b050-bff8-4e4f-aab2-67d16255c4b4"
            }
          }
        ]
      },
      {
        "id": "5bb02cce-ea24-4e80-b3a2-3884afba43de",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3020eaa3-e148-4ec6-8b3f-b256ad9d71dd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "03f38c86-8aa9-4f9e-af9b-3b367e804722",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3ce4bfe2-bf18-47e8-8ea7-813585e47290",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f080d4c1-7b63-463a-a402-231119cb5466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65cbba1a-15ec-48f5-825f-03bc0856efac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa090589-1638-4914-ac14-64628a0d2582",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6da698-bbad-4343-b656-f47dbbaf5706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f4a1d66-2302-4c0f-88de-491af1340d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e6fb50-e8b7-41aa-9dcb-4e982f8b5ac9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3bbe21-b601-4bcb-bad9-5b736d05e973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d284f13c-2105-474e-b6c6-6c6171e508c1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5e194a18-c908-43fc-8ec1-699b8f429bd3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7a3c8cdb-6ec2-479e-809c-b6a6ac44cba3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3527b817-2b7a-4940-82a7-e4c3d912ac45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b047753-e97d-47e8-90ff-57d06c4d3385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106a2365-9873-4d7e-8179-bc73395dc85d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78a70204-f884-4723-9ee7-b1fce09f9537"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9c07dec6-7aab-488c-bb77-7e2a1b22b979",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cd1aff13-9fa9-4e60-a988-23082ef5fbd9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "31d7f9b0-c2ac-4ab2-8161-72cc625593cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "977ad8ca-a3e8-4472-aa92-d3c5387fc180"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c50c1d18-a2a5-4d5e-b46b-b944319e8ee4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "0dc1912a-12fa-4bea-8a2a-bbce80ad9684"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95c52ea4-6d42-4235-bc22-9bb212ec3a6c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b8f362b-bf58-4a1e-9b5a-5c8002c804a9"
            }
          }
        ]
      },
      {
        "id": "4f32b868-1957-49a2-86a6-3fb95dec0165",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "21f5234c-7f45-4b12-a19c-3f61bbeb8d5e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b46b3d94-9ea1-442c-bfeb-9f35b81ea0d8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0b5c2d0a-7373-4334-9045-73cae436b3a0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d002c80-8ea8-48ad-907f-1b6a581328cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0fd6038-a017-4d4b-9975-cf6490e8839d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6798e93-a3b5-4919-bdd5-5f7d1057da5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f07021db-17a3-41a7-973c-7c930d852594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68a8d14-e821-4331-b037-4903f38e94ab",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb0739c-b2c6-474a-943e-8d1ea3ca084c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20dcb336-fcd0-49ba-91d4-1951f4b3fb62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d51e426-9157-441c-89a2-ded7e05c793a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca68d352-53d5-4a33-b350-2821ffca771a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f01e084-10a6-4093-9cb8-10a9b5f04cb4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "977ec933-6054-4c8f-abde-30879c2379a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d7d8150-b931-4a19-9a7b-e36c99857462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c47b43-d496-42e7-9be2-67de5d374897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97215549-aba9-475c-ba08-37a9a0e07a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72067faa-3eb3-4840-868c-4dce53dc7d7f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c62c1e3-6d8f-448b-a128-5975d026465d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3d53b29-15dd-4b98-8dc6-710b0d57fc35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9760b3-c7ed-4ba4-bfff-65abc110b66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab449574-6c20-4dda-bc89-e4198d4ea074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec34c1e-6b81-49d2-b8ba-d20776eae917",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ebc3b4-46ac-4a8b-87f0-a9e35f41b200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd6bdc59-ca2d-4e54-9da2-761d2a2a59d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d3fed60-a40f-4b56-9309-f551ce60e491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84c8dab2-dc4b-4777-b2f8-63548942792c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01268614-d162-42e2-ac13-9c4cdd24e4b0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb33d3f-7cd5-4b2f-912f-05312bb9e3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "112ecbfb-ad24-4a36-abf5-805583cd2a2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1780ad48-f10b-40b0-a95e-8ec321775816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "681485fe-a955-41d9-9c24-c4273fc2d797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a3ece8-afaa-4e6c-bd46-d071854a61bf",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "484c7a2e-0f63-4822-85a2-c6f242df1708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80524781-6972-4463-8bb6-e17a9650552b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b25683a-1ff8-4a36-be85-b1e2f29aeb2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2dd1cbdc-d10b-4ed1-9200-36b94022df87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "765e42a2-a558-465e-a620-d3bc16567130",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2daac54f-7bfb-4ef7-86e3-8fef3bb9fcbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ed11cb-bdf2-4bd9-a3a0-037ff1d0e29d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0bfd29-6713-4a05-9748-f04bf80d5daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "585fc546-fe02-4b7a-a948-2782b4e8b8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db4425a7-5e6e-4051-ac74-6e38e76b4880",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "649e2935-3e21-4128-bf98-09e96467515a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ab0008-fc4d-4a0f-a06e-f58d4a24b04b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced0598b-f2b6-4dbf-bd90-b0da2a73894b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ba96401-5183-4162-bcd0-486da0961cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e135156-7580-4731-8828-46050d5af399",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dede0f1a-c9b4-449b-b560-417aec8bbdfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3962da-cfd3-423a-b087-f7b3020d17a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb526556-e0b8-4ba0-9be9-c028f52132e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab7aaad4-1835-483c-994f-bf59b59a498d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7bc751-4326-4a54-ab9a-08c7e9ed1769",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3391d7e6-8023-47c6-9a66-ac1210beeb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f5adf4-4d54-4cca-aadb-0e6d5f36e0ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03c8de6-a9aa-4f2c-b535-124fd23e031a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06a01ad7-1834-4e47-bff7-9101a42e66c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0d3d36-b210-4a3b-bf16-ea3ba4b96ea9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f48649-48c1-413e-b181-6b51bbafa0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89074f29-46ec-413d-ad97-c9b4c6fcb58c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e9a06f-36c0-4ee4-a276-c460f13f5398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae2349b8-ac09-4759-973a-58660b104846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70033dad-8514-4def-85ea-2b604942402c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e6ca046-3793-4e69-bb17-040a51a4cead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee9fc5fc-3247-43c1-8380-7d31bb6629fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88fd0f79-003d-44c3-86ee-1965fb15a556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59ff3011-2ad5-4fec-8736-4752bc2ef042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32dff1aa-6c08-4130-ad40-5ffdd442c7b0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10d68f2-8b6b-487b-b081-65fc53b4a2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "938213c9-0857-413a-958f-4e439da0f399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b0fe08-b7f3-4ac7-b10a-9feec284ef66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50bcd3cb-3941-4b7e-9de5-711a9ce2c7af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9757ebe9-5054-4350-96e0-d6ab40780710",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "197d6eee-90a9-4e84-8706-1fc21eedb193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bfa8d30-68d8-4c4d-9562-64b27ba2c32d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207fe072-07d0-48d9-a6b3-24b0385cac0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "234ff17c-e929-49c1-8dca-a589912b80b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e1748e-d1b4-49d8-b44b-bdd8d08499be",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1382f8-b25a-4a46-999c-337a5d772357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5021db75-cb90-44cb-9c2c-89e238334a9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9a340f-3035-43f5-b55f-d3e069d16b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "401fa6a3-578e-432b-8a33-1134046a6c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695fd6e7-3d5c-476e-98c2-dfb3e67769d1",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4230af-b1ff-49e1-8f64-feaa2681e0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66911023-55ea-416f-a0ec-f1d00898c093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd63ccc-4a66-4a40-8875-187245313f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a745f06-eccc-41c5-ada4-4c7e6557880e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c90dbd-ce38-40c6-a4d5-28f5d1ed9962",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "126cacd9-85ca-4549-8ed3-719cb6eaabf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c4a797-d565-4b71-9a7e-0b45be3b4328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65a84bf-f23a-489d-9ebb-e78afadf2924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d5850b7-e4bc-436b-b8cf-0733680c5031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6188c8b2-95a2-4b79-9daa-42a48dff2520",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a9107a-be35-4cee-bd2c-83aa06d1f1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c2ab302-6235-4764-a3fc-ee375c749fba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5a8809-9c77-4ef2-b0fb-caf9ecf5897a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08c19d54-4ee5-4271-b6e3-ac500bceaee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5c2aba-e1ef-4705-849c-f96acbea02a8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ce9e95-53dc-4f0e-9125-1a776ade21fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23023c41-8c74-4c81-8639-ff8e80aeb7ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7a631d-f679-41e9-9642-3bc0cc3d021c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "521fe86e-9282-42ea-9f19-20888b67d1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdfc9d25-afce-408b-a4f1-99df2c50717f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f014c53f-b1b3-4dc5-a6c1-d07c5791acc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77fe94b-bd3b-49a3-9120-6ca9adc52c83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948c2119-c160-4999-ab66-e99fc559b54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d0084ae-da5d-4723-aba2-531058d5a8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d51dbc9-9021-45ff-99ab-77fc82580d35",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6948950-6be2-4ba3-b668-7e602c987f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca101218-56a6-481e-bb54-2d6f708cd376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31fa0fd2-ae01-43ee-9430-73d025a6c2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcb6ea06-cd91-478f-a5b6-b6504c2604fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb775773-5a08-45bc-8504-b4dc935a8cfc",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569da980-9498-426b-9c69-78ebc8d15c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7e8d591-5f8f-48f6-b4e1-f5df879a019d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e839c14-70bb-47bb-a454-6808daf40f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d0a9e2ee-0d15-440f-a6f7-c6b096fe6c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89deef28-b0e8-4189-b3c5-be7676ddbbda",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd619cf-4ad1-4c78-a939-05575e770cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1b4354-5ce3-412f-bdbe-5613b6d8c408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c869f232-2010-4418-9612-14eebe719c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7965e6b3-8e39-49a2-9fa4-994cfa327fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055a3419-9b9a-4d87-b067-1e71d2fb1049",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5c45bc3-dc61-4145-9354-4097aac6c3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2be6e60-6371-438c-a5fc-7d88b1fe9fb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c9f427f-8402-49be-a8fc-61f856bcd0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "afc4367f-1011-4406-9d4d-7ce2fbd519f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85fc5096-c17c-4ad9-af49-1856285d64fb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce92cc24-804b-4c2c-8f72-6a128f78f975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5dfa28-cc11-443a-816a-8cc4df99e403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf0c19c-43a5-4cf0-b49c-ec21e45945b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1b5c62b-c876-4d80-8e06-d23e91fa2bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f438c39-bd17-4793-bd10-d88d22441d4b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0185315-6c9d-4e40-bd1e-f14c30fec6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "637a8760-2bc5-408f-a320-c6b4cf83073e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00dea725-6796-4ea5-9ad9-cdef9f5df94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "06cfb77a-9dd3-4b31-80d3-8adedfe823a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0632d57b-d783-43a0-ae92-39c4b9a0565c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f5754e-82f7-494c-b5ab-48e87548c0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc670a0a-f830-40ea-95a8-044c92bc83b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d446b505-ccd7-41cd-92f1-cb40991b0e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "28ced0d5-9fe7-4c46-92c9-792200b74f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d49be1-890e-4c63-b6cf-b78ab6824aff",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "546ea2bb-0157-4391-88d4-bf4742cdaff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8592331-b03a-4f82-b5aa-31fb356b77e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d337c1c6-21ba-418c-86ec-74787474736a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e15cf41b-f0ec-4ef5-8831-60e70ed48ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce606658-13d8-4561-bc99-8e98cf4b2b39",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2793998c-8408-4bc3-9a9c-475beeedc43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dbe0f7a-aa71-4c8b-8b90-2f16f7212034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d2e139-1aba-4987-af33-3d81527d3ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b24a1cc1-0b31-4aaf-933d-1d53161ffaf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5018e9-9a80-4037-bafd-647badd85606",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2450c4e6-cc76-4f5c-8711-6f3b2bc0a70f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9789e675-9fcf-4997-a50d-75f4f9e92f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c940d0b5-5d8a-41c1-93a1-54f5b7047a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a489121d-c25c-42d7-8e39-c2b684e1fd49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79bb5dba-e34e-4b73-8409-9d82d26e95f9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d56a35-edcc-48a2-a0ce-ad3aac9f21dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "616efe92-5919-490d-862e-f1fa8012135d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2039bc46-2890-40e4-aecd-bb24e9d5c60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab150632-e40e-4635-8bb5-3f0402a59744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd321e13-65c9-430c-9287-74de64c4aeb0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01acb04b-b1a3-402f-8520-8d88d6c46bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc97bc16-6feb-4a0d-bddd-960b1cfee31a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f379494-8a17-476c-9243-f59055eaae5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c36a44b-c7b0-41e3-9388-590ad2d1b073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bfda7d-1bac-4984-9044-61879403472b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f2e49c-c817-4d31-ae9c-5c4abcca8f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f590db1b-b2cb-421b-add7-b3d104ad3fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2a91ba-136e-4ef3-9875-0cb81d4eb172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5512ae10-da35-4cf3-8686-1a74827017cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b57ab824-a8d1-49c1-96e8-d9a09164bb16",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4852ac5-1cdd-4d7e-b015-0df89e0a5ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55ef123-0167-4cd4-b505-38044a3e285c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a79be6f-11d2-4a58-87c9-3978c394094e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5be9330e-a8d2-4891-ba2b-4667bad3a112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29cb3c73-abd1-46e5-b592-fef433482fd1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "100a3252-db77-4ff6-a3be-ecaf78f534e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1f0c995-341f-4635-b293-c8acdb28c1ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46011d1-397f-47b1-b03f-1f3858a806dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a603de20-e569-4010-9295-91f3f99250f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6f63e3-1d8a-4fd5-84a2-2c1fc739371e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb66e36-a5ab-42a5-8e0a-617c1205575d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53974f64-5cd6-4738-b7b3-6ddfb1bf72ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca6898a-713c-4eeb-96f7-428cfa25f756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ee82d82-15b0-4f1d-99b2-f630b217146f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d2c36d-d8fa-45bd-b0c8-f995487c8779",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329d88ac-0b1f-4ed0-ae9d-566bd22c42fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "985a1816-c438-451f-97b9-159285344432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81a98ec-8dfd-4846-b6e7-ea4476d2bbb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d29d875-a0d1-4cdf-b408-75894bb4bba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0025efd7-02ef-4770-b1af-fdd6e7cb5a53",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94ae65c-aad1-42e7-8d29-8ed9d5d702f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef9c1ad-ba23-4de2-941f-d7d62d8dc88f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4261152f-ffc5-43b9-9bfc-90ebdcc5978f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c03d06b-2758-459d-87a0-95530da3ed99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f468018-6e4a-499b-a705-ae6599d29f4b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7f94e0-62b8-4b67-9c0a-7e6b162968c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e4a9a4-8bcb-42c1-ab0d-1c2b46cdf13a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711e302a-e33c-46a5-a556-6190a5364652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c96d34f9-68e4-40d1-9c1c-b9d5990a424f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e33eefc-644a-4662-8c8a-c5f53b7215ee",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0a885b-e2e2-4b44-b329-05e7bb7027f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a13232f9-4e4d-4cf9-bfb6-6b1bb3564a6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4278ed51-ec1a-4b28-a8f5-c3b1d8a851d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "641084c4-ef69-4ce7-817f-96f6342c5aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9fe077c-9b7a-4606-b5ff-6ec51848deb6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbdfd9c-a414-4ec4-8532-324bf97b41dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bfe3a13-6b87-421c-9ce1-ee427ee60636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ee4c37-206f-4e68-8be3-939279aa9505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0aa6202f-e88e-411d-a225-5dda2e2a5df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1cdf6cf-0b23-4d5f-bfe3-9a95e396f163",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29920ea8-dce5-4537-88c1-5659e8138cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72ade18f-53b0-4c6b-a4ad-85734e218315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21502894-2003-400f-aa72-25d61174dafe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b75616e-9179-420d-8649-ac696acfdea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ccb4ed-7871-49a9-a8ec-e59d5a682201",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c593dae0-5357-4b05-82c2-c47b409aaebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7ca15b7-a803-4fd6-a8a5-ddf18c637aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5087fcaf-2ce8-4c8b-a668-f3cfbd7a6630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "53c970bf-8dba-42b9-919a-7f46172d718a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86da396e-c617-4e5b-b836-d8d17e051f65",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90a70c6-2265-492a-bae5-dc94b0822cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383b8d3e-e957-4b15-82a7-659315237b66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "104e53fe-04ff-4136-bb58-1d1fb3192585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dada1e17-7c57-4144-b215-e024a38f6178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47adffdc-09cf-47da-8205-d1d58013532a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65936a22-e633-4f61-9c57-fe280469a945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c97e67-88ab-42d2-be94-eb064b73e990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5595c73c-4e45-4fe6-8607-80fb84140049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b8398db-b966-422e-8ec2-50843fa1d3dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6930dc30-029c-4787-8d5d-8f1eae3f98bf",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6832f19c-2c29-4b4f-8696-558ac8584cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "762dbbb4-8c84-4474-baa1-31d864e8a3ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac15515-10b7-4c84-8464-910ea8782676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0573fb1-a246-4c85-b534-a199ef45cc30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bcf014f-5877-45dd-a27d-d7f61b698ff9",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ebce83-b6ef-439a-b54b-b00ce45ba5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "466971bc-4b53-4595-be9f-c40079059b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49704751-152f-4d20-b735-c767a83d0ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "375dd3ed-3a13-4a54-81cd-4f2df2da99da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b113cbc-d38e-4a1f-b53f-6b1d329fc3ff",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f957a044-a177-403b-8381-b2bc357452fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bfe664e-2c5e-4bb3-81cb-e12165bd34f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6d4250-187e-4610-96e8-af85154643e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffdbe417-9832-4307-aad0-1e17cad70234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb9cada-9826-4344-b44f-dd807b3e3f35",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec133fa4-fdff-4e93-8598-08e5d367c2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "550e9d54-67ba-4795-abdd-8afe7193bc91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e125385-465b-4cc6-82f1-05d25b4d6b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "51b4e1a6-ecf3-46a4-9a3e-649bd5e911a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe461d2-b1da-4ea1-86f2-60d9fb8a3940",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05137fb8-fb8e-4884-a84c-706639788ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0098333-1d62-4770-bad0-49ce9ba732a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684ee1b9-4c4b-41cb-b9a2-28b2f376ab07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "96d8ae63-a2dc-40c5-acc8-a856d06fe810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcdfd68-a811-419c-b463-644133e0f3d7",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e2459d-a75e-40b1-9a46-ef791264b365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a83d78e-3c47-49d0-85e3-3b02b56f7f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff0b242-f4b4-4ad0-aaa5-4c8009e493db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1012a497-46bb-4884-a475-01f9f1a924fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fde80a9-0b13-4b4e-945a-6302a47fa17b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "660fd19c-838b-4185-84de-3745217c122c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b8cf776-fb0e-442f-bbfa-4735f8ffd972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a75c35e-4af6-4643-85b1-0b5c4a61331b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b7d7f8f-4f18-4292-a4da-5f4d76bfe8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993772f9-2fff-4aa4-9cc2-31ededfa9cd8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "557cb2dc-e979-476d-8c6b-a19faaf5b0f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "711456e6-faa9-4047-8555-b24cedf864c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03425953-0efa-4d89-8c39-0a507a61e695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f46c60f7-a308-4bfd-b140-35fb83f8177a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a40c17-3f2a-4ee9-a39c-dbbe35ca4a35",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f762b044-642b-40d4-8091-dc96557fc9d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "183f32dc-db73-4e78-bae3-7b55d992a405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f730bf47-bd5f-48b8-9e25-4a539c895cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0b5bac1-1eee-4a4d-942c-8748bdb2af69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f406834-66cb-46de-b0a4-a078b8926e28",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0516e513-45f3-4c43-b93e-a6af38ca323b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9d9ccd0-5273-4752-9705-ffab245e2b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e103771-24ac-45bb-b36b-8be18c07708d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e825b5e4-37c8-46ac-9599-d8ca38e776d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4241aa2d-fd6d-4aad-8438-932f832427a1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e532e4b-36f1-47b0-b1da-ce666607b433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2610c198-3f93-4d7f-bfed-af8b803fa57c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7847abad-1e5f-4f1b-943f-467afbec3f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3cdb9cb-34e8-45af-a33b-ef51e06bd660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd533f3b-548f-41be-84bb-5364c2038368",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5292f7c-5786-4371-93f6-a1c8aed1a14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1f122f0-fbdd-4feb-a39b-982c64e16d87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3630f51c-f7a8-4d7d-812b-66d3bccda97b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "80e4682c-6b66-4b32-ba73-bf8b317b034d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab380e9d-fa72-4173-8842-88f702b5b5a8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ff87aa-2c05-4e29-ab16-fd4a68aa21e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013fdcd2-ce55-4e5e-b073-51bc259e5723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed3d942-614c-4d33-a9a9-1e350314b5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "79944723-4ea6-427d-8325-77a99293625b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68693c23-8dea-4378-80fc-ace325d784d1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f4490f-b732-44ee-96c1-4ae2aca631b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cdec322-b79e-403c-a10c-37511b59d89f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80699e4b-737e-41c1-ad57-3b2ec285cf84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8850d35a-a3aa-4946-8cb6-a9268b037033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63723468-714e-44d4-9c44-4ed61fe2bfe3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "121bac95-0c6c-47f7-b564-b18fd92bed86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ebe7b75-2c3b-45b6-a93f-19e6883fcb00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4f2cb0-1497-4b8f-beaf-48ea53a5e4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c44b3376-cd2c-45a3-8e28-4f2714ba177d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18128e61-c773-4276-9e4a-06978721845d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccebea6-9b87-4dc0-bbd3-b8b9784ba196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf5cdab3-5e57-49f3-95b3-878d4bd67d00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b63190-8e71-487a-85bd-b3899cf3205b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4279e97-4443-47ac-b3a9-0d8f37e054ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7455cd5-ef62-4c92-8ff9-7abc5f5a1e67",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a070f0fe-11ff-463d-b57e-5dedff6b72c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d850a1-5b77-46f8-bafb-cb01a52d0c90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82169e4-dd59-4fb4-ae09-a9febdf05c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a6065fc-c28e-4cbf-bc63-99314b5ec2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a6c149-76b5-4a5b-b9b8-bcadd4eac596",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "889815d9-f1bf-4794-968a-28226475e5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df3cab8e-1b60-4e0c-bd2a-ee73bb5c8853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b09f8d-e1f9-49a4-bb9e-57a57ae358d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3babca6f-76cf-4353-8414-b1bf40a6deba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950852a6-3354-4d52-839f-315653870a24",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537b4952-24f8-4ed2-a3b0-ebbbd157ecda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa99b54-0df3-479e-a48e-b444083a71b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597574e3-9459-401f-83e4-0905d3b9681e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0d70fe0-5dc8-40f9-985f-05ecb3120777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b7571e-e8f6-4840-bd65-b702a0a10be5",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d724809d-ed2b-415b-a4cc-a7d0e261481a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab07618b-0474-4336-8cad-5ea9660f0e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87fd5b3d-fcf8-4ecd-957f-1933e391028b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8dc3a05d-129c-4eef-8124-5eb489cf441d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d171af-4ed2-4ab2-80a7-33fe0539865b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1429cf8c-5c5d-471a-99f0-b7e5f4ad3a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde9e5f6-79a2-4361-948e-98f1b049d942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50525c55-edf0-49e7-a680-e7e2eb3ce2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d240f357-7807-4894-920d-3931947d7a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd565d1-1858-4a5b-88f2-367bf71ab263",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329d797e-870c-4d4a-966c-e9ba286a7dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eaa9967-6227-489e-9bb0-4161375392e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05493a33-8b72-422d-b601-bb4e4dac1086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "564f6d07-34a2-46ed-b50f-89548bebf57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22839301-6f0e-4a29-bf9c-8f0333929045",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d8d804-b24b-4d70-bfa7-99cc148297c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0fc8d00-d99b-4fe6-a250-62dddfe61c26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f86713ef-cc73-4e0a-ab4c-985368075884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "110e1e76-89e3-4f6a-9266-56596700898f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf460bdc-a256-4e78-85b1-9c3ef0433a69",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76fac5b-28c9-47af-bdb8-e8134cf9cab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11746037-8a0a-4864-92a7-73c779eb8529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a494ce73-264b-4138-892e-751b0cb51805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01ac8885-a754-4746-8b8d-e8dd2e608d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54598db-b139-4eda-a398-eca79f0367bb",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4391cff7-9121-4f44-89d6-07dcae2ad4b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e2655f0-a107-454a-b02e-5b7f50a4a4d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e905aad-5910-420d-9355-9105cedc725e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "51deab00-5b91-435d-8a4b-4c05ba7b1786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "384abbdc-9e82-432b-bc89-795604714d09",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d3f787-ecf9-46d3-9a6e-e92b4bacca9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c513b9da-988b-48c3-af2e-6ad128b9a032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c58a8a-4b41-41da-88c5-c4960371833c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "adf9258f-937e-4683-8465-38e648287d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653b5762-48c7-44db-b95a-5c7a09e16576",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "347902aa-daba-4042-8917-35c05fb4487c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2382ce-1773-460c-aaaa-c6f8e1f94dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bffdae9e-aa09-4d3c-ba48-6492a495c7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d24f9f24-dc9c-4057-805b-77fa4e274a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad9b3e3-24a8-4c71-b473-d2ddf047b9a8",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f577e627-b8b6-40ec-bded-63ba09f45e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "170ea84d-edb0-454d-bf8b-40db94b12e22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcd3bf5-e24a-4c01-98be-be6a0c279493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f009817f-8df9-4358-8a34-18e3da15318d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7cb7006-80ac-47bf-8b0f-075f670dd4b9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a57d9c0-2a3a-4038-a38b-47f3fff0cd1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c97e178b-0997-4131-8e28-90ef1330a9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8f7d76-9ced-4af0-a7e3-bfa9e4e29fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "87b1863e-205f-4372-8571-9ed4af1f8d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40108c9c-2789-4e26-be5c-35ff9c8158d3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a768eef-58b9-4cbd-918f-4a3445adbbcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6164586-2946-47e7-9eac-141531ec0c4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4c9971-b553-4b8a-be38-882a3388558d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a1bd6ec-c2d9-4fdd-8927-e794a08dc7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0167c93a-694b-4f93-be52-cc4e9c60e08c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11cd5b22-8a4d-4607-8fec-c8d956f2c162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9df827e-02b1-4f2c-99d0-16ef33f3ccdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807b5276-acd8-4634-9310-582973358164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1db9e3cf-d68d-4713-8140-88b56de0da40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4026c22e-0169-4713-b73e-44b49b2acd7d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c569f4-ae2a-4153-bff1-cf25c9d64133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ccd4c03-2d9b-4d9a-80e2-d2a2d0919555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ea6d09-815d-4168-9236-7b7a37141dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2f26908-4500-40cf-a28b-860471541317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc612e2e-2955-43e6-9292-4654e79f1d63",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6668252-8ff4-4862-9a06-dd4794f7152c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64457494-98cd-4500-bbcd-707dad0da4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc09cdd2-77ad-4f16-91d3-7d0ccff27151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "586e0d27-e2f6-4efd-ac19-1f2c2c91405a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a1818f-762c-478a-ad2b-374dd2651bf7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36fd85e4-6719-4cdc-8c21-4100eb7fd382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5888c454-a047-4a44-bfb2-2bb4f5fb93da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e890f674-df74-401f-8a70-c611880f0a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f58af1-3049-4229-a2be-d31c7e133b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7e1523-bbf5-4537-83bc-4d8abe159a0f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51991b37-166d-40de-9696-eb6354584c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ed0e62-1258-4bbb-aebb-a67b2304b8a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a6c60c-279a-49e7-a7d5-dfb3e90e5622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0dd76f8-fbbf-4cc1-a4e2-845cceccaf1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a731ac-3e55-46aa-88b3-d5a3d133bab9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8190a19-bd52-4e18-82ad-36d124762a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08c39ef3-67ed-4c00-8603-9fd8ab0cf9c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2507a19b-7740-4e71-9ee1-eec80ca0f29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "42273484-899f-46b4-8202-7895eefc2983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54727bf-3b46-4dc1-9131-cc7192790b4a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72152dd-00ec-49ea-bc78-fccf82c955b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b9bc41-27b4-4d91-a6d7-65d11fc39a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4810b0fd-d56e-4344-a146-86701c9087f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb2e5452-86a2-42a4-99cb-05ceb38cea85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2264ee74-313a-44f4-962d-ae340f566d69",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec176f2-5005-4aba-8d56-9b2cb60e7ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c6180b-a368-47c5-8553-7746f8ba7675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d003c76f-6ac4-4635-8333-07f512512116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7c33d79-3f91-4522-8c2f-b544614eeea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28cd8f1f-8aad-4553-b349-b75235a3f2e1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba78ecc0-4c10-4e7b-9ef0-bc10d005ea7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e81bc86-5125-4629-b1ab-16e0545ff620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ff6ac9-7dce-4c8f-a2f8-f577026dc661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "19394834-359d-445e-8853-6d0131f504e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "766c3c1f-6f25-4e4d-ab9d-45ab334c72bf",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d8c094-d25e-4312-970b-f0c07dcbaa14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4c8ebb-8886-4456-a037-1488383d8958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95d74f1-c562-49c8-ad86-5af53effa563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "455374ea-2567-4b74-bb92-02fc420da67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8d1f8c-c01b-4ce5-9aee-62e0d2c97ca0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e475a69-12eb-4d56-b0f7-035b7c365546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d00fc49-4327-4af8-aa15-2c3f8e59fef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43513e95-54f8-41a6-9670-25c3012fa855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d943611-0b44-47cf-8e97-96c1698ec1a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b966fd-6c87-4c2b-a0d8-d217e940f1c5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46db1963-1c2d-4174-9b90-fdd0d5f3f77b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108d48c2-e293-439f-99f8-c98f69249824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f834c4f-25d2-4c93-8704-ca4fd36a8f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "18171c5a-e0a6-4650-bacc-20098a06a6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e353177e-91c0-4de3-9b07-34e60b5f5d18",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb34574-b6b2-4458-8280-5721f867341f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c3c15b1-0529-490d-a88f-a27e0f2a994c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92337e1-ad4b-4913-8175-aadd6657e04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd4b4c14-4678-4373-a19b-17d82d13979e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcec3f52-f6a1-4a86-9dc6-0f7cc4059e0b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2df1048-cf59-4ce6-847f-f08f259b3f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "196f7887-d581-40f5-871e-b7abe9e10728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226dc178-77b3-4b33-a130-60a7c349292b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7b708a6-7c64-4fc1-8596-1584e774eaa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0350db38-192f-4a70-b708-b44c5bbd213a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f186a5da-d0d8-4c4c-bac0-61eff44875a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ae99b3a-a367-4c07-9f6c-bddde75de9ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b2d668-25c0-4249-aac5-f8e76f33b1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "74e747f3-00a7-42e8-b52d-0361beb85261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e299767-e81d-4edd-9415-8009020f9977",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db70bd3a-82e4-44b7-8fd3-18ed7f8c8d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a5aef0e3-97b6-4a8c-83bd-6269245141de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac595679-4d0d-4977-8e48-9f924b955686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "41843dd0-50da-4fec-a74b-df350d0e35d4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4c5b6e61-4d9e-4077-bcca-c93f4f8feb36",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0bdabb87-fe74-48af-ac55-797777ba0bb7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6a1010-5f70-48d4-af6c-57a26f95c32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f91e8a32-194d-44fd-aa59-3d981c8f455b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b25c77-b574-4189-a7b4-3869b8f2ac69",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b5f5ada-d1ed-4f0c-89d2-eabb4f1ab5a5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c223ff4f-f841-42c0-bc97-d78cf076673b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1cd6d01b-53e4-4880-ad47-e2159b354c4e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "917bdcdd-5f4d-43e3-b4c1-0fda2e4b4331",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c25ab3e3-4009-41ae-ac42-80f124c5103e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2f23643a-8f01-4aad-83f9-d488ef5c3c02",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6d0543e9-109d-4cca-a6f3-812bf32eb012"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "52887260-e7ce-41cb-97dd-b88265e9b948",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4421e758-bae1-435c-9dc8-ca99ae2195d0"
                }
              }
            ]
          },
          {
            "id": "3a54a575-e526-4e88-a0d9-59c2b96359f6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ccc84b9d-3815-4ad4-8e01-b95c4b676d27",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "ca4f8638-096e-4c7a-981f-54d438207d3b",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f865e1df-db24-42b3-9ee1-555a587e86d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f4b6dec3-6d80-484a-9789-7ad458be2e3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b05755b-7371-49e4-9981-3eec0b512154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15364ece-3083-42bb-9332-dae311c25033"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6b94d59d-c6fe-42e8-8982-01c5fbf61e55",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5501b25-f369-4458-873d-cae814a59e05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b3116f97-6fec-4b61-bd39-639175241aba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02fbbf32-c751-4ff3-9408-e46f007d0f60",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9e08dd50-b9af-450c-ab15-8c55858739f3"
                    }
                  }
                ]
              },
              {
                "id": "bb8632c7-da8f-4ce1-80eb-f957e077f1d0",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fb7272c-ea72-4c27-89db-c267fe88e1e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "92ed8b76-a6bb-467d-b768-c81fa7991c25"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b94b1a6f-5142-48ab-b677-bc822850cdde",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c5dc118a-d772-44e8-ac78-94c498a06a99"
                    }
                  }
                ]
              },
              {
                "id": "626a305e-2439-4856-a40f-fd216e436769",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "20afc62d-cab2-42cd-9bd1-085bbc2c6c42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e9f44cf7-a048-4a93-824c-cb7fcd811497"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6557e799-9511-4ad5-af30-19cd769e5d21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4f6b9fde-ffc1-45db-8a77-3244b676e97c"
                    }
                  }
                ]
              },
              {
                "id": "adb5d144-db38-48cd-9de1-51deb3b64a33",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08ce5aff-e18e-4587-a8e9-18af1493cdf0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e4942fd-0fe9-445c-a898-b7207a99efa8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7824e0a8-7b33-4834-b323-495b4394a831",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5a984476-b378-49d9-bc3e-979ac0507f6c"
                    }
                  }
                ]
              },
              {
                "id": "8c74b6d3-039f-450d-85f4-94b23798327e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5a91eee-ce72-41ad-852e-7254398b2ad7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8472c355-88c2-449b-99e7-e59205810ae7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9612e0e-edec-463c-b1c0-1bd1e7fce3d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "04f131d0-2c80-4a93-95e2-0c04ffd16276"
                    }
                  }
                ]
              },
              {
                "id": "d25fc338-c115-4447-a51f-65dd70b8103c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99a4fcd4-e39b-4eae-b70e-94373b7168ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "10e91877-4201-46f5-986f-afb3afaf01bc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c281ee64-6347-4c86-9f1b-ba6e2cf9e7a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f547fe1b-d60e-4e59-8b04-626a7e028d1f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b667f34d-4fd3-4985-a9f4-6faef6790c59",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "72bd26ce-2d72-4b6d-b8d6-92527bbb20bb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fbe8dd50-6588-429c-90fe-f027ae3ba8b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "efd7a5c5-628c-430a-ab06-6b28df5b4349"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c9c60197-eca7-4d5c-b972-7fc7d72127a2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2874b20d-8974-4305-98c4-8c2e3fdc78b0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6062b792-00a9-45ba-9e36-131cac8c0f97",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fdba8f0d-47ed-4e3e-8b31-23893d44d72e"
            }
          }
        ]
      },
      {
        "id": "86760b40-68d8-4e71-ad3e-493d4d200bc5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1d9fe666-5dad-47d0-9482-913502605994",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d5cfb0da-b25a-4c08-b9a0-284d0c39dfb4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e3875fee-ad72-4c20-b3f6-15bfbb53048f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5152d6e-1de1-4f6d-86bf-1043118997c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146072d2-7b88-4f8e-9cbb-663552c99922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894e0d48-6861-4f23-8187-2370eeadf0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "efaf5075-549f-43e1-a0c6-e7b1380de176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aeddda8-e914-40c9-b854-b91a9f57a6dc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c3ae16-df70-4321-a27b-daf616e6363c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db07f41-1683-4b62-8829-a732c4842f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e817ea07-a569-4ce3-b6c1-e5255fd8d7fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "12d26cc2-147a-4083-b41b-40aa11653815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e5efa8-9910-4c2a-b69c-644a4e43be5c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a0cb4c-0677-4751-abdd-1effc2509e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bf5b538-095d-405d-89a4-c591fac2a367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0e0d9e-676f-4f85-abc2-8bf33594a3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2aab18a-7a6f-459b-a889-309b294fb067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9adbad-ddf5-4472-8e28-1dd0a309b341",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b499de9b-1996-4e79-a81d-0217be4516fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6eb6eec-4f14-4e99-bf97-a05252490968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e946eee-73e9-43d0-a0d5-5004527f4d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1a5b143-f3c4-4f29-9242-9e54eb4bf5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7894314-0d38-422c-954d-6429ae8bd0ac",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2806843-e94a-448b-bbef-e098e9f11a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a87937-57e1-4979-90fe-858f3db5363c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd710ad7-082d-48ed-91bd-ea82b39d5563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b51a4bcc-e7ab-44f5-8330-f95d16a8a934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247c79c3-127b-4329-9188-2ce81c8e0784",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "646c3903-61cc-4e20-a268-73e320bf3fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e45f9d-ab07-407b-83e7-049f57bc497e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98432ade-2fc8-4658-8131-31395793ccf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "22e47e44-85a0-4bef-a909-4f6f669092b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196a7906-2520-46a0-a54c-cf0e8b4f8adc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1141a9d5-5141-46bb-a93d-51292a1f7482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6de64a4d-f355-4cb6-a67b-b825f88f513e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daedcb85-dcd8-415e-ae89-d1d78eb5b77a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1be040e-36eb-4509-a4a4-1e127f533897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f690ad-ba77-47e2-84da-8c820604d452",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cfa78f8-6cd7-4768-8f07-f764001b806e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a63f5d-2f23-4d12-b5bb-2c70c54ce510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c36b65a-fdbd-44a0-a568-308dd6a2575a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a2d0409-3f55-44fa-b0fb-47a2a237a2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0c3dca-e0c4-4518-a879-e478d692ac8c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75a55ed-58ac-4b50-b435-829f955fd98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "786c1409-bf34-4e30-879f-21b47d77aeaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6965de5-6011-47e8-8e72-cd94f1e43456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b121c1b-e6b3-479a-8c14-55eb24caf621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7770dc1e-e76c-4c94-b15e-1109134d5e98",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d4c59c-facc-4d23-b69d-329f65ab979e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a1ec93a-5147-499c-9acb-d55a7fd242db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0023df69-afcc-46c5-bb67-124a2131e6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf3cd566-6f43-4571-8bc2-039b5a3a5464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139674ff-9b76-4e96-b663-ee751e2f1bad",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72685f38-3da7-4e83-9e8a-9de9106b1de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10081462-2cec-4a27-847b-95b3d1a4abcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca65375-d02a-4c78-897f-49d3ed55ce16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "29d6f980-eec8-4f92-bee8-19b368a7ccf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2feedd-f51a-43ce-a576-d1f36400d6c4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd85125-981d-45d3-af27-bef4a5c32b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea9ec196-d97f-428f-943e-96673cdfe1c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "286c6f09-494a-4c91-a6a0-6bb68d2ab535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6a2ad3e6-03bb-4006-964d-2390d6a2fac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910c14eb-71e6-4df4-aca3-50fe84084d17",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c5a5b2-75c3-4d5b-94da-faa45d060d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e15b5936-42be-4eed-b470-35215d2e4064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f3211ff-c6f4-4144-afea-d9b0d32f6e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "217983f5-6da5-4e2c-b40a-7fd238c8b758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d997951-32f1-48b9-abb5-75d8ec99e7ac",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "843b391a-97c7-4734-b519-dd2d9280c0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb539fcd-5526-4769-8292-79df55bf09b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabd60c1-5bd5-4036-8d8a-97fefeb3bf06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "958f83d4-a109-4b93-86c4-797e5417c06a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e65ed12-3260-42ef-8de5-7f1e514e95c2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c383b2b2-876f-45f5-9c6f-ef78d1cc04dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b14566-7285-4027-9bb4-68efd17d81ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3cfe11-5567-410f-a0f2-5b90dc93a353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "535b6d7c-fe54-41c3-805d-380461c0ad7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6580f43f-a910-4e8e-811f-1bfa8cce9af8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d69af9-2030-4afa-8232-e6ecc97eccf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c102c7f8-c76f-4885-8f84-76685f9d9c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402b21d2-b056-4eec-b8b7-82e2570a7955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b3fe06-bc00-471c-99f5-1544c031eafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f59a29d-6c54-426e-83e4-ca9bf9feb923",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a51fac-ed63-4a86-8deb-90e454b607a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd152db2-d0ec-4b70-9d35-c0850d51ca64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecebca9-4231-4483-a274-5331a33cb83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3d6b0d3-b8a3-498d-92fd-2490ec5c5f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4808a1cf-6a46-445c-b6f5-c0a7bf69c3d9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5091970-de99-4b31-b4cf-a622ff619510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e04222f1-d22e-4058-a0e0-a95d0e22d03e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b65913-6182-45a2-8c44-32abdbf0a62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c24a3d7-e27c-47bf-8e7f-1836ae8610f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f18138-80c1-42a2-9746-18a94b31d4f6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "267d996e-6a1c-4cf3-8a4c-a6074283a363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "087c46a0-c86d-45a8-9da6-bec994d7558c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce71f490-b41b-42d3-8a0a-085031bfc8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a053a37-2713-4377-b9de-9d381c070740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a331c9-8fd9-4f0c-85a6-d9f08629f2df",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12755a5-ab84-4d45-b71c-765b997297e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7123eb9b-b537-4946-9bb6-103566a08bd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b59a40-7f3d-413e-ae84-45d05a5b2504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35fdce40-6dfa-4032-b399-6de042ee2cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3bb541-7fd1-4f96-9491-7e200f7166de",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94208d70-09eb-4b3b-a666-001acc372cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9419020e-9948-41ff-b20b-6f7829d2e543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81eabf1b-735a-4c03-9e2d-c548f8d161a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66aac532-3bf7-4433-a52d-360258021bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d768c7be-cf60-4d6c-b76b-b0cd51189210",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612b5537-714c-4e07-8331-90454378b4e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b2356c-6c62-479c-8621-77cd60723016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb51f9d1-56e3-48ce-8987-8b0153f42332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acc6dc9f-9dae-4a00-8f30-623672ef70e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80650ab1-62e5-4428-b722-4fb499ff7de3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f44bfb8-7926-402f-abc2-323607ee8299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1900adbe-2b64-4ef3-8009-75ac79af41f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63708b0b-5d31-4868-961c-27f48e3a29fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e85cb304-a152-46e6-b875-5e5dc095d577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d251639-2759-4a83-b47d-024f4a88df88",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1183fe7-11e4-4bb8-86f0-2b16e48717b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d890978d-1f0e-46df-af78-f2c8744f6a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418f679d-c926-434a-9a8f-14b0a4375d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "767742a8-727f-4bbd-acfa-5888efecdb39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfcda887-73a1-4675-ac78-5185f30ba200",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0e53ba-7871-47e8-b998-1e38f9de35d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "962462f7-0c08-4ba6-a7cc-f005a6b972f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6497ad-c431-4ef5-bc7c-14693342d70f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "280b4c50-912c-43af-ab60-1b23cd402561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0004d9df-6ffa-47cb-8f8c-d6db2599385b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d77fce-a94b-4b0e-84aa-a42483e6c234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ccfb8e-5dd9-4ef5-a4e6-4267c22046ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ace486d-0bcc-40f5-aa2b-759d25880e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb95c128-0712-4ce8-9261-5b082ae48132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6b1a64-b4dd-43c6-83fb-deec7f8a04e0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e24a252-a53f-431b-9e2a-d96cffcb610a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "943b4d89-3d61-41bb-93c2-3da2c81f0116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3d69db-db30-4097-b9a7-efc2f528093c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "849d67a8-b4a5-432f-b7d6-0cd131cbccca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154f3735-edbe-4aca-b8aa-41b252f611f6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d1d7c7-330b-4c11-b8bf-32e2eb09abbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efa36072-a6e3-4cc6-a919-e45d150d3760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90949e8-81ae-4a7e-a73e-e27ee7c086cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf98982-3056-47b5-87d8-a277bbd9355a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f2e5db-b136-4b38-875e-8b46609173dc",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38617fbc-2bb2-4429-8fb2-cae568e0c59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d3169eb-7e95-4c78-880c-8860b4134269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1700a4-2433-4621-97ea-e2420afdca09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0715fcae-38d2-4b66-bfb1-33ae8a466a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d31fec5-046f-4f3e-be98-75045074f0cf",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bdf5df3-ea3c-4709-b730-3cf6cebe3196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5dc15db-6bc9-4d37-a0c9-2fd15c93f7bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08f4460-20a5-40d3-8923-be900abfc95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa1b72e5-d54f-419d-9543-2b9cfb2980d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922aa48a-40b4-48f8-a0b2-5a7c7e9aed48",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4d6f62-00ba-45af-aac1-51ed717fd2d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450e4a97-a489-48ca-a627-78f71fd8ab49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6d6ff7d-b917-4d94-94be-9cc1fa1d99e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd86452e-9679-4b78-a6de-7c3efea87094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13265c48-b902-4a3f-af9b-7d05dd629b37",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9febd0a-c2f0-4e53-b606-630c849b8096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43230389-2df9-4c16-af57-48d5bfd11095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d239d3-48b8-4971-a929-c56ffbb0d151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eab0f4f9-131b-4a1e-a47f-1faffb391493"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d41de5c1-ba95-417b-9e10-7cf448a0ffa2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3e4cf1df-0a91-48f9-ac38-aa02f603a8f6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed8a556-452b-4a37-a464-c0d38f8125ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "626cde76-2c35-49b1-bfb6-5c360c7beead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d8f43b-5ae8-489a-92bf-a332a898b5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05b0f2f8-097b-40b6-ab16-938bfb6059e8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b62db7d1-95cb-42f8-a35a-b5a187e7e844",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4cc543f4-7fff-4557-8345-c6d70e9403d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4448873c-1374-4aa7-b300-55601a65f6af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dec388be-7aaf-496d-a84b-e35204dc21ab"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "adefe543-dbcd-42be-8924-787b6332f23d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "01e5d6ca-15ee-4d1a-8c6b-90f7a8fcc9da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd135838-c214-439a-8656-a611cf5faa80",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ae359bb4-8825-4de0-996d-91ebff72da23"
            }
          }
        ]
      },
      {
        "id": "d4220ab0-a6fb-4664-9607-ad59af11c12b",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "8fcb2c49-761a-4a58-bf94-58cba8fc6f75",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5fc6e0ff-484a-4610-89b1-3ca91d0d3cf3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7fab1a88-f593-46ff-93a3-d53dcc9d49bd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c925b45a-a933-42cf-998a-448487aa58f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a82d27f-e4aa-4e44-b2b4-5fd293b8d1c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e542542-c566-4794-aa63-921438f1ee06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "feac94ad-130b-4e6b-984e-1092a8f787c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3771cbf-b373-4679-9d3e-c6773f3b26fb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb1d5bf-5954-4625-958a-75b4837b5a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dded9d9-59e0-4572-bf01-72c7c9437c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f575bcd6-291a-41ae-81db-5d69bc7aa8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d819bee8-41fb-4030-9f94-d4f70384a150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb698c8-8723-49b3-9980-c6886e50215c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4567a8-6e04-42e2-9a80-03d78429121e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6e25d0-bc12-4680-a355-24aeab19d189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c90794e-d05a-4dfc-8795-0a3587b1108f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6681df80-9e69-41a0-98a2-1ede5d2f4f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621ebdc5-ebb0-474e-b9aa-c15d2326bcaa",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65d9525-cd01-43b1-9b24-23cf294f682f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e9d0d15-37bd-4615-9abf-879250d987a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0155e71-d40f-4eb0-92cc-d6c01a996fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad89f4e-9929-4bc5-b52c-0d266c46cd54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79c1e56-3e4b-4657-bf81-73b9becb9363",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5776633-43db-49e2-95b3-2679a6e36d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8abf04ad-a894-4c05-9488-5aeb2c274afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58dc2e33-8fb7-496a-a7ac-efa27900fe1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57e53fa1-ff04-4cae-b3b2-766e35d21ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953d523f-ae16-48f0-9a22-ad3a2f9b92e9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114bf445-3c23-4c96-a344-604368b4d161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b93c72d-f82a-4cb6-848e-7f85c973af0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5587ccdb-91f7-44e6-a6e5-bfa0e2035030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d273bb70-563b-41b6-af89-cd9bb2c74206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0677ecfe-20a3-44b3-899c-1313c90f7fc8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32869f9b-1900-4b71-b2f9-a19141fe21cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e616d0eb-e883-46e2-94ec-c0db009807c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e807b477-602f-40cb-bb45-2691a33d0a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a596adf-eed7-46a5-8934-46bc6ef57a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6979ac-4769-42f8-896a-7aef79fefe06",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27472bf-27c1-47bc-ab21-64157d8a6c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b369d5d-88ac-4a0e-bdfd-ebbbd9eda87e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3e96c3-0c91-477b-ab04-e94efb314fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "835afcd3-47a1-4176-9ae5-56b524b3fb58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d786879b-f323-4040-adb2-a972961d26e8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9216c6c3-4823-41b4-ab25-cddf270c5dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e211ddc-1f24-4d9d-99e1-848a1c102c83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c0e953-7769-4960-bbe8-1112a8a4e88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbdf1178-8ceb-43ee-bfc0-47e26587f3a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48115412-1127-4f3e-b474-c8f247f10d0b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdc43f6-4a66-43fe-bdfc-f1bf5e8a185a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d02858d0-0d2f-47d5-a135-d2fb26b66b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed75006b-8313-4511-bded-4ce289cf8226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d0615b6-c4c8-4ad9-a307-d77b8fdd4209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92f954d-b525-4b3a-aff1-5925d933701b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02908ba1-1aeb-4c27-ba57-72b43a751f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2377d50f-1a82-4f0c-9c23-1f5fb9a0c8af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceaca1a2-fc3a-4435-b4ad-04368b243cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "41c3617f-0d86-41f7-b28a-ef8684e6ae01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f36242-7ea0-411c-bda7-d857dfb5bf03",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "022b1029-f753-45c2-adcb-11d6992f4fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e518d17-c2d3-4c47-83e0-71e58b4232de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f58b5f1-83aa-469c-9376-75043b839c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f5f9fb4-ca45-4f83-968f-c221c26741cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99fa089c-5189-4d64-9cca-e634b1694d0b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f142b3-3793-4a5e-b2a1-0aef0dd372f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e49e8c7e-af7e-475f-9dee-641990cb0a73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c49136f-e076-4693-bb1e-7d38793eee37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "81e80ff0-51d6-4356-b0dd-818dc8487a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf9b0bf-bb91-46bd-83c0-50f48fc9aef2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc00ad9-962c-48e8-aa61-b1777e508c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfdb9bbb-fa58-4c91-985c-8dcfa392d027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ead05c-4a63-4f5d-927f-9bcce50819df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7a02583-6ce8-4263-9aa7-9cb0b9440349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8597bc64-c3d4-4e97-9966-d98e535a40ef",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96cfa1d6-c553-45f7-9b78-e4d777ad610c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feef3fa4-1261-4911-84c9-ad0cc0ed862e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324c7c53-b852-4e63-80c6-44df7b779b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a5e7f0e-3824-4191-a418-44acd3158746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e3587b-6a46-48f5-b90b-626d22ff4ca4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521da910-7ec6-4707-86d0-11ff40c5955e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fdc8762-48c8-40c0-a6b7-8286fcefb0aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c3a7d1-60bc-402f-99e2-4438b60d1928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6925383-a8a6-4449-a2f0-ebd5546bbf39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03a265c-fe3d-41ce-b471-a31b7bcfad11",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e497a8b-75dc-4274-92ed-aa078188719c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f695e0-8806-4b68-95be-317fb9daa93a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad2ef40-fe10-4bb2-874e-093062621513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "31ecc8c4-8a24-4eff-9c59-c88b95850d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e82aa79-6d66-4213-bfd1-78b83b79cad6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27b340c-8852-4f4b-a023-d7c37e8c1b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9812b6ff-bc75-4eb4-a6bc-d55372427202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821a1a71-405a-4fc3-ae60-45884947f20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dddeade6-e45b-4027-a218-7c24df79d42d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3fc1b3-1e8b-48eb-b312-ab3ac1a22e64",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "221a8143-a92b-4b1f-bee8-2d75749da91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e51c9a9-9f5d-43ba-8cc7-812d3e18b6c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2971f1da-127b-41b0-b520-94e682c537ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe17be03-30d8-47b6-ae1c-a6e2f2aafaf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f728d0c-b7dd-4f7d-bc59-979dca6c4548",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "898854a3-9900-4996-813c-4b05964e8e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e3fea8-a14a-491e-af4b-31163f762af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc518c0-6b19-4a5a-b89c-ea792d271ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f212a13-a284-4662-89cb-2391d582f8b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcbca668-927f-4b21-84d2-267686ff7b17",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634ba6da-9d81-45c3-aa08-808dfcc17d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3019e992-44cd-40f7-b4fa-49fdce4563f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3468cdf-d3f6-4ef1-a261-bcefb23645d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd280557-84d3-4bcb-ba1f-d818bc635f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb99b4c-d9f1-4f74-ae33-609f7864bada",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe28d57-2036-4ea9-87db-26fd8bce0661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86a54f8c-31fb-40e7-bd51-135875795205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c09920-6cc5-47d3-b2d2-c5752631c532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57f125f2-c0b1-4a8a-9fd2-8df6104eb4cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f139d53f-2d7b-4118-b66c-e0bad3a38bba",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138caf21-02c9-48a0-9283-28708a0d98e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec02c0a3-89dd-44e5-99ce-97e3a199dd36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a33e0e0-64be-48cd-93df-ab6a2f4548dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8fa6b3f-98df-431f-a1ab-438d31148ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823ee898-8e7e-4333-bb9c-50d99505a5eb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ed833b-d0b3-406e-8f6a-668c9713c843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9b28f0c-452e-46e6-a79c-2483526a7bba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "379b4d2e-dfba-47b1-82db-626c85554e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0221335-181a-4370-8a3b-f78bdc0e0a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45adf264-3125-4d7d-9018-3ea31b98ef61",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b252b198-b903-401f-a325-feb5d4a0bcef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b971a47-0799-4243-ba14-2326e9e229e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97f9bf0-7779-403e-9d91-d00cd3ecd95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8cb648e-39f1-4f68-a794-e78e02a33708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca9c84c-02ae-456d-829a-2b22cd3dfdf9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff969cd8-60d9-4aad-9689-fdb092a87ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f927a3-974b-4fbf-a44a-d04b726dbdb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b94fda-ce77-477e-9708-52d48ecae8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e088976-1879-43b9-a90f-a60b857ca4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09c9803-7b6b-4313-bdf1-a018d045e280",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24dbca9e-660d-4e56-a3ef-6b29a8e296f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ad61c3-e2dd-4059-9f35-538ceb91e6fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f8e7b4-1131-4dbc-a7fe-071f1fb99271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0122a09b-9f52-4c1b-9c01-11991cccff1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78852ccc-ee91-4e8e-a3cc-00071db9ed0d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dda7da0-8c47-46cd-9bb6-3ae565ce7fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f0787f-9d8e-41a0-a0d0-404550a762e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e068ef2c-86b1-4eca-ad76-abd67b5488c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16f1ae98-f9d6-4f04-9dfc-9b4f09ac65df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7452c8-7763-4ae0-abf6-b8298a8dec9b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca88cd91-5fc4-47a4-bd5f-657238282085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83dec11b-ba06-4c28-a155-e17a4b7bf59b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4635730c-989e-44ee-b881-6ccde409bd7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dc807b8-3f43-499a-a8c5-ac67243ac526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc067c99-efd5-4eb5-879b-43966d014dca",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "530cb178-bd5d-4cb3-aaf8-d41e6e43113c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a96959f-305d-4990-88f2-9cde1654fcaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bced928-d8eb-4574-ae85-6af837cf8ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de5b4fd1-e2aa-4cc7-97d8-fbe4b97cc2ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1faf79-4932-416a-a4eb-84176e4bbff3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "755b024e-7298-4c05-8071-2b6ecb350eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d6f9011-9301-4c6d-9ce3-855c7e505f05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498f28d0-b720-4af7-aeb6-e5619559dc6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38e0e995-4773-4592-93e0-38c850986961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0719ec-6fdd-4b54-970e-bd4925e05c12",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88af8e66-33b3-4dea-9831-9f184b25459b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5bb1a64-4d67-4bc8-a50d-1e47bbe215e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef458f4-af6f-4fb6-930a-862b28d862d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c173661f-7e48-4974-8ac7-45e720b3cc03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ecf91b-834a-4103-a8e5-2c3b694d5d53",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b4bb19-c1ca-4427-a4a2-6128cbd9a0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0724c691-870f-40f4-b265-0c3497efda8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a812767-d9dc-4ed9-b0b2-06f9592af2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57d9d0f9-ad38-462c-bfc6-0c02900208b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebbd54f-d755-453f-b237-ee849a58e422",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa93b4a-a8b7-4f36-9587-395892562651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70aabd97-a926-4925-9e64-04d5ae51c6d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f525525-ae46-4e8d-8cb2-94073b172fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f1061a2-d88c-480d-a76b-bdc22badfa23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0aba32-3d14-4b75-b991-c3b51bc35b86",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc422e7-eb76-4864-9eb6-773104ca0f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9745e8b0-40cc-42c1-87a9-9fce4b20740b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76831181-fe13-4425-94fc-0618828a0366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0832f95-72bf-41d6-a9be-a0da10efc470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a3f461-8bb2-4e59-a5ba-d2ac1b650abc",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d64ade8-6297-4fc2-b450-24aca401ca78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3679ca09-d98d-48f9-b4eb-8bcc507be19a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a48e8ba-5bb9-4e86-8f0c-c72a39d8cb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "513f0137-436b-4123-97c0-ca995335de51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee493c4-5850-44d9-a425-70ce29d8f061",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bcf1cfb-4df6-46cb-a9a7-1b8eee9f22bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f45118-2574-4536-a57f-f74400a86787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd64d52-aad4-4879-bb9b-e496b6990b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f20a178-df81-4505-ba0c-b52caec35621"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9a9a7fdc-817a-480b-a7f5-973b073c93b7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9959adf7-b4a4-4e3a-ab14-a73f9f614717",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e6ba12-4ea3-42ca-bd06-cbc6b40348ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1a75ac7d-3dc5-4262-a434-233451da3ed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c53b029-c8ee-4f38-ab7c-61c1c720e5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5263e20-88d7-4249-a6b6-a11a47436619"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5b9c858-8aaa-4ee4-80b8-8fbf3bedf3e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f25dcb2-cd25-41e6-9aec-0bba692cc755"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a6a4628-6fcb-438b-a07c-8e775a3abb5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa4bce59-cf89-4be3-96c8-06d2ab92b33d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "88c351ae-74fd-4f68-9968-2ef682c22cb9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2bd45e0e-31d3-47c3-a6cd-f90b93dca11b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d27a5073-a728-4abd-a5c3-9bdb6dd59ef6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04fc10fd-e3ae-4ec3-b726-714fe7e02768"
            }
          }
        ]
      },
      {
        "id": "2e615aa0-e527-4294-9356-564a26b91646",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "71bfa3b3-9c0a-4b34-bd3a-1cb27f869614",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6ecfcf78-b744-46c6-b676-372daab7bd8a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c77eeac2-b80c-4059-a289-510446608848",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc27caf-1b5c-4c92-ac92-8290cb8643c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a63e99c-1364-477a-8e7a-5d6f9f684222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcdffe37-4d74-47bb-bfda-7ee900f9d1be",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b41e2a-46fb-4393-be3f-9c3acc9847f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d22314-0a8d-4499-954d-dfab9c6a65ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4eea97-9ba4-42b6-8650-b8330d62817e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a838c4-531b-4aab-9b40-8029489d64e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb41bc3a-f61f-4a91-837e-188e0ee7e4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8377414b-5f3b-4c30-9ece-9df0327896f3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9785a29a-b4d5-4ccf-9161-05b701b4ab14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "384d6aea-db45-4e02-96e9-a5f457c02311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95576f43-4f09-4368-9c45-10c486450fb3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a672deb-c2ca-4293-bb7b-7df1e90e4659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af92828d-001b-4815-98aa-5e1654dbc5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc160eb6-d9fc-4c31-af1d-ba95e671b58f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47549cc5-31d6-4d3f-b0bb-b5834cb033af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca92c768-ea91-4bee-8168-3563003486ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b971a0a3-ee87-45a8-9779-d69e340f0e13",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb16fa5-a727-46c8-a000-6c89beb457a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f70282eb-4d25-4df9-bcce-3d6037c45cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "127e03bf-746f-47b0-a52f-5281ab5b0351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10901a72-ad94-4bef-90fa-1553ce5c5c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526bd018-ba65-4093-b76f-8330be565564",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11c7c10-2f67-469d-b303-8649aac87b8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa3026d1-934d-4f89-9845-fec396635594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce21f00-3a0e-46a2-9357-3beb3a815bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ff26a0-ea59-424b-8f48-f9a5852a5bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e106f8-f4e2-4f02-b50e-b2c3e96efd61",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4cde777-bf33-46ed-87d7-90d0a99d0974",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5de2185-3ac8-4889-abeb-34c01083fb89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eba078b-8de3-4add-9583-af76bdabca12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "750d2b9f-7eca-47b6-8a38-e24d127113ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72597130-2844-412d-b6fb-cece1d644e9a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d82920c-3c7f-4b80-8636-a5f5fe5a731d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ba31e89-8523-4e07-8fd0-da338b93da95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c957ae-e89a-4c07-a823-63c81da863c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f3305e1-2c1c-45a7-8e8b-e593dcac2bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679034e9-41d1-4af5-98ad-83c930190bbe",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1983ead-84dd-4d7a-89c5-b13d6f55577b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c11f35f0-b1ce-4ffc-8f60-d651d3429109"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "741a04a3-493a-436d-b00a-bf4a94c821eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "514e404f-860b-4e5f-ab81-3bc5df196892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa841da-05df-455a-a0fe-abbcfe4eabd0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e152b8f9-32a2-4dfa-8b28-6eb050038163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc4ce335-ad4d-487e-ab10-324da1f7767a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ba5643-2821-4a54-9cb6-afbdf25487c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f917777-1162-4c0c-9f67-774d62c45421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0270e8ca-603a-48c4-8176-483d2b925448",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d663f7-15be-426f-9e12-6920690e8719",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52669a21-a520-41df-89d3-3063e1acb13b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "796d462f-2bcd-4d33-bb54-b56ccbe0f877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "134b8040-b7f7-49d0-827d-10cc12760c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11fe3196-a900-462c-8229-204244a242e6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87b5c9bf-f8c6-475c-8742-9649040c25f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e265395-8645-4d58-b7ab-20d3edc59b5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c12c496-7b6e-431a-ae78-951bb2da71de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bf83567-2ab9-415a-8dc1-cdfe2e8651b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6418f85e-5120-44f9-9877-68604f04795c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c512ac84-45eb-4f3d-9b2a-b0d58978c7e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56d0c5e2-730c-4c02-8afb-d2b107ff5f86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e321300-5beb-4519-8a5a-019d1ac412d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18ae42f-a517-404b-a464-553105226644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc42225e-6ddb-4205-bea5-1c919331d940",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7b0fbd-2687-4031-93b1-b09562df607d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "772104e2-9304-4eff-8b18-89d3b9323b70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75f7bdb-1b5d-4c45-bb3a-da7dd277acc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f702e71-b350-4ec4-b219-09a9ea032add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe6712b-0762-4088-9c74-5946ecf18288",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67ac2e6-a974-44fe-bba3-14a0c3687bdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52913efc-bde3-4481-b98e-13363442a38c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c3b9cb-1a6c-4337-a466-d089a0b259c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4eff489-9271-4357-b025-64b6830d131a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1274cbb7-6b36-48f3-bf26-0956ebfffdcb",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac8c279-2f75-4376-81cb-b8745d3681dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba7a9c78-7078-49a7-accc-e17b847f7a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0def32-40c5-43ca-a425-5cbffbcb642a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd8a2199-cd3a-4243-813c-20a3eefc5676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8ab6cc-69dc-4f39-b213-a93e84177bd6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96805174-979e-4d37-ad88-c54d0b369cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fba36000-9d32-4c42-afcb-c7acda254aca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fccb9626-982b-4ac2-b516-75c53912a341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad931ca5-2d11-4a5e-bd71-d7373bb057ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f3c56e-4a75-4ccb-993c-4adbcd75659b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d06a1a0-1c7f-4a1c-bcdc-9ba5140769bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f2f3a51-2eea-404a-905f-778e7af48486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e2c360-a375-4cc4-8813-c74d4a38f2d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30505765-7875-4336-b1b3-0c08fd9f49d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d6f95c-8d7d-4c75-ac23-6e19aec47b5d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e1560d-c85f-4c93-94b0-8d1131d5b7f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0588f149-e662-4373-83c4-b6855f9efcf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf582cf-e818-4ec3-9492-7d2d46254027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2870b70-21ff-4aee-bd69-5164cc4099f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d823928-5b89-41ea-ba20-34ccb851115d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6bd70f-9766-4eaa-9107-4a425844dd8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5011959a-b997-4ea2-bda9-0314e2259308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7582485-098a-4e0e-9a39-a27e13c3a35a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59450143-6536-4b60-b9f5-754f8a0aaa5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef96470d-cc2a-4a61-bc9c-b5178be07b72",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6005ae48-d181-40f4-9081-f6df074ffa78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70206de0-d70d-4792-a54a-292ba6705cda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "617ee256-b02d-4b15-9c9d-d564e3cfbe96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98695ffd-ec0c-4fd2-b65e-1ff35cdfd125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80203f95-36aa-4903-be70-d3776a6da1cd",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6cfe9e-06d7-48ef-b5fc-64ace6d04aa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94ea2fed-4db4-4d7f-8a06-4e7481b7a45e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abcddcb-9dec-4b8a-9d57-d6a392d5f2ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e139e1-e8e9-49ca-896d-1649b69423f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9377439-d90a-4d90-87b9-ca93fa7e6a51",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3d07e3-63b5-481b-bdbf-c951f7e4307f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8da6cf1e-5f47-4552-bff4-50d326be1508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22043763-28cd-48fb-8557-eecafaa07b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07dec078-4ca8-4409-9c89-8c99903ec3ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0d548a-46fc-49f0-9cae-bef9aec1e196",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ab3de9-bd17-4d9c-a18b-17a6ad28a7b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "934d37e3-bb3a-4684-9820-6baada1c4208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "288019e6-1e7e-4ac7-9eaa-dfd329db9979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f8b12e7-c3c1-4308-8525-6b06b8b2bf88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf98bda-c22b-4328-9381-421d08242c24",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d329145-cc1e-4f95-b694-6d35a7131ecc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "601fc7e6-8b23-4b0b-972f-06cb34785963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf0bf9b-56b0-47bb-b715-48131812289f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a806f8d-9717-407d-81cf-7644c2741db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b144d5e-144f-4193-a187-d1b729918f8e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc663daa-49d3-4308-8321-3fca60df6982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf78c960-1cf9-42d0-82d2-e88680a502ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d50be4-e265-4198-b320-0460702e9a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6165ec7-190d-4a89-905e-e177b73f0822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2498a7c-dd57-44fb-828c-85d08ef8dccb",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859ab0b1-9458-463a-9d01-858b9cfaa66a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bd5e8a5-4960-44e7-8d14-9f846fdc79a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5445672-22db-4ece-a01c-f15a9f02663d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17f6a5ff-5059-4116-aa3d-cfdf5d8ebe74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5654457-aca8-4914-af89-29c5f3c79de8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e508a3e-f516-454d-b908-3f5bbcb137c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3573f918-1cca-405f-8153-44a8fe903784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d79f6d1-511d-45c7-b5b1-3777bcf3944b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "645e3ddd-9153-405a-a9eb-8ac0ba103041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a59cc3-12c2-4fb0-b4fa-d736e4f48f4c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28df9794-2af0-4322-a488-3535a3002f09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03822a3f-ca8c-4700-9ee7-d817779f36e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04611783-7de4-411d-bdfd-3982775f168f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b99a2389-01b6-4074-9768-47aff5a9ab5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f73bfec-6d3e-4346-a02f-8c8b9422263a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bd5958-bee2-4d7e-b14e-4b8177159cb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "770e45bd-b4cb-41b5-952b-c95e13a6e574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "254589eb-9452-45e0-81c7-121c84a3413a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93561079-4824-4ea9-bc58-0680341b5b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c23d7fa2-4640-427c-a197-15978df73684",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ac8415-27d7-4f0c-a448-8cde0d83d13a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0148a27d-5b7d-49bb-9ba5-4ab6e212562a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69630374-3880-43e8-8660-1ce34775f619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de7251b5-edc1-4349-bdcb-e03671d9e631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef8977b-7555-421d-9e99-841ee092c4c7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4289756c-c334-44a3-b7ba-27cc55702cd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77219557-8957-4501-a304-2a20bf5ffeae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3dc7954-d029-4a4d-9c1b-89734c748e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f429583e-748b-49d2-abd6-e42f6dca2cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2facc9f8-a8eb-4c49-a92a-3d0cfaff2ef4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0306159f-e7db-4bb1-bd6a-054d029d4368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "012ebdd4-6cad-47ef-aa4b-296c7092106d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd76ed35-76bc-4cbb-8d90-0e699d0dc493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbc422eb-b007-4743-b634-4144349fb799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272f4621-4672-4d44-8889-2cd371704294",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa46a3e3-65b9-489a-8ee0-48753e5e0578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ead0de9-48c7-4ae0-8bef-0fc08c95f4b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ba56e5-1036-476b-8992-c667a7465116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39587ffe-e192-4b47-83b1-7a249f22850b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a2bba18-81c6-4bab-be23-74e0d31cdee2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b6b4796-108c-44b6-99d7-1f5424c8bc19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d4f1e5c-8fe9-4dbe-ba6e-4d17841b4fb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7cc19d1-00fd-4d32-b35d-e597435a7104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be65134c-59c1-447f-8b78-4c6f48e1bb7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4b8b5b-4343-43eb-97d2-7bba0befb14b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68458d2-a410-4dde-b699-5e43f82ae4a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e363d5e8-5c4e-431c-bd09-7293078ccf5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "920e8721-57e4-4a9e-b59f-1a49b55af3f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d581ed92-53fd-46dc-8c18-4b57e63e886c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966b55f1-aa40-4474-94d2-a526b8fe9815",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f5b78d-5bfe-4843-9fb0-b560ae3b2845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c8b064-27e7-4a34-83fb-2e1f90c9e788"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f849531d-9aba-415f-8e18-9e026a62d7cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "491d6128-5d33-47d1-9be4-e43ffec3ba4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b0443b-036a-4bcc-bf5a-f10f30f5c7c0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453eb241-a70b-435a-89a5-8f3dbe4f1481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae224e1-ee96-4355-b5ca-b61fe4e59f37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c290ab-47c9-4b8d-939d-7de6c2fcac6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6699aca-7c89-4f2b-9444-e660a9ea720c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a50a00-09a9-4f8d-9fd7-6090cf7b8849",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e43d270-066a-4dc5-85c7-0141052e7c78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aec71c2-ac37-446d-9131-cd17ff86a308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d86f18c-cfce-42c9-bcff-2d867c488f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89193387-4528-44d9-82a8-982abc296c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4520c5-62f0-477d-86d6-dde89a46690b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ce150a-c93b-4002-91af-704c3d547b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8470c6f-45cc-4b64-8f4d-00690bd38aa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62589000-801d-43e1-ae25-c78f786746e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5686be0e-b1eb-4eaf-97dc-0ac2129c113a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7b2816-11db-42b0-bddf-1150d0209013",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f1783f-0010-4a94-9028-94fb00e40e49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a65f722-bc93-4191-895f-1e6d32d69d7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0551f89b-7cc9-4eaa-bf0f-bea127a2a6a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b125523f-aac3-4b64-b90b-901c879d176a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bacde757-767f-4775-9a72-31f991ce5248",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd58297-d7ec-452f-a17f-72692dcbd96c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e41e7918-036b-4a76-a563-1d13c1eb3bd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "293510f7-1b0a-4333-9d3d-2297e3562b4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "176a0696-b477-48b7-a5b5-487c2e23b3c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32b0ae8-8d36-451e-84ba-39cf7a9654c9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96cc87b7-02f3-4c20-a689-15eedbf1c07a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b38ba72d-4b64-40ef-b793-5e1c9c56353c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfea1137-f3fb-4fd8-9327-bbe042eaa7e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ceb6273-d98a-42d1-bdef-33f339c3c906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71fb3102-b1f6-4b54-b9f2-a112c661fbfb",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19bd42d8-9c76-4755-9073-7a22c6f301ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96ca1664-9dc6-4fbd-9557-841025624cdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb864201-f241-421c-87da-acff05b39eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d5797f-34ff-40a4-8962-7b8aef417e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db0b0ac1-726a-4ca4-bfd0-62f06657db08",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb147a1f-0776-4be0-b324-8ceac2da6925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d249ed-0bb1-4699-9d75-7f3ae5a2adb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e67afe-327a-488c-9cbf-2c308fd13c34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea8d45c-9b39-4c9d-9b78-4a442ac93762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c064a671-f165-427c-aed3-c1e8453b4748",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38cba8c7-e072-46ca-9742-09a7f6410e38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62621a61-e43d-40de-9643-c2db942ff7de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "947b0620-3e8a-4300-a2c5-41ccf1ffe5eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af4adcf3-8fb1-443c-a8d1-9efe0d48465e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8177c7e-5f33-44eb-a98f-e2d647b411d4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64412b7c-4fb0-4c8b-9879-5c7654c4eb07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ad7dc2-3fe8-42f3-b98d-1589662af8fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "223974b8-4dd6-4ef0-97ca-29adf22e427d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c04b556b-fb3f-4842-adf9-836c32122191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebfce64-ad40-4020-8010-c9a66aedbf36",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cfbea9-e64f-49be-9020-e9d27ecce32a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c33480b-9896-4596-9f79-db98d285dcf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7a48e9-c1a0-43a3-a7c4-6421af4bf9bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "701841f4-79bd-4bca-ace9-74f275965039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0ec2904-ee4f-45f0-b5dd-070d29a6b17a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5403509c-4efb-48b0-8fe9-46db20078370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e2e4a3d-651d-47a6-93e3-2b74b174627d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7412a1b5-04ce-4fc4-be44-f5a22cbf848a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7a1de69-df32-4dd4-927e-a33a6044dc38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d20e8c-fc9b-47a0-9be7-db0ba707c7a6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0edd47d8-d782-4bd1-9a0d-71d915d07ccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0db1bc3-409e-4c6b-b91f-7403d4e07033"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f1598a-2e97-4384-a8aa-0a77125e1fdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef61a317-1d9c-44f3-b246-648f0b3a0f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ef82cf-c3c5-4f9c-bdc7-86f5924c6fa2",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4347226-5363-4438-aed6-bddb13fa705e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "272846d0-92e3-4c18-bc64-f05c46e13208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "353152b3-dcb1-4968-8af0-09eac5dc9745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e20b19d-fb11-4a0d-8c90-0437f510e49f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0a938c-a485-4eb5-8f6b-dde82537ee60",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e70ab1-7303-4439-85b2-be06cc9ead4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15effbb5-f367-477f-b8df-f1cfd412b71d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9432cf91-660d-4204-b72a-04cd82337dd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1221a6f4-5aed-44b6-8868-5105fb636ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df290d4e-d42f-4bab-90b9-03bf0ecbad61",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad08c1e4-22ba-4169-9195-faf4b42f2bf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1ff8291-e067-42c0-b7f0-4ae0f83cd0f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb48ca8-a2fb-4516-b0d2-4c02a94f547f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0bc2abc-a0e6-4b76-bc8c-376a9bee0602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "915e5aa4-e16f-4e81-a3ad-332fb864acd5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f25cc4-3ee9-42af-83c8-f5f412ca665e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8ce555c-3092-4833-821a-4423548e98f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae59372-beaa-4857-b237-e7966f35e00f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef12e3d-98e3-4c84-b771-5a736a39e59c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018d3671-6886-4b2d-8799-7b34339823e0",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23eaeb95-176c-4f38-866d-69ac7ab70a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab4b810a-5358-413c-8021-23a93d4c1019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a5dbc0-85d9-4d35-9d56-3d65815f9d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f16f0bb-896e-4d75-a604-7568c69dfbe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a104b6e6-20fa-4adb-a902-fc4a64980567",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e4b9e2-e2c4-4a3e-9db6-7e8be943cef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d61e2ad-95bb-48d1-8076-abde82150bdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c39e5f-30df-44d1-bc6c-605b42ae1b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c470c89-2543-4d4c-a96d-a9f0dfba93a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134edc6c-ff42-4108-a411-cd27038191aa",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c9330b-408c-455d-a1bd-b29d89077871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f9acdd-efb5-4f20-b529-3a5b3661813e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ecaa5be-ea6e-4d55-9ccf-fb20363e6ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1be0a198-6a75-4cd0-bf6c-63c0e015239d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af2bef3-5d38-4729-bb12-ad8aca73b819",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c18921d8-f276-47fc-a799-99fb77e86eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3596c51-478c-4010-b65b-a1efe68676ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a09d2c-1c7c-4860-92d3-09cba06fd8b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfee636f-8ec2-4cda-beb9-5d8471b20d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4f3d10-a50a-420c-80b4-33c906f3712e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10385832-8310-492d-9e18-1104267e6d82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd32ffa6-9174-4646-b880-125c2a060581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8215d8-0083-4a07-bb96-5f26ff9a42d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c732bb96-f1a0-4e01-891d-f8a54652c067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3596647-f398-43e7-9165-fe199e9f7009",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a6fcc4-e03e-48c3-a95e-67442834e650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d29643d8-3bc5-4610-ac43-1c599e27f1aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50888741-5890-43f2-ae26-441f4e996489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34838228-0bb2-44d3-abeb-e76a1a961349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81e8c23-c78f-49d0-90a1-a433975e1bd0",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935c9586-f28c-46d8-9dde-f31231dbff40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd9dc1d-8a11-45f9-b31d-fabb27a3d593"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7315d52-02e7-4303-bad4-bd4a2c2f5f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d18f634-cfb8-42d6-858b-c529f0fbef0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24fd7bd-ccd5-4a9f-87ac-561733c3e5b8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416e928a-1127-4293-8462-3dc5dbafcb90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e429d566-e37e-4781-88d3-d515b206eeb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b8b838-6d92-408a-a356-c081c3323a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79691c11-964b-4042-811f-9676e8d8ab85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b8cac1c-936f-48c0-a2ac-bc496be8932a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b817c269-acda-44a1-8cf0-d0bcd7326fb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96ab0a7d-7aa6-4ea0-9449-e0db6c2ad1c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "161fb8dd-1956-421a-a4eb-bdac2bca6338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8953d192-42a3-4a8a-a2f2-5f8db8aecbc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8432f6e-b52f-4a0b-b27a-085637e3864b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056129a2-4de6-46e5-ad88-12f05677b8b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6e425ba-0c95-4827-82ce-0c7d20a26708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf31deb-e879-4ce3-9e96-21f22f33276d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a997fc47-4aed-4234-9f59-7f204842d373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79416e0d-de80-4346-9786-d7d0aa60d93f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b8e499-271f-41a6-827b-65f78bba6af6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e759293-9da0-4466-84b6-04ca3aea1143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26292a33-b78f-4704-a4a0-da842bac68c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "014d3d7f-91c0-4c6e-9724-8c3d1bd1fc9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b0a1f5-0258-45aa-9247-af6ebe1911fb",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13470b6c-23dd-4394-bdc0-ee05c7139b8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9fb2678-4908-4597-be9b-2744c842367d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2894d7f6-da90-4761-8538-a0aea88ada5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b25f19-6288-4744-9ee1-b3c4dd2d1d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5d9545-85cc-45e6-9b08-3fd3e7c4e342",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5531c9cd-63b3-46b5-a75e-205425823100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a81270fb-bbca-4238-934e-c7003aa1e2ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ba73fe-37f6-444b-bf9f-f6f7ede484c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1903dc1-ae2b-46f2-8e47-dbb49a5451a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780181aa-e948-4314-a577-84388dd00d72",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba73873-3863-4be8-a345-8abe3ce33d39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef5f8d00-33ea-4cd3-8787-d8a9c8906486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18809f71-5a0c-4ea1-afb8-77cf7501812c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f46fb9a-7daf-4ec2-ae0e-9b66b4c3f2e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07e82dc-c60e-4598-b844-9f61a6e012d8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3dcc0f-4340-49b7-941c-be9847bc16e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5ce2c09-3bf1-4460-a7d8-a77c9a918f5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fc1707-a0ed-456e-804a-82100ebea631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28b6ee73-973a-452b-a660-44b5a8e02596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d35ec8-7f3d-435c-a5d3-43eadc4880b9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91598054-6eb1-40a2-ab82-6e3bda27a98f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e42a920-ecef-49f1-8e62-7d1707605e7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db38240-fced-4f48-9fdf-aabe58ca83bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efcf9a5a-6d92-407f-be91-49b36aa9b411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e831e1-4e91-4775-a6fc-f9fbfe9fbb52",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f797cb4-58c2-43d5-92c8-964eb73e9b76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28c8fdc5-499e-481b-827c-d3c90d2db299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bdc6d4-2f26-44b0-a066-6165ea396755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ce6cf94-bb5c-44ce-8aaf-e3ff26c2d9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75691316-b161-4bfa-88ee-7863899183c1",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a5209f-78e0-4240-8340-9dcacf165736",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c891cb3-0871-48ce-a98e-e9ba5e58f1d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9575b4d-bb05-4dd3-a5c1-c6ce5a49e514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd70421f-a950-4e3d-9246-336d68356f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933315f7-3515-4e36-a0a5-af42d37a2ad9",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcdb55e-40fe-4576-8d36-7f097f3f7a03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "984e2c5e-cb34-481e-a37f-b9403ee6eaf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5add7e8a-b169-4b80-8c18-65e9923515bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e493fdb1-9781-4318-8c32-7d1120f44085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9394f66b-03c1-4728-8f1e-140bc695f72c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0303e88a-4e8d-4bc9-941b-85d01d68f053",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6164006-b5ab-495e-bd3d-6c76b7ef031a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5992b826-21a5-4a08-af19-ac17226048ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "518be016-7b7f-48b3-82c7-96fb91603f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e05594-a4eb-4fd1-83be-7a2d46a8df82",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955c0c59-9816-43cc-9535-f1069b7c9456",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afdaa63a-9d6a-4566-8031-bdb19958a4b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28fd1ed7-4e71-4602-976c-12a69f89385a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94e8b3e2-05c0-49f3-b3b7-5b797ee848c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88bd24ea-3030-4cd5-b217-d8e3e6360be4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc70499-1813-441b-9644-e7100b7a4f9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddc46458-7a8a-48cd-a384-9fb679f6f833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce2c8d7-1541-46be-9a7f-66c5e0ad7329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4e768de-108d-49eb-a8bf-28563a62b817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43ff1ae-24e5-46bc-8e2b-8982dcacc629",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c52cb1-4202-4c38-bc8c-9367144dea1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8b8ecaf-32fa-4e91-8364-ee7016a559b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6bfda39-c114-4a4f-bcd8-5143ce63add8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5540a048-3fbc-4d99-911e-fa62d5aab29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11f9697-1b4c-4c1a-836e-41b70f54554b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f61bdff-0154-46ce-a133-b5b7895e0827",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b6d2d9a-1f55-447a-92ba-2a2117c38c7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee790c73-ca27-4ba4-9e0d-444b8f7547dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f65aeaa8-4495-427c-b08f-4eed9c73496e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7351740-b609-4f40-a85a-eda1f4bd2e13",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e271eb-42c4-4b2f-812d-5c64ec71e2ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "704990d2-648b-4a1c-a480-b6dac9979077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5661dcb-904c-4e5e-98b3-82a5258b5cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "304c82a2-ea20-449d-b37a-17b68c8d616e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b56147-bfb6-4de3-b72f-fb848cf29984",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3377302-2fe6-42d6-9135-a6eabceca7fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19bb1c80-f722-4f53-8712-fbdcfeb52e44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3922b4-8f5e-4793-8745-db831bb72e9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4c577e7-f322-4d9c-8f84-ee70a6f7ac17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb84ef0a-af1d-4cfc-9f71-628295890743",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1860be-8587-4041-874e-f146d4721fcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62bff4f8-003a-46d7-9758-4ac44079e361"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74cdbecf-2d3d-48fa-b588-c45c629ca5a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adec4270-0653-4d71-a4f7-3b5769d56294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0fec8a8-9bbd-499f-9ae4-3b2af60f61d5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3fa1016-608c-4dba-8673-c5e4465d0718",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ea238d8-ffce-4ab0-95cf-b0dafbf93523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625cc0eb-24b2-4e2d-abe4-9978fce2fc33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e19cb4eb-7349-4324-99e5-a73e3e6824f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a42a83-a5cb-437b-9da8-10cccf6f23b9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a3c152-1f93-40ff-8d95-317d952f9127",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9e09b8c-cd7c-44c8-9a6d-bf6a87d9a5ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1845ff75-c610-44da-a5f9-2f58a5bfd01f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "175afdc7-ca42-4fb7-9aa0-3e60075d80ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0765c3fd-c54d-402f-a471-9f0b28f9b800",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1112ba93-da30-4849-98e9-56b85502b6b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6696741d-39a4-412b-b870-657a241802db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f9ff7c-d957-4dc1-ab7a-f207509d3f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2948bc-0974-4961-98e4-d23c6febf9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1450e4-b2b7-4717-993c-e43763d27e06",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85270c06-1ed8-4009-bfec-cbbef48bdada",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaf5fd79-e9bd-4608-b7a3-312ae099436e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "defeeb58-8f0c-4989-8996-99c716755222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a3638a9-5e88-4c48-9bfe-7c85b842c930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197dfc8e-abdf-447d-baa1-7c332b390392",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f47c9a-1440-480c-96b3-dd8572aa613c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02c89b95-703a-4d48-9e84-f8b53b99da5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "874f9299-a4c1-4582-8ec9-30a1dab4fd99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c58497-07f1-4e52-a27b-6cb1d310fc63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661c6509-2fb5-4ebe-ad7f-ad88be2f2e23",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74cec8c-73da-4281-9dd8-d48a894cb7ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "440b6bcf-dcd6-4cbf-a38e-6b2cb1af0872"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fcc6a9-1305-4599-9972-4bf55ff54540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39c0b702-a9f7-4b6c-93fc-f162d3f03603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d4309a-0ae9-4339-ac3e-84f4e26f2ea0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8e8bb83-bf21-4fbc-ad7a-95540828d18a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "771d2eb9-a5f2-4a9f-bfa7-62bb36ea35c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3814b7e-efcf-4f78-88c4-fb6cd254dc79",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2922c994-6aaf-481f-a11b-ff11d9f274a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a00deb-683d-44ff-82f3-8e4cbc39bdab",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0c56e2-9597-4bb2-bad4-0d73f498be33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39560a92-05b4-4788-b2cf-18658e42faae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1651c99a-0b5c-4773-b6e9-b70bbf2582c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "577027ba-6d99-49da-9b91-4c8eeb86879b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50b19f3-a8db-4611-a8fb-b72fe3409d70",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23a7147-3535-48b8-8e70-8670d1a19b8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2973b439-da95-45e1-8c59-9e069e938661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "444179d4-f6ed-4789-90b0-a7943b98b118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "902aecd8-811d-4136-8e7d-e300a03f8297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9064f5-80ac-4092-9f1b-d58568c77f52",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460dab6f-8de2-4712-b53f-38482fc7a202",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f178f6ab-02b6-4919-a22c-fb69e2498d39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20d973d-352a-479a-9f29-5ae32936181e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dee94648-a3fe-405d-bef4-87ca8aca7394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c04c824-ab6a-4ac3-8df5-bea77045f04d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9ff6b8-c1b9-460c-870f-1811eb93ccea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb30c8d2-a357-4d79-84f1-ab9b91f7b3ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e76ae4-1a95-4bee-b5c5-1604308ca5c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea7385ff-a666-4896-a64d-75450591772f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7028b8e-6c17-4b13-9a27-3edcea155aa4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a03f7ad-06dc-4c2f-9d3f-01bf51673087",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9cb4118-a980-485a-a83d-0188e14220ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c67d11-1e00-472a-ab00-e5bf1135a163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "553678db-53ce-4f8a-bbb2-63c6d4b7b4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2ddb8d-dde4-481b-bd59-1cc49d61b81d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b79036-8ed7-41b6-bc13-e7e373f329af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7669c96a-3280-4530-bc7d-a27f4e0019d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0e6485-8ca0-4622-8707-b1ccf6babd55",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beb1c22f-959e-4a9d-a025-ea6a90fbfbb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94262922-082e-40c0-a55e-3f721506d350",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d925b17-611f-46c4-a61f-4b2f26cbfd4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "457db1c8-a39b-42d2-9f42-cc9719bb5dee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b8aa7c-9d1c-489a-918b-238e7ff9ff9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bde7957-5b62-4e64-8c12-95ab7f6d1c3e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5cd862d-c2d8-4784-a063-25d051a4df39",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f58b1dd7-4c4d-4fcb-b6be-d6bf781cd644"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1a30882-5963-477b-be5d-349612522c94",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9148c9dd-d2cf-4a90-a369-ace717ff8383"
                    }
                  }
                ]
              },
              {
                "id": "1b3b53e9-6211-43d3-a22d-9a8e95560800",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2cde5b45-96f0-4695-a949-a4ebc24fc399",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d55e93-18b7-46b1-b0ca-7ebfbb78d034",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b649e83a-0874-4e33-9a73-b3cd45f3719b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66bf3b75-9a16-47a7-9850-e3f952a22ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f4abcfa-9937-4d2e-a180-6c0a14bfba08"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbdecf5e-cc01-426c-97c0-ab0c3bdf0bb0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e7f6f90-e87a-4138-a2be-6b0cac0ca558"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d51e04bc-ef14-46a6-9482-30bf6384da9f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fbdf3a8-be22-4ac2-be6d-8a75a7dc9728"
                    }
                  }
                ]
              },
              {
                "id": "e0928f62-a78e-443e-affe-d763d6a6256a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "42f5b18d-f0bd-41db-bfa8-aa310548197f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adad79f9-0dab-4d3c-bd94-57d653950a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "eeed4f4c-995c-498a-ba29-a476ee8d1438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ca50c6-9585-462c-b072-8cc0efc7a99f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13b1c673-a758-4085-83a0-b909a4c1c836"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "04986723-5259-4c38-b7a1-d66562320d3a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f6c2a4e8-a72c-4306-9c99-6f898f72d195",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af9e7e24-1b1f-4b62-9a4f-43901f97a401",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "723e4a17-32d9-4275-8fc5-3de31351843f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b7ec618-4795-400c-bbb9-e851c78db5a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83d45803-572e-41e2-a565-42eec3ad627d"
                    }
                  }
                ]
              },
              {
                "id": "6468d64e-241b-4179-b008-3e9767db54ba",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68f46b6e-9e94-4a7d-b1b1-9b6b7e27c4ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "74169ec3-d754-4f1b-890d-62d5dd1e2b34"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4873d205-b541-4309-8e33-bbb91e8e79a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3c96519-9316-42b1-b6d1-b7ea921b1229"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac0510e8-cff9-4f20-8e98-5f3ea6a6c310",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b4713b30-5c84-4e54-ae25-67acf2c48fba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06c76cf6-ce8d-48dc-91ec-8340802220ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dc3fb033-d390-41f2-bae9-f503748027e3"
            }
          }
        ]
      },
      {
        "id": "55de7efa-9739-4cb0-82bc-9a35d94f0df0",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b80304d9-b457-472a-9b73-b8e337b0c586",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e9d025a-e0d3-4e7b-aef4-31bd190eef2a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5721c04-7842-4730-86c6-bb0fe3c8cfb6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67101ecd-461b-4ca9-b44d-528137e8a773",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "28c7df75-77a8-48f6-9ac6-22eaff5e6347"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0825f42-431f-47c7-9450-e745f14562ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe0c42b6-8aca-42db-9d58-308cfb3598e4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92e7e6b2-6505-485b-b738-9f3cdc173596",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7de6e3b0-3cf7-43c3-acc3-defc9f6cb95c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c478257d-1ec4-4a65-ae14-299b56c27e2d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b3f9cb6-43db-453c-be66-4a0ab69b3061"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "346df51b-c86c-40b9-a7a2-5f97f2753e17",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "04ecf24c-4edf-4602-aa70-3ce3026a56a3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c4b35f4-7821-4d0f-9ec8-c63235c1ca6f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "28e3429d-7067-454f-a027-2d317b2e4f94"
            }
          }
        ]
      },
      {
        "id": "f7156e4f-b657-41af-96c6-085cfae4d562",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "051dbfcd-a7a5-4aa4-924c-fa65bb54e696",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2726002e-4ebe-4aa0-a605-3e6de6c75ce0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c267d545-c88c-466d-91dc-d326dfa2746f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5274af2e-d8ce-453f-848d-8109b38dd423",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07814f94-426c-48f4-b4cd-e2437914266d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62038ff1-3aac-47d9-a592-325955a69fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0720b310-cc67-420d-b1f0-4a537df2360e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb6ef390-bd47-4c5f-bcb9-6cd124669346",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "145b2b4b-e670-4bdd-b88f-8c0cfcf4ecf3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b025330-4ffa-46a5-8010-3aaaf6597759",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "552e204f-d988-48f7-980e-c681cf243f6c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9de0472b-5e98-4104-8516-c84821f04698",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b16d3268-7d18-4a8c-9044-e5f04be14eca"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "363dd67a-8c18-4199-b7fa-e48c7b8b36dc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f6dbb36-5489-4ca2-8c4e-24457c907a3a"
            }
          }
        ]
      },
      {
        "id": "b7dbdee7-e9b9-4b94-9e7d-b442ba3867c5",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3220d742-b7fd-4356-bb4d-1d7e7cf805bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b7d0951-3ee9-423e-8879-a63cde1d1589",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f3d2c749-7b35-4aaf-8382-fdc8c1277493",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9067bf3b-1471-416a-8ee9-cd69645463b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88f92bae-5796-448f-b43c-36925b05e3d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bcfff4e-8eb5-4802-8d6b-19afb61fead4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a3d53f9-ca1f-4956-b4c8-2966817ee284"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6f1cb7d-af36-4482-8746-297bded727a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51b40f11-c85c-4de5-8b89-0f46f6bd8157"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6fe9e0d6-36ca-4517-9d52-90eeddc87103",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02b21657-c19f-4875-a5aa-2111eb5b347f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22549178-5fc8-4836-9cca-17b194948888",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ec54dc8d-2b01-4488-9d11-70ced696285f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f2fa67c-eb72-4f4b-9687-007e1b473b94",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f33472c3-03c6-4f98-ae4a-3041920ce7f2"
            }
          }
        ]
      },
      {
        "id": "e80e1e0e-08ff-4693-ab47-151263783e7b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81793d5a-fa2e-4729-b77d-0901454d86fb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f51477a-b843-43ed-a725-d68371b06080",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1cf8bccc-6e53-4731-9dbe-0618e28f8076",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9982860a-dce7-4194-b893-daae39fc2fd9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0936543f-0b30-4fcb-8cf2-c5d935260aab",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 81.09122807017543,
      "responseMin": 6,
      "responseMax": 491,
      "responseSd": 71.7744915854616,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1710635808752,
      "completed": 1710635840971
    },
    "executions": [
      {
        "id": "41b1612a-423b-4b92-a73c-21a968a13d2b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f03d4ef6-8c78-4c7d-bcdc-bf5f347f2e81",
          "httpRequestId": "eec3293c-b094-45c6-8e3f-accec6824baf"
        },
        "item": {
          "id": "41b1612a-423b-4b92-a73c-21a968a13d2b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5bf94c57-bae1-40cf-9872-a3427284c680",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "f0d8c8a4-670a-4bc3-8c36-7b80d7138a7f",
        "cursor": {
          "ref": "13240e7f-644f-4ac0-9d36-67d9d1edeef4",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0bf428ee-75ac-4719-9ab2-a5b00349ecbf"
        },
        "item": {
          "id": "f0d8c8a4-670a-4bc3-8c36-7b80d7138a7f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "48928510-c229-4738-81e6-a693a76289f6",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "eac8fc33-e748-4fea-b296-60e1b9a9f712",
        "cursor": {
          "ref": "e942dda1-e33a-4a31-b317-2b4e669f7191",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1936ea6f-9fc6-469b-b7d7-17e65e9c4765"
        },
        "item": {
          "id": "eac8fc33-e748-4fea-b296-60e1b9a9f712",
          "name": "did_json"
        },
        "response": {
          "id": "e322ad9f-6afa-4432-9b67-2772206fec11",
          "status": "OK",
          "code": 200,
          "responseTime": 172,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce4bfe2-bf18-47e8-8ea7-813585e47290",
        "cursor": {
          "ref": "ab32be86-9381-443a-bd9b-42405f4b9ae1",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "507533ec-6fac-4670-b3e8-45629e270e9c"
        },
        "item": {
          "id": "3ce4bfe2-bf18-47e8-8ea7-813585e47290",
          "name": "did:invalid"
        },
        "response": {
          "id": "08f1284e-fa1d-4792-98ad-c2a62604c692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce4bfe2-bf18-47e8-8ea7-813585e47290",
        "cursor": {
          "ref": "ab32be86-9381-443a-bd9b-42405f4b9ae1",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "507533ec-6fac-4670-b3e8-45629e270e9c"
        },
        "item": {
          "id": "3ce4bfe2-bf18-47e8-8ea7-813585e47290",
          "name": "did:invalid"
        },
        "response": {
          "id": "08f1284e-fa1d-4792-98ad-c2a62604c692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa090589-1638-4914-ac14-64628a0d2582",
        "cursor": {
          "ref": "556f8a12-25ae-4757-8292-ba08f08a8c65",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6670ad4f-0cda-4a34-8016-6b54dbf5a0a5"
        },
        "item": {
          "id": "aa090589-1638-4914-ac14-64628a0d2582",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d381419d-0fef-4b20-8a7c-0bd00bde9987",
          "status": "Not Found",
          "code": 404,
          "responseTime": 112,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e6fb50-e8b7-41aa-9dcb-4e982f8b5ac9",
        "cursor": {
          "ref": "81bf1ae0-01b3-45a3-ab0a-4044008a3459",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "78ba026a-09f5-47a1-8929-f2288c57726e"
        },
        "item": {
          "id": "d6e6fb50-e8b7-41aa-9dcb-4e982f8b5ac9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "edfb892c-8700-43f3-a745-70d1a734d8b5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 55,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3c8cdb-6ec2-479e-809c-b6a6ac44cba3",
        "cursor": {
          "ref": "69727d67-d378-4fb8-b864-eb7d7f11847e",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d180747d-0295-457b-9e3b-82113ae6280f"
        },
        "item": {
          "id": "7a3c8cdb-6ec2-479e-809c-b6a6ac44cba3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "48badfaa-eb02-41e4-9562-7201aa33ca37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1aff13-9fa9-4e60-a988-23082ef5fbd9",
        "cursor": {
          "ref": "80534350-0ee5-464d-911b-d2c6f25231be",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "70befc2c-505b-4b12-b66c-c3df3ba27d24"
        },
        "item": {
          "id": "cd1aff13-9fa9-4e60-a988-23082ef5fbd9",
          "name": "identifiers"
        },
        "response": {
          "id": "c603058b-0d50-436a-b85f-2ac054d939bb",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b5c2d0a-7373-4334-9045-73cae436b3a0",
        "cursor": {
          "ref": "10a0b8f5-989d-422f-b612-2f6c21b42c21",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "32c63537-9864-4317-bba5-24796ed3e83c"
        },
        "item": {
          "id": "0b5c2d0a-7373-4334-9045-73cae436b3a0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "88e9138e-bfd6-4933-aa8a-6ca35b283f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68a8d14-e821-4331-b037-4903f38e94ab",
        "cursor": {
          "ref": "5672c50d-f3f9-47dd-bc38-dcf186e7d8f5",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2eb2aa96-3cc3-4463-a077-e6e7869f2432"
        },
        "item": {
          "id": "d68a8d14-e821-4331-b037-4903f38e94ab",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fdd6e432-afdf-41f7-914e-7203127966ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f01e084-10a6-4093-9cb8-10a9b5f04cb4",
        "cursor": {
          "ref": "25697668-a3f9-46f7-af9f-e8d4a4f8fbd5",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "39587006-cdda-4cfc-a834-d751a4a86475"
        },
        "item": {
          "id": "6f01e084-10a6-4093-9cb8-10a9b5f04cb4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f7fcb981-65fc-4115-9ead-af8d13fefab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72067faa-3eb3-4840-868c-4dce53dc7d7f",
        "cursor": {
          "ref": "61aea82c-16a8-4082-ae1e-e94b22ccccc4",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "32b00d64-405d-4807-9747-c408731675fa"
        },
        "item": {
          "id": "72067faa-3eb3-4840-868c-4dce53dc7d7f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "11871462-6ee2-4347-bab9-c65449797911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec34c1e-6b81-49d2-b8ba-d20776eae917",
        "cursor": {
          "ref": "e643d963-af91-4472-8e6b-13f0fb03b3df",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8f406af6-840e-4b16-8c59-65004c8606e0"
        },
        "item": {
          "id": "aec34c1e-6b81-49d2-b8ba-d20776eae917",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1e1a7fc6-07f9-441b-80b6-f1f378913158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01268614-d162-42e2-ac13-9c4cdd24e4b0",
        "cursor": {
          "ref": "12748c5e-e21e-434d-8e60-ca788546ea08",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "96f5d2ce-e5d3-4bd8-b8ff-944f7716095f"
        },
        "item": {
          "id": "01268614-d162-42e2-ac13-9c4cdd24e4b0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f51b0d48-d3c5-4fc0-a537-e036f9dc8306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a3ece8-afaa-4e6c-bd46-d071854a61bf",
        "cursor": {
          "ref": "44be546c-85d0-4001-b2ee-0d57fc5af666",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d57b63e8-5fd3-4524-b17f-6ed86969cf2c"
        },
        "item": {
          "id": "d9a3ece8-afaa-4e6c-bd46-d071854a61bf",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ec633287-2c60-4109-866f-1261550348cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "765e42a2-a558-465e-a620-d3bc16567130",
        "cursor": {
          "ref": "8977183b-8ba2-46cf-9465-f5bc72387e9f",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4db3709b-9d01-4671-b635-a3467c975dff"
        },
        "item": {
          "id": "765e42a2-a558-465e-a620-d3bc16567130",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "91b8377e-d73a-4754-93c7-128349e10ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db4425a7-5e6e-4051-ac74-6e38e76b4880",
        "cursor": {
          "ref": "1ecf383f-7936-41c2-96aa-e91608408c03",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "08563262-cad0-48c4-bed6-ce0741a67d2f"
        },
        "item": {
          "id": "db4425a7-5e6e-4051-ac74-6e38e76b4880",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6a4278e1-4f12-4aa9-9e70-a0fd59feb12f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e135156-7580-4731-8828-46050d5af399",
        "cursor": {
          "ref": "afbdaebf-22ce-4f19-a2ea-ee26f9d188c6",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "81f79b39-ca7a-406f-a60f-74769f237337"
        },
        "item": {
          "id": "1e135156-7580-4731-8828-46050d5af399",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4ccc7e1f-51fd-482a-8626-3f48a5cbcb5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7bc751-4326-4a54-ab9a-08c7e9ed1769",
        "cursor": {
          "ref": "85e81e54-8975-4f05-83bf-62754a5e4956",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0808c6cf-d173-4291-827c-dd925dea9cc5"
        },
        "item": {
          "id": "7f7bc751-4326-4a54-ab9a-08c7e9ed1769",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "49fc4362-c59d-4657-90a5-f300a395cc78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0d3d36-b210-4a3b-bf16-ea3ba4b96ea9",
        "cursor": {
          "ref": "70476f45-1722-4c11-9050-db2fb6052230",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ac147b7a-3883-43e5-9aa6-aeb074dbbca5"
        },
        "item": {
          "id": "cc0d3d36-b210-4a3b-bf16-ea3ba4b96ea9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8231a313-c0ab-43e4-85fc-53e64ef3be72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70033dad-8514-4def-85ea-2b604942402c",
        "cursor": {
          "ref": "d80c6468-714b-46ad-acf1-5974a0627c1a",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d32abe36-9dac-469e-9c6b-49ae13a5ec51"
        },
        "item": {
          "id": "70033dad-8514-4def-85ea-2b604942402c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "13110d4a-4f3b-4cf2-82be-97415dc2ac6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32dff1aa-6c08-4130-ad40-5ffdd442c7b0",
        "cursor": {
          "ref": "ba443a4e-7f9a-4d4e-af67-d109300d76c8",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4cf6ddb7-b54f-4afb-b7d5-dfe87bacc9b5"
        },
        "item": {
          "id": "32dff1aa-6c08-4130-ad40-5ffdd442c7b0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "54ef874f-80e2-4ff6-8f4b-c6b6e70076de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9757ebe9-5054-4350-96e0-d6ab40780710",
        "cursor": {
          "ref": "abe46dce-b96f-4195-a6c6-93e1f79374a6",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ee926c37-852f-4744-85fb-5eaf513d5fec"
        },
        "item": {
          "id": "9757ebe9-5054-4350-96e0-d6ab40780710",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "03c23fca-8832-4ddc-9f4a-7fd9b6f7a089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e1748e-d1b4-49d8-b44b-bdd8d08499be",
        "cursor": {
          "ref": "46519bb5-76c9-4aa0-904c-3e0981453e14",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "624a1dec-5ce5-41b9-8e5b-9daf1ea3518f"
        },
        "item": {
          "id": "b5e1748e-d1b4-49d8-b44b-bdd8d08499be",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "daf86b8a-d15a-4692-8475-847bf1c55f9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695fd6e7-3d5c-476e-98c2-dfb3e67769d1",
        "cursor": {
          "ref": "b9ce6658-e3dd-4313-b862-c2d2a3578d03",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8d461ffa-a2a9-436f-9dbe-713d69563edc"
        },
        "item": {
          "id": "695fd6e7-3d5c-476e-98c2-dfb3e67769d1",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "89beae0e-a044-4e06-8f29-d21b3e41bf18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c90dbd-ce38-40c6-a4d5-28f5d1ed9962",
        "cursor": {
          "ref": "775d2230-d6c0-4100-b4ca-691049d8a950",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fc60fd94-c456-48d4-9910-4c8b1bba9ca6"
        },
        "item": {
          "id": "d0c90dbd-ce38-40c6-a4d5-28f5d1ed9962",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0bb2aa12-02b4-4cda-979e-aacf5b736c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6188c8b2-95a2-4b79-9daa-42a48dff2520",
        "cursor": {
          "ref": "7b2912fe-ce5d-456b-aa54-892de390123d",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6b3a8b08-e590-4dc1-bb8d-3986b118d42a"
        },
        "item": {
          "id": "6188c8b2-95a2-4b79-9daa-42a48dff2520",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d730d8d3-4d80-4331-a038-a281642bc476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5c2aba-e1ef-4705-849c-f96acbea02a8",
        "cursor": {
          "ref": "d3206128-8b69-4379-927b-6792849da19f",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2f0cadc5-bb8e-425a-8416-f441aab4dd9b"
        },
        "item": {
          "id": "ec5c2aba-e1ef-4705-849c-f96acbea02a8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d233540e-770f-4bb0-9e4d-d77a50be3759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdfc9d25-afce-408b-a4f1-99df2c50717f",
        "cursor": {
          "ref": "bfdef2aa-e734-4230-a7dd-0eafe44b8763",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "85578928-282a-4ffc-9d43-e450904f13e7"
        },
        "item": {
          "id": "bdfc9d25-afce-408b-a4f1-99df2c50717f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d185d1a5-db87-4cc3-830f-e8c955a3fbf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d51dbc9-9021-45ff-99ab-77fc82580d35",
        "cursor": {
          "ref": "bc87b304-2de9-4c31-a9a9-0d4ca176fb70",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d5f28794-b6ad-4ac7-a84f-11f51f5a9513"
        },
        "item": {
          "id": "8d51dbc9-9021-45ff-99ab-77fc82580d35",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "039c923b-e8fb-4491-82b6-efcccab3c8fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb775773-5a08-45bc-8504-b4dc935a8cfc",
        "cursor": {
          "ref": "1e76f7e1-d1cb-49ca-9fef-4533a251592d",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c728739f-b4da-4943-9b30-96c1782526f9"
        },
        "item": {
          "id": "eb775773-5a08-45bc-8504-b4dc935a8cfc",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e6efbb0e-7533-49bc-8749-adcb48e64167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89deef28-b0e8-4189-b3c5-be7676ddbbda",
        "cursor": {
          "ref": "3f827d79-bfc9-4cb3-9c7a-3bf47a48f8f2",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "07f26e52-a086-498b-aa1f-61c1c60bb145"
        },
        "item": {
          "id": "89deef28-b0e8-4189-b3c5-be7676ddbbda",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "858416d2-3690-4042-bac1-023fe918db11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "055a3419-9b9a-4d87-b067-1e71d2fb1049",
        "cursor": {
          "ref": "e104711c-827c-4725-91ad-5a1e9bf52aba",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d3136b2f-58f1-4381-b3bc-1e65bb8c04ac"
        },
        "item": {
          "id": "055a3419-9b9a-4d87-b067-1e71d2fb1049",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b0a17bc7-f5e2-4be8-a6da-c544ca3a9ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85fc5096-c17c-4ad9-af49-1856285d64fb",
        "cursor": {
          "ref": "8fec1072-115f-414d-9ba0-f3ac3d92ca88",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "38e1438e-0afe-4d31-85ba-d0a873a8d1fe"
        },
        "item": {
          "id": "85fc5096-c17c-4ad9-af49-1856285d64fb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "344010a7-db47-47af-af1f-47ed5a9a0bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f438c39-bd17-4793-bd10-d88d22441d4b",
        "cursor": {
          "ref": "f527afcd-8356-455b-bbbd-a878331ce896",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1d720787-53b7-4d72-9310-dfbeb3795821"
        },
        "item": {
          "id": "8f438c39-bd17-4793-bd10-d88d22441d4b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "68cb6e3d-36df-4067-a1c2-c525af003d0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0632d57b-d783-43a0-ae92-39c4b9a0565c",
        "cursor": {
          "ref": "866a2626-b183-42e7-a482-bcc8b120f80e",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ed65e5d5-0d36-4abf-8e66-4b8ed61a58b6"
        },
        "item": {
          "id": "0632d57b-d783-43a0-ae92-39c4b9a0565c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "edba9720-ed09-4d3a-abe6-42180716d021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d49be1-890e-4c63-b6cf-b78ab6824aff",
        "cursor": {
          "ref": "b4f6cb12-8848-478c-86f5-4c00418d7d65",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "60a497a7-be98-4ec6-8146-e2df75269272"
        },
        "item": {
          "id": "c1d49be1-890e-4c63-b6cf-b78ab6824aff",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ab7b9cfc-e6cf-4eba-bdeb-1a9b39a76d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce606658-13d8-4561-bc99-8e98cf4b2b39",
        "cursor": {
          "ref": "ff155405-97bc-4a38-bf74-f427a15de5aa",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0d96c34d-b36d-4a06-a841-829fd2e6ab86"
        },
        "item": {
          "id": "ce606658-13d8-4561-bc99-8e98cf4b2b39",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "51b253eb-6cb7-4324-843e-be163c8e31a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a5018e9-9a80-4037-bafd-647badd85606",
        "cursor": {
          "ref": "c8dffcac-8afa-43e4-aa71-b6c92fbaf467",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6fb628df-0ffd-4d5b-9df1-3ce877888e72"
        },
        "item": {
          "id": "4a5018e9-9a80-4037-bafd-647badd85606",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f401183b-50cd-486a-a1ef-17f314195c05",
          "status": "Created",
          "code": 201,
          "responseTime": 491,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "79bb5dba-e34e-4b73-8409-9d82d26e95f9",
        "cursor": {
          "ref": "9f5f4c47-fcfa-4285-b0a7-dcfe93d91187",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c04a3f04-817b-4d98-aa8a-7a4e4638cbf8"
        },
        "item": {
          "id": "79bb5dba-e34e-4b73-8409-9d82d26e95f9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8cebb799-d2dd-4cd8-9860-74bb3529410c",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "cd321e13-65c9-430c-9287-74de64c4aeb0",
        "cursor": {
          "ref": "6fbf7b01-4d55-4fda-bfd1-9cf0d00c118a",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "47fea131-c4c9-4f60-9ab4-4c53c00065d4"
        },
        "item": {
          "id": "cd321e13-65c9-430c-9287-74de64c4aeb0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "24c40b85-815e-4cc3-bf63-80078b96ce6d",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d1bfda7d-1bac-4984-9044-61879403472b",
        "cursor": {
          "ref": "3c4e780e-f08d-4366-9c31-aa7ed5a9b448",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "64e7eca4-fdb0-4f42-bc33-a42c72bf2e82"
        },
        "item": {
          "id": "d1bfda7d-1bac-4984-9044-61879403472b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "251e7e53-53b6-4d9e-b5a7-1ca642d18684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b57ab824-a8d1-49c1-96e8-d9a09164bb16",
        "cursor": {
          "ref": "ad413e3e-dfa8-4ea3-bbc1-00b60eaff451",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "bea3b96e-4413-4e1d-b680-891623079105"
        },
        "item": {
          "id": "b57ab824-a8d1-49c1-96e8-d9a09164bb16",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7be07f5d-da75-4a1d-aca6-937b97995fc5",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "29cb3c73-abd1-46e5-b592-fef433482fd1",
        "cursor": {
          "ref": "ba02f973-056f-4485-810b-cb86c6fb599c",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1a6067b4-a37a-4416-85d8-6980c7011947"
        },
        "item": {
          "id": "29cb3c73-abd1-46e5-b592-fef433482fd1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4e632568-6cc3-460f-9d38-480b1b5a9726",
          "status": "Created",
          "code": 201,
          "responseTime": 376,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ce6f63e3-1d8a-4fd5-84a2-2c1fc739371e",
        "cursor": {
          "ref": "1f26b9db-d9a6-4b50-9de2-4ec50ec034d0",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6b40b6a5-ce37-4272-9b27-c4709f2ae367"
        },
        "item": {
          "id": "ce6f63e3-1d8a-4fd5-84a2-2c1fc739371e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "99a36cb2-89f0-430c-8b88-3bd222ed914c",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e9d2c36d-d8fa-45bd-b0c8-f995487c8779",
        "cursor": {
          "ref": "bc47593b-3bf8-4ebf-8fd2-f7d624c98d01",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8e81edc5-ccff-49a0-8c43-8f7e0dc2e926"
        },
        "item": {
          "id": "e9d2c36d-d8fa-45bd-b0c8-f995487c8779",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c608ea5f-2a87-44d1-b54e-4534890d8b8d",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0025efd7-02ef-4770-b1af-fdd6e7cb5a53",
        "cursor": {
          "ref": "a80d4297-e2a8-4033-bf2c-0e09532f062a",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "685edb20-ccf4-49b4-902b-ad5f0a9f1fc3"
        },
        "item": {
          "id": "0025efd7-02ef-4770-b1af-fdd6e7cb5a53",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f97bf19b-b6ee-40cc-a50a-94da8b201338",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3f468018-6e4a-499b-a705-ae6599d29f4b",
        "cursor": {
          "ref": "5cd6f670-b1ae-4c5a-bae3-55a597f5d37e",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7b9bd454-8d62-4dc1-9f96-9a5ba0c3b49c"
        },
        "item": {
          "id": "3f468018-6e4a-499b-a705-ae6599d29f4b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f8cade66-5076-449c-bfe3-9d34723b2630",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6e33eefc-644a-4662-8c8a-c5f53b7215ee",
        "cursor": {
          "ref": "6337d322-fa15-46d0-a66f-d72efdea5897",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "df79caed-607b-411e-abd0-2bbf77aab39a"
        },
        "item": {
          "id": "6e33eefc-644a-4662-8c8a-c5f53b7215ee",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "37c11e8a-c5bc-4f46-a676-88c6016ec326",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c9fe077c-9b7a-4606-b5ff-6ec51848deb6",
        "cursor": {
          "ref": "0f7412c2-fde8-4208-81d1-eb674a70a49a",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "87c325d4-95f0-457a-833f-5d0c394d32a5"
        },
        "item": {
          "id": "c9fe077c-9b7a-4606-b5ff-6ec51848deb6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7870a6ab-3460-448a-9f92-e7e4b6e416ac",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e1cdf6cf-0b23-4d5f-bfe3-9a95e396f163",
        "cursor": {
          "ref": "691f11d5-62a5-446f-9265-3fa309f15ee9",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4792488e-96aa-4d8d-90c2-45e4bc83358d"
        },
        "item": {
          "id": "e1cdf6cf-0b23-4d5f-bfe3-9a95e396f163",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1bffa780-fd47-4d62-a2a8-3a02803c908d",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "35ccb4ed-7871-49a9-a8ec-e59d5a682201",
        "cursor": {
          "ref": "4f997496-0cbd-4ec7-add0-3314c58f33bf",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d16b90f4-d8e8-4fa3-962b-23adbb7ef670"
        },
        "item": {
          "id": "35ccb4ed-7871-49a9-a8ec-e59d5a682201",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "42b2503b-0a67-4bcd-babf-15d469339202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86da396e-c617-4e5b-b836-d8d17e051f65",
        "cursor": {
          "ref": "d493525a-5751-4f4c-93e0-795777ff676a",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7fe75587-d0a8-495e-8344-d47979c70d4e"
        },
        "item": {
          "id": "86da396e-c617-4e5b-b836-d8d17e051f65",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7c182f97-336d-4803-a2c9-81c4036d8341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47adffdc-09cf-47da-8205-d1d58013532a",
        "cursor": {
          "ref": "808539ad-f860-4e9a-8516-01e5336c1c67",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "81751430-ab0c-4b14-98cb-5ccd19a64e06"
        },
        "item": {
          "id": "47adffdc-09cf-47da-8205-d1d58013532a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "41c2c9f8-0d25-4998-a3c0-667fc1528c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6930dc30-029c-4787-8d5d-8f1eae3f98bf",
        "cursor": {
          "ref": "126712f5-3f6d-4d0d-813a-0adb4f376950",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8697e1df-7624-4194-a0f4-e28987791db9"
        },
        "item": {
          "id": "6930dc30-029c-4787-8d5d-8f1eae3f98bf",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "94d303a4-f05c-4177-b654-7340b3db1f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bcf014f-5877-45dd-a27d-d7f61b698ff9",
        "cursor": {
          "ref": "b6406396-548b-4ef5-a151-34f977984fdd",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6d5ab05a-8e39-4115-a886-b17f36e85b26"
        },
        "item": {
          "id": "5bcf014f-5877-45dd-a27d-d7f61b698ff9",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "546ddce4-b1b7-4912-98a2-48d8ddcac6b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b113cbc-d38e-4a1f-b53f-6b1d329fc3ff",
        "cursor": {
          "ref": "33210552-651f-43ed-9fdb-68e9da41fa14",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "561a48de-8743-47a4-b823-5b65c19f40bc"
        },
        "item": {
          "id": "6b113cbc-d38e-4a1f-b53f-6b1d329fc3ff",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5bff0fe1-b537-4760-b9c3-86f2f99c2ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb9cada-9826-4344-b44f-dd807b3e3f35",
        "cursor": {
          "ref": "de57e4f6-65ba-4402-82ee-b3fa96f20bc9",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5f80c1d2-c11d-4cfe-bf03-eb93692f4d8c"
        },
        "item": {
          "id": "bdb9cada-9826-4344-b44f-dd807b3e3f35",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "52692b23-9a7b-489d-a287-554db8a6ddfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe461d2-b1da-4ea1-86f2-60d9fb8a3940",
        "cursor": {
          "ref": "8600c8be-91ea-4294-ae2d-03a119532b9b",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "90be5471-0ca7-4af3-8430-8f0d445373fd"
        },
        "item": {
          "id": "8fe461d2-b1da-4ea1-86f2-60d9fb8a3940",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "113ef445-21c7-4582-8fd2-ad68151a0ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efcdfd68-a811-419c-b463-644133e0f3d7",
        "cursor": {
          "ref": "4844316f-7747-44e7-ac11-4679f2a1baa8",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "35e4f7b3-efea-455b-a473-eba01fc5a953"
        },
        "item": {
          "id": "efcdfd68-a811-419c-b463-644133e0f3d7",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a01f3f4f-67cf-4b3d-91ab-fa7f37d2d97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fde80a9-0b13-4b4e-945a-6302a47fa17b",
        "cursor": {
          "ref": "91768791-4a00-4cbb-a927-15d334933a55",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a52e5025-9dfa-4135-9104-1b7c7c1a47fa"
        },
        "item": {
          "id": "3fde80a9-0b13-4b4e-945a-6302a47fa17b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3bf95bfc-e73e-481d-8cb5-ccc7bb40917f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993772f9-2fff-4aa4-9cc2-31ededfa9cd8",
        "cursor": {
          "ref": "0867ff89-dd74-4add-965f-29a27d9d4192",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "add4c661-7998-4513-826d-59dea7f177eb"
        },
        "item": {
          "id": "993772f9-2fff-4aa4-9cc2-31ededfa9cd8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5b07cb0d-d7d0-4eb6-b5c5-9844aee420b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a40c17-3f2a-4ee9-a39c-dbbe35ca4a35",
        "cursor": {
          "ref": "bc5a7733-354a-40f8-9e3b-7139620fd9d7",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3913de1e-a0b6-4c7a-9cf6-b3130dead710"
        },
        "item": {
          "id": "e2a40c17-3f2a-4ee9-a39c-dbbe35ca4a35",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "742845f8-a368-4df9-9a90-edd3b5958cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f406834-66cb-46de-b0a4-a078b8926e28",
        "cursor": {
          "ref": "89d47702-b7e1-4993-902a-747d44ab1804",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "826b3210-3e21-41cb-894a-2b67d15cf98b"
        },
        "item": {
          "id": "4f406834-66cb-46de-b0a4-a078b8926e28",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9e892599-db0f-4a91-abb3-c7c749fe7916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4241aa2d-fd6d-4aad-8438-932f832427a1",
        "cursor": {
          "ref": "51b64ad7-c765-4301-b647-0655992a61c8",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c539e4f9-5d34-4a71-b2a3-63562d5e4336"
        },
        "item": {
          "id": "4241aa2d-fd6d-4aad-8438-932f832427a1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8cec60a7-4537-4ba1-abea-02b34e708531",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "fd533f3b-548f-41be-84bb-5364c2038368",
        "cursor": {
          "ref": "b43c6661-1dbc-42f8-8a8b-e19fe96b7a60",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "176e27a7-6926-4a4c-822d-ed1db2138b97"
        },
        "item": {
          "id": "fd533f3b-548f-41be-84bb-5364c2038368",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "11663092-707e-415a-b485-b2c5bb1af0f0",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "ab380e9d-fa72-4173-8842-88f702b5b5a8",
        "cursor": {
          "ref": "78dad77e-5103-44d9-bc5e-d8363963b1fe",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "95e8c40a-bf4c-4401-9714-517298779202"
        },
        "item": {
          "id": "ab380e9d-fa72-4173-8842-88f702b5b5a8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "449e6dd2-6997-4de6-9acf-21e7b5852a07",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "68693c23-8dea-4378-80fc-ace325d784d1",
        "cursor": {
          "ref": "0be58894-b6b6-48f1-9807-4a71f1188c30",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3e9082d2-0faf-43fb-8246-a78ce2cad87e"
        },
        "item": {
          "id": "68693c23-8dea-4378-80fc-ace325d784d1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c9f1c978-eb6a-4e7b-b63a-b7efd61af16d",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "63723468-714e-44d4-9c44-4ed61fe2bfe3",
        "cursor": {
          "ref": "6e021c8c-ac37-4b01-ae96-4f844205a423",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "47696fa9-c356-4c2b-9828-48be06f818cf"
        },
        "item": {
          "id": "63723468-714e-44d4-9c44-4ed61fe2bfe3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ac8348c1-3098-4d1c-a5ad-6327980dece3",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "18128e61-c773-4276-9e4a-06978721845d",
        "cursor": {
          "ref": "715af017-a7d6-4d33-aad3-61ab81d1108a",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "dda3a6a4-0ac1-400a-b9eb-87453ed1b587"
        },
        "item": {
          "id": "18128e61-c773-4276-9e4a-06978721845d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2b3226f1-76b3-4403-8e8f-aa8729d74691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7455cd5-ef62-4c92-8ff9-7abc5f5a1e67",
        "cursor": {
          "ref": "1c19c808-1e68-4711-9849-94d6d98288ec",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "82d0f2ce-0794-4ae1-8da3-2bd899f92221"
        },
        "item": {
          "id": "d7455cd5-ef62-4c92-8ff9-7abc5f5a1e67",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "af808436-333e-47a7-82d5-0e650fce3e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a6c149-76b5-4a5b-b9b8-bcadd4eac596",
        "cursor": {
          "ref": "b04b4688-184f-43a2-a10f-3aaebef267a3",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "99ef3340-6195-48ac-afee-58085ba1a77d"
        },
        "item": {
          "id": "e2a6c149-76b5-4a5b-b9b8-bcadd4eac596",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5b8e4fa7-0ccc-4228-9753-7c4254665e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950852a6-3354-4d52-839f-315653870a24",
        "cursor": {
          "ref": "d8ba6955-742d-4da5-a33e-4f9b284b1dfe",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "dba84460-5348-4cae-83f7-fb03eb84add7"
        },
        "item": {
          "id": "950852a6-3354-4d52-839f-315653870a24",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "37cefe10-c25c-431c-a5a0-66d279639632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b7571e-e8f6-4840-bd65-b702a0a10be5",
        "cursor": {
          "ref": "7884d34a-ab64-4765-b9e7-f9ded0be4fd7",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "894327c9-434b-4eb2-a704-eb37bbf42ba8"
        },
        "item": {
          "id": "43b7571e-e8f6-4840-bd65-b702a0a10be5",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7b42ba93-fd8d-4b80-92b5-7b9c85a7d610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d171af-4ed2-4ab2-80a7-33fe0539865b",
        "cursor": {
          "ref": "161beb8b-a23c-4b50-9730-158113b3f4c4",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b6f272b4-55bc-49ee-bf99-0016bd600c11"
        },
        "item": {
          "id": "f5d171af-4ed2-4ab2-80a7-33fe0539865b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a020914e-48ac-48da-a080-535ed067013c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd565d1-1858-4a5b-88f2-367bf71ab263",
        "cursor": {
          "ref": "da53168d-34e8-46dc-aed2-765eb91a0fd0",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cba9ae0b-b9c7-443b-af20-99b04d3a16b6"
        },
        "item": {
          "id": "8cd565d1-1858-4a5b-88f2-367bf71ab263",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "edd09397-3942-4c47-b12e-65cb43e3daed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22839301-6f0e-4a29-bf9c-8f0333929045",
        "cursor": {
          "ref": "3177d029-69c5-4c06-a8a6-172c99c9f917",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "46d6c9c7-1a86-4b84-a929-b2fdf786c996"
        },
        "item": {
          "id": "22839301-6f0e-4a29-bf9c-8f0333929045",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1fbedb88-0432-4add-8b4d-df02dd79d7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf460bdc-a256-4e78-85b1-9c3ef0433a69",
        "cursor": {
          "ref": "52173ec9-53fb-423d-93e7-cbde2d4cd780",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "080142fb-8e15-4037-bf5b-b4af9975d970"
        },
        "item": {
          "id": "bf460bdc-a256-4e78-85b1-9c3ef0433a69",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "287461a5-cd56-462e-a5b2-acc327d0a60e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54598db-b139-4eda-a398-eca79f0367bb",
        "cursor": {
          "ref": "cc7c3e87-d2ad-4ccb-b7a4-c762786d22dd",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "adccf912-4064-4c11-9619-4a5f0a7635ce"
        },
        "item": {
          "id": "d54598db-b139-4eda-a398-eca79f0367bb",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ac92c571-449c-4825-8863-562c8ace8695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "384abbdc-9e82-432b-bc89-795604714d09",
        "cursor": {
          "ref": "de2e4efd-653c-4a9f-986b-00e7e2669e99",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4ebc8ac6-1b6e-4874-bc46-b259b72d14aa"
        },
        "item": {
          "id": "384abbdc-9e82-432b-bc89-795604714d09",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f8130577-6d00-4d35-b4b3-d5a5af1748a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653b5762-48c7-44db-b95a-5c7a09e16576",
        "cursor": {
          "ref": "770de897-abc1-4774-a64b-41fc74245bed",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "bbd7e008-cae5-4087-b45d-e0e4aaf10f81"
        },
        "item": {
          "id": "653b5762-48c7-44db-b95a-5c7a09e16576",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b27a9d7b-b169-4c41-8784-bc5578a7be72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad9b3e3-24a8-4c71-b473-d2ddf047b9a8",
        "cursor": {
          "ref": "666b8534-2a62-4554-b2c4-88fd36b90d62",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "35303030-0de0-4b7b-a13a-256c940fedb7"
        },
        "item": {
          "id": "0ad9b3e3-24a8-4c71-b473-d2ddf047b9a8",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "698a30c7-4a20-49b3-b35c-57ac4e2628a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7cb7006-80ac-47bf-8b0f-075f670dd4b9",
        "cursor": {
          "ref": "050c7886-e805-48c5-91eb-8d65835abb81",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5b6eee13-3b57-413f-ade4-e06c993a783e"
        },
        "item": {
          "id": "f7cb7006-80ac-47bf-8b0f-075f670dd4b9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b558e21f-c96c-4143-a7ed-9ca12b7e8850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40108c9c-2789-4e26-be5c-35ff9c8158d3",
        "cursor": {
          "ref": "fa7a9c33-5d4c-4709-ad71-c721a6eb06aa",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "37d1aef1-ca2a-4e0d-b647-d8d2f0ed3bff"
        },
        "item": {
          "id": "40108c9c-2789-4e26-be5c-35ff9c8158d3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5226ca10-6d69-4759-982c-7638a4deb036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0167c93a-694b-4f93-be52-cc4e9c60e08c",
        "cursor": {
          "ref": "2199c3b4-560e-45d4-ad73-bf44b751c619",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3e53be06-e623-4951-85d6-b124a05f658a"
        },
        "item": {
          "id": "0167c93a-694b-4f93-be52-cc4e9c60e08c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "96178dcf-9df3-412e-97de-1f641c7efe0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4026c22e-0169-4713-b73e-44b49b2acd7d",
        "cursor": {
          "ref": "d8b7ddd7-87aa-44f2-9f0b-d8ba3f72fec2",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "027a3632-3a08-47b9-89d9-19bc4af04c0a"
        },
        "item": {
          "id": "4026c22e-0169-4713-b73e-44b49b2acd7d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a4769b24-735b-48e9-b34e-ab25e9e23536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc612e2e-2955-43e6-9292-4654e79f1d63",
        "cursor": {
          "ref": "7fac4c19-bde7-44e4-af4e-791bcbb749b5",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8c80e48b-3255-4105-a14b-dd8c7d9e3ec2"
        },
        "item": {
          "id": "fc612e2e-2955-43e6-9292-4654e79f1d63",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ec22f189-e844-4322-b92d-df12450807ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a1818f-762c-478a-ad2b-374dd2651bf7",
        "cursor": {
          "ref": "945fe5f3-b16b-4a23-a45e-732347d6e752",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ed7bf9c0-d859-4e41-a731-673d410ac227"
        },
        "item": {
          "id": "e4a1818f-762c-478a-ad2b-374dd2651bf7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7c07f45b-b504-4238-a285-f8b55ef8e901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7e1523-bbf5-4537-83bc-4d8abe159a0f",
        "cursor": {
          "ref": "c6a9b568-89df-4ba0-a1da-89b500713b7f",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "933ca3e5-baea-47e2-9e02-a6f6ae90da9c"
        },
        "item": {
          "id": "8c7e1523-bbf5-4537-83bc-4d8abe159a0f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d9e31cf1-103f-4a88-bb56-783cf7c1f514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a731ac-3e55-46aa-88b3-d5a3d133bab9",
        "cursor": {
          "ref": "95c949dc-e42f-4312-9938-87607fb88467",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7a7c5908-5cdb-4d06-914f-8d7cb9708ac8"
        },
        "item": {
          "id": "e3a731ac-3e55-46aa-88b3-d5a3d133bab9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "506645ba-d11c-4629-8409-a9b568c85cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54727bf-3b46-4dc1-9131-cc7192790b4a",
        "cursor": {
          "ref": "56832d9c-1560-4930-a384-f833176ba076",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ed3862b0-16ea-4b7d-a8f7-eb9175a1473a"
        },
        "item": {
          "id": "a54727bf-3b46-4dc1-9131-cc7192790b4a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "cd373995-a5ec-440b-9df9-5bb45943a156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2264ee74-313a-44f4-962d-ae340f566d69",
        "cursor": {
          "ref": "0d2d7fca-6775-4f18-95f6-064782d1d79d",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7120071a-dd63-453d-a8eb-3a8617adb280"
        },
        "item": {
          "id": "2264ee74-313a-44f4-962d-ae340f566d69",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "da9fd05b-8d40-496f-b826-6749a60caffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28cd8f1f-8aad-4553-b349-b75235a3f2e1",
        "cursor": {
          "ref": "f6b5ae30-1781-4951-89a7-15c06a0add26",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9368010e-a1b6-4914-8dfc-c114b0259edc"
        },
        "item": {
          "id": "28cd8f1f-8aad-4553-b349-b75235a3f2e1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4ed988eb-0869-4f7c-98c8-50bcdf77d0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "766c3c1f-6f25-4e4d-ab9d-45ab334c72bf",
        "cursor": {
          "ref": "05e3dbb1-33bf-477f-97f4-05b3eac34cc3",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "dd5a5811-88d4-4e71-bc90-ca82a65f4519"
        },
        "item": {
          "id": "766c3c1f-6f25-4e4d-ab9d-45ab334c72bf",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c35e5444-25a1-474b-8207-c000e7513559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce8d1f8c-c01b-4ce5-9aee-62e0d2c97ca0",
        "cursor": {
          "ref": "1e2161a1-58fe-4c0d-9514-0affa3d02f3f",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "48ad7e73-ee81-4cad-95c9-d817cb735a9a"
        },
        "item": {
          "id": "ce8d1f8c-c01b-4ce5-9aee-62e0d2c97ca0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "72e58178-b920-4ebc-86a1-f22bae71e018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b966fd-6c87-4c2b-a0d8-d217e940f1c5",
        "cursor": {
          "ref": "dfc5d982-42c7-46b5-97de-5f54e8405ec7",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "47a6b136-df17-46a7-948d-c7158c22b9b6"
        },
        "item": {
          "id": "62b966fd-6c87-4c2b-a0d8-d217e940f1c5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "edcef8a1-4103-41d7-870c-a9b477879881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e353177e-91c0-4de3-9b07-34e60b5f5d18",
        "cursor": {
          "ref": "0f70b8cf-41c7-474c-b402-d6ca8a53b54d",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "dd101865-6ec2-43d2-91f6-54cc617bdb18"
        },
        "item": {
          "id": "e353177e-91c0-4de3-9b07-34e60b5f5d18",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "8e98b584-0e06-4629-90ee-165012b1c4b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcec3f52-f6a1-4a86-9dc6-0f7cc4059e0b",
        "cursor": {
          "ref": "7b500b72-9711-4a64-a3f1-6123ee0922a2",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "20b7811f-c4ec-4150-b966-9c0766294241"
        },
        "item": {
          "id": "dcec3f52-f6a1-4a86-9dc6-0f7cc4059e0b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "47bf9e32-b5b7-4d00-9787-112d85240639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0350db38-192f-4a70-b708-b44c5bbd213a",
        "cursor": {
          "ref": "b63d3e6d-0e77-454d-a590-af8fb5904d16",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6e8360f6-a878-4ac2-8a18-a6c1a249e5e4"
        },
        "item": {
          "id": "0350db38-192f-4a70-b708-b44c5bbd213a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6cd8da94-bbcb-4948-ae25-3face72e6e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e299767-e81d-4edd-9415-8009020f9977",
        "cursor": {
          "ref": "a9719fb0-83b7-4822-9bfa-8923db01e664",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "af2e619a-bed1-4fdc-ab4a-adf01d70e338"
        },
        "item": {
          "id": "0e299767-e81d-4edd-9415-8009020f9977",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f9d11361-4b6a-470b-8e07-18d72b4f8c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdabb87-fe74-48af-ac55-797777ba0bb7",
        "cursor": {
          "ref": "59b1bede-6cb9-4d27-a66b-47224866ff6f",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0898565d-761c-44b4-8f1a-e8180ff49819"
        },
        "item": {
          "id": "0bdabb87-fe74-48af-ac55-797777ba0bb7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4f7e5134-0496-4702-8066-4274f5e851dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca4f8638-096e-4c7a-981f-54d438207d3b",
        "cursor": {
          "ref": "794c194a-92ed-4ac4-aefb-da8848282633",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d7f16ce1-a82d-436a-9e2c-54b6db43b0a7"
        },
        "item": {
          "id": "ca4f8638-096e-4c7a-981f-54d438207d3b",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8dd59334-cefe-4cd8-bf24-6a8a0eec7ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "6b94d59d-c6fe-42e8-8982-01c5fbf61e55",
        "cursor": {
          "ref": "e37137c6-1b79-4ff9-842d-e09cebcc6a76",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8f554ed7-1796-471f-8b71-67ac905ab60a"
        },
        "item": {
          "id": "6b94d59d-c6fe-42e8-8982-01c5fbf61e55",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e0f161cd-b098-426b-8adc-c917ecf31bd4",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8632c7-da8f-4ce1-80eb-f957e077f1d0",
        "cursor": {
          "ref": "7cac249b-acdd-42b2-b0a9-6dc35e2a9b94",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "bd6b8e44-dd50-49c3-aa6d-6e0c7e8cf4a9"
        },
        "item": {
          "id": "bb8632c7-da8f-4ce1-80eb-f957e077f1d0",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a376e5fe-8008-475a-9eaa-25a1823b2f65",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "626a305e-2439-4856-a40f-fd216e436769",
        "cursor": {
          "ref": "e0cfeb92-808a-4f69-851d-223b6f7cbbbe",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e22c38fb-2c63-46f0-b7f3-1c8b830c5aaa"
        },
        "item": {
          "id": "626a305e-2439-4856-a40f-fd216e436769",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c78ea51c-4237-4ad7-9e4b-ff8c4a929c9d",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb5d144-db38-48cd-9de1-51deb3b64a33",
        "cursor": {
          "ref": "e15f652b-0ef7-45fa-a840-e3c81a85ba34",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "084518f7-063c-4d7a-94bc-7d9b0a72477c"
        },
        "item": {
          "id": "adb5d144-db38-48cd-9de1-51deb3b64a33",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "16545f05-39e1-47d3-8461-3c0e5cd68ca3",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c74b6d3-039f-450d-85f4-94b23798327e",
        "cursor": {
          "ref": "aa530206-50ed-4e13-8d1d-279e0ec3e1e5",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "fd3f4af6-7c97-4696-9d27-2c5e33752a93"
        },
        "item": {
          "id": "8c74b6d3-039f-450d-85f4-94b23798327e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bd1b5f76-141b-4fe6-beef-9fb727bbdb4d",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-17T00:37:04.019Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-17T00:37:04.019Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d25fc338-c115-4447-a51f-65dd70b8103c",
        "cursor": {
          "ref": "fb085a55-cdc7-4b5b-b7c3-d2feefa6605a",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4e69d963-6156-4296-a4f2-0850e7653057"
        },
        "item": {
          "id": "d25fc338-c115-4447-a51f-65dd70b8103c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a20cc354-27c1-495a-aa37-8f662dd22fa0",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3875fee-ad72-4c20-b3f6-15bfbb53048f",
        "cursor": {
          "ref": "f028c738-64d9-45a8-a1a5-93ec20aeb053",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1a122c9c-794b-4737-bae8-5b8fdee95328"
        },
        "item": {
          "id": "e3875fee-ad72-4c20-b3f6-15bfbb53048f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "62ad313f-f75a-4292-b3b6-73ae434a979d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aeddda8-e914-40c9-b854-b91a9f57a6dc",
        "cursor": {
          "ref": "8337eac3-cb84-40b6-8152-1d4c54c9cd9f",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d1583b4d-a5af-4e1a-a0cf-6f48cfc9f8d3"
        },
        "item": {
          "id": "6aeddda8-e914-40c9-b854-b91a9f57a6dc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4649fe5e-6724-4b15-9511-30b041174891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e5efa8-9910-4c2a-b69c-644a4e43be5c",
        "cursor": {
          "ref": "2a4ab18b-2852-464e-9493-994f023e294f",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d3e6248e-f3e6-4dd6-b5d9-cd79b14d51d7"
        },
        "item": {
          "id": "04e5efa8-9910-4c2a-b69c-644a4e43be5c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b97f4df7-3969-4251-af12-c65d927deba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9adbad-ddf5-4472-8e28-1dd0a309b341",
        "cursor": {
          "ref": "1b0327c9-f665-4284-bd7d-4c63cd04a267",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "534be9de-deea-42f5-af75-c55c9c6c1e30"
        },
        "item": {
          "id": "6b9adbad-ddf5-4472-8e28-1dd0a309b341",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b3c37de0-5e3f-4258-893f-08b100544386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7894314-0d38-422c-954d-6429ae8bd0ac",
        "cursor": {
          "ref": "29b3c0cf-aad2-48a8-b4a4-bfec71a72c5a",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "582c986a-1329-4250-a4f3-62ddde64d050"
        },
        "item": {
          "id": "b7894314-0d38-422c-954d-6429ae8bd0ac",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4ba18ea0-8860-4c38-9c0a-95934d2a434e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247c79c3-127b-4329-9188-2ce81c8e0784",
        "cursor": {
          "ref": "b68bd77b-a9e5-4106-ae5e-22e4bbebb635",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1cbb356e-b628-44d4-aeb1-3b45fbaccde2"
        },
        "item": {
          "id": "247c79c3-127b-4329-9188-2ce81c8e0784",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "226026ab-9e78-486f-b8ff-cf8f6d3b805a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196a7906-2520-46a0-a54c-cf0e8b4f8adc",
        "cursor": {
          "ref": "dbad0d87-c425-4e72-b8ff-1b8226de2477",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "32a7781c-b7bb-4aa6-bf50-11da1acf3a90"
        },
        "item": {
          "id": "196a7906-2520-46a0-a54c-cf0e8b4f8adc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "64fbce61-275f-42d6-9925-d34a4dc784d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f690ad-ba77-47e2-84da-8c820604d452",
        "cursor": {
          "ref": "5f513f30-ed09-4784-8809-cc09c2e080c8",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a7770642-1d31-4c92-94bc-9eb4cf7d97de"
        },
        "item": {
          "id": "36f690ad-ba77-47e2-84da-8c820604d452",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ce8eb467-d37c-4282-9df4-e425a3e8ee95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed0c3dca-e0c4-4518-a879-e478d692ac8c",
        "cursor": {
          "ref": "461a2214-b0e1-49d4-aa87-eb9d840a2d3a",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a280d134-5ad9-435c-9a2a-20d1ea08a4f2"
        },
        "item": {
          "id": "ed0c3dca-e0c4-4518-a879-e478d692ac8c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ca96c9cf-4963-4da3-b58d-de199a0e945d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7770dc1e-e76c-4c94-b15e-1109134d5e98",
        "cursor": {
          "ref": "9a254b21-5be1-49c4-a960-8f6dfc9292c3",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "423b87ae-d66b-460d-a595-09263e6c617c"
        },
        "item": {
          "id": "7770dc1e-e76c-4c94-b15e-1109134d5e98",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ac929a6c-2471-4d00-bad5-1834c39dc6bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139674ff-9b76-4e96-b663-ee751e2f1bad",
        "cursor": {
          "ref": "2910766e-92c4-4dfb-b26b-22db485093c6",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a5b68640-ffd3-4e12-a1b8-e5ba2c676468"
        },
        "item": {
          "id": "139674ff-9b76-4e96-b663-ee751e2f1bad",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "bd755edf-33e0-4a2a-9d48-70404c5dcf92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2feedd-f51a-43ce-a576-d1f36400d6c4",
        "cursor": {
          "ref": "24ad282d-2b04-4fa0-b9fb-e44db1841ade",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "64c1965c-bc84-46e1-b53a-d4727ffad3e5"
        },
        "item": {
          "id": "4e2feedd-f51a-43ce-a576-d1f36400d6c4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3839ccf8-714f-41a5-aefc-d18e2e1f928a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910c14eb-71e6-4df4-aca3-50fe84084d17",
        "cursor": {
          "ref": "e4319ca8-92e3-48fe-b20b-83ce59326117",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8e96a83d-a20f-4bce-a993-b1efa71a5ac3"
        },
        "item": {
          "id": "910c14eb-71e6-4df4-aca3-50fe84084d17",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4934832e-586f-4ec5-ad5a-c9c4e2f3fef6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 135,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "4d997951-32f1-48b9-abb5-75d8ec99e7ac",
        "cursor": {
          "ref": "3f393e5b-af60-4253-8022-229cf3df0d09",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d9503cee-4818-4d03-8fcc-b2027a4ee061"
        },
        "item": {
          "id": "4d997951-32f1-48b9-abb5-75d8ec99e7ac",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3b94cab1-2ce7-478d-81cb-7230a45958a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "8e65ed12-3260-42ef-8de5-7f1e514e95c2",
        "cursor": {
          "ref": "9c425b2d-58a2-43a3-9f89-27be56c003eb",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1b15cc7f-1189-4414-a6ae-f8542a4995b2"
        },
        "item": {
          "id": "8e65ed12-3260-42ef-8de5-7f1e514e95c2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fec4922e-b77d-496f-9b7d-64ba9267d2a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6580f43f-a910-4e8e-811f-1bfa8cce9af8",
        "cursor": {
          "ref": "5d937c90-ad5e-4aa1-9b45-516cb904b6b1",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6671d316-f835-47c2-93f8-6376a2cfe65f"
        },
        "item": {
          "id": "6580f43f-a910-4e8e-811f-1bfa8cce9af8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "42d6b2b5-0074-424d-a45f-dbc8c2bcbf3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f59a29d-6c54-426e-83e4-ca9bf9feb923",
        "cursor": {
          "ref": "fa78ff01-83b1-4d5a-9da8-381a4a345050",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f3c7011e-0b20-41f8-bdce-8c997ae9b66b"
        },
        "item": {
          "id": "5f59a29d-6c54-426e-83e4-ca9bf9feb923",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9e822cbe-554b-4256-b43b-7a401e38424f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4808a1cf-6a46-445c-b6f5-c0a7bf69c3d9",
        "cursor": {
          "ref": "bb4477ce-bcd8-4465-bf41-7fc784fd0dd6",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "bf4fae0a-077d-4874-8793-d3d73105ac7f"
        },
        "item": {
          "id": "4808a1cf-6a46-445c-b6f5-c0a7bf69c3d9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bbdc7152-189e-4165-83cb-88b340472dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f18138-80c1-42a2-9746-18a94b31d4f6",
        "cursor": {
          "ref": "b88a5331-eaf2-4633-9ff8-1aaf5358726d",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b1fc6057-c6c8-4668-a10e-702904c1d3fe"
        },
        "item": {
          "id": "c5f18138-80c1-42a2-9746-18a94b31d4f6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "78c58feb-a6cc-4356-9ef4-abc5bb8c07ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a331c9-8fd9-4f0c-85a6-d9f08629f2df",
        "cursor": {
          "ref": "4eafa3dd-0550-458c-a8f2-138d4975088d",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "da7278f0-a565-4a18-af17-1223c3c35ed2"
        },
        "item": {
          "id": "30a331c9-8fd9-4f0c-85a6-d9f08629f2df",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "33df75c1-c2c4-4ab2-8cd9-31a608965045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3bb541-7fd1-4f96-9491-7e200f7166de",
        "cursor": {
          "ref": "c3dc2339-3444-4c9b-9600-70b912650caa",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "86ff7142-8a58-4d62-adea-3eff3ce95d95"
        },
        "item": {
          "id": "8a3bb541-7fd1-4f96-9491-7e200f7166de",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ab25d54a-9b3a-4e79-9ca4-8a6be48d2609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d768c7be-cf60-4d6c-b76b-b0cd51189210",
        "cursor": {
          "ref": "9a5f7e17-6fa8-4afb-8938-3d73f0966a53",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9c9385ce-9aab-4ffb-affd-c82274489531"
        },
        "item": {
          "id": "d768c7be-cf60-4d6c-b76b-b0cd51189210",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e7fe0949-1dc9-4717-a41d-8f0d0c5e7977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80650ab1-62e5-4428-b722-4fb499ff7de3",
        "cursor": {
          "ref": "63adbb7a-4cfb-4ecb-9cc1-04a73fabb33a",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ad9caf60-c69a-4f3b-a6b4-ced9b003942c"
        },
        "item": {
          "id": "80650ab1-62e5-4428-b722-4fb499ff7de3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7700197c-61c9-41a4-8423-5cb9d9b6e8ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d251639-2759-4a83-b47d-024f4a88df88",
        "cursor": {
          "ref": "64fab653-3b13-41a5-aaef-016c6254693c",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c86a71f1-8d2c-43d7-b4ad-90453c8105f0"
        },
        "item": {
          "id": "0d251639-2759-4a83-b47d-024f4a88df88",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9ae219cc-2c42-458a-aadb-f06a15b738cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfcda887-73a1-4675-ac78-5185f30ba200",
        "cursor": {
          "ref": "c5e2bbaf-3938-4beb-bc22-dabbc78bd90b",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f547d9b6-e621-4895-ad01-fa7e1283d039"
        },
        "item": {
          "id": "dfcda887-73a1-4675-ac78-5185f30ba200",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5656a677-1ec6-4b7b-853a-25e2a4660543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0004d9df-6ffa-47cb-8f8c-d6db2599385b",
        "cursor": {
          "ref": "e47d1902-b254-4c79-bc4f-5d64b4d460bb",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2af201e1-8429-4d9b-8f15-2bcac4e6edea"
        },
        "item": {
          "id": "0004d9df-6ffa-47cb-8f8c-d6db2599385b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "62813e6d-27ea-426f-a879-b492747677da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6b1a64-b4dd-43c6-83fb-deec7f8a04e0",
        "cursor": {
          "ref": "b3e4d981-d62d-4271-b074-2f2aab77c95f",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4c515d89-5189-48a0-a058-b3c2d83b18b0"
        },
        "item": {
          "id": "ba6b1a64-b4dd-43c6-83fb-deec7f8a04e0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6ee0a416-c6c9-401d-ba41-4cbad8592248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "154f3735-edbe-4aca-b8aa-41b252f611f6",
        "cursor": {
          "ref": "1e87e2bb-b330-4111-a759-05ab68812131",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "dc527213-4205-4dd2-bb3e-c7fd61624548"
        },
        "item": {
          "id": "154f3735-edbe-4aca-b8aa-41b252f611f6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e9999b89-4a16-41a5-9347-be2744ad6259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f2e5db-b136-4b38-875e-8b46609173dc",
        "cursor": {
          "ref": "17a8064d-9db1-4396-add3-618bc02c5c37",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "99e9fa93-645b-4664-81d1-e42116ff3531"
        },
        "item": {
          "id": "59f2e5db-b136-4b38-875e-8b46609173dc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ac394260-2f96-4878-8aba-67122119da3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d31fec5-046f-4f3e-be98-75045074f0cf",
        "cursor": {
          "ref": "f3db011e-9234-43ba-98c6-98cd84fdeee7",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0d35ec85-12fa-49ea-abeb-7412e4e52325"
        },
        "item": {
          "id": "8d31fec5-046f-4f3e-be98-75045074f0cf",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2da9f0e2-6eb5-4cb9-b67e-c140e8ee0586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922aa48a-40b4-48f8-a0b2-5a7c7e9aed48",
        "cursor": {
          "ref": "2042af23-3aa7-480a-9ffd-baa1a1599d60",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3e3fc3d5-e812-44e9-ac44-6757010af5fa"
        },
        "item": {
          "id": "922aa48a-40b4-48f8-a0b2-5a7c7e9aed48",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b4b1aa60-3a75-4fba-b3a5-f7f4e91e246e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13265c48-b902-4a3f-af9b-7d05dd629b37",
        "cursor": {
          "ref": "1dbf6e99-7bd5-411a-aba7-f0101af1026f",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "33747865-b262-4d33-9651-d7d389e67e85"
        },
        "item": {
          "id": "13265c48-b902-4a3f-af9b-7d05dd629b37",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d33d3b24-c19b-45fc-991e-0995c2ff576a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "3e4cf1df-0a91-48f9-ac38-aa02f603a8f6",
        "cursor": {
          "ref": "aba8f207-6a6e-46b0-8ad7-280e355097f2",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1508b992-e870-4fdf-9456-1c6585e244ad"
        },
        "item": {
          "id": "3e4cf1df-0a91-48f9-ac38-aa02f603a8f6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "752bd4d1-5c49-48c3-bd3a-a3fb14cf0828",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fab1a88-f593-46ff-93a3-d53dcc9d49bd",
        "cursor": {
          "ref": "b3b74347-ccd7-4c6a-a580-15cf6bdbdce2",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ff07af65-5883-44bb-9b6b-a18d1be87308"
        },
        "item": {
          "id": "7fab1a88-f593-46ff-93a3-d53dcc9d49bd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8315ce91-aa98-46bd-ad7f-a25d98c3454c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3771cbf-b373-4679-9d3e-c6773f3b26fb",
        "cursor": {
          "ref": "85c0ea2d-81ba-43e4-9ac7-a148f71ef005",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f59b48ae-00a2-4708-aeb1-2ff65e1e8ddd"
        },
        "item": {
          "id": "d3771cbf-b373-4679-9d3e-c6773f3b26fb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "154ae5e1-0698-48ba-8fb9-1c8600a44b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb698c8-8723-49b3-9980-c6886e50215c",
        "cursor": {
          "ref": "6e8259bd-4194-4992-8b4c-184250272c66",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "dcf5cc61-1c80-4a7e-a175-c8c0bbcc506f"
        },
        "item": {
          "id": "dfb698c8-8723-49b3-9980-c6886e50215c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "830faff4-9a79-4e7d-bb91-9b14836efb60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621ebdc5-ebb0-474e-b9aa-c15d2326bcaa",
        "cursor": {
          "ref": "03c4d085-bf07-4905-a39d-d7925eeb8f2a",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ddaf54ce-c89b-4c4a-8fa0-a35251f2437d"
        },
        "item": {
          "id": "621ebdc5-ebb0-474e-b9aa-c15d2326bcaa",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2c9c05b4-3751-40f3-b2e1-c51f884cbfbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79c1e56-3e4b-4657-bf81-73b9becb9363",
        "cursor": {
          "ref": "c495245d-ac58-49d6-9e67-c0d6ae79d9fc",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8bfcb205-8a13-4121-8393-577fd4810bc8"
        },
        "item": {
          "id": "c79c1e56-3e4b-4657-bf81-73b9becb9363",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d4c74d03-ff2b-41a3-a797-bf2014c64890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953d523f-ae16-48f0-9a22-ad3a2f9b92e9",
        "cursor": {
          "ref": "6dba73bd-a9d0-4eae-846c-09dffef23e95",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6deae3e7-dbfb-4431-a3f3-52a68b39ac85"
        },
        "item": {
          "id": "953d523f-ae16-48f0-9a22-ad3a2f9b92e9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bcf5f04a-2311-47c3-9a76-d5aae3e63a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0677ecfe-20a3-44b3-899c-1313c90f7fc8",
        "cursor": {
          "ref": "2de4e372-a1b9-4cb4-8874-b70c69d0d303",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5b6c5bf9-1165-49f1-9dee-f8579e110b65"
        },
        "item": {
          "id": "0677ecfe-20a3-44b3-899c-1313c90f7fc8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ff148ce1-d66e-4724-9021-bb18a0b136ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6979ac-4769-42f8-896a-7aef79fefe06",
        "cursor": {
          "ref": "282748aa-7ded-451c-a588-24bc650e4cb3",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b413e107-8b94-4794-a06f-6179cadea360"
        },
        "item": {
          "id": "6d6979ac-4769-42f8-896a-7aef79fefe06",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "35a87805-a7f7-4892-b065-26fe9e829ca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d786879b-f323-4040-adb2-a972961d26e8",
        "cursor": {
          "ref": "bf19e01e-7fa5-4b85-b763-dc43baccd714",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "afecf500-e10c-426d-8e5c-4a4f5c44f231"
        },
        "item": {
          "id": "d786879b-f323-4040-adb2-a972961d26e8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "76bc66b0-2544-4680-a71a-013af5e3e9c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48115412-1127-4f3e-b474-c8f247f10d0b",
        "cursor": {
          "ref": "c9639de2-39d7-4e92-b39a-12c117d81f8f",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "aa56b529-8996-403a-ba94-aee3c1e38d1d"
        },
        "item": {
          "id": "48115412-1127-4f3e-b474-c8f247f10d0b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "68bdd859-0b9a-463b-a7b7-f58feec291da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92f954d-b525-4b3a-aff1-5925d933701b",
        "cursor": {
          "ref": "469b842d-c844-47a0-b7e0-710427ef0891",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3d0959b4-b7ff-4861-92c8-8fa9b3e3804d"
        },
        "item": {
          "id": "d92f954d-b525-4b3a-aff1-5925d933701b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "25786f09-45d8-4c0e-a6fc-0462d61014b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f36242-7ea0-411c-bda7-d857dfb5bf03",
        "cursor": {
          "ref": "f0daa02f-11c1-4074-892e-d9f66bf385a7",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "3c1a22de-6f03-42e9-b3d9-b238022f0186"
        },
        "item": {
          "id": "14f36242-7ea0-411c-bda7-d857dfb5bf03",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1e7d97a7-ea61-414e-a42e-add613bfe187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99fa089c-5189-4d64-9cca-e634b1694d0b",
        "cursor": {
          "ref": "5d6d1078-788f-4f98-bc4a-f8c727ffec05",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5f5c3161-64e4-4809-92d2-47a6c732865f"
        },
        "item": {
          "id": "99fa089c-5189-4d64-9cca-e634b1694d0b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "78177281-f170-4efe-ac3d-864b2b0f39ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf9b0bf-bb91-46bd-83c0-50f48fc9aef2",
        "cursor": {
          "ref": "f8183682-5247-43bd-ac9b-9f58a4938f1d",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c044d17a-3f5e-4fc2-a032-cd8c02958221"
        },
        "item": {
          "id": "6bf9b0bf-bb91-46bd-83c0-50f48fc9aef2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5f574170-bb1d-481f-b29e-3f31335894da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 106,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "8597bc64-c3d4-4e97-9966-d98e535a40ef",
        "cursor": {
          "ref": "82810f54-e246-4930-8c42-c1f6d595c996",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "16bcc307-5866-416c-b103-6007bc09f8f2"
        },
        "item": {
          "id": "8597bc64-c3d4-4e97-9966-d98e535a40ef",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "93850caa-b1d6-4619-8d04-6b7bfb2852f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e3587b-6a46-48f5-b90b-626d22ff4ca4",
        "cursor": {
          "ref": "0c9ac228-0f78-4072-89bf-b2bea486c8d2",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8eec9f64-965a-4734-af66-46b653ea24d2"
        },
        "item": {
          "id": "03e3587b-6a46-48f5-b90b-626d22ff4ca4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fd1b1fca-9dfa-4a72-a50c-f27bf56517db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03a265c-fe3d-41ce-b471-a31b7bcfad11",
        "cursor": {
          "ref": "b8c726ef-0c5c-4888-9b0e-31f5b9264d59",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "56e2ac59-2a49-4e07-8df3-558dc7768d6d"
        },
        "item": {
          "id": "d03a265c-fe3d-41ce-b471-a31b7bcfad11",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "52888569-aa2d-4d72-9d92-4a4aec0042af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e82aa79-6d66-4213-bfd1-78b83b79cad6",
        "cursor": {
          "ref": "c9dba883-4819-47a2-8ec3-6ea91fe11c3c",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5283fd4c-3de0-4b32-9818-7f5045b16b89"
        },
        "item": {
          "id": "5e82aa79-6d66-4213-bfd1-78b83b79cad6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a9f957e6-8a15-41df-b938-343d25d0a8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3fc1b3-1e8b-48eb-b312-ab3ac1a22e64",
        "cursor": {
          "ref": "cd9d7aa2-568e-442c-ab4a-286b7857e8bb",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "82751961-b1c4-49c0-9d85-7ed576f9df5c"
        },
        "item": {
          "id": "fc3fc1b3-1e8b-48eb-b312-ab3ac1a22e64",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "05fbd6b6-6151-4896-9cfc-4611cd2719ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f728d0c-b7dd-4f7d-bc59-979dca6c4548",
        "cursor": {
          "ref": "4118244f-3bef-454c-964d-011128ba0f8c",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "40eb35a9-1575-4fa4-b1d6-6d00472555e7"
        },
        "item": {
          "id": "9f728d0c-b7dd-4f7d-bc59-979dca6c4548",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ce071018-34bb-471e-85cc-04a9f1aa9c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcbca668-927f-4b21-84d2-267686ff7b17",
        "cursor": {
          "ref": "40506fd3-5a4f-4b02-a1a0-e6855cc36627",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "20deefba-3ca8-4cde-9086-7f5590004f70"
        },
        "item": {
          "id": "dcbca668-927f-4b21-84d2-267686ff7b17",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "748e8055-d447-4b02-9498-515fab27a0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb99b4c-d9f1-4f74-ae33-609f7864bada",
        "cursor": {
          "ref": "e841ff75-3c81-4c8e-b89e-df5e65f0ed2d",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "62827401-e848-43a6-b9f2-9f16ffd4acf9"
        },
        "item": {
          "id": "6fb99b4c-d9f1-4f74-ae33-609f7864bada",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5e1c992f-179e-4593-90d4-766d4302ef38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f139d53f-2d7b-4118-b66c-e0bad3a38bba",
        "cursor": {
          "ref": "626e2554-c65b-49b8-a1d2-b9a64248f756",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "74bd007f-38d9-4dee-b915-ece2ebc69b25"
        },
        "item": {
          "id": "f139d53f-2d7b-4118-b66c-e0bad3a38bba",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "620a1e0c-2bb4-4f1b-a680-e77f2933f19e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823ee898-8e7e-4333-bb9c-50d99505a5eb",
        "cursor": {
          "ref": "2c377362-d7a7-4ccd-a546-13bc18a4bbf3",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4219e430-28f7-4e58-a97f-765fc74e3145"
        },
        "item": {
          "id": "823ee898-8e7e-4333-bb9c-50d99505a5eb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4142d4fb-b964-4de8-b5d4-6862de7c61a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45adf264-3125-4d7d-9018-3ea31b98ef61",
        "cursor": {
          "ref": "7d6f0285-693c-469c-a5b6-0faa07dbc42a",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ad4061f1-7bde-4247-840a-fc93777907d8"
        },
        "item": {
          "id": "45adf264-3125-4d7d-9018-3ea31b98ef61",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2510dba2-ecd2-4034-99b0-7cc6e86cac2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca9c84c-02ae-456d-829a-2b22cd3dfdf9",
        "cursor": {
          "ref": "cca87eaf-98e8-4632-8c5f-d84bbf16a14b",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "dd703418-b839-4da5-9440-86135a1a002e"
        },
        "item": {
          "id": "eca9c84c-02ae-456d-829a-2b22cd3dfdf9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8e3c4ac9-7eaa-43b5-8687-982a98595843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09c9803-7b6b-4313-bdf1-a018d045e280",
        "cursor": {
          "ref": "72c9eab1-fd01-4c7f-b3d8-aa15d87a0978",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "54af105b-ad27-44e4-bc27-20db4485c3c3"
        },
        "item": {
          "id": "d09c9803-7b6b-4313-bdf1-a018d045e280",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5de440ac-20dd-47ea-9588-8214561588da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78852ccc-ee91-4e8e-a3cc-00071db9ed0d",
        "cursor": {
          "ref": "e74c8ec5-6bcb-45d2-89a2-52b941dcc1ca",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ccc2c078-ec3a-41f2-be84-142a9f34e3cf"
        },
        "item": {
          "id": "78852ccc-ee91-4e8e-a3cc-00071db9ed0d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "abc478ef-22dc-4990-a596-546fe35ffd91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7452c8-7763-4ae0-abf6-b8298a8dec9b",
        "cursor": {
          "ref": "cdc8e818-d1fb-48cb-b3d6-6e2211257ea3",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d9969d92-58eb-46ed-8b06-8658a1dc616a"
        },
        "item": {
          "id": "eb7452c8-7763-4ae0-abf6-b8298a8dec9b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b061b4fd-a4c2-4596-8d8f-aa2155efb145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc067c99-efd5-4eb5-879b-43966d014dca",
        "cursor": {
          "ref": "095d4c72-6966-45ae-9988-50c9f951fe5b",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "097fbd8c-5e64-4e9e-8779-22574cc4ca58"
        },
        "item": {
          "id": "fc067c99-efd5-4eb5-879b-43966d014dca",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1cd767a7-71a4-4550-9439-9d1ed1958b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1faf79-4932-416a-a4eb-84176e4bbff3",
        "cursor": {
          "ref": "00a9aed2-fba0-4e32-9d43-ba4fab0cbc94",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4c365c1f-f136-440e-adc5-64a274020bb9"
        },
        "item": {
          "id": "3f1faf79-4932-416a-a4eb-84176e4bbff3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cb1724ac-9fe1-46fa-96bc-6ffdf1504e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0719ec-6fdd-4b54-970e-bd4925e05c12",
        "cursor": {
          "ref": "5c206ab6-777b-4805-a4a4-092eef9804ea",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4de4ecd5-ce3f-421c-9d05-2faf8a622d24"
        },
        "item": {
          "id": "0b0719ec-6fdd-4b54-970e-bd4925e05c12",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "5edd7280-9e31-4d6d-96a0-26a5479e21bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ecf91b-834a-4103-a8e5-2c3b694d5d53",
        "cursor": {
          "ref": "700a341e-44c8-4424-8045-fe4233882b75",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a48d3620-8192-447e-b892-106587773621"
        },
        "item": {
          "id": "89ecf91b-834a-4103-a8e5-2c3b694d5d53",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "29dce637-1a48-4ab9-ac43-7492612f3b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebbd54f-d755-453f-b237-ee849a58e422",
        "cursor": {
          "ref": "2cb76e58-3ab0-47fe-8fec-56781a9c7302",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "06ef6d2e-add8-4bac-b017-0d4c1584ad8e"
        },
        "item": {
          "id": "bebbd54f-d755-453f-b237-ee849a58e422",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "61f4f34e-d409-4e64-b8d3-31d12f419cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0aba32-3d14-4b75-b991-c3b51bc35b86",
        "cursor": {
          "ref": "6793ed17-7d49-488e-99b9-2b4f41c0fe44",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b57ae4f5-2724-486e-9523-e87bc04a14f3"
        },
        "item": {
          "id": "7d0aba32-3d14-4b75-b991-c3b51bc35b86",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "1a25493f-f26e-431a-b134-cf9738f6c809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a3f461-8bb2-4e59-a5ba-d2ac1b650abc",
        "cursor": {
          "ref": "abc213ff-0355-4ba1-a53a-a81dc0f148bc",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e0cd0597-2782-4995-9251-a719172942d8"
        },
        "item": {
          "id": "75a3f461-8bb2-4e59-a5ba-d2ac1b650abc",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "f5b782d6-0aa5-4eb7-b8ec-24d380609991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee493c4-5850-44d9-a425-70ce29d8f061",
        "cursor": {
          "ref": "ac4eee12-622b-400f-b645-cd1e37c1372b",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "81a4e6a1-f5fc-4b6f-974b-f8d919c98d92"
        },
        "item": {
          "id": "7ee493c4-5850-44d9-a425-70ce29d8f061",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "437a1565-c648-4307-b7be-3b00050cabaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9959adf7-b4a4-4e3a-ab14-a73f9f614717",
        "cursor": {
          "ref": "81bb9d83-05c8-42da-b9e2-e56d8797cd52",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5e5bef00-667c-42cc-95eb-df28590db45e"
        },
        "item": {
          "id": "9959adf7-b4a4-4e3a-ab14-a73f9f614717",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c08bc09d-c065-4116-88f0-01f575ec6184",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77eeac2-b80c-4059-a289-510446608848",
        "cursor": {
          "ref": "5a0a7814-367b-407e-babe-379307689eb1",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "57c19f1e-204b-43cf-9c72-7dc3c05558bb"
        },
        "item": {
          "id": "c77eeac2-b80c-4059-a289-510446608848",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e37669d9-983d-4097-8d72-a59cc4c68563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcdffe37-4d74-47bb-bfda-7ee900f9d1be",
        "cursor": {
          "ref": "33893e00-17d7-4e37-9d9d-6aaaf212c3f2",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "cc1406bd-b17d-401b-a4f9-0e33c01b0f9b"
        },
        "item": {
          "id": "bcdffe37-4d74-47bb-bfda-7ee900f9d1be",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a6559624-f400-4e67-9665-e55d5a017b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4eea97-9ba4-42b6-8650-b8330d62817e",
        "cursor": {
          "ref": "a51f554b-591d-44be-84b8-15a1977e2701",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "caf510dc-fd66-4a0e-b969-d213ee7d994b"
        },
        "item": {
          "id": "da4eea97-9ba4-42b6-8650-b8330d62817e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4d750636-ef9a-4651-a9ef-3561f229a8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8377414b-5f3b-4c30-9ece-9df0327896f3",
        "cursor": {
          "ref": "1fada925-19ed-4bab-a365-54c638fab85c",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ca7460e3-235b-495b-94b7-d0f4180f535a"
        },
        "item": {
          "id": "8377414b-5f3b-4c30-9ece-9df0327896f3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7ce42350-9dc7-4d0c-b073-d3320cd43d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95576f43-4f09-4368-9c45-10c486450fb3",
        "cursor": {
          "ref": "708bdd6b-a6c2-4e84-8bad-c358f4ef2a02",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2db3e3cc-d019-4b5f-8cae-e9753f126cd4"
        },
        "item": {
          "id": "95576f43-4f09-4368-9c45-10c486450fb3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a251fe08-4381-4496-86f8-d4d168c5e79d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc160eb6-d9fc-4c31-af1d-ba95e671b58f",
        "cursor": {
          "ref": "faa3cd65-6c03-46e1-9db5-c8dd781cc48f",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a0d93d6b-e544-43a4-8a72-df79e295ac0a"
        },
        "item": {
          "id": "fc160eb6-d9fc-4c31-af1d-ba95e671b58f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4aae87ca-af26-4bd4-8467-6346e3777200",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b971a0a3-ee87-45a8-9779-d69e340f0e13",
        "cursor": {
          "ref": "8534c9c6-12b0-49e6-a6c4-336fdd19772c",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6dfeaf4c-34a3-4516-94c1-68be440614b1"
        },
        "item": {
          "id": "b971a0a3-ee87-45a8-9779-d69e340f0e13",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "aa08edc1-bdcb-45f2-a414-3f7f0e214850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526bd018-ba65-4093-b76f-8330be565564",
        "cursor": {
          "ref": "b1baac74-25fa-4df0-b0dc-e2151de4fee8",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c2eec465-8313-4728-91c6-c7163dbfdfff"
        },
        "item": {
          "id": "526bd018-ba65-4093-b76f-8330be565564",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "178e0893-a1d8-4663-832d-5f1ca8451da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29e106f8-f4e2-4f02-b50e-b2c3e96efd61",
        "cursor": {
          "ref": "0e427d1e-53ff-48ce-a96f-28714ada29d3",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c950e379-ee8f-4edd-80c5-3f88cd1fa357"
        },
        "item": {
          "id": "29e106f8-f4e2-4f02-b50e-b2c3e96efd61",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "9a004348-a0c2-4503-82bb-64b6f042dcc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72597130-2844-412d-b6fb-cece1d644e9a",
        "cursor": {
          "ref": "c2bd71c7-121b-4a35-bf41-2b3268c8b37e",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "cdd6983f-5bd4-4d8d-9c0e-3a59588c1981"
        },
        "item": {
          "id": "72597130-2844-412d-b6fb-cece1d644e9a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "93cb55e5-5da6-47ef-8de8-42048f2c1faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679034e9-41d1-4af5-98ad-83c930190bbe",
        "cursor": {
          "ref": "ea8152d1-a6c2-4aa2-82b0-0958e14b4636",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "675cd5dd-6f8e-438d-932a-e2fbfac94edc"
        },
        "item": {
          "id": "679034e9-41d1-4af5-98ad-83c930190bbe",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "040ad505-0d31-400c-90a4-09dc50ee0d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa841da-05df-455a-a0fe-abbcfe4eabd0",
        "cursor": {
          "ref": "497d8f79-0984-4abb-bae1-8c9514184129",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c2eaa09f-7c27-4461-ab80-2af37eadde55"
        },
        "item": {
          "id": "afa841da-05df-455a-a0fe-abbcfe4eabd0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b660896e-fbdc-4698-97ba-d3923aa59bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0270e8ca-603a-48c4-8176-483d2b925448",
        "cursor": {
          "ref": "34a19f3b-dd96-41ee-a499-8c6c005bfcbb",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "59c1288a-d163-4ad7-8a74-699d7a7f131d"
        },
        "item": {
          "id": "0270e8ca-603a-48c4-8176-483d2b925448",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "72301416-6fe8-4802-b35c-c3f27bd923e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11fe3196-a900-462c-8229-204244a242e6",
        "cursor": {
          "ref": "fb9411b2-5dac-4b99-b6f0-ce69f80c1dc2",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "37513ade-76fb-40ed-923d-9c082814e5c4"
        },
        "item": {
          "id": "11fe3196-a900-462c-8229-204244a242e6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7cb807e9-ed36-41fb-b5fc-050c2cb8522d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6418f85e-5120-44f9-9877-68604f04795c",
        "cursor": {
          "ref": "1ff257af-5cdb-4721-9a72-0ab14849a730",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "179acc0a-6a12-403b-8dd0-347514c4f1e1"
        },
        "item": {
          "id": "6418f85e-5120-44f9-9877-68604f04795c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "401767de-4ac8-4ac5-a961-8e008690da85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc42225e-6ddb-4205-bea5-1c919331d940",
        "cursor": {
          "ref": "378ca7b7-0d88-45a1-b098-7b1aaf43a026",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "27338db9-9bb1-4889-8c09-a29b9de758f2"
        },
        "item": {
          "id": "fc42225e-6ddb-4205-bea5-1c919331d940",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1db0885d-4d21-41b4-931f-bce1340c012f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe6712b-0762-4088-9c74-5946ecf18288",
        "cursor": {
          "ref": "042aba4f-fbf1-4d9e-aebf-6a07d68bcea4",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7877b757-2292-4e24-90e2-3379f316f191"
        },
        "item": {
          "id": "5fe6712b-0762-4088-9c74-5946ecf18288",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b6a01d71-51d1-4484-bc88-095c17a98926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1274cbb7-6b36-48f3-bf26-0956ebfffdcb",
        "cursor": {
          "ref": "426d5b0d-6c67-44d0-ae9c-f45e58d5a0ee",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "248606ed-9a66-41bd-aaaa-9922ed83b89c"
        },
        "item": {
          "id": "1274cbb7-6b36-48f3-bf26-0956ebfffdcb",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a572235d-ebb5-42b5-9337-e69d887bbe0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8ab6cc-69dc-4f39-b213-a93e84177bd6",
        "cursor": {
          "ref": "bd9c05af-7125-4f08-80b1-c3c0e109b79f",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3b09baad-8180-405c-8c9c-caafb6ca1bd7"
        },
        "item": {
          "id": "ee8ab6cc-69dc-4f39-b213-a93e84177bd6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "084877fd-a80a-4140-ae9b-8eae8a1d0503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f3c56e-4a75-4ccb-993c-4adbcd75659b",
        "cursor": {
          "ref": "07b44fee-4d64-4e88-9480-c019bf23d380",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5aac652e-2b23-467e-9335-1b1d6ae9aa6c"
        },
        "item": {
          "id": "92f3c56e-4a75-4ccb-993c-4adbcd75659b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c6a4bd6e-8942-4638-8c5c-8468c9d8e955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d6f95c-8d7d-4c75-ac23-6e19aec47b5d",
        "cursor": {
          "ref": "1e1230d4-c5ac-4e2d-9e76-b288d64fa3ea",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e1f12e4e-fbf2-4d17-98cf-b21c1e69a723"
        },
        "item": {
          "id": "51d6f95c-8d7d-4c75-ac23-6e19aec47b5d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f9fecbe8-3918-4ca4-9db3-79b9403eb6c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d823928-5b89-41ea-ba20-34ccb851115d",
        "cursor": {
          "ref": "7ccdceef-d152-49df-89f4-6fb338cff7e1",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5eb08984-ddc8-41a5-99cc-9a0971ab60f0"
        },
        "item": {
          "id": "1d823928-5b89-41ea-ba20-34ccb851115d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "104e0ec6-7835-42ed-b4ee-361f9495ffd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef96470d-cc2a-4a61-bc9c-b5178be07b72",
        "cursor": {
          "ref": "9b11c59e-b9a0-42f6-be46-b57bf01a1d0b",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9560c7a6-9b33-4446-a7f5-ab1865f879ba"
        },
        "item": {
          "id": "ef96470d-cc2a-4a61-bc9c-b5178be07b72",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "12e65d41-5d74-426d-8d98-554f4fc6bfac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80203f95-36aa-4903-be70-d3776a6da1cd",
        "cursor": {
          "ref": "2db715af-bbb2-4a33-9520-555825dad88d",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0420fc17-754b-42ae-aedd-cd46bc918832"
        },
        "item": {
          "id": "80203f95-36aa-4903-be70-d3776a6da1cd",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4a28e39a-d641-4348-a9f5-85b4c14d5c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9377439-d90a-4d90-87b9-ca93fa7e6a51",
        "cursor": {
          "ref": "51bfda9b-9c1e-42e8-b8b8-e061bbac8f2b",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8c824cc0-4692-45aa-bfdf-dc03cc4ac375"
        },
        "item": {
          "id": "d9377439-d90a-4d90-87b9-ca93fa7e6a51",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "444dc6aa-27ab-462f-9a17-7bf4634959b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0d548a-46fc-49f0-9cae-bef9aec1e196",
        "cursor": {
          "ref": "ef363322-44d5-41c9-bab4-20f9daf1e1a4",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3a915501-e2d1-41e4-958e-a4038f5bdd58"
        },
        "item": {
          "id": "8b0d548a-46fc-49f0-9cae-bef9aec1e196",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "97367832-c4db-402a-945b-facd92cacf37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf98bda-c22b-4328-9381-421d08242c24",
        "cursor": {
          "ref": "4466a682-343e-41b9-9d84-5845461a7d2e",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "bea7d7cc-ffb3-427b-b3cd-0048e1d2e368"
        },
        "item": {
          "id": "ebf98bda-c22b-4328-9381-421d08242c24",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "14379061-0c58-4cf8-be52-da1340a73ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b144d5e-144f-4193-a187-d1b729918f8e",
        "cursor": {
          "ref": "d4050de0-5a0d-42f0-9a8a-b31db8f30744",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "674ab464-0029-4132-9d7e-9d5bb682e243"
        },
        "item": {
          "id": "3b144d5e-144f-4193-a187-d1b729918f8e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6b7a6b76-43f3-4b22-b9c8-f032d854696f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2498a7c-dd57-44fb-828c-85d08ef8dccb",
        "cursor": {
          "ref": "af88eda9-6a67-425e-b16e-ce3328dfffa7",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "01d34058-08c3-4a31-b361-54b287ecc7dc"
        },
        "item": {
          "id": "a2498a7c-dd57-44fb-828c-85d08ef8dccb",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a01dbd2b-257a-4e8c-abc1-abf1b354739e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5654457-aca8-4914-af89-29c5f3c79de8",
        "cursor": {
          "ref": "a06857f6-9fa6-4a2f-884d-341e6fba25a7",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1c935a64-99aa-4d4e-a59a-513c0150db1e"
        },
        "item": {
          "id": "f5654457-aca8-4914-af89-29c5f3c79de8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1dfc6df7-3d45-4afd-be94-b97e83997415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a59cc3-12c2-4fb0-b4fa-d736e4f48f4c",
        "cursor": {
          "ref": "2da69f2f-e575-44aa-98e3-ba28cf8abb28",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8da43217-6e72-4f04-843b-c14c2810e249"
        },
        "item": {
          "id": "19a59cc3-12c2-4fb0-b4fa-d736e4f48f4c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "803b6f43-1a42-4ed6-8a7a-770166e791d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f73bfec-6d3e-4346-a02f-8c8b9422263a",
        "cursor": {
          "ref": "9417d5cc-66d5-4953-869f-cdabd8396fdd",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d8e89092-d8f1-4146-8cf3-a64fc19fdb7f"
        },
        "item": {
          "id": "0f73bfec-6d3e-4346-a02f-8c8b9422263a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6e59314f-c9ae-48c5-b100-1008222e95b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c23d7fa2-4640-427c-a197-15978df73684",
        "cursor": {
          "ref": "83b4a371-5bfb-47d2-80d2-9e261f7063ea",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "17b7986b-6e3f-4ddd-9941-988749be89b5"
        },
        "item": {
          "id": "c23d7fa2-4640-427c-a197-15978df73684",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8af6ef67-216c-40de-bea7-f3935812d53e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef8977b-7555-421d-9e99-841ee092c4c7",
        "cursor": {
          "ref": "c430b83c-7377-4fa0-a2e7-0bb7d29780b0",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0211eaef-4507-47a3-b0fb-c51f39848dfc"
        },
        "item": {
          "id": "3ef8977b-7555-421d-9e99-841ee092c4c7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "391229b2-c8eb-4243-8a25-9c6634f95aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2facc9f8-a8eb-4c49-a92a-3d0cfaff2ef4",
        "cursor": {
          "ref": "d40cc340-cb46-401f-a39e-5cf261ca90f9",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "49e7457e-4715-4143-b5f4-127d36074188"
        },
        "item": {
          "id": "2facc9f8-a8eb-4c49-a92a-3d0cfaff2ef4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "cf173b13-2397-4ecf-b793-2c81ac2cdb37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272f4621-4672-4d44-8889-2cd371704294",
        "cursor": {
          "ref": "f629b7fe-9bb3-4a58-97e9-9a279479bb7c",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d61a9dcd-99cb-4cc7-8567-0f77f8620edc"
        },
        "item": {
          "id": "272f4621-4672-4d44-8889-2cd371704294",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "309323aa-5101-455e-b5ec-ce1067fcc772",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "7a2bba18-81c6-4bab-be23-74e0d31cdee2",
        "cursor": {
          "ref": "a64d2572-acdf-4454-b5cd-489edba1bd09",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "67f47636-70a4-4288-926b-6a2fe2fc470f"
        },
        "item": {
          "id": "7a2bba18-81c6-4bab-be23-74e0d31cdee2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "23afaf91-91cf-453a-9be4-94c8efa84c76",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "8b4b8b5b-4343-43eb-97d2-7bba0befb14b",
        "cursor": {
          "ref": "b24f173d-5ea6-4890-9ada-81b5950949d7",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "67b97aef-35c0-4f36-9904-4389c50f4058"
        },
        "item": {
          "id": "8b4b8b5b-4343-43eb-97d2-7bba0befb14b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d4542180-099d-427c-a977-81a510856724",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "966b55f1-aa40-4474-94d2-a526b8fe9815",
        "cursor": {
          "ref": "7bb69465-3b63-44cd-b638-610a987c0469",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "146c01eb-c33c-4983-a073-e480b0c64d9a"
        },
        "item": {
          "id": "966b55f1-aa40-4474-94d2-a526b8fe9815",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4b744c16-61ff-42f1-9d0e-7077330c686c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b0443b-036a-4bcc-bf5a-f10f30f5c7c0",
        "cursor": {
          "ref": "e59f2742-2f07-4235-8e4f-0acfe12dcadc",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1b23f4d0-4cb5-4cd2-8e50-27ef1757a3af"
        },
        "item": {
          "id": "85b0443b-036a-4bcc-bf5a-f10f30f5c7c0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5822b1c8-7c2f-473a-9b72-f1a0df5ef41f",
          "status": "OK",
          "code": 200,
          "responseTime": 264,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "18a50a00-09a9-4f8d-9fd7-6090cf7b8849",
        "cursor": {
          "ref": "5eebb1be-ef1a-44d9-871e-31433b788507",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "57ab8d5d-326c-4e89-94f6-a6d0f3e9fefb"
        },
        "item": {
          "id": "18a50a00-09a9-4f8d-9fd7-6090cf7b8849",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e9211b99-b1c5-4a37-8a20-23e9dcc9a46f",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "6a4520c5-62f0-477d-86d6-dde89a46690b",
        "cursor": {
          "ref": "e4d60106-bd79-4e7d-b8e9-7584d02d5148",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6d548ab3-25b1-4f69-9648-40ba6544d713"
        },
        "item": {
          "id": "6a4520c5-62f0-477d-86d6-dde89a46690b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "39126fc4-8550-4e9c-abd3-0a6a5ccd17b8",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "6c7b2816-11db-42b0-bddf-1150d0209013",
        "cursor": {
          "ref": "db1e46af-f2f0-494c-8548-c29ae107749c",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a45160d7-a742-48d1-b80e-a52a026cdb70"
        },
        "item": {
          "id": "6c7b2816-11db-42b0-bddf-1150d0209013",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "584c1f5d-4476-41fe-94cb-cf95f3a5ea3f",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "bacde757-767f-4775-9a72-31f991ce5248",
        "cursor": {
          "ref": "aa779364-e6a6-4a4e-af41-8ad634ac0a3b",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "79ab8ec2-5cea-4d29-a167-38ec56ab616c"
        },
        "item": {
          "id": "bacde757-767f-4775-9a72-31f991ce5248",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a5c668d0-24d9-456f-a007-fa693f5c16b5",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "b32b0ae8-8d36-451e-84ba-39cf7a9654c9",
        "cursor": {
          "ref": "a37b7e76-1f21-41f8-b0fc-d54c727dda8f",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "fb78bea9-3f60-4237-9f78-d1fe0154368b"
        },
        "item": {
          "id": "b32b0ae8-8d36-451e-84ba-39cf7a9654c9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f0bf8a1f-fe45-42c5-91c7-c0693a604907",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "71fb3102-b1f6-4b54-b9f2-a112c661fbfb",
        "cursor": {
          "ref": "27c36b47-84b6-44dd-ba7b-369a1a6724c6",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a6d304a7-ea85-463a-aed8-c51ab5bce3a6"
        },
        "item": {
          "id": "71fb3102-b1f6-4b54-b9f2-a112c661fbfb",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "4f3164ab-b2f4-4ae6-84e2-884576e28e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db0b0ac1-726a-4ca4-bfd0-62f06657db08",
        "cursor": {
          "ref": "1c7dac8b-2484-4733-b683-23cb6ee7ffb4",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0cf542a8-8590-4891-9877-b94cf89e56a6"
        },
        "item": {
          "id": "db0b0ac1-726a-4ca4-bfd0-62f06657db08",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b4954dd1-d67e-4b9b-a2c0-b3e256a3f99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c064a671-f165-427c-aed3-c1e8453b4748",
        "cursor": {
          "ref": "276c8cc7-1335-41fe-95f4-a9cfcc35406e",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "bf25b736-d2f9-4bcf-8369-d4196745cb14"
        },
        "item": {
          "id": "c064a671-f165-427c-aed3-c1e8453b4748",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "96d39ab1-da4a-498e-af57-e2efe0522822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8177c7e-5f33-44eb-a98f-e2d647b411d4",
        "cursor": {
          "ref": "fbc32bdd-a6a3-457a-8b58-13216be13032",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "374d0075-2eee-43ee-bc41-b175456e794a"
        },
        "item": {
          "id": "f8177c7e-5f33-44eb-a98f-e2d647b411d4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d40a4fc8-9ef0-46b5-868b-4fe5b29d024f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebfce64-ad40-4020-8010-c9a66aedbf36",
        "cursor": {
          "ref": "e993f020-92ee-490d-8553-04dc94152033",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cb52b340-e75c-4db8-9852-0a1d9b7580ff"
        },
        "item": {
          "id": "bebfce64-ad40-4020-8010-c9a66aedbf36",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "559be8a8-56aa-4144-89f1-db99a52b149f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0ec2904-ee4f-45f0-b5dd-070d29a6b17a",
        "cursor": {
          "ref": "d85c51f3-963c-4c26-ae32-d92b80aa28e4",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e3238274-5952-479b-9901-673d42f34e8d"
        },
        "item": {
          "id": "a0ec2904-ee4f-45f0-b5dd-070d29a6b17a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6d94b7e5-828e-45cd-9feb-9514ba08e48c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d20e8c-fc9b-47a0-9be7-db0ba707c7a6",
        "cursor": {
          "ref": "b71cec1f-4309-49d3-b786-d3bb65e80fc8",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "72aea32d-0590-4301-a20a-d7f0c01ee945"
        },
        "item": {
          "id": "49d20e8c-fc9b-47a0-9be7-db0ba707c7a6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "77d043d9-0d77-4505-98dc-aa468d109e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ef82cf-c3c5-4f9c-bdc7-86f5924c6fa2",
        "cursor": {
          "ref": "5b010b7e-66d5-4921-985e-50e0abab4862",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ce485650-e623-4f77-9457-8ef2c76601c6"
        },
        "item": {
          "id": "48ef82cf-c3c5-4f9c-bdc7-86f5924c6fa2",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8b62f2eb-995e-4b31-be17-33095bde545c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f0a938c-a485-4eb5-8f6b-dde82537ee60",
        "cursor": {
          "ref": "2378d06a-c66c-490b-9845-67d7b42b8515",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3be676f8-3061-4e97-bf3b-3192048e4b32"
        },
        "item": {
          "id": "5f0a938c-a485-4eb5-8f6b-dde82537ee60",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "32352254-c00e-495c-a3fa-f1cf1d361582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df290d4e-d42f-4bab-90b9-03bf0ecbad61",
        "cursor": {
          "ref": "7518ed2b-a1b6-41a8-8e12-32124c8fd7bb",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0b324348-d845-49fd-92ff-b512b042ca24"
        },
        "item": {
          "id": "df290d4e-d42f-4bab-90b9-03bf0ecbad61",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "14059987-8c6b-4940-8c47-249836de6192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "915e5aa4-e16f-4e81-a3ad-332fb864acd5",
        "cursor": {
          "ref": "107b7e1c-d909-4900-8559-cebbce721fda",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3f554c9c-b268-4b6a-895c-3c417bc003fa"
        },
        "item": {
          "id": "915e5aa4-e16f-4e81-a3ad-332fb864acd5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "39c296ab-1227-4fdc-af7b-ba821bfe867d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018d3671-6886-4b2d-8799-7b34339823e0",
        "cursor": {
          "ref": "ca97ac2b-f5f6-40ae-8b13-c49c3844d3c3",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "caee6c8f-ca4d-4767-ac6a-73f78ab7b9c7"
        },
        "item": {
          "id": "018d3671-6886-4b2d-8799-7b34339823e0",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "cc7a5e1c-6c05-4d06-9ad3-015d94c0b378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a104b6e6-20fa-4adb-a902-fc4a64980567",
        "cursor": {
          "ref": "1eae8f90-80f8-447d-989c-b1619e7f23bd",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7cb4fd36-4e81-4556-bd0b-e1641ac6404c"
        },
        "item": {
          "id": "a104b6e6-20fa-4adb-a902-fc4a64980567",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "91a9f563-1a23-46be-a881-4488dbb2ba87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "134edc6c-ff42-4108-a411-cd27038191aa",
        "cursor": {
          "ref": "610a9d7d-b43e-4084-ad08-cb596041da8c",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6a3dc832-2f06-4a55-8fb1-b3ce22b8511d"
        },
        "item": {
          "id": "134edc6c-ff42-4108-a411-cd27038191aa",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "101e9125-7a41-484f-98b6-03821e08d5b6",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7af2bef3-5d38-4729-bb12-ad8aca73b819",
        "cursor": {
          "ref": "043b0107-f31f-476d-a982-9afbdfa8a906",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "97451f81-f45a-4407-8f51-f7facb339d72"
        },
        "item": {
          "id": "7af2bef3-5d38-4729-bb12-ad8aca73b819",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5e0331cd-b85f-4212-aa48-96abf95ecdc5",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ca4f3d10-a50a-420c-80b4-33c906f3712e",
        "cursor": {
          "ref": "51385015-ee2e-49f3-9f70-157024264cb1",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4db2aec0-f1e6-4c17-9a41-869fa4d48f1e"
        },
        "item": {
          "id": "ca4f3d10-a50a-420c-80b4-33c906f3712e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9d0aa934-61d5-4f14-b2ca-efefafb01c72",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f3596647-f398-43e7-9165-fe199e9f7009",
        "cursor": {
          "ref": "42e029ba-6bd7-45d5-af9d-fae2532681ff",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7168be63-79cb-448a-9c84-04916771f27c"
        },
        "item": {
          "id": "f3596647-f398-43e7-9165-fe199e9f7009",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "79560398-58f3-49cf-9aea-3d26611f3d75",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "a81e8c23-c78f-49d0-90a1-a433975e1bd0",
        "cursor": {
          "ref": "702acc2f-6d70-411e-8314-cf354e89219c",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "02f385a5-9321-4712-976e-9bd3fdaa5c0e"
        },
        "item": {
          "id": "a81e8c23-c78f-49d0-90a1-a433975e1bd0",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ed4a3b3c-6de5-4792-89dc-5dcefe72b4c2",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "a24fd7bd-ccd5-4a9f-87ac-561733c3e5b8",
        "cursor": {
          "ref": "fe9bf6ef-9606-425f-b09b-d0ba636acf99",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "456d6471-f0f6-40d5-939f-8dbac8a9ceeb"
        },
        "item": {
          "id": "a24fd7bd-ccd5-4a9f-87ac-561733c3e5b8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d8199c37-160f-4726-b817-d8cfede3f17a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b8cac1c-936f-48c0-a2ac-bc496be8932a",
        "cursor": {
          "ref": "b35f9bf9-585e-4ce4-964a-6dd5184e41c2",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f9ff5f22-d52b-4864-936a-8ca4ad53da8c"
        },
        "item": {
          "id": "9b8cac1c-936f-48c0-a2ac-bc496be8932a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f19cb27c-7dbd-45ee-9a94-54da0988b5d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8432f6e-b52f-4a0b-b27a-085637e3864b",
        "cursor": {
          "ref": "cef5e951-97ba-4b61-9077-39f8997cc486",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5c820e18-7858-4508-9d76-179a237b6e5d"
        },
        "item": {
          "id": "e8432f6e-b52f-4a0b-b27a-085637e3864b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bd1274b9-52ab-4c57-a983-d80b8f43ffa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79416e0d-de80-4346-9786-d7d0aa60d93f",
        "cursor": {
          "ref": "b3359bfc-7b25-4fcf-80ee-e31cc887250b",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6181e347-5581-4bc0-bedf-543e0dd4658e"
        },
        "item": {
          "id": "79416e0d-de80-4346-9786-d7d0aa60d93f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "bd7ed50b-9ec1-4e77-ab2b-da173188e842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b0a1f5-0258-45aa-9247-af6ebe1911fb",
        "cursor": {
          "ref": "04f65363-026c-4628-8c8a-576c91d327f8",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e325035c-4192-49b7-b504-b7acbe34a02d"
        },
        "item": {
          "id": "c6b0a1f5-0258-45aa-9247-af6ebe1911fb",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b976f006-0a43-4740-b008-e84bb504ebdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5d9545-85cc-45e6-9b08-3fd3e7c4e342",
        "cursor": {
          "ref": "5307d394-8315-4417-addf-ddb1c59df131",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7b5c7c83-6a34-4af6-8a52-5f5be6ab3c40"
        },
        "item": {
          "id": "aa5d9545-85cc-45e6-9b08-3fd3e7c4e342",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1e51084e-cffb-401e-b0ac-11a892641842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780181aa-e948-4314-a577-84388dd00d72",
        "cursor": {
          "ref": "f36dab01-a35c-46bc-b82d-360ca6a1bcb0",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f7b920fe-c3f6-46f0-b2f0-71ef5df3a69f"
        },
        "item": {
          "id": "780181aa-e948-4314-a577-84388dd00d72",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f67a83e4-4aa2-4817-bf06-a36c71f14559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07e82dc-c60e-4598-b844-9f61a6e012d8",
        "cursor": {
          "ref": "236a1506-4d97-4616-9f3a-7fe2c08ae177",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a54ebfaa-2911-42ac-a3db-171d14916898"
        },
        "item": {
          "id": "d07e82dc-c60e-4598-b844-9f61a6e012d8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "cb097f55-13bf-4dcb-b0d2-26906993692c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d35ec8-7f3d-435c-a5d3-43eadc4880b9",
        "cursor": {
          "ref": "ee32ee5e-0399-4a40-96d1-4389e72855fa",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d7261542-2af5-41ac-8361-3e02138e1d2b"
        },
        "item": {
          "id": "73d35ec8-7f3d-435c-a5d3-43eadc4880b9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "27793c82-8449-4e2d-9562-f6261757db62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e831e1-4e91-4775-a6fc-f9fbfe9fbb52",
        "cursor": {
          "ref": "1dd12c82-01be-4c47-8558-3afecc73067f",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "708b46e0-b38e-4e98-9b48-c33fd4574673"
        },
        "item": {
          "id": "d9e831e1-4e91-4775-a6fc-f9fbfe9fbb52",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "92654190-5c4c-4ddc-867f-dda5d06bc20a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75691316-b161-4bfa-88ee-7863899183c1",
        "cursor": {
          "ref": "e492eba9-b24a-4718-9675-16eed2f5662e",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "e553e5d0-1d07-44aa-a0fc-a965e7de6839"
        },
        "item": {
          "id": "75691316-b161-4bfa-88ee-7863899183c1",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9d9ab27d-7024-40a9-8241-f06d0625c8ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933315f7-3515-4e36-a0a5-af42d37a2ad9",
        "cursor": {
          "ref": "0c733aa9-9d9d-458b-956e-115ec57f6b50",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "9f8f0b20-7552-45a1-b47e-73a0947f4d4f"
        },
        "item": {
          "id": "933315f7-3515-4e36-a0a5-af42d37a2ad9",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2012d72b-6414-4893-9456-6554403dc191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9394f66b-03c1-4728-8f1e-140bc695f72c",
        "cursor": {
          "ref": "522a6675-ae5d-4d54-bcd2-7f23af6259b9",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "0dac93c2-76b8-4217-830f-3a135fbde560"
        },
        "item": {
          "id": "9394f66b-03c1-4728-8f1e-140bc695f72c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b798216a-dcc4-4b66-a3d9-c46e74af3c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e05594-a4eb-4fd1-83be-7a2d46a8df82",
        "cursor": {
          "ref": "df28c8dc-e7c1-4b4b-9c5e-2a4096036209",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "984392e4-d032-4dc5-8922-7a52ad36764f"
        },
        "item": {
          "id": "09e05594-a4eb-4fd1-83be-7a2d46a8df82",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "895dc12b-7f44-4b69-bd55-bbbdaf1facc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bd24ea-3030-4cd5-b217-d8e3e6360be4",
        "cursor": {
          "ref": "d44a819f-7a1d-4294-8b68-0a756e11e5ae",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "03a7d44b-6a9e-44ac-8106-70dae0724e22"
        },
        "item": {
          "id": "88bd24ea-3030-4cd5-b217-d8e3e6360be4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ca6f356b-2702-4c07-a803-362085538614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43ff1ae-24e5-46bc-8e2b-8982dcacc629",
        "cursor": {
          "ref": "003654d5-cd8b-4b95-aeb5-19db05cd78b5",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "1d9e23ce-2787-41ea-849d-649f610e6e8c"
        },
        "item": {
          "id": "e43ff1ae-24e5-46bc-8e2b-8982dcacc629",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "433c335c-3e37-4ed4-b8ad-0a9c88ad128f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11f9697-1b4c-4c1a-836e-41b70f54554b",
        "cursor": {
          "ref": "e77e6118-4635-4af6-a794-2b05ec63c676",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ea41de4c-4198-4b58-9502-afe1708d956e"
        },
        "item": {
          "id": "f11f9697-1b4c-4c1a-836e-41b70f54554b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7a0f630e-aa47-4827-987f-6379c56d7d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7351740-b609-4f40-a85a-eda1f4bd2e13",
        "cursor": {
          "ref": "9ea6016f-c27d-4f59-8ca4-31097e02c43b",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "569d9964-8d32-45f5-9cb7-183bf55d7e07"
        },
        "item": {
          "id": "a7351740-b609-4f40-a85a-eda1f4bd2e13",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a9b19bcb-9992-423c-9975-f808b6f652b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b56147-bfb6-4de3-b72f-fb848cf29984",
        "cursor": {
          "ref": "6d98f59f-8ba8-4b44-a43c-adf8d67edbfa",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "c982a3c3-9951-4c7d-9776-8ebc6275bb0d"
        },
        "item": {
          "id": "58b56147-bfb6-4de3-b72f-fb848cf29984",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "777ff386-adb1-4c41-a379-0efe4efe85c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb84ef0a-af1d-4cfc-9f71-628295890743",
        "cursor": {
          "ref": "77062953-51a2-447a-9e43-e00639615635",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ab3b9468-4037-49a2-947e-8cb66945f6c3"
        },
        "item": {
          "id": "eb84ef0a-af1d-4cfc-9f71-628295890743",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3cb1ad6a-1131-4adf-a054-573f5ca12c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0fec8a8-9bbd-499f-9ae4-3b2af60f61d5",
        "cursor": {
          "ref": "507c3f4c-1086-4584-8718-38d42bf808bf",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "34175bfd-99fc-4e71-baf3-cff841244586"
        },
        "item": {
          "id": "e0fec8a8-9bbd-499f-9ae4-3b2af60f61d5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "034458b1-2e68-4754-bdcb-b878e723a093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a42a83-a5cb-437b-9da8-10cccf6f23b9",
        "cursor": {
          "ref": "d6a62935-b18f-456f-892e-dffaa5218698",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "21f51753-8885-47a4-ab9a-80399ebd2f55"
        },
        "item": {
          "id": "77a42a83-a5cb-437b-9da8-10cccf6f23b9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4963631f-c3bb-4155-a89e-3c901b8b3719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0765c3fd-c54d-402f-a471-9f0b28f9b800",
        "cursor": {
          "ref": "481f45ab-37ba-4715-9d27-d1261af4a515",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "e7c9c6e5-fe0c-4812-897d-4a42c7849c1c"
        },
        "item": {
          "id": "0765c3fd-c54d-402f-a471-9f0b28f9b800",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9a544316-a7fa-4bb1-8c79-6ab9ad7e68b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1450e4-b2b7-4717-993c-e43763d27e06",
        "cursor": {
          "ref": "54141302-9f8f-43b9-a814-6edd27b3afb4",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "720d8884-ebe4-4643-9dac-977f4f7bd62b"
        },
        "item": {
          "id": "6d1450e4-b2b7-4717-993c-e43763d27e06",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fd4f7b7a-3e54-4679-8e2a-2e10c1e924b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "197dfc8e-abdf-447d-baa1-7c332b390392",
        "cursor": {
          "ref": "e1465f0b-38cd-47c9-a5c5-e6e31b4b105e",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "ce996959-af80-46a9-a341-35029b15c912"
        },
        "item": {
          "id": "197dfc8e-abdf-447d-baa1-7c332b390392",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f7dd270b-f897-49c5-8a6b-cefa16183097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661c6509-2fb5-4ebe-ad7f-ad88be2f2e23",
        "cursor": {
          "ref": "b2c5fbb4-1009-4d3b-b5ba-28941c6dce15",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "3997c474-e180-41eb-8af5-dd0e02626a0e"
        },
        "item": {
          "id": "661c6509-2fb5-4ebe-ad7f-ad88be2f2e23",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2bfd7bd5-08fa-45f9-9177-843664fe88b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d4309a-0ae9-4339-ac3e-84f4e26f2ea0",
        "cursor": {
          "ref": "7b4822a7-4e6b-4e61-b635-556372731b41",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "9c641bb7-1e2f-47dc-91aa-19677d976ec1"
        },
        "item": {
          "id": "02d4309a-0ae9-4339-ac3e-84f4e26f2ea0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c58269ef-49a3-4321-bfe7-4fc8637ae1d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a00deb-683d-44ff-82f3-8e4cbc39bdab",
        "cursor": {
          "ref": "3c1d075c-563d-4d6d-9030-bc4db127cb68",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "158eed72-cb9d-4720-8074-2d9fe490b8df"
        },
        "item": {
          "id": "68a00deb-683d-44ff-82f3-8e4cbc39bdab",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "528d4afb-a9ee-4445-8808-a0c9af543729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50b19f3-a8db-4611-a8fb-b72fe3409d70",
        "cursor": {
          "ref": "708f71f1-3b84-444f-98ef-4c8c270e235f",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c3b23bb1-1d99-42c3-a2ca-159685441556"
        },
        "item": {
          "id": "a50b19f3-a8db-4611-a8fb-b72fe3409d70",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ca369759-53ad-4755-805b-0939d0b4c414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac9064f5-80ac-4092-9f1b-d58568c77f52",
        "cursor": {
          "ref": "53b931ec-fa68-4266-b836-aab8552b9771",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "7f3e22c3-cd0c-48d5-817b-f19ec4e8737e"
        },
        "item": {
          "id": "ac9064f5-80ac-4092-9f1b-d58568c77f52",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3a208149-51fa-47da-a93f-d108837753da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c04c824-ab6a-4ac3-8df5-bea77045f04d",
        "cursor": {
          "ref": "0cb326fe-efce-4086-bab8-7ecbea589dc5",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "68c1c4b3-9709-4700-b09a-564a5e59e16a"
        },
        "item": {
          "id": "6c04c824-ab6a-4ac3-8df5-bea77045f04d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e95d472a-d336-44ba-aceb-ed3f6667fa4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7028b8e-6c17-4b13-9a27-3edcea155aa4",
        "cursor": {
          "ref": "7c6ee9f5-58dc-4032-a788-4e66e94cdecd",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "5164aac3-8631-4cd1-a7e9-ccf1adca81af"
        },
        "item": {
          "id": "e7028b8e-6c17-4b13-9a27-3edcea155aa4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "28845370-4757-4eaf-a04c-e0bd520e9c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2ddb8d-dde4-481b-bd59-1cc49d61b81d",
        "cursor": {
          "ref": "9e2135a2-380c-409c-9df9-9f815d0ddbc2",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "91237a24-3bd5-4dd0-bb46-3866828a8e33"
        },
        "item": {
          "id": "ab2ddb8d-dde4-481b-bd59-1cc49d61b81d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ccc49801-7cb1-4bfe-a5f1-25daa4d21fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94262922-082e-40c0-a55e-3f721506d350",
        "cursor": {
          "ref": "07df4ccb-4de5-4de4-b7bd-45eb3f32516a",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "0516807c-a5df-44ff-b7ed-8bbdc34d2a4b"
        },
        "item": {
          "id": "94262922-082e-40c0-a55e-3f721506d350",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6409d1e0-8179-413f-955c-afe5eadc8e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cde5b45-96f0-4695-a949-a4ebc24fc399",
        "cursor": {
          "ref": "14bcb23e-c3ce-4863-b956-6e97e5008a01",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "59c02160-bcb8-4d6c-9c02-1154f4252282"
        },
        "item": {
          "id": "2cde5b45-96f0-4695-a949-a4ebc24fc399",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9ec4428c-debb-4c0e-945d-5a95a69ebdac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f5b18d-f0bd-41db-bfa8-aa310548197f",
        "cursor": {
          "ref": "a369362c-bab8-4f32-bb74-c8dff4096a1c",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "4903b632-817c-4a0a-94f9-d6f10f0b9cba"
        },
        "item": {
          "id": "42f5b18d-f0bd-41db-bfa8-aa310548197f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a038064c-7105-46e9-8542-3889f5fc8004",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "f6c2a4e8-a72c-4306-9c99-6f898f72d195",
        "cursor": {
          "ref": "0bce4f8a-8f86-431b-82f9-badcc648ac15",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "98eb8c30-e7a5-418a-9b0d-1ae7a41f4721"
        },
        "item": {
          "id": "f6c2a4e8-a72c-4306-9c99-6f898f72d195",
          "name": "credentials_verify"
        },
        "response": {
          "id": "02b8c0d2-9c2a-4462-b23c-5fe1579651dc",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6468d64e-241b-4179-b008-3e9767db54ba",
        "cursor": {
          "ref": "47d9ef23-29e2-483c-8bd8-672623d4eda5",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "99299fb7-67bb-4f12-b38b-dce9f72a738a"
        },
        "item": {
          "id": "6468d64e-241b-4179-b008-3e9767db54ba",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "fcd25ce1-d3bc-4021-8eeb-ea65d8124cc2",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5721c04-7842-4730-86c6-bb0fe3c8cfb6",
        "cursor": {
          "ref": "cdccfc37-815e-4764-9d6c-2580ff462ea7",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "dad50aa1-a20b-419d-b69b-b071c77ee527"
        },
        "item": {
          "id": "e5721c04-7842-4730-86c6-bb0fe3c8cfb6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b083670e-9a26-4ede-90e8-119a91761f94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5721c04-7842-4730-86c6-bb0fe3c8cfb6",
        "cursor": {
          "ref": "cdccfc37-815e-4764-9d6c-2580ff462ea7",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "dad50aa1-a20b-419d-b69b-b071c77ee527"
        },
        "item": {
          "id": "e5721c04-7842-4730-86c6-bb0fe3c8cfb6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b083670e-9a26-4ede-90e8-119a91761f94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c267d545-c88c-466d-91dc-d326dfa2746f",
        "cursor": {
          "ref": "4d894cdd-adb1-44eb-b6de-2404672acd96",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b59600e8-724a-4b7c-b7a6-ecac9692f869"
        },
        "item": {
          "id": "c267d545-c88c-466d-91dc-d326dfa2746f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "38bc3381-662d-4470-9d1d-56e1ffc04e2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d2c749-7b35-4aaf-8382-fdc8c1277493",
        "cursor": {
          "ref": "4411845d-07ad-42bd-9d1c-b4f606750d92",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "86ef79f7-1ffc-4018-ae03-a1bfe0ceca7f"
        },
        "item": {
          "id": "f3d2c749-7b35-4aaf-8382-fdc8c1277493",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "df2b24df-a1d5-4a6e-9f2f-b1c733b1b5ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}